// Generated by SolidPython 1.1.3 on 2024-05-19 23:35:49


linear_extrude(height = 1) {
	polygon(points = [[0, 0], [-51.7123125000, 30.8905437500], [-51.8104468750, 30.8862640625], [-51.9085812500, 30.8819843750], [-52.0067156250, 30.8777046875], [-52.1048500000, 30.8734250000], [-52.2029843750, 30.8691453125], [-52.3011187500, 30.8648656250], [-52.3992531250, 30.8605859375], [-52.4973875000, 30.8563062500], [-52.5955218750, 30.8520265625], [-52.6936562500, 30.8477468750], [-52.7917906250, 30.8434671875], [-52.8899250000, 30.8391875000], [-52.9880593750, 30.8349078125], [-53.0861937500, 30.8306281250], [-53.1843281250, 30.8263484375], [-53.2824625000, 30.8220687500], [-53.3805968750, 30.8177890625], [-53.4787312500, 30.8135093750], [-53.5768656250, 30.8092296875], [-53.6750000000, 30.8049500000], [-53.7731343750, 30.8006703125], [-53.8712687500, 30.7963906250], [-53.9694031250, 30.7921109375], [-54.0675375000, 30.7878312500], [-54.1656718750, 30.7835515625], [-54.2638062500, 30.7792718750], [-54.3619406250, 30.7749921875], [-54.4600750000, 30.7707125000], [-54.5582093750, 30.7664328125], [-54.6563437500, 30.7621531250], [-54.7544781250, 30.7578734375], [-54.8526125000, 30.7535937500], [-54.9507468750, 30.7493140625], [-55.0488812500, 30.7450343750], [-55.1470156250, 30.7407546875], [-55.2451500000, 30.7364750000], [-55.3432843750, 30.7321953125], [-55.4414187500, 30.7279156250], [-55.5395531250, 30.7236359375], [-55.6376875000, 30.7193562500], [-55.7358218750, 30.7150765625], [-55.8339562500, 30.7107968750], [-55.9320906250, 30.7065171875], [-56.0302250000, 30.7022375000], [-56.1283593750, 30.6979578125], [-56.2264937500, 30.6936781250], [-56.3246281250, 30.6893984375], [-56.4227625000, 30.6851187500], [-56.5208968750, 30.6808390625], [-56.6190312500, 30.6765593750], [-56.7171656250, 30.6722796875], [-56.8153000000, 30.6680000000], [-56.8757945312, 30.6653617187], [-56.9362890625, 30.6627234375], [-56.9967835937, 30.6600851562], [-57.0572781250, 30.6574468750], [-57.1177726562, 30.6548085937], [-57.1782671875, 30.6521703125], [-57.2387617187, 30.6495320312], [-57.2992562500, 30.6468937500], [-57.3597507812, 30.6442554688], [-57.4202453125, 30.6416171875], [-57.4807398438, 30.6389789063], [-57.5412343750, 30.6363406250], [-57.6017289063, 30.6337023438], [-57.6622234375, 30.6310640625], [-57.7227179688, 30.6284257813], [-57.7832125000, 30.6257875000], [-57.8437070313, 30.6231492188], [-57.9042015625, 30.6205109375], [-57.9646960938, 30.6178726563], [-58.0251906250, 30.6152343750], [-58.0856851563, 30.6125960937], [-58.1461796875, 30.6099578125], [-58.2066742188, 30.6073195312], [-58.2671687500, 30.6046812500], [-58.3276632812, 30.6020429687], [-58.3881578125, 30.5994046875], [-58.4486523437, 30.5967664062], [-58.5091468750, 30.5941281250], [-58.5696414062, 30.5914898437], [-58.6301359375, 30.5888515625], [-58.6906304688, 30.5862132812], [-58.7511250000, 30.5835750000], [-58.8116195313, 30.5809367188], [-58.8721140625, 30.5782984375], [-58.9326085938, 30.5756601563], [-58.9931031250, 30.5730218750], [-59.0535976563, 30.5703835938], [-59.1140921875, 30.5677453125], [-59.1745867188, 30.5651070313], [-59.2350812500, 30.5624687500], [-59.2955757812, 30.5598304688], [-59.3560703125, 30.5571921875], [-59.4165648437, 30.5545539062], [-59.4770593750, 30.5519156250], [-59.5375539062, 30.5492773437], [-59.5980484375, 30.5466390625], [-59.6585429687, 30.5440007812], [-59.7190375000, 30.5413625000], [-59.7795320312, 30.5387242187], [-59.8400265625, 30.5360859375], [-59.9005210938, 30.5334476562], [-59.9610156250, 30.5308093750], [-60.0215101563, 30.5281710937], [-60.0820046875, 30.5255328125], [-60.1424992188, 30.5228945312], [-60.2029937500, 30.5202562500], [-60.2634882812, 30.5176179688], [-60.3239828125, 30.5149796875], [-60.3844773437, 30.5123414063], [-60.4449718750, 30.5097031250], [-60.5054664062, 30.5070648438], [-60.5659609375, 30.5044265625], [-60.6264554687, 30.5017882813], [-60.6869500000, 30.4991500000], [-60.7474445312, 30.4965117187], [-60.8079390625, 30.4938734375], [-60.8684335937, 30.4912351562], [-60.9289281250, 30.4885968750], [-60.9894226562, 30.4859585937], [-61.0499171875, 30.4833203125], [-61.1104117188, 30.4806820312], [-61.1709062500, 30.4780437500], [-61.2314007812, 30.4754054688], [-61.2918953125, 30.4727671875], [-61.3523898437, 30.4701289063], [-61.4128843750, 30.4674906250], [-61.4733789062, 30.4648523438], [-61.5338734375, 30.4622140625], [-61.5943679687, 30.4595757813], [-61.6548625000, 30.4569375000], [-61.7153570312, 30.4542992188], [-61.7758515625, 30.4516609375], [-61.8363460937, 30.4490226563], [-61.8968406250, 30.4463843750], [-61.9573351562, 30.4437460938], [-62.0178296875, 30.4411078125], [-62.0783242187, 30.4384695312], [-62.1388187500, 30.4358312500], [-62.1993132812, 30.4331929687], [-62.2598078125, 30.4305546875], [-62.3203023438, 30.4279164062], [-62.3807968750, 30.4252781250], [-62.4412914063, 30.4226398437], [-62.5017859375, 30.4200015625], [-62.5622804688, 30.4173632812], [-62.6227750000, 30.4147250000], [-62.6832695312, 30.4120867188], [-62.7437640625, 30.4094484375], [-62.8042585937, 30.4068101563], [-62.8647531250, 30.4041718750], [-62.9252476562, 30.4015335938], [-62.9857421875, 30.3988953125], [-63.0462367187, 30.3962570313], [-63.1067312500, 30.3936187500], [-63.1672257812, 30.3909804688], [-63.2277203125, 30.3883421875], [-63.2882148437, 30.3857039063], [-63.3487093750, 30.3830656250], [-63.4092039062, 30.3804273438], [-63.4696984375, 30.3777890625], [-63.5301929688, 30.3751507812], [-63.5906875000, 30.3725125000], [-63.6511820313, 30.3698742187], [-63.7116765625, 30.3672359375], [-63.7721710938, 30.3645976562], [-63.8326656250, 30.3619593750], [-63.8931601563, 30.3593210937], [-63.9536546875, 30.3566828125], [-64.0141492188, 30.3540445312], [-64.0746437500, 30.3514062500], [-64.1351382813, 30.3487679688], [-64.1956328125, 30.3461296875], [-64.2561273438, 30.3434914063], [-64.3166218750, 30.3408531250], [-64.3771164063, 30.3382148438], [-64.4376109375, 30.3355765625], [-64.4981054687, 30.3329382813], [-64.5586000000, 30.3303000000], [-64.6151375000, 30.3234250000], [-64.6716750000, 30.3165500000], [-64.7282125000, 30.3096750000], [-64.7847500000, 30.3028000000], [-64.8412875000, 30.2959250000], [-64.8978250000, 30.2890500000], [-64.9543625000, 30.2821750000], [-65.0109000000, 30.2753000000], [-65.1050468750, 30.2638468750], [-65.1991937500, 30.2523937500], [-65.2933406250, 30.2409406250], [-65.3874875000, 30.2294875000], [-65.4816343750, 30.2180343750], [-65.5757812500, 30.2065812500], [-65.6699281250, 30.1951281250], [-65.7640750000, 30.1836750000], [-65.8582218750, 30.1722218750], [-65.9523687500, 30.1607687500], [-66.0465156250, 30.1493156250], [-66.1406625000, 30.1378625000], [-66.2348093750, 30.1264093750], [-66.3289562500, 30.1149562500], [-66.4231031250, 30.1035031250], [-66.5172500000, 30.0920500000], [-66.6113968750, 30.0805968750], [-66.7055437500, 30.0691437500], [-66.7996906250, 30.0576906250], [-66.8938375000, 30.0462375000], [-66.9879843750, 30.0347843750], [-67.0821312500, 30.0233312500], [-67.1762781250, 30.0118781250], [-67.2704250000, 30.0004250000], [-67.3645718750, 29.9889718750], [-67.4587187500, 29.9775187500], [-67.5528656250, 29.9660656250], [-67.6470125000, 29.9546125000], [-67.7411593750, 29.9431593750], [-67.8353062500, 29.9317062500], [-67.9294531250, 29.9202531250], [-68.0236000000, 29.9088000000], [-68.0256000000, 29.9085000000], [-68.0259000000, 29.9085000000], [-68.0257613281, 29.8245743359], [-68.0256226562, 29.7406486719], [-68.0254839844, 29.6567230078], [-68.0253453125, 29.5727973437], [-68.0252066406, 29.4888716797], [-68.0250679687, 29.4049460156], [-68.0249292969, 29.3210203516], [-68.0247906250, 29.2370946875], [-68.0246519531, 29.1531690234], [-68.0245132812, 29.0692433594], [-68.0243746094, 28.9853176953], [-68.0242359375, 28.9013920312], [-68.0240972656, 28.8174663672], [-68.0239585937, 28.7335407031], [-68.0238199219, 28.6496150391], [-68.0236812500, 28.5656893750], [-68.0235425781, 28.4817637109], [-68.0234039062, 28.3978380469], [-68.0232652344, 28.3139123828], [-68.0231265625, 28.2299867187], [-68.0229878906, 28.1460610547], [-68.0228492187, 28.0621353906], [-68.0227105469, 27.9782097266], [-68.0225718750, 27.8942840625], [-68.0224332031, 27.8103583984], [-68.0222945312, 27.7264327344], [-68.0221558594, 27.6425070703], [-68.0220171875, 27.5585814062], [-68.0218785156, 27.4746557422], [-68.0217398437, 27.3907300781], [-68.0216011719, 27.3068044141], [-68.0214625000, 27.2228787500], [-68.0213238281, 27.1389530859], [-68.0211851562, 27.0550274219], [-68.0210464844, 26.9711017578], [-68.0209078125, 26.8871760937], [-68.0207691406, 26.8032504297], [-68.0206304687, 26.7193247656], [-68.0204917969, 26.6353991016], [-68.0203531250, 26.5514734375], [-68.0202144531, 26.4675477734], [-68.0200757812, 26.3836221094], [-68.0199371094, 26.2996964453], [-68.0197984375, 26.2157707813], [-68.0196597656, 26.1318451172], [-68.0195210937, 26.0479194531], [-68.0193824219, 25.9639937891], [-68.0192437500, 25.8800681250], [-68.0191050781, 25.7961424609], [-68.0189664062, 25.7122167969], [-68.0188277344, 25.6282911328], [-68.0186890625, 25.5443654688], [-68.0185503906, 25.4604398047], [-68.0184117187, 25.3765141406], [-68.0182730469, 25.2925884766], [-68.0181343750, 25.2086628125], [-68.0179957031, 25.1247371484], [-68.0178570312, 25.0408114844], [-68.0177183594, 24.9568858203], [-68.0175796875, 24.8729601563], [-68.0174410156, 24.7890344922], [-68.0173023437, 24.7051088281], [-68.0171636719, 24.6211831641], [-68.0170250000, 24.5372575000], [-68.0168863281, 24.4533318359], [-68.0167476562, 24.3694061719], [-68.0166089844, 24.2854805078], [-68.0164703125, 24.2015548438], [-68.0163316406, 24.1176291797], [-68.0161929687, 24.0337035156], [-68.0160542969, 23.9497778516], [-68.0159156250, 23.8658521875], [-68.0157769531, 23.7819265234], [-68.0156382812, 23.6980008594], [-68.0154996094, 23.6140751953], [-68.0153609375, 23.5301495313], [-68.0152222656, 23.4462238672], [-68.0150835937, 23.3622982031], [-68.0149449219, 23.2783725391], [-68.0148062500, 23.1944468750], [-68.0146675781, 23.1105212109], [-68.0145289062, 23.0265955469], [-68.0143902344, 22.9426698828], [-68.0142515625, 22.8587442188], [-68.0141128906, 22.7748185547], [-68.0139742187, 22.6908928906], [-68.0138355469, 22.6069672266], [-68.0136968750, 22.5230415625], [-68.0135582031, 22.4391158984], [-68.0134195312, 22.3551902344], [-68.0132808594, 22.2712645703], [-68.0131421875, 22.1873389063], [-68.0130035156, 22.1034132422], [-68.0128648437, 22.0194875781], [-68.0127261719, 21.9355619141], [-68.0125875000, 21.8516362500], [-68.0124488281, 21.7677105859], [-68.0123101562, 21.6837849219], [-68.0121714844, 21.5998592578], [-68.0120328125, 21.5159335937], [-68.0118941406, 21.4320079297], [-68.0117554687, 21.3480822656], [-68.0116167969, 21.2641566016], [-68.0114781250, 21.1802309375], [-68.0113394531, 21.0963052734], [-68.0112007812, 21.0123796094], [-68.0110621094, 20.9284539453], [-68.0109234375, 20.8445282812], [-68.0107847656, 20.7606026172], [-68.0106460937, 20.6766769531], [-68.0105074219, 20.5927512891], [-68.0103687500, 20.5088256250], [-68.0102300781, 20.4248999609], [-68.0100914062, 20.3409742969], [-68.0099527344, 20.2570486328], [-68.0098140625, 20.1731229688], [-68.0096753906, 20.0891973047], [-68.0095367187, 20.0052716406], [-68.0093980469, 19.9213459766], [-68.0092593750, 19.8374203125], [-68.0091207031, 19.7534946484], [-68.0089820312, 19.6695689844], [-68.0088433594, 19.5856433203], [-68.0087046875, 19.5017176563], [-68.0085660156, 19.4177919922], [-68.0084273438, 19.3338663281], [-68.0082886719, 19.2499406641], [-68.0081500000, 19.1660150000], [-68.0080113281, 19.0820893359], [-68.0078726563, 18.9981636719], [-68.0077339844, 18.9142380078], [-68.0075953125, 18.8303123438], [-68.0074566406, 18.7463866797], [-68.0073179688, 18.6624610156], [-68.0071792969, 18.5785353516], [-68.0070406250, 18.4946096875], [-68.0069019531, 18.4106840234], [-68.0067632813, 18.3267583594], [-68.0066246094, 18.2428326953], [-68.0064859375, 18.1589070313], [-68.0063472656, 18.0749813672], [-68.0062085938, 17.9910557031], [-68.0060699219, 17.9071300391], [-68.0059312500, 17.8232043750], [-68.0057925781, 17.7392787109], [-68.0056539063, 17.6553530469], [-68.0055152344, 17.5714273828], [-68.0053765625, 17.4875017188], [-68.0052378906, 17.4035760547], [-68.0050992188, 17.3196503906], [-68.0049605469, 17.2357247266], [-68.0048218750, 17.1517990625], [-68.0046832031, 17.0678733984], [-68.0045445313, 16.9839477344], [-68.0044058594, 16.9000220703], [-68.0042671875, 16.8160964063], [-68.0041285156, 16.7321707422], [-68.0039898438, 16.6482450781], [-68.0038511719, 16.5643194141], [-68.0037125000, 16.4803937500], [-68.0035738281, 16.3964680859], [-68.0034351563, 16.3125424219], [-68.0032964844, 16.2286167578], [-68.0031578125, 16.1446910938], [-68.0030191406, 16.0607654297], [-68.0028804688, 15.9768397656], [-68.0027417969, 15.8929141016], [-68.0026031250, 15.8089884375], [-68.0024644531, 15.7250627734], [-68.0023257813, 15.6411371094], [-68.0021871094, 15.5572114453], [-68.0020484375, 15.4732857813], [-68.0019097656, 15.3893601172], [-68.0017710938, 15.3054344531], [-68.0016324219, 15.2215087891], [-68.0014937500, 15.1375831250], [-68.0013550781, 15.0536574609], [-68.0012164063, 14.9697317969], [-68.0010777344, 14.8858061328], [-68.0009390625, 14.8018804687], [-68.0008003906, 14.7179548047], [-68.0006617188, 14.6340291406], [-68.0005230469, 14.5501034766], [-68.0003843750, 14.4661778125], [-68.0002457031, 14.3822521484], [-68.0001070313, 14.2983264844], [-67.9999683594, 14.2144008203], [-67.9998296875, 14.1304751563], [-67.9996910156, 14.0465494922], [-67.9995523437, 13.9626238281], [-67.9994136719, 13.8786981641], [-67.9992750000, 13.7947725000], [-67.9991363281, 13.7108468359], [-67.9989976562, 13.6269211719], [-67.9988589844, 13.5429955078], [-67.9987203125, 13.4590698438], [-67.9985816406, 13.3751441797], [-67.9984429687, 13.2912185156], [-67.9983042969, 13.2072928516], [-67.9981656250, 13.1233671875], [-67.9980269531, 13.0394415234], [-67.9978882812, 12.9555158594], [-67.9977496094, 12.8715901953], [-67.9976109375, 12.7876645313], [-67.9974722656, 12.7037388672], [-67.9973335937, 12.6198132031], [-67.9971949219, 12.5358875391], [-67.9970562500, 12.4519618750], [-67.9969175781, 12.3680362109], [-67.9967789062, 12.2841105469], [-67.9966402344, 12.2001848828], [-67.9965015625, 12.1162592187], [-67.9963628906, 12.0323335547], [-67.9962242187, 11.9484078906], [-67.9960855469, 11.8644822266], [-67.9959468750, 11.7805565625], [-67.9958082031, 11.6966308984], [-67.9956695312, 11.6127052344], [-67.9955308594, 11.5287795703], [-67.9953921875, 11.4448539062], [-67.9952535156, 11.3609282422], [-67.9951148437, 11.2770025781], [-67.9949761719, 11.1930769141], [-67.9948375000, 11.1091512500], [-67.9946988281, 11.0252255859], [-67.9945601562, 10.9412999219], [-67.9944214844, 10.8573742578], [-67.9942828125, 10.7734485938], [-67.9941441406, 10.6895229297], [-67.9940054687, 10.6055972656], [-67.9938667969, 10.5216716016], [-67.9937281250, 10.4377459375], [-67.9935894531, 10.3538202734], [-67.9934507812, 10.2698946094], [-67.9933121094, 10.1859689453], [-67.9931734375, 10.1020432813], [-67.9930347656, 10.0181176172], [-67.9928960937, 9.9341919531], [-67.9927574219, 9.8502662891], [-67.9926187500, 9.7663406250], [-67.9924800781, 9.6824149609], [-67.9923414062, 9.5984892969], [-67.9922027344, 9.5145636328], [-67.9920640625, 9.4306379687], [-67.9919253906, 9.3467123047], [-67.9917867187, 9.2627866406], [-67.9916480469, 9.1788609766], [-67.9915093750, 9.0949353125], [-67.9913707031, 9.0110096484], [-67.9912320312, 8.9270839844], [-67.9910933594, 8.8431583203], [-67.9909546875, 8.7592326562], [-67.9908160156, 8.6753069922], [-67.9906773437, 8.5913813281], [-67.9905386719, 8.5074556641], [-67.9904000000, 8.4235300000], [-67.9917500000, 8.3607075000], [-67.9931000000, 8.2978850000], [-67.9944500000, 8.2350625000], [-67.9958000000, 8.1722400000], [-68.0645375000, 8.1460543750], [-68.1332750000, 8.1198687500], [-68.2020125000, 8.0936831250], [-68.2707500000, 8.0674975000], [-68.3394875000, 8.0413118750], [-68.4082250000, 8.0151262500], [-68.4769625000, 7.9889406250], [-68.5457000000, 7.9627550000], [-68.6144375000, 7.9365693750], [-68.6831750000, 7.9103837500], [-68.7519125000, 7.8841981250], [-68.8206500000, 7.8580125000], [-68.8893875000, 7.8318268750], [-68.9581250000, 7.8056412500], [-69.0268625000, 7.7794556250], [-69.0956000000, 7.7532700000], [-69.1597625000, 7.7283896875], [-69.2239250000, 7.7035093750], [-69.2880875000, 7.6786290625], [-69.3522500000, 7.6537487500], [-69.4164125000, 7.6288684375], [-69.4805750000, 7.6039881250], [-69.5447375000, 7.5791078125], [-69.6089000000, 7.5542275000], [-69.6730625000, 7.5293471875], [-69.7372250000, 7.5044668750], [-69.8013875000, 7.4795865625], [-69.8655500000, 7.4547062500], [-69.9297125000, 7.4298259375], [-69.9938750000, 7.4049456250], [-70.0580375000, 7.3800653125], [-70.1222000000, 7.3551850000], [-70.1863625000, 7.3303046875], [-70.2505250000, 7.3054243750], [-70.3146875000, 7.2805440625], [-70.3788500000, 7.2556637500], [-70.4430125000, 7.2307834375], [-70.5071750000, 7.2059031250], [-70.5713375000, 7.1810228125], [-70.6355000000, 7.1561425000], [-70.6996625000, 7.1312621875], [-70.7638250000, 7.1063818750], [-70.8279875000, 7.0815015625], [-70.8921500000, 7.0566212500], [-70.9563125000, 7.0317409375], [-71.0204750000, 7.0068606250], [-71.0846375000, 6.9819803125], [-71.1488000000, 6.9571000000], [-71.1576000000, 6.9536100000], [-71.2146585938, 6.9302816406], [-71.2717171875, 6.9069532813], [-71.3287757813, 6.8836249219], [-71.3858343750, 6.8602965625], [-71.4428929688, 6.8369682031], [-71.4999515625, 6.8136398437], [-71.5570101563, 6.7903114844], [-71.6140687500, 6.7669831250], [-71.6711273438, 6.7436547656], [-71.7281859375, 6.7203264062], [-71.7852445313, 6.6969980469], [-71.8423031250, 6.6736696875], [-71.8993617188, 6.6503413281], [-71.9564203125, 6.6270129687], [-72.0134789063, 6.6036846094], [-72.0705375000, 6.5803562500], [-72.1275960938, 6.5570278906], [-72.1846546875, 6.5336995312], [-72.2417132813, 6.5103711719], [-72.2987718750, 6.4870428125], [-72.3558304687, 6.4637144531], [-72.4128890625, 6.4403860937], [-72.4699476562, 6.4170577344], [-72.5270062500, 6.3937293750], [-72.5840648437, 6.3704010156], [-72.6411234375, 6.3470726562], [-72.6981820312, 6.3237442969], [-72.7552406250, 6.3004159375], [-72.8122992187, 6.2770875781], [-72.8693578125, 6.2537592187], [-72.9264164062, 6.2304308594], [-72.9834750000, 6.2071025000], [-73.0405335937, 6.1837741406], [-73.0975921875, 6.1604457812], [-73.1546507812, 6.1371174219], [-73.2117093750, 6.1137890625], [-73.2687679687, 6.0904607031], [-73.3258265625, 6.0671323437], [-73.3828851562, 6.0438039844], [-73.4399437500, 6.0204756250], [-73.4970023437, 5.9971472656], [-73.5540609375, 5.9738189062], [-73.6111195312, 5.9504905469], [-73.6681781250, 5.9271621875], [-73.7252367187, 5.9038338281], [-73.7822953125, 5.8805054688], [-73.8393539062, 5.8571771094], [-73.8964125000, 5.8338487500], [-73.9534710937, 5.8105203906], [-74.0105296875, 5.7871920312], [-74.0675882812, 5.7638636719], [-74.1246468750, 5.7405353125], [-74.1817054687, 5.7172069531], [-74.2387640625, 5.6938785938], [-74.2958226562, 5.6705502344], [-74.3528812500, 5.6472218750], [-74.4099398437, 5.6238935156], [-74.4669984375, 5.6005651562], [-74.5240570312, 5.5772367969], [-74.5811156250, 5.5539084375], [-74.6381742187, 5.5305800781], [-74.6952328125, 5.5072517188], [-74.7522914062, 5.4839233594], [-74.8093500000, 5.4605950000], [-74.8664085937, 5.4372666406], [-74.9234671875, 5.4139382812], [-74.9805257812, 5.3906099219], [-75.0375843750, 5.3672815625], [-75.0946429687, 5.3439532031], [-75.1517015625, 5.3206248438], [-75.2087601562, 5.2972964844], [-75.2658187500, 5.2739681250], [-75.3228773437, 5.2506397656], [-75.3799359375, 5.2273114062], [-75.4369945312, 5.2039830469], [-75.4940531250, 5.1806546875], [-75.5511117187, 5.1573263281], [-75.6081703125, 5.1339979688], [-75.6652289062, 5.1106696094], [-75.7222875000, 5.0873412500], [-75.7793460937, 5.0640128906], [-75.8364046875, 5.0406845312], [-75.8934632812, 5.0173561719], [-75.9505218750, 4.9940278125], [-76.0075804687, 4.9706994531], [-76.0646390625, 4.9473710938], [-76.1216976562, 4.9240427344], [-76.1787562500, 4.9007143750], [-76.2358148437, 4.8773860156], [-76.2928734375, 4.8540576562], [-76.3499320312, 4.8307292969], [-76.4069906250, 4.8074009375], [-76.4640492187, 4.7840725781], [-76.5211078125, 4.7607442188], [-76.5781664062, 4.7374158594], [-76.6352250000, 4.7140875000], [-76.6922835937, 4.6907591406], [-76.7493421875, 4.6674307812], [-76.8064007812, 4.6441024219], [-76.8634593750, 4.6207740625], [-76.9205179687, 4.5974457031], [-76.9775765625, 4.5741173438], [-77.0346351562, 4.5507889844], [-77.0916937500, 4.5274606250], [-77.1487523437, 4.5041322656], [-77.2058109375, 4.4808039062]]);
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
import math
import time

from stl import mesh, Dimension

from tkinter import Tk     # from tkinter import Tk for Python 3.x
from tkinter.filedialog import askopenfilename
from mpl_toolkits.mplot3d import art3d
from matplotlib import pyplot as plt
import solid
import os
import ezdxf
import shapely.geometry as sg
import subprocess
from GUI import getSCADPath



def outputSTL(From, To, PATH=getSCADPath()):
    subprocess.Popen(PATH + " -o " + To + " " + From)
    while not os.path.exists(To):
        time.sleep(1)


def get_size(i):
    x_list = [int(a) for a in str(i)]
    return len(x_list)



class Model:
    def __init__(self, model, fileName, location, layer, thickness):
        self.location = location
        self.code = None
        self.fileName = fileName
        self.stl = fileName + ".stl"
        self.layer = layer
        self.thickness = thickness
        self.maxz = (layer+1)*thickness
        self.dxf = fileName + ".dxf"
        self.scad = fileName + ".scad"
        self.model = model
        self.center = None
        self.width = 10
        self.mesh = None
        self.useable_area = None


    def get_code(self):
        max_dim = 0.05
        max_array = 6

        num = int(self.fileName)
        nums = [int(a) for a in str(num)]
        nums.reverse()
        indices = nums
        length = len(nums)

        print(indices)
        t = 0
        i = 0
        cubes = []
        x = 0
        y = 0
        width = 0.01
        while x <= max_dim:
            while y <= max_dim:
                print(indices)
                if nums == []:
                    break
                if indices[0] != 0:
                    cubes.append(solid.translate([x, y, 0])(solid.cube(size=t / 1000 + 0.001)))
                    y += max_dim / (max_array - 1)
                    nums[0] = nums[0] - 1
                else:
                    indices.pop(0)
                    t += 1
                i += 1
            x += max_dim / (max_array - 1)
            y = 0

        outside = solid.translate([-width / 2, -width / 2])(solid.cube(max_dim + (length - 1) / 1000 + 0.001 + width))
        self.code = solid.difference()(outside, cubes)
        self.code = solid.projection(cut=True)(self.code)
        solid.scad_render_to_file(self.code, self.location + "/code.scad")
        outputSTL(From=self.location+"/code.scad", To=self.location+"code.dxf", PATH=getSCADPath())
        # os.system("toSTL.sh renders/code.scad renders/code.dxf")
        return self.location+"/code.dxf"

    def download(self, type):
        if type =="stl":
            print("generating:" + self.location+"/"+ self.fileName+".stl")
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".stl")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".stl")
        elif type == "dxf":
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".dxf")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".dxf")

    def render(self):
        solid.scad_render_to_file(self.model, self.location+"/"+ self.fileName+'.scad')
        while not os.path.exists(self.location+"/"+self.fileName+".scad"):
            time.sleep(1)

    def get_points(self):
        doc = ezdxf.readfile(filename=self.location+"/"+ self.fileName+".dxf")
        msp = doc.modelspace()
        i=0
        lists = []
        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return [start, end]

        for e in msp.query("LINE"):
            line = helper(e)
            if not lists:
                lists.append([line])
            else:
                if lists[i][len(lists)-1][1] != line[0]:
                    lists.append([line])
                    i+=1
                else:
                    lists[i].append(line)

    def get_points2(self, FILE):
        doc = ezdxf.readfile(filename=FILE)
        msp = doc.modelspace()
        i = 0
        lists = []

        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return (start, end)

        for e in msp.query("LINE"):
            line = helper(e)
            if lists==[]:
                lists.append([line])
            else:
                if lists[i][len(lists[i]) - 1][1] != line[0]:
                    lists.append([line])
                    i += 1
                else:
                    lists[i].append(line)
        return lists

    def add_code(self):
        dxf = solid.projection(cut=False)(self.model)
        offset = solid.offset(r=-0.1)(dxf)
        solid.scad_render_to_file(offset, self.location+'/offset.scad')
        os.system("toSTL.sh renders/offset.scad renders/offset.dxf")
        lines = self.get_points2("renders/offset.dxf")
        x = lines[0][0][0][0]
        y = lines[0][0][0][1]
        print(x)
        print(y)
        code = solid.translate([x,y,0])(self.code)
        code = solid.linear_extrude(height=999)(code)
        save = self.model
        self.model = solid.projection()(solid.difference()(self.model, code))
        self.render()
        self.download("dxf")
        self.model = save

    def add_label(self, pos):
        # num = 12
        # minx, maxx, miny, maxy, minz, maxz = self.find_minmax()
        maxz = self.maxz
        # label = solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.5, halign="center"))
        # i=minx
        # print("x-len: " + str(maxx-minx))
        # print(i)
        # inc = (maxx-minx)/num
        # while minx <= i <= maxx:
        #     label = solid.union()(solid.translate([i, 0, maxz - 0.2])(solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.25, halign="center"))), label)
        #     i += inc
        #
        # l = label
        #
        # i =miny
        # while miny<= i <= maxy:
        #     print("y inc")
        #     l = solid.union()(solid.translate([0, i, 0])(label), l)
        #     i += 0.5
        for i in str(self.fileName):
            cur = pos[0]
            label = solid.translate([pos[0][0], pos[0][1], self.maxz-0.2])(solid.linear_extrude(height=(self.thickness)/3)(solid.text(str(i), size=0.5, halign="center", valign="center")))
            self.model = solid.difference()(self.model, label)
            pos.append(pos.pop(0))
            while abs(cur[0]-pos[0][0])<0.5 and abs(cur[1]-pos[0][1])<0.5:
                pos.append(pos.pop(0))



    def Center(self):

        volume, cog, inertia = self.mesh.get_mass_properties()
        print("Volume                                  = {0}".format(volume))
        print("Position of the center of gravity (COG) = {0}".format(cog))
        m_centered = solid.translate([-cog[0], -cog[1], 0])(
            self.model
        )
        return m_centered

    def find_minmax(self):
        minx = maxx = miny = maxy = minz = maxz = None
        for p in self.mesh.points:
            # p contains (x, y, z)
            if minx is None:
                minx = p[Dimension.X]
                maxx = p[Dimension.X]
                miny = p[Dimension.Y]
                maxy = p[Dimension.Y]
                minz = p[Dimension.Z]
                maxz = p[Dimension.Z]
            else:
                maxx = max(p[Dimension.X], maxx)
                minx = min(p[Dimension.X], minx)
                maxy = max(p[Dimension.Y], maxy)
                miny = min(p[Dimension.Y], miny)
                maxz = max(p[Dimension.Z], maxz)
                minz = min(p[Dimension.Z], minz)
        lenx = maxx - minx
        leny = maxy - miny
        lenz = maxz - minz
        return minx, maxx, miny, maxy, minz, maxz

    # def generate_Mesh(self):
    #     self.mesh = mesh.Mesh.from_file(self.location + "/" + str(int(self.fileName)//8)+ "b.stl")

    def get_top(self):
        top = solid.projection(cut=True)(solid.translate([0,0,-1*self.thickness*(self.layer+1)])(self.model))
        useable_area = solid.offset(r=-0.45)(top)
        self.useable_area = useable_area
        solid.scad_render_to_file(self.useable_area, self.location+'/' + 'toptemp.scad')
        outputSTL(From=self.location+'/' + 'toptemp.scad', To=self.location+"/top"+ self.dxf)

        # os.system("toSTL.sh out/toptemp.scad renders/" + self.fileName + ".dxf")
        dxf = DXF(self.location+"/top"+ self.dxf)
        min_p=dxf.points[0][0]
        points_ordered = dxf.points
        i=0
        while i <= len(dxf.points)+1:
            while math.sqrt((dxf.points[0][0]-dxf.points[1][0])**2+(dxf.points[0][1]-dxf.points[1][1])**2) > 0.1:
                dxf.points.insert(1, [(dxf.points[0][0]+dxf.points[1][0])/2, (dxf.points[0][1]+dxf.points[1][1])/2])
                i = i-1
            dxf.points.append(dxf.points.pop(0))
            i+=1
        for i in range(len(dxf.points)):
            dxf.points.append(dxf.points.pop(0))
            if dxf.points[0][0] < min_p:
                min_p = dxf.points[0][0]
                points_ordered = dxf.points.copy()
        dxf.points = points_ordered.copy()

        print(dxf.points)
        self.add_label(dxf.points)

class DXF:
    def __init__(self, file):
        self.file = file
        self.Lines = []
        self.points = []
        doc = ezdxf.readfile(self.file)
        msp = doc.modelspace()
        for e in msp:
            if e.dxftype() == "LINE":
                self.Lines.append(e)
                self.points.append([e.dxf.start[0], e.dxf.start[1]])
        # self.points.append([self.Lines[-1].dxf.end[0], self.Lines[-1].dxf.end[1]])
        self.area = None
        self.center = None
        self.polygon = sg.Polygon(self.points)

    def get_area(self):
        self.area = self.polygon.area
        return self.area

    def get_center(self):
        x_sum = 0
        y_sum =0
        for i in self.points:
            x_sum += i[0]
            y_sum += i[1]
        x_c = x_sum/len(self.points)
        y_c = y_sum/len(self.points)
        return (x_c, y_c)

    def split(self, maxdim):
        splits = []
        length = 0
        pieces = [[]]
        prev = self.points[0]
        for j in self.points:
            length = length + math.sqrt((prev[0]-j[0])**2+(prev[1]-j[1])**2)
            if length >= maxdim:
                pieces[-1].append(j)
                pieces.append([])
                length = 0
            pieces[-1].append(j)
            prev = j
        for j in pieces:
            j.insert(0, [0,0])
            piece = solid.linear_extrude(height=1)(solid.polygon(j))
            splits.append(piece)
        return splits
    def refine_points(self):
        i=0
        while i <= len(self.points)+1:
            while math.sqrt((self.points[0][0]-self.points[1][0])**2+(self.points[0][1]-self.points[1][1])**2) > 0.1:
                self.points.insert(1, [(self.points[0][0]+self.points[1][0])/2, (self.points[0][1]+self.points[1][1])/2])
                i = i-1
            self.points.append(self.points.pop(0))
            i+=1


if __name__== "__main__":
    test = DXF("C:/Users/Daniel/Documents/repos/Shell_Maker/output/0top_slice.dxf")
    test.refine_points()
    k = test.split(48)
    for i in range(len(k)):
        solid.scad_render_to_file(k[i], str(i) + ".scad")


 
 
************************************************/
