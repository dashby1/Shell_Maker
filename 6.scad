// Generated by SolidPython 1.1.3 on 2024-05-19 23:35:49


linear_extrude(height = 1) {
	polygon(points = [[0, 0], [44.3451109375, 32.4113804687], [44.2624843750, 32.4117921875], [44.1798578125, 32.4122039062], [44.0972312500, 32.4126156250], [44.0146046875, 32.4130273438], [43.9319781250, 32.4134390625], [43.8493515625, 32.4138507813], [43.7667250000, 32.4142625000], [43.6840984375, 32.4146742187], [43.6014718750, 32.4150859375], [43.5188453125, 32.4154976562], [43.4362187500, 32.4159093750], [43.3535921875, 32.4163210937], [43.2709656250, 32.4167328125], [43.1883390625, 32.4171445313], [43.1057125000, 32.4175562500], [43.0230859375, 32.4179679688], [42.9404593750, 32.4183796875], [42.8578328125, 32.4187914063], [42.7752062500, 32.4192031250], [42.6925796875, 32.4196148437], [42.6099531250, 32.4200265625], [42.5273265625, 32.4204382813], [42.4447000000, 32.4208500000], [42.3620734375, 32.4212617188], [42.2794468750, 32.4216734375], [42.1968203125, 32.4220851563], [42.1141937500, 32.4224968750], [42.0315671875, 32.4229085937], [41.9489406250, 32.4233203125], [41.8663140625, 32.4237320312], [41.7836875000, 32.4241437500], [41.7010609375, 32.4245554688], [41.6184343750, 32.4249671875], [41.5358078125, 32.4253789063], [41.4531812500, 32.4257906250], [41.3705546875, 32.4262023437], [41.2879281250, 32.4266140625], [41.2053015625, 32.4270257812], [41.1226750000, 32.4274375000], [41.0400484375, 32.4278492187], [40.9574218750, 32.4282609375], [40.8747953125, 32.4286726563], [40.7921687500, 32.4290843750], [40.7095421875, 32.4294960937], [40.6269156250, 32.4299078125], [40.5442890625, 32.4303195312], [40.4616625000, 32.4307312500], [40.3790359375, 32.4311429687], [40.2964093750, 32.4315546875], [40.2137828125, 32.4319664062], [40.1311562500, 32.4323781250], [40.0485296875, 32.4327898438], [39.9659031250, 32.4332015625], [39.8832765625, 32.4336132813], [39.8006500000, 32.4340250000], [39.7180234375, 32.4344367187], [39.6353968750, 32.4348484375], [39.5527703125, 32.4352601562], [39.4701437500, 32.4356718750], [39.3875171875, 32.4360835937], [39.3048906250, 32.4364953125], [39.2222640625, 32.4369070313], [39.1396375000, 32.4373187500], [39.0570109375, 32.4377304688], [38.9743843750, 32.4381421875], [38.8917578125, 32.4385539063], [38.8091312500, 32.4389656250], [38.7265046875, 32.4393773437], [38.6438781250, 32.4397890625], [38.5612515625, 32.4402007812], [38.4786250000, 32.4406125000], [38.3959984375, 32.4410242188], [38.3133718750, 32.4414359375], [38.2307453125, 32.4418476563], [38.1481187500, 32.4422593750], [38.0654921875, 32.4426710937], [37.9828656250, 32.4430828125], [37.9002390625, 32.4434945312], [37.8176125000, 32.4439062500], [37.7349859375, 32.4443179687], [37.6523593750, 32.4447296875], [37.5697328125, 32.4451414063], [37.4871062500, 32.4455531250], [37.4044796875, 32.4459648437], [37.3218531250, 32.4463765625], [37.2392265625, 32.4467882812], [37.1566000000, 32.4472000000], [37.0739734375, 32.4476117187], [36.9913468750, 32.4480234375], [36.9087203125, 32.4484351562], [36.8260937500, 32.4488468750], [36.7434671875, 32.4492585937], [36.6608406250, 32.4496703125], [36.5782140625, 32.4500820312], [36.4955875000, 32.4504937500], [36.4129609375, 32.4509054687], [36.3303343750, 32.4513171875], [36.2477078125, 32.4517289062], [36.1650812500, 32.4521406250], [36.0824546875, 32.4525523437], [35.9998281250, 32.4529640625], [35.9172015625, 32.4533757813], [35.8345750000, 32.4537875000], [35.7519484375, 32.4541992187], [35.6693218750, 32.4546109375], [35.5866953125, 32.4550226562], [35.5040687500, 32.4554343750], [35.4214421875, 32.4558460937], [35.3388156250, 32.4562578125], [35.2561890625, 32.4566695313], [35.1735625000, 32.4570812500], [35.0909359375, 32.4574929688], [35.0083093750, 32.4579046875], [34.9256828125, 32.4583164063], [34.8430562500, 32.4587281250], [34.7604296875, 32.4591398437], [34.6778031250, 32.4595515625], [34.5951765625, 32.4599632812], [34.5125500000, 32.4603750000], [34.4299234375, 32.4607867188], [34.3472968750, 32.4611984375], [34.2646703125, 32.4616101563], [34.1820437500, 32.4620218750], [34.0994171875, 32.4624335937], [34.0167906250, 32.4628453125], [33.9341640625, 32.4632570312], [33.8515375000, 32.4636687500], [33.7689109375, 32.4640804687], [33.6862843750, 32.4644921875], [33.6036578125, 32.4649039063], [33.5210312500, 32.4653156250], [33.4384046875, 32.4657273437], [33.3557781250, 32.4661390625], [33.2731515625, 32.4665507812], [33.1905250000, 32.4669625000], [33.1078984375, 32.4673742187], [33.0252718750, 32.4677859375], [32.9426453125, 32.4681976562], [32.8600187500, 32.4686093750], [32.7773921875, 32.4690210937], [32.6947656250, 32.4694328125], [32.6121390625, 32.4698445312], [32.5295125000, 32.4702562500], [32.4468859375, 32.4706679687], [32.3642593750, 32.4710796875], [32.2816328125, 32.4714914062], [32.1990062500, 32.4719031250], [32.1163796875, 32.4723148437], [32.0337531250, 32.4727265625], [31.9511265625, 32.4731382813], [31.8685000000, 32.4735500000], [31.7858734375, 32.4739617187], [31.7032468750, 32.4743734375], [31.6206203125, 32.4747851562], [31.5379937500, 32.4751968750], [31.4553671875, 32.4756085937], [31.3727406250, 32.4760203125], [31.2901140625, 32.4764320312], [31.2074875000, 32.4768437500], [31.1248609375, 32.4772554688], [31.0422343750, 32.4776671875], [30.9596078125, 32.4780789063], [30.8769812500, 32.4784906250], [30.7943546875, 32.4789023437], [30.7117281250, 32.4793140625], [30.6291015625, 32.4797257812], [30.5464750000, 32.4801375000], [30.4638484375, 32.4805492187], [30.3812218750, 32.4809609375], [30.2985953125, 32.4813726563], [30.2159687500, 32.4817843750], [30.1333421875, 32.4821960937], [30.0507156250, 32.4826078125], [29.9680890625, 32.4830195312], [29.8854625000, 32.4834312500], [29.8028359375, 32.4838429687], [29.7202093750, 32.4842546875], [29.6375828125, 32.4846664062], [29.5549562500, 32.4850781250], [29.4723296875, 32.4854898437], [29.3897031250, 32.4859015625], [29.3070765625, 32.4863132812], [29.2244500000, 32.4867250000], [29.1418234375, 32.4871367187], [29.0591968750, 32.4875484375], [28.9765703125, 32.4879601562], [28.8939437500, 32.4883718750], [28.8113171875, 32.4887835937], [28.7286906250, 32.4891953125], [28.6460640625, 32.4896070312], [28.5634375000, 32.4900187500], [28.4808109375, 32.4904304687], [28.3981843750, 32.4908421875], [28.3155578125, 32.4912539062], [28.2329312500, 32.4916656250], [28.1503046875, 32.4920773437], [28.0676781250, 32.4924890625], [27.9850515625, 32.4929007813], [27.9024250000, 32.4933125000], [27.8197984375, 32.4937242187], [27.7371718750, 32.4941359375], [27.6545453125, 32.4945476562], [27.5719187500, 32.4949593750], [27.4892921875, 32.4953710937], [27.4066656250, 32.4957828125], [27.3240390625, 32.4961945312], [27.2414125000, 32.4966062500], [27.1587859375, 32.4970179688], [27.0761593750, 32.4974296875], [26.9935328125, 32.4978414063], [26.9109062500, 32.4982531250], [26.8282796875, 32.4986648437], [26.7456531250, 32.4990765625], [26.6630265625, 32.4994882812], [26.5804000000, 32.4999000000], [26.4987937500, 32.5002406250], [26.4171875000, 32.5005812500], [26.3355812500, 32.5009218750], [26.2539750000, 32.5012625000], [26.1723687500, 32.5016031250], [26.0907625000, 32.5019437500], [26.0091562500, 32.5022843750], [25.9275500000, 32.5026250000], [25.8459437500, 32.5029656250], [25.7643375000, 32.5033062500], [25.6827312500, 32.5036468750], [25.6011250000, 32.5039875000], [25.5195187500, 32.5043281250], [25.4379125000, 32.5046687500], [25.3563062500, 32.5050093750], [25.2747000000, 32.5053500000], [25.1930937500, 32.5056906250], [25.1114875000, 32.5060312500], [25.0298812500, 32.5063718750], [24.9482750000, 32.5067125000], [24.8666687500, 32.5070531250], [24.7850625000, 32.5073937500], [24.7034562500, 32.5077343750], [24.6218500000, 32.5080750000], [24.5402437500, 32.5084156250], [24.4586375000, 32.5087562500], [24.3770312500, 32.5090968750], [24.2954250000, 32.5094375000], [24.2138187500, 32.5097781250], [24.1322125000, 32.5101187500], [24.0506062500, 32.5104593750], [23.9690000000, 32.5108000000], [23.8873937500, 32.5111406250], [23.8057875000, 32.5114812500], [23.7241812500, 32.5118218750], [23.6425750000, 32.5121625000], [23.5609687500, 32.5125031250], [23.4793625000, 32.5128437500], [23.3977562500, 32.5131843750], [23.3161500000, 32.5135250000], [23.2345437500, 32.5138656250], [23.1529375000, 32.5142062500], [23.0713312500, 32.5145468750], [22.9897250000, 32.5148875000], [22.9081187500, 32.5152281250], [22.8265125000, 32.5155687500], [22.7449062500, 32.5159093750], [22.6633000000, 32.5162500000], [22.5816937500, 32.5165906250], [22.5000875000, 32.5169312500], [22.4184812500, 32.5172718750], [22.3368750000, 32.5176125000], [22.2552687500, 32.5179531250], [22.1736625000, 32.5182937500], [22.0920562500, 32.5186343750], [22.0104500000, 32.5189750000], [21.9288437500, 32.5193156250], [21.8472375000, 32.5196562500], [21.7656312500, 32.5199968750], [21.6840250000, 32.5203375000], [21.6024187500, 32.5206781250], [21.5208125000, 32.5210187500], [21.4392062500, 32.5213593750], [21.3576000000, 32.5217000000], [21.2696500000, 32.5217000000], [21.1817000000, 32.5217000000], [21.1249500000, 32.5213000000], [21.0682000000, 32.5209000000], [20.9941625000, 32.5199125000], [20.9201250000, 32.5189250000], [20.8460875000, 32.5179375000], [20.7720500000, 32.5169500000], [20.6980125000, 32.5159625000], [20.6239750000, 32.5149750000], [20.5499375000, 32.5139875000], [20.4759000000, 32.5130000000], [20.4018625000, 32.5120125000], [20.3278250000, 32.5110250000], [20.2537875000, 32.5100375000], [20.1797500000, 32.5090500000], [20.1057125000, 32.5080625000], [20.0316750000, 32.5070750000], [19.9576375000, 32.5060875000], [19.8836000000, 32.5051000000], [19.8095625000, 32.5041125000], [19.7355250000, 32.5031250000], [19.6614875000, 32.5021375000], [19.5874500000, 32.5011500000], [19.5134125000, 32.5001625000], [19.4393750000, 32.4991750000], [19.3653375000, 32.4981875000], [19.2913000000, 32.4972000000], [19.2172625000, 32.4962125000], [19.1432250000, 32.4952250000], [19.0691875000, 32.4942375000], [18.9951500000, 32.4932500000], [18.9211125000, 32.4922625000], [18.8470750000, 32.4912750000], [18.7730375000, 32.4902875000], [18.6990000000, 32.4893000000], [18.6418281250, 32.4884355469], [18.5846562500, 32.4875710937], [18.5274843750, 32.4867066406], [18.4703125000, 32.4858421875], [18.4131406250, 32.4849777344], [18.3559687500, 32.4841132813], [18.2987968750, 32.4832488281], [18.2416250000, 32.4823843750], [18.1844531250, 32.4815199219], [18.1272812500, 32.4806554688], [18.0701093750, 32.4797910156], [18.0129375000, 32.4789265625], [17.9557656250, 32.4780621094], [17.8985937500, 32.4771976563], [17.8414218750, 32.4763332031], [17.7842500000, 32.4754687500], [17.7270781250, 32.4746042969], [17.6699062500, 32.4737398438], [17.6127343750, 32.4728753906], [17.5555625000, 32.4720109375], [17.4983906250, 32.4711464844], [17.4412187500, 32.4702820313], [17.3840468750, 32.4694175781], [17.3268750000, 32.4685531250], [17.2697031250, 32.4676886719], [17.2125312500, 32.4668242187], [17.1553593750, 32.4659597656], [17.0981875000, 32.4650953125], [17.0410156250, 32.4642308594], [16.9838437500, 32.4633664063], [16.9266718750, 32.4625019531], [16.8695000000, 32.4616375000], [16.8123281250, 32.4607730469], [16.7551562500, 32.4599085938], [16.6979843750, 32.4590441406], [16.6408125000, 32.4581796875], [16.5836406250, 32.4573152344], [16.5264687500, 32.4564507813], [16.4692968750, 32.4555863281], [16.4121250000, 32.4547218750], [16.3549531250, 32.4538574219], [16.2977812500, 32.4529929688], [16.2406093750, 32.4521285156], [16.1834375000, 32.4512640625], [16.1262656250, 32.4503996094], [16.0690937500, 32.4495351563], [16.0119218750, 32.4486707031], [15.9547500000, 32.4478062500], [15.8975781250, 32.4469417969], [15.8404062500, 32.4460773437], [15.7832343750, 32.4452128906], [15.7260625000, 32.4443484375], [15.6688906250, 32.4434839844], [15.6117187500, 32.4426195313], [15.5545468750, 32.4417550781], [15.4973750000, 32.4408906250], [15.4402031250, 32.4400261719], [15.3830312500, 32.4391617188], [15.3258593750, 32.4382972656], [15.2686875000, 32.4374328125], [15.2115156250, 32.4365683594], [15.1543437500, 32.4357039063], [15.0971718750, 32.4348394531], [15.0400000000, 32.4339750000], [14.9828281250, 32.4331105469], [14.9256562500, 32.4322460938], [14.8684843750, 32.4313816406], [14.8113125000, 32.4305171875], [14.7541406250, 32.4296527344], [14.6969687500, 32.4287882813], [14.6397968750, 32.4279238281], [14.5826250000, 32.4270593750], [14.5254531250, 32.4261949219], [14.4682812500, 32.4253304687], [14.4111093750, 32.4244660156], [14.3539375000, 32.4236015625], [14.2967656250, 32.4227371094], [14.2395937500, 32.4218726563], [14.1824218750, 32.4210082031], [14.1252500000, 32.4201437500], [14.0680781250, 32.4192792969], [14.0109062500, 32.4184148437], [13.9537343750, 32.4175503906], [13.8965625000, 32.4166859375], [13.8393906250, 32.4158214844], [13.7822187500, 32.4149570313], [13.7250468750, 32.4140925781], [13.6678750000, 32.4132281250], [13.6107031250, 32.4123636719], [13.5535312500, 32.4114992188], [13.4963593750, 32.4106347656], [13.4391875000, 32.4097703125], [13.3820156250, 32.4089058594], [13.3248437500, 32.4080414062], [13.2676718750, 32.4071769531], [13.2105000000, 32.4063125000], [13.1533281250, 32.4054480469], [13.0961562500, 32.4045835937], [13.0389843750, 32.4037191406], [12.9818125000, 32.4028546875], [12.9246406250, 32.4019902344], [12.8674687500, 32.4011257813], [12.8102968750, 32.4002613281], [12.7531250000, 32.3993968750], [12.6959531250, 32.3985324219], [12.6387812500, 32.3976679687], [12.5816093750, 32.3968035156], [12.5244375000, 32.3959390625], [12.4672656250, 32.3950746094], [12.4100937500, 32.3942101563], [12.3529218750, 32.3933457031], [12.2957500000, 32.3924812500], [12.2385781250, 32.3916167969], [12.1814062500, 32.3907523438], [12.1242343750, 32.3898878906], [12.0670625000, 32.3890234375], [12.0098906250, 32.3881589844], [11.9527187500, 32.3872945312], [11.8955468750, 32.3864300781], [11.8383750000, 32.3855656250], [11.7812031250, 32.3847011719], [11.7240312500, 32.3838367187], [11.6668593750, 32.3829722656], [11.6096875000, 32.3821078125], [11.5525156250, 32.3812433594], [11.4953437500, 32.3803789063], [11.4381718750, 32.3795144531], [11.3810000000, 32.3786500000], [11.3238281250, 32.3777855469], [11.2666562500, 32.3769210937], [11.2094843750, 32.3760566406], [11.1523125000, 32.3751921875], [11.0951406250, 32.3743277344], [11.0379687500, 32.3734632813], [10.9807968750, 32.3725988281], [10.9236250000, 32.3717343750], [10.8664531250, 32.3708699219], [10.8092812500, 32.3700054688], [10.7521093750, 32.3691410156], [10.6949375000, 32.3682765625], [10.6377656250, 32.3674121094], [10.5805937500, 32.3665476562], [10.5234218750, 32.3656832031], [10.4662500000, 32.3648187500], [10.4090781250, 32.3639542969], [10.3519062500, 32.3630898437], [10.2947343750, 32.3622253906], [10.2375625000, 32.3613609375], [10.1803906250, 32.3604964844], [10.1232187500, 32.3596320313], [10.0660468750, 32.3587675781], [10.0088750000, 32.3579031250], [9.9517031250, 32.3570386719], [9.8945312500, 32.3561742187], [9.8373593750, 32.3553097656], [9.7801875000, 32.3544453125], [9.7230156250, 32.3535808594], [9.6658437500, 32.3527164063], [9.6086718750, 32.3518519531], [9.5515000000, 32.3509875000], [9.4943281250, 32.3501230469], [9.4371562500, 32.3492585938], [9.3799843750, 32.3483941406], [9.3228125000, 32.3475296875], [9.2656406250, 32.3466652344], [9.2084687500, 32.3458007812], [9.1512968750, 32.3449363281], [9.0941250000, 32.3440718750], [9.0369531250, 32.3432074219], [8.9797812500, 32.3423429687], [8.9226093750, 32.3414785156], [8.8654375000, 32.3406140625], [8.8082656250, 32.3397496094], [8.7510937500, 32.3388851563], [8.6939218750, 32.3380207031], [8.6367500000, 32.3371562500], [8.5795781250, 32.3362917969], [8.5224062500, 32.3354273437], [8.4652343750, 32.3345628906], [8.4080625000, 32.3336984375], [8.3508906250, 32.3328339844], [8.2937187500, 32.3319695313], [8.2365468750, 32.3311050781], [8.1793750000, 32.3302406250], [8.1222031250, 32.3293761719], [8.0650312500, 32.3285117188], [8.0078593750, 32.3276472656], [7.9506875000, 32.3267828125], [7.8935156250, 32.3259183594], [7.8363437500, 32.3250539062], [7.7791718750, 32.3241894531], [7.7220000000, 32.3233250000], [7.6648281250, 32.3224605469], [7.6076562500, 32.3215960937], [7.5504843750, 32.3207316406], [7.4933125000, 32.3198671875], [7.4361406250, 32.3190027344], [7.3789687500, 32.3181382813], [7.3217968750, 32.3172738281], [7.2646250000, 32.3164093750], [7.2074531250, 32.3155449219], [7.1502812500, 32.3146804687], [7.0931093750, 32.3138160156], [7.0359375000, 32.3129515625], [6.9787656250, 32.3120871094], [6.9215937500, 32.3112226563], [6.8644218750, 32.3103582031], [6.8072500000, 32.3094937500], [6.7500781250, 32.3086292969], [6.6929062500, 32.3077648438], [6.6357343750, 32.3069003906], [6.5785625000, 32.3060359375], [6.5213906250, 32.3051714844], [6.4642187500, 32.3043070312], [6.4070468750, 32.3034425781], [6.3498750000, 32.3025781250], [6.2927031250, 32.3017136719], [6.2355312500, 32.3008492187], [6.1783593750, 32.2999847656], [6.1211875000, 32.2991203125], [6.0640156250, 32.2982558594], [6.0068437500, 32.2973914063], [5.9496718750, 32.2965269531], [5.8925000000, 32.2956625000], [5.8353281250, 32.2947980469], [5.7781562500, 32.2939335937], [5.7209843750, 32.2930691406], [5.6638125000, 32.2922046875], [5.6066406250, 32.2913402344], [5.5494687500, 32.2904757813], [5.4922968750, 32.2896113281], [5.4351250000, 32.2887468750], [5.3779531250, 32.2878824219], [5.3207812500, 32.2870179687], [5.2636093750, 32.2861535156], [5.2064375000, 32.2852890625], [5.1492656250, 32.2844246094], [5.0920937500, 32.2835601562], [5.0349218750, 32.2826957031], [4.9777500000, 32.2818312500], [4.9205781250, 32.2809667969], [4.8634062500, 32.2801023437], [4.8062343750, 32.2792378906], [4.7490625000, 32.2783734375], [4.6918906250, 32.2775089844], [4.6347187500, 32.2766445312], [4.5775468750, 32.2757800781], [4.5203750000, 32.2749156250], [4.4632031250, 32.2740511719], [4.4060312500, 32.2731867187], [4.3488593750, 32.2723222656], [4.2916875000, 32.2714578125], [4.2345156250, 32.2705933594], [4.1773437500, 32.2697289063], [4.1201718750, 32.2688644531], [4.0630000000, 32.2680000000], [4.0058281250, 32.2671355469], [3.9486562500, 32.2662710937], [3.8914843750, 32.2654066406], [3.8343125000, 32.2645421875], [3.7771406250, 32.2636777344], [3.7199687500, 32.2628132813], [3.6627968750, 32.2619488281], [3.6056250000, 32.2610843750], [3.5484531250, 32.2602199219], [3.4912812500, 32.2593554688], [3.4341093750, 32.2584910156], [3.3769375000, 32.2576265625], [3.3197656250, 32.2567621094], [3.2625937500, 32.2558976563], [3.2054218750, 32.2550332031], [3.1482500000, 32.2541687500], [3.0910781250, 32.2533042969], [3.0339062500, 32.2524398438], [2.9767343750, 32.2515753906], [2.9195625000, 32.2507109375], [2.8623906250, 32.2498464844], [2.8052187500, 32.2489820313], [2.7480468750, 32.2481175781], [2.6908750000, 32.2472531250], [2.6337031250, 32.2463886719], [2.5765312500, 32.2455242187], [2.5193593750, 32.2446597656], [2.4621875000, 32.2437953125], [2.4050156250, 32.2429308594], [2.3478437500, 32.2420664063], [2.2906718750, 32.2412019531], [2.2335000000, 32.2403375000], [2.1763281250, 32.2394730469], [2.1191562500, 32.2386085938], [2.0619843750, 32.2377441406], [2.0048125000, 32.2368796875], [1.9476406250, 32.2360152344], [1.8904687500, 32.2351507813], [1.8332968750, 32.2342863281], [1.7761250000, 32.2334218750], [1.7189531250, 32.2325574219], [1.6617812500, 32.2316929688], [1.6046093750, 32.2308285156], [1.5474375000, 32.2299640625], [1.4902656250, 32.2290996094], [1.4330937500, 32.2282351563], [1.3759218750, 32.2273707031], [1.3187500000, 32.2265062500], [1.2615781250, 32.2256417969], [1.2044062500, 32.2247773437], [1.1472343750, 32.2239128906], [1.0900625000, 32.2230484375], [1.0328906250, 32.2221839844], [0.9757187500, 32.2213195313], [0.9185468750, 32.2204550781], [0.8613750000, 32.2195906250], [0.8042031250, 32.2187261719], [0.7470312500, 32.2178617188], [0.6898593750, 32.2169972656], [0.6326875000, 32.2161328125], [0.5755156250, 32.2152683594], [0.5183437500, 32.2144039063], [0.4611718750, 32.2135394531], [0.4040000000, 32.2126750000], [0.3468281250, 32.2118105469], [0.2896562500, 32.2109460938], [0.2324843750, 32.2100816406], [0.1753125000, 32.2092171875], [0.1181406250, 32.2083527344], [0.0609687500, 32.2074882813], [0.0037968750, 32.2066238281], [-0.0533750000, 32.2057593750], [-0.1105468750, 32.2048949219], [-0.1677187500, 32.2040304687], [-0.2248906250, 32.2031660156], [-0.2820625000, 32.2023015625], [-0.3392343750, 32.2014371094], [-0.3964062500, 32.2005726563], [-0.4535781250, 32.1997082031], [-0.5107500000, 32.1988437500], [-0.5679218750, 32.1979792969], [-0.6250937500, 32.1971148438], [-0.6822656250, 32.1962503906], [-0.7394375000, 32.1953859375], [-0.7966093750, 32.1945214844], [-0.8537812500, 32.1936570313], [-0.9109531250, 32.1927925781], [-0.9681250000, 32.1919281250], [-1.0252968750, 32.1910636719], [-1.0824687500, 32.1901992188], [-1.1396406250, 32.1893347656], [-1.1968125000, 32.1884703125], [-1.2539843750, 32.1876058594], [-1.3111562500, 32.1867414063], [-1.3683281250, 32.1858769531], [-1.4255000000, 32.1850125000], [-1.4826718750, 32.1841480469], [-1.5398437500, 32.1832835937], [-1.5970156250, 32.1824191406], [-1.6541875000, 32.1815546875], [-1.7113593750, 32.1806902344], [-1.7685312500, 32.1798257813], [-1.8257031250, 32.1789613281], [-1.8828750000, 32.1780968750], [-1.9400468750, 32.1772324219], [-1.9972187500, 32.1763679688], [-2.0543906250, 32.1755035156], [-2.1115625000, 32.1746390625], [-2.1687343750, 32.1737746094], [-2.2259062500, 32.1729101563], [-2.2830781250, 32.1720457031], [-2.3402500000, 32.1711812500], [-2.3974218750, 32.1703167969], [-2.4545937500, 32.1694523438], [-2.5117656250, 32.1685878906], [-2.5689375000, 32.1677234375], [-2.6261093750, 32.1668589844], [-2.6832812500, 32.1659945312], [-2.7404531250, 32.1651300781], [-2.7976250000, 32.1642656250], [-2.8547968750, 32.1634011719], [-2.9119687500, 32.1625367187], [-2.9691406250, 32.1616722656], [-3.0263125000, 32.1608078125], [-3.0834843750, 32.1599433594], [-3.1406562500, 32.1590789063], [-3.1978281250, 32.1582144531], [-3.2550000000, 32.1573500000], [-3.3121718750, 32.1564855469], [-3.3693437500, 32.1556210937], [-3.4265156250, 32.1547566406], [-3.4836875000, 32.1538921875], [-3.5408593750, 32.1530277344], [-3.5980312500, 32.1521632813], [-3.6552031250, 32.1512988281]]);
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
import math
import time

from stl import mesh, Dimension

from tkinter import Tk     # from tkinter import Tk for Python 3.x
from tkinter.filedialog import askopenfilename
from mpl_toolkits.mplot3d import art3d
from matplotlib import pyplot as plt
import solid
import os
import ezdxf
import shapely.geometry as sg
import subprocess
from GUI import getSCADPath



def outputSTL(From, To, PATH=getSCADPath()):
    subprocess.Popen(PATH + " -o " + To + " " + From)
    while not os.path.exists(To):
        time.sleep(1)


def get_size(i):
    x_list = [int(a) for a in str(i)]
    return len(x_list)



class Model:
    def __init__(self, model, fileName, location, layer, thickness):
        self.location = location
        self.code = None
        self.fileName = fileName
        self.stl = fileName + ".stl"
        self.layer = layer
        self.thickness = thickness
        self.maxz = (layer+1)*thickness
        self.dxf = fileName + ".dxf"
        self.scad = fileName + ".scad"
        self.model = model
        self.center = None
        self.width = 10
        self.mesh = None
        self.useable_area = None


    def get_code(self):
        max_dim = 0.05
        max_array = 6

        num = int(self.fileName)
        nums = [int(a) for a in str(num)]
        nums.reverse()
        indices = nums
        length = len(nums)

        print(indices)
        t = 0
        i = 0
        cubes = []
        x = 0
        y = 0
        width = 0.01
        while x <= max_dim:
            while y <= max_dim:
                print(indices)
                if nums == []:
                    break
                if indices[0] != 0:
                    cubes.append(solid.translate([x, y, 0])(solid.cube(size=t / 1000 + 0.001)))
                    y += max_dim / (max_array - 1)
                    nums[0] = nums[0] - 1
                else:
                    indices.pop(0)
                    t += 1
                i += 1
            x += max_dim / (max_array - 1)
            y = 0

        outside = solid.translate([-width / 2, -width / 2])(solid.cube(max_dim + (length - 1) / 1000 + 0.001 + width))
        self.code = solid.difference()(outside, cubes)
        self.code = solid.projection(cut=True)(self.code)
        solid.scad_render_to_file(self.code, self.location + "/code.scad")
        outputSTL(From=self.location+"/code.scad", To=self.location+"code.dxf", PATH=getSCADPath())
        # os.system("toSTL.sh renders/code.scad renders/code.dxf")
        return self.location+"/code.dxf"

    def download(self, type):
        if type =="stl":
            print("generating:" + self.location+"/"+ self.fileName+".stl")
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".stl")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".stl")
        elif type == "dxf":
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".dxf")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".dxf")

    def render(self):
        solid.scad_render_to_file(self.model, self.location+"/"+ self.fileName+'.scad')
        while not os.path.exists(self.location+"/"+self.fileName+".scad"):
            time.sleep(1)

    def get_points(self):
        doc = ezdxf.readfile(filename=self.location+"/"+ self.fileName+".dxf")
        msp = doc.modelspace()
        i=0
        lists = []
        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return [start, end]

        for e in msp.query("LINE"):
            line = helper(e)
            if not lists:
                lists.append([line])
            else:
                if lists[i][len(lists)-1][1] != line[0]:
                    lists.append([line])
                    i+=1
                else:
                    lists[i].append(line)

    def get_points2(self, FILE):
        doc = ezdxf.readfile(filename=FILE)
        msp = doc.modelspace()
        i = 0
        lists = []

        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return (start, end)

        for e in msp.query("LINE"):
            line = helper(e)
            if lists==[]:
                lists.append([line])
            else:
                if lists[i][len(lists[i]) - 1][1] != line[0]:
                    lists.append([line])
                    i += 1
                else:
                    lists[i].append(line)
        return lists

    def add_code(self):
        dxf = solid.projection(cut=False)(self.model)
        offset = solid.offset(r=-0.1)(dxf)
        solid.scad_render_to_file(offset, self.location+'/offset.scad')
        os.system("toSTL.sh renders/offset.scad renders/offset.dxf")
        lines = self.get_points2("renders/offset.dxf")
        x = lines[0][0][0][0]
        y = lines[0][0][0][1]
        print(x)
        print(y)
        code = solid.translate([x,y,0])(self.code)
        code = solid.linear_extrude(height=999)(code)
        save = self.model
        self.model = solid.projection()(solid.difference()(self.model, code))
        self.render()
        self.download("dxf")
        self.model = save

    def add_label(self, pos):
        # num = 12
        # minx, maxx, miny, maxy, minz, maxz = self.find_minmax()
        maxz = self.maxz
        # label = solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.5, halign="center"))
        # i=minx
        # print("x-len: " + str(maxx-minx))
        # print(i)
        # inc = (maxx-minx)/num
        # while minx <= i <= maxx:
        #     label = solid.union()(solid.translate([i, 0, maxz - 0.2])(solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.25, halign="center"))), label)
        #     i += inc
        #
        # l = label
        #
        # i =miny
        # while miny<= i <= maxy:
        #     print("y inc")
        #     l = solid.union()(solid.translate([0, i, 0])(label), l)
        #     i += 0.5
        for i in str(self.fileName):
            cur = pos[0]
            label = solid.translate([pos[0][0], pos[0][1], self.maxz-0.2])(solid.linear_extrude(height=(self.thickness)/3)(solid.text(str(i), size=0.5, halign="center", valign="center")))
            self.model = solid.difference()(self.model, label)
            pos.append(pos.pop(0))
            while abs(cur[0]-pos[0][0])<0.5 and abs(cur[1]-pos[0][1])<0.5:
                pos.append(pos.pop(0))



    def Center(self):

        volume, cog, inertia = self.mesh.get_mass_properties()
        print("Volume                                  = {0}".format(volume))
        print("Position of the center of gravity (COG) = {0}".format(cog))
        m_centered = solid.translate([-cog[0], -cog[1], 0])(
            self.model
        )
        return m_centered

    def find_minmax(self):
        minx = maxx = miny = maxy = minz = maxz = None
        for p in self.mesh.points:
            # p contains (x, y, z)
            if minx is None:
                minx = p[Dimension.X]
                maxx = p[Dimension.X]
                miny = p[Dimension.Y]
                maxy = p[Dimension.Y]
                minz = p[Dimension.Z]
                maxz = p[Dimension.Z]
            else:
                maxx = max(p[Dimension.X], maxx)
                minx = min(p[Dimension.X], minx)
                maxy = max(p[Dimension.Y], maxy)
                miny = min(p[Dimension.Y], miny)
                maxz = max(p[Dimension.Z], maxz)
                minz = min(p[Dimension.Z], minz)
        lenx = maxx - minx
        leny = maxy - miny
        lenz = maxz - minz
        return minx, maxx, miny, maxy, minz, maxz

    # def generate_Mesh(self):
    #     self.mesh = mesh.Mesh.from_file(self.location + "/" + str(int(self.fileName)//8)+ "b.stl")

    def get_top(self):
        top = solid.projection(cut=True)(solid.translate([0,0,-1*self.thickness*(self.layer+1)])(self.model))
        useable_area = solid.offset(r=-0.45)(top)
        self.useable_area = useable_area
        solid.scad_render_to_file(self.useable_area, self.location+'/' + 'toptemp.scad')
        outputSTL(From=self.location+'/' + 'toptemp.scad', To=self.location+"/top"+ self.dxf)

        # os.system("toSTL.sh out/toptemp.scad renders/" + self.fileName + ".dxf")
        dxf = DXF(self.location+"/top"+ self.dxf)
        min_p=dxf.points[0][0]
        points_ordered = dxf.points
        i=0
        while i <= len(dxf.points)+1:
            while math.sqrt((dxf.points[0][0]-dxf.points[1][0])**2+(dxf.points[0][1]-dxf.points[1][1])**2) > 0.1:
                dxf.points.insert(1, [(dxf.points[0][0]+dxf.points[1][0])/2, (dxf.points[0][1]+dxf.points[1][1])/2])
                i = i-1
            dxf.points.append(dxf.points.pop(0))
            i+=1
        for i in range(len(dxf.points)):
            dxf.points.append(dxf.points.pop(0))
            if dxf.points[0][0] < min_p:
                min_p = dxf.points[0][0]
                points_ordered = dxf.points.copy()
        dxf.points = points_ordered.copy()

        print(dxf.points)
        self.add_label(dxf.points)

class DXF:
    def __init__(self, file):
        self.file = file
        self.Lines = []
        self.points = []
        doc = ezdxf.readfile(self.file)
        msp = doc.modelspace()
        for e in msp:
            if e.dxftype() == "LINE":
                self.Lines.append(e)
                self.points.append([e.dxf.start[0], e.dxf.start[1]])
        # self.points.append([self.Lines[-1].dxf.end[0], self.Lines[-1].dxf.end[1]])
        self.area = None
        self.center = None
        self.polygon = sg.Polygon(self.points)

    def get_area(self):
        self.area = self.polygon.area
        return self.area

    def get_center(self):
        x_sum = 0
        y_sum =0
        for i in self.points:
            x_sum += i[0]
            y_sum += i[1]
        x_c = x_sum/len(self.points)
        y_c = y_sum/len(self.points)
        return (x_c, y_c)

    def split(self, maxdim):
        splits = []
        length = 0
        pieces = [[]]
        prev = self.points[0]
        for j in self.points:
            length = length + math.sqrt((prev[0]-j[0])**2+(prev[1]-j[1])**2)
            if length >= maxdim:
                pieces[-1].append(j)
                pieces.append([])
                length = 0
            pieces[-1].append(j)
            prev = j
        for j in pieces:
            j.insert(0, [0,0])
            piece = solid.linear_extrude(height=1)(solid.polygon(j))
            splits.append(piece)
        return splits
    def refine_points(self):
        i=0
        while i <= len(self.points)+1:
            while math.sqrt((self.points[0][0]-self.points[1][0])**2+(self.points[0][1]-self.points[1][1])**2) > 0.1:
                self.points.insert(1, [(self.points[0][0]+self.points[1][0])/2, (self.points[0][1]+self.points[1][1])/2])
                i = i-1
            self.points.append(self.points.pop(0))
            i+=1


if __name__== "__main__":
    test = DXF("C:/Users/Daniel/Documents/repos/Shell_Maker/output/0top_slice.dxf")
    test.refine_points()
    k = test.split(48)
    for i in range(len(k)):
        solid.scad_render_to_file(k[i], str(i) + ".scad")


 
 
************************************************/
