// Generated by SolidPython 1.1.3 on 2024-05-26 01:58:49


intersection() {
	difference() {
		intersection() {
			translate(v = [0, 0, 0]) {
				import(file = "CE3E3V2_Bottom_shell.stl", origin = [0, 0]);
			}
			translate(v = [-90.04029846191406, -32.690147399902344, 0]) {
				cube(size = [180.0806, 65.380295, 2]);
			}
		}
		linear_extrude(height = 999) {
			offset(r = -1) {
				import(file = "C:/Users/Daniel/Documents/repos/Shell_Maker/output/0top_slice.dxf", origin = [0, 0]);
			}
		}
	}
	translate(v = [0, 0, 0]) {
		linear_extrude(height = 10) {
			polygon(points = [[0, 0], [-10.6007205078, 32.2906701172], [-10.6662621094, 32.2896066406], [-10.7318037109, 32.2885431641], [-10.7973453125, 32.2874796875], [-10.8628869141, 32.2864162109], [-10.9284285156, 32.2853527344], [-10.9939701172, 32.2842892578], [-11.0595117187, 32.2832257812], [-11.1250533203, 32.2821623047], [-11.1905949219, 32.2810988281], [-11.2561365234, 32.2800353516], [-11.3216781250, 32.2789718750], [-11.3872197266, 32.2779083984], [-11.4527613281, 32.2768449219], [-11.5183029297, 32.2757814453], [-11.5838445313, 32.2747179687], [-11.6493861328, 32.2736544922], [-11.7149277344, 32.2725910156], [-11.7804693359, 32.2715275391], [-11.8460109375, 32.2704640625], [-11.9115525391, 32.2694005859], [-11.9770941406, 32.2683371094], [-12.0426357422, 32.2672736328], [-12.1081773438, 32.2662101562], [-12.1737189453, 32.2651466797], [-12.2392605469, 32.2640832031], [-12.3048021484, 32.2630197266], [-12.3703437500, 32.2619562500], [-12.4358853516, 32.2608927734], [-12.5014269531, 32.2598292969], [-12.5669685547, 32.2587658203], [-12.6325101562, 32.2577023437], [-12.6980517578, 32.2566388672], [-12.7635933594, 32.2555753906], [-12.8291349609, 32.2545119141], [-12.8946765625, 32.2534484375], [-12.9602181641, 32.2523849609], [-13.0257597656, 32.2513214844], [-13.0913013672, 32.2502580078], [-13.1568429687, 32.2491945312], [-13.2223845703, 32.2481310547], [-13.2879261719, 32.2470675781], [-13.3534677734, 32.2460041016], [-13.4190093750, 32.2449406250], [-13.4845509766, 32.2438771484], [-13.5500925781, 32.2428136719], [-13.6156341797, 32.2417501953], [-13.6811757813, 32.2406867187], [-13.7467173828, 32.2396232422], [-13.8122589844, 32.2385597656], [-13.8778005859, 32.2374962891], [-13.9433421875, 32.2364328125], [-14.0088837891, 32.2353693359], [-14.0744253906, 32.2343058594], [-14.1399669922, 32.2332423828], [-14.2055085938, 32.2321789062], [-14.2710501953, 32.2311154297], [-14.3365917969, 32.2300519531], [-14.4021333984, 32.2289884766], [-14.4676750000, 32.2279250000], [-14.5332166016, 32.2268615234], [-14.5987582031, 32.2257980469], [-14.6642998047, 32.2247345703], [-14.7298414062, 32.2236710937], [-14.7953830078, 32.2226076172], [-14.8609246094, 32.2215441406], [-14.9264662109, 32.2204806641], [-14.9920078125, 32.2194171875], [-15.0575494141, 32.2183537109], [-15.1230910156, 32.2172902344], [-15.1886326172, 32.2162267578], [-15.2541742187, 32.2151632812], [-15.3197158203, 32.2140998047], [-15.3852574219, 32.2130363281], [-15.4507990234, 32.2119728516], [-15.5163406250, 32.2109093750], [-15.5818822266, 32.2098458984], [-15.6474238281, 32.2087824219], [-15.7129654297, 32.2077189453], [-15.7785070313, 32.2066554688], [-15.8440486328, 32.2055919922], [-15.9095902344, 32.2045285156], [-15.9751318359, 32.2034650391], [-16.0406734375, 32.2024015625], [-16.1062150391, 32.2013380859], [-16.1717566406, 32.2002746094], [-16.2372982422, 32.1992111328], [-16.3028398438, 32.1981476563], [-16.3683814453, 32.1970841797], [-16.4339230469, 32.1960207031], [-16.4994646484, 32.1949572266], [-16.5650062500, 32.1938937500], [-16.6305478516, 32.1928302734], [-16.6960894531, 32.1917667969], [-16.7616310547, 32.1907033203], [-16.8271726562, 32.1896398438], [-16.8927142578, 32.1885763672], [-16.9582558594, 32.1875128906], [-17.0237974609, 32.1864494141], [-17.0893390625, 32.1853859375], [-17.1548806641, 32.1843224609], [-17.2204222656, 32.1832589844], [-17.2859638672, 32.1821955078], [-17.3515054688, 32.1811320313], [-17.4170470703, 32.1800685547], [-17.4825886719, 32.1790050781], [-17.5481302734, 32.1779416016], [-17.6136718750, 32.1768781250], [-17.6792134766, 32.1758146484], [-17.7447550781, 32.1747511719], [-17.8102966797, 32.1736876953], [-17.8758382813, 32.1726242188], [-17.9413798828, 32.1715607422], [-18.0069214844, 32.1704972656], [-18.0724630859, 32.1694337891], [-18.1380046875, 32.1683703125], [-18.2035462891, 32.1673068359], [-18.2690878906, 32.1662433594], [-18.3346294922, 32.1651798828], [-18.4001710938, 32.1641164063], [-18.4657126953, 32.1630529297], [-18.5312542969, 32.1619894531], [-18.5967958984, 32.1609259766], [-18.6623375000, 32.1598625000], [-18.7278791016, 32.1587990234], [-18.7934207031, 32.1577355469], [-18.8589623047, 32.1566720703], [-18.9245039062, 32.1556085938], [-18.9900455078, 32.1545451172], [-19.0555871094, 32.1534816406], [-19.1211287109, 32.1524181641], [-19.1866703125, 32.1513546875], [-19.2522119141, 32.1502912109], [-19.3177535156, 32.1492277344], [-19.3832951172, 32.1481642578], [-19.4488367187, 32.1471007813], [-19.5143783203, 32.1460373047], [-19.5799199219, 32.1449738281], [-19.6454615234, 32.1439103516], [-19.7110031250, 32.1428468750], [-19.7765447266, 32.1417833984], [-19.8420863281, 32.1407199219], [-19.9076279297, 32.1396564453], [-19.9731695312, 32.1385929688], [-20.0387111328, 32.1375294922], [-20.1042527344, 32.1364660156], [-20.1697943359, 32.1354025391], [-20.2353359375, 32.1343390625], [-20.3008775391, 32.1332755859], [-20.3664191406, 32.1322121094], [-20.4319607422, 32.1311486328], [-20.4975023437, 32.1300851563], [-20.5630439453, 32.1290216797], [-20.6285855469, 32.1279582031], [-20.6941271484, 32.1268947266], [-20.7596687500, 32.1258312500], [-20.8252103516, 32.1247677734], [-20.8907519531, 32.1237042969], [-20.9562935547, 32.1226408203], [-21.0218351562, 32.1215773438], [-21.0873767578, 32.1205138672], [-21.1529183594, 32.1194503906], [-21.2184599609, 32.1183869141], [-21.2840015625, 32.1173234375], [-21.3495431641, 32.1162599609], [-21.4150847656, 32.1151964844], [-21.4806263672, 32.1141330078], [-21.5461679688, 32.1130695313], [-21.6117095703, 32.1120060547], [-21.6772511719, 32.1109425781], [-21.7427927734, 32.1098791016], [-21.8083343750, 32.1088156250], [-21.8738759766, 32.1077521484], [-21.9394175781, 32.1066886719], [-22.0049591797, 32.1056251953], [-22.0705007813, 32.1045617188], [-22.1360423828, 32.1034982422], [-22.2015839844, 32.1024347656], [-22.2671255859, 32.1013712891], [-22.3326671875, 32.1003078125], [-22.3982087891, 32.0992443359], [-22.4637503906, 32.0981808594], [-22.5292919922, 32.0971173828], [-22.5948335937, 32.0960539063], [-22.6603751953, 32.0949904297], [-22.7259167969, 32.0939269531], [-22.7914583984, 32.0928634766], [-22.8570000000, 32.0918000000], [-22.9549652344, 32.0894378906], [-23.0529304687, 32.0870757812], [-23.1508957031, 32.0847136719], [-23.2488609375, 32.0823515625], [-23.3468261719, 32.0799894531], [-23.4447914062, 32.0776273437], [-23.5427566406, 32.0752652344], [-23.6407218750, 32.0729031250], [-23.7386871094, 32.0705410156], [-23.8366523438, 32.0681789062], [-23.9346175781, 32.0658167969], [-24.0325828125, 32.0634546875], [-24.1305480469, 32.0610925781], [-24.2285132813, 32.0587304687], [-24.3264785156, 32.0563683594], [-24.4244437500, 32.0540062500], [-24.5224089844, 32.0516441406], [-24.6203742188, 32.0492820313], [-24.7183394531, 32.0469199219], [-24.8163046875, 32.0445578125], [-24.9142699219, 32.0421957031], [-25.0122351563, 32.0398335938], [-25.1102003906, 32.0374714844], [-25.2081656250, 32.0351093750], [-25.3061308594, 32.0327472656], [-25.4040960937, 32.0303851563], [-25.5020613281, 32.0280230469], [-25.6000265625, 32.0256609375], [-25.6979917969, 32.0232988281], [-25.7959570312, 32.0209367188], [-25.8939222656, 32.0185746094], [-25.9918875000, 32.0162125000], [-26.0898527344, 32.0138503906], [-26.1878179688, 32.0114882813], [-26.2857832031, 32.0091261719], [-26.3837484375, 32.0067640625], [-26.4817136719, 32.0044019531], [-26.5796789063, 32.0020398438], [-26.6776441406, 31.9996777344], [-26.7756093750, 31.9973156250], [-26.8735746094, 31.9949535156], [-26.9715398438, 31.9925914062], [-27.0695050781, 31.9902292969], [-27.1674703125, 31.9878671875], [-27.2654355469, 31.9855050781], [-27.3634007813, 31.9831429688], [-27.4613660156, 31.9807808594], [-27.5593312500, 31.9784187500], [-27.6572964844, 31.9760566406], [-27.7552617187, 31.9736945313], [-27.8532269531, 31.9713324219], [-27.9511921875, 31.9689703125], [-28.0491574219, 31.9666082031], [-28.1471226562, 31.9642460937], [-28.2450878906, 31.9618839844], [-28.3430531250, 31.9595218750], [-28.4410183594, 31.9571597656], [-28.5389835938, 31.9547976563], [-28.6369488281, 31.9524355469], [-28.7349140625, 31.9500734375], [-28.8328792969, 31.9477113281], [-28.9308445313, 31.9453492188], [-29.0288097656, 31.9429871094], [-29.1267750000, 31.9406250000], [-29.2247402344, 31.9382628906], [-29.3227054688, 31.9359007812], [-29.4206707031, 31.9335386719], [-29.5186359375, 31.9311765625], [-29.6166011719, 31.9288144531], [-29.7145664063, 31.9264523438], [-29.8125316406, 31.9240902344], [-29.9104968750, 31.9217281250], [-30.0084621094, 31.9193660156], [-30.1064273437, 31.9170039063], [-30.2043925781, 31.9146417969], [-30.3023578125, 31.9122796875], [-30.4003230469, 31.9099175781], [-30.4982882812, 31.9075554687], [-30.5962535156, 31.9051933594], [-30.6942187500, 31.9028312500], [-30.7921839844, 31.9004691406], [-30.8901492188, 31.8981070312], [-30.9881144531, 31.8957449219], [-31.0860796875, 31.8933828125], [-31.1840449219, 31.8910207031], [-31.2820101563, 31.8886585938], [-31.3799753906, 31.8862964844], [-31.4779406250, 31.8839343750], [-31.5759058594, 31.8815722656], [-31.6738710938, 31.8792101562], [-31.7718363281, 31.8768480469], [-31.8698015625, 31.8744859375], [-31.9677667969, 31.8721238281], [-32.0657320313, 31.8697617187], [-32.1636972656, 31.8673996094], [-32.2616625000, 31.8650375000], [-32.3596277344, 31.8626753906], [-32.4575929687, 31.8603132813], [-32.5555582031, 31.8579511719], [-32.6535234375, 31.8555890625], [-32.7514886719, 31.8532269531], [-32.8494539062, 31.8508648438], [-32.9474191406, 31.8485027344], [-33.0453843750, 31.8461406250], [-33.1433496094, 31.8437785156], [-33.2413148437, 31.8414164062], [-33.3392800781, 31.8390542969], [-33.4372453125, 31.8366921875], [-33.5352105469, 31.8343300781], [-33.6331757813, 31.8319679687], [-33.7311410156, 31.8296058594], [-33.8291062500, 31.8272437500], [-33.9270714844, 31.8248816406], [-34.0250367188, 31.8225195313], [-34.1230019531, 31.8201574219], [-34.2209671875, 31.8177953125], [-34.3189324219, 31.8154332031], [-34.4168976563, 31.8130710938], [-34.5148628906, 31.8107089844], [-34.6128281250, 31.8083468750], [-34.7107933594, 31.8059847656], [-34.8087585938, 31.8036226562], [-34.9067238281, 31.8012605469], [-35.0046890625, 31.7988984375], [-35.1026542969, 31.7965363281], [-35.2006195313, 31.7941742188], [-35.2985847656, 31.7918121094], [-35.3965500000, 31.7894500000], [-35.4945152344, 31.7870878906], [-35.5924804688, 31.7847257813], [-35.6904457031, 31.7823636719], [-35.7884109375, 31.7800015625], [-35.8863761719, 31.7776394531], [-35.9843414063, 31.7752773438], [-36.0823066406, 31.7729152344], [-36.1802718750, 31.7705531250], [-36.2782371094, 31.7681910156], [-36.3762023438, 31.7658289063], [-36.4741675781, 31.7634667969], [-36.5721328125, 31.7611046875], [-36.6700980469, 31.7587425781], [-36.7680632813, 31.7563804688], [-36.8660285156, 31.7540183594], [-36.9639937500, 31.7516562500], [-37.0619589844, 31.7492941406], [-37.1599242187, 31.7469320313], [-37.2578894531, 31.7445699219], [-37.3558546875, 31.7422078125], [-37.4538199219, 31.7398457031], [-37.5517851562, 31.7374835937], [-37.6497503906, 31.7351214844], [-37.7477156250, 31.7327593750], [-37.8456808594, 31.7303972656], [-37.9436460937, 31.7280351563], [-38.0416113281, 31.7256730469], [-38.1395765625, 31.7233109375], [-38.2375417969, 31.7209488281], [-38.3355070313, 31.7185867188], [-38.4334722656, 31.7162246094], [-38.5314375000, 31.7138625000], [-38.6294027344, 31.7115003906], [-38.7273679688, 31.7091382812], [-38.8253332031, 31.7067761719], [-38.9232984375, 31.7044140625], [-39.0212636719, 31.7020519531], [-39.1192289063, 31.6996898438], [-39.2171941406, 31.6973277344], [-39.3151593750, 31.6949656250], [-39.4131246094, 31.6926035156], [-39.5110898438, 31.6902414063], [-39.6090550781, 31.6878792969], [-39.7070203125, 31.6855171875], [-39.8049855469, 31.6831550781], [-39.9029507813, 31.6807929687], [-40.0009160156, 31.6784308594], [-40.0988812500, 31.6760687500], [-40.1968464844, 31.6737066406], [-40.2948117188, 31.6713445312], [-40.3927769531, 31.6689824219], [-40.4907421875, 31.6666203125], [-40.5887074219, 31.6642582031], [-40.6866726563, 31.6618960938], [-40.7846378906, 31.6595339844], [-40.8826031250, 31.6571718750], [-40.9805683594, 31.6548097656], [-41.0785335938, 31.6524476562], [-41.1764988281, 31.6500855469], [-41.2744640625, 31.6477234375], [-41.3724292969, 31.6453613281], [-41.4703945313, 31.6429992187], [-41.5683597656, 31.6406371094], [-41.6663250000, 31.6382750000], [-41.7642902344, 31.6359128906], [-41.8622554687, 31.6335507813], [-41.9602207031, 31.6311886719], [-42.0581859375, 31.6288265625], [-42.1561511719, 31.6264644531], [-42.2541164062, 31.6241023438], [-42.3520816406, 31.6217402344], [-42.4500468750, 31.6193781250], [-42.5480121094, 31.6170160156], [-42.6459773437, 31.6146539062], [-42.7439425781, 31.6122917969], [-42.8419078125, 31.6099296875], [-42.9398730469, 31.6075675781], [-43.0378382813, 31.6052054688], [-43.1358035156, 31.6028433594], [-43.2337687500, 31.6004812500], [-43.3317339844, 31.5981191406], [-43.4296992188, 31.5957570313], [-43.5276644531, 31.5933949219], [-43.6256296875, 31.5910328125], [-43.7235949219, 31.5886707031], [-43.8215601563, 31.5863085938], [-43.9195253906, 31.5839464844], [-44.0174906250, 31.5815843750], [-44.1154558594, 31.5792222656], [-44.2134210938, 31.5768601562], [-44.3113863281, 31.5744980469], [-44.4093515625, 31.5721359375], [-44.5073167969, 31.5697738281], [-44.6052820313, 31.5674117188], [-44.7032472656, 31.5650496094], [-44.8012125000, 31.5626875000], [-44.8991777344, 31.5603253906], [-44.9971429688, 31.5579632813], [-45.0951082031, 31.5556011719], [-45.1930734375, 31.5532390625], [-45.2910386719, 31.5508769531], [-45.3890039063, 31.5485148438], [-45.4869691406, 31.5461527344], [-45.5849343750, 31.5437906250], [-45.6828996094, 31.5414285156], [-45.7808648438, 31.5390664063], [-45.8788300781, 31.5367042969], [-45.9767953125, 31.5343421875], [-46.0747605469, 31.5319800781], [-46.1727257813, 31.5296179688], [-46.2706910156, 31.5272558594], [-46.3686562500, 31.5248937500], [-46.4666214844, 31.5225316406], [-46.5645867188, 31.5201695313], [-46.6625519531, 31.5178074219], [-46.7605171875, 31.5154453125], [-46.8584824219, 31.5130832031], [-46.9564476562, 31.5107210937], [-47.0544128906, 31.5083589844], [-47.1523781250, 31.5059968750], [-47.2503433594, 31.5036347656], [-47.3483085937, 31.5012726563], [-47.4462738281, 31.4989105469], [-47.5442390625, 31.4965484375], [-47.6422042969, 31.4941863281], [-47.7401695313, 31.4918242188], [-47.8381347656, 31.4894621094], [-47.9361000000, 31.4871000000], [-48.0016355469, 31.4852359375], [-48.0671710938, 31.4833718750], [-48.1327066406, 31.4815078125], [-48.1982421875, 31.4796437500], [-48.2637777344, 31.4777796875], [-48.3293132813, 31.4759156250], [-48.3948488281, 31.4740515625], [-48.4603843750, 31.4721875000], [-48.5259199219, 31.4703234375], [-48.5914554687, 31.4684593750], [-48.6569910156, 31.4665953125], [-48.7225265625, 31.4647312500], [-48.7880621094, 31.4628671875], [-48.8535976563, 31.4610031250], [-48.9191332031, 31.4591390625], [-48.9846687500, 31.4572750000], [-49.0502042969, 31.4554109375], [-49.1157398437, 31.4535468750], [-49.1812753906, 31.4516828125], [-49.2468109375, 31.4498187500], [-49.3123464844, 31.4479546875], [-49.3778820312, 31.4460906250], [-49.4434175781, 31.4442265625], [-49.5089531250, 31.4423625000], [-49.5744886719, 31.4404984375], [-49.6400242187, 31.4386343750], [-49.7055597656, 31.4367703125], [-49.7710953125, 31.4349062500], [-49.8366308594, 31.4330421875], [-49.9021664062, 31.4311781250], [-49.9677019531, 31.4293140625], [-50.0332375000, 31.4274500000], [-50.0987730469, 31.4255859375], [-50.1643085938, 31.4237218750], [-50.2298441406, 31.4218578125], [-50.2953796875, 31.4199937500], [-50.3609152344, 31.4181296875], [-50.4264507812, 31.4162656250], [-50.4919863281, 31.4144015625], [-50.5575218750, 31.4125375000], [-50.6230574219, 31.4106734375], [-50.6885929688, 31.4088093750], [-50.7541285156, 31.4069453125], [-50.8196640625, 31.4050812500], [-50.8851996094, 31.4032171875], [-50.9507351562, 31.4013531250], [-51.0162707031, 31.3994890625], [-51.0818062500, 31.3976250000], [-51.1473417969, 31.3957609375], [-51.2128773438, 31.3938968750], [-51.2784128906, 31.3920328125], [-51.3439484375, 31.3901687500], [-51.4094839844, 31.3883046875], [-51.4750195312, 31.3864406250], [-51.5405550781, 31.3845765625], [-51.6060906250, 31.3827125000], [-51.6716261719, 31.3808484375], [-51.7371617188, 31.3789843750], [-51.8026972656, 31.3771203125], [-51.8682328125, 31.3752562500], [-51.9337683594, 31.3733921875], [-51.9993039062, 31.3715281250], [-52.0648394531, 31.3696640625], [-52.1303750000, 31.3678000000], [-52.1959105469, 31.3659359375], [-52.2614460938, 31.3640718750], [-52.3269816406, 31.3622078125], [-52.3925171875, 31.3603437500], [-52.4580527344, 31.3584796875], [-52.5235882812, 31.3566156250], [-52.5891238281, 31.3547515625], [-52.6546593750, 31.3528875000], [-52.7201949219, 31.3510234375], [-52.7857304688, 31.3491593750], [-52.8512660156, 31.3472953125], [-52.9168015625, 31.3454312500], [-52.9823371094, 31.3435671875], [-53.0478726563, 31.3417031250], [-53.1134082031, 31.3398390625], [-53.1789437500, 31.3379750000], [-53.2444792969, 31.3361109375], [-53.3100148438, 31.3342468750], [-53.3755503906, 31.3323828125], [-53.4410859375, 31.3305187500], [-53.5066214844, 31.3286546875], [-53.5721570313, 31.3267906250], [-53.6376925781, 31.3249265625], [-53.7032281250, 31.3230625000], [-53.7687636719, 31.3211984375], [-53.8342992188, 31.3193343750], [-53.8998347656, 31.3174703125], [-53.9653703125, 31.3156062500], [-54.0309058594, 31.3137421875], [-54.0964414063, 31.3118781250], [-54.1619769531, 31.3100140625], [-54.2275125000, 31.3081500000], [-54.2930480469, 31.3062859375], [-54.3585835938, 31.3044218750], [-54.4241191406, 31.3025578125], [-54.4896546875, 31.3006937500], [-54.5551902344, 31.2988296875], [-54.6207257813, 31.2969656250], [-54.6862613281, 31.2951015625], [-54.7517968750, 31.2932375000], [-54.8173324219, 31.2913734375], [-54.8828679688, 31.2895093750], [-54.9484035156, 31.2876453125], [-55.0139390625, 31.2857812500], [-55.0794746094, 31.2839171875], [-55.1450101563, 31.2820531250], [-55.2105457031, 31.2801890625], [-55.2760812500, 31.2783250000], [-55.3416167969, 31.2764609375], [-55.4071523438, 31.2745968750], [-55.4726878906, 31.2727328125], [-55.5382234375, 31.2708687500], [-55.6037589844, 31.2690046875], [-55.6692945313, 31.2671406250], [-55.7348300781, 31.2652765625], [-55.8003656250, 31.2634125000], [-55.8659011719, 31.2615484375], [-55.9314367188, 31.2596843750], [-55.9969722656, 31.2578203125], [-56.0625078125, 31.2559562500], [-56.1280433594, 31.2540921875], [-56.1935789063, 31.2522281250], [-56.2591144531, 31.2503640625], [-56.3246500000, 31.2485000000], [-56.3901855469, 31.2466359375], [-56.4557210938, 31.2447718750], [-56.5212566406, 31.2429078125], [-56.5867921875, 31.2410437500], [-56.6523277344, 31.2391796875], [-56.7178632813, 31.2373156250], [-56.7833988281, 31.2354515625], [-56.8489343750, 31.2335875000], [-56.9144699219, 31.2317234375], [-56.9800054688, 31.2298593750], [-57.0455410156, 31.2279953125], [-57.1110765625, 31.2261312500], [-57.1766121094, 31.2242671875], [-57.2421476563, 31.2224031250], [-57.3076832031, 31.2205390625], [-57.3732187500, 31.2186750000], [-57.4387542969, 31.2168109375], [-57.5042898438, 31.2149468750], [-57.5698253906, 31.2130828125], [-57.6353609375, 31.2112187500], [-57.7008964844, 31.2093546875], [-57.7664320313, 31.2074906250], [-57.8319675781, 31.2056265625], [-57.8975031250, 31.2037625000], [-57.9630386719, 31.2018984375], [-58.0285742188, 31.2000343750], [-58.0941097656, 31.1981703125], [-58.1596453125, 31.1963062500], [-58.2251808594, 31.1944421875], [-58.2907164063, 31.1925781250], [-58.3562519531, 31.1907140625], [-58.4217875000, 31.1888500000], [-58.4873230469, 31.1869859375], [-58.5528585938, 31.1851218750], [-58.6183941406, 31.1832578125]]);
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
import math
import time

from stl import mesh, Dimension

from tkinter import Tk     # from tkinter import Tk for Python 3.x
from tkinter.filedialog import askopenfilename
from mpl_toolkits.mplot3d import art3d
from matplotlib import pyplot as plt
import solid
import os
import ezdxf
import shapely.geometry as sg
import subprocess
from GUI import getSCADPath



def outputSTL(From, To, PATH=getSCADPath()):
    subprocess.Popen(PATH + " -o " + To + " " + From)
    while not os.path.exists(To):
        time.sleep(1)

class Model:
    def __init__(self, model, fileName, location, layer, thickness):
        self.location = location
        self.code = None
        self.fileName = fileName
        self.stl = fileName + ".stl"
        self.layer = layer
        self.thickness = thickness
        self.maxz = (layer+1)*thickness
        self.dxf = fileName + ".dxf"
        self.scad = fileName + ".scad"
        self.model = model
        self.center = None
        self.width = 10
        self.mesh = None
        self.useable_area = None


    def get_code(self):
        max_dim = 0.05
        max_array = 6

        num = int(self.fileName)
        nums = [int(a) for a in str(num)]
        nums.reverse()
        indices = nums
        length = len(nums)

        print(indices)
        t = 0
        i = 0
        cubes = []
        x = 0
        y = 0
        width = 0.01
        while x <= max_dim:
            while y <= max_dim:
                print(indices)
                if nums == []:
                    break
                if indices[0] != 0:
                    cubes.append(solid.translate([x, y, 0])(solid.cube(size=t / 1000 + 0.001)))
                    y += max_dim / (max_array - 1)
                    nums[0] = nums[0] - 1
                else:
                    indices.pop(0)
                    t += 1
                i += 1
            x += max_dim / (max_array - 1)
            y = 0

        outside = solid.translate([-width / 2, -width / 2])(solid.cube(max_dim + (length - 1) / 1000 + 0.001 + width))
        self.code = solid.difference()(outside, cubes)
        self.code = solid.projection(cut=True)(self.code)
        solid.scad_render_to_file(self.code, self.location + "/code.scad")
        outputSTL(From=self.location+"/code.scad", To=self.location+"code.dxf", PATH=getSCADPath())
        # os.system("toSTL.sh renders/code.scad renders/code.dxf")
        return self.location+"/code.dxf"

    def download(self, type):
        if type =="stl":
            print("generating:" + self.location+"/"+ self.fileName+".stl")
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".stl")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".stl")
        elif type == "dxf":
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".dxf")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".dxf")

    def render(self):
        solid.scad_render_to_file(self.model, self.location+"/"+ self.fileName+'.scad')
        while not os.path.exists(self.location+"/"+self.fileName+".scad"):
            time.sleep(1)
        # outputSTL(From= self.location+"/"+ self.fileName+'.scad', To=self.location+"/"+ self.fileName+'.stl')

    def get_points(self):
        doc = ezdxf.readfile(filename=self.location+"/"+ self.fileName+".dxf")
        msp = doc.modelspace()
        i=0
        lists = []
        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return [start, end]

        for e in msp.query("LINE"):
            line = helper(e)
            if not lists:
                lists.append([line])
            else:
                if lists[i][len(lists)-1][1] != line[0]:
                    lists.append([line])
                    i+=1
                else:
                    lists[i].append(line)

    def get_points2(self, FILE):
        doc = ezdxf.readfile(filename=FILE)
        msp = doc.modelspace()
        i = 0
        lists = []

        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return (start, end)

        for e in msp.query("LINE"):
            line = helper(e)
            if lists==[]:
                lists.append([line])
            else:
                if lists[i][len(lists[i]) - 1][1] != line[0]:
                    lists.append([line])
                    i += 1
                else:
                    lists[i].append(line)
        return lists

    def add_code(self):
        dxf = solid.projection(cut=False)(self.model)
        offset = solid.offset(r=-0.1)(dxf)
        solid.scad_render_to_file(offset, self.location+'/offset.scad')
        os.system("toSTL.sh renders/offset.scad renders/offset.dxf")
        lines = self.get_points2("renders/offset.dxf")
        x = lines[0][0][0][0]
        y = lines[0][0][0][1]
        print(x)
        print(y)
        code = solid.translate([x,y,0])(self.code)
        code = solid.linear_extrude(height=999)(code)
        save = self.model
        self.model = solid.projection()(solid.difference()(self.model, code))
        self.render()
        self.download("dxf")
        self.model = save

    def add_label(self, pos):
        # num = 12
        # minx, maxx, miny, maxy, minz, maxz = self.find_minmax()
        maxz = self.maxz
        # label = solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.5, halign="center"))
        # i=minx
        # print("x-len: " + str(maxx-minx))
        # print(i)
        # inc = (maxx-minx)/num
        # while minx <= i <= maxx:
        #     label = solid.union()(solid.translate([i, 0, maxz - 0.2])(solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.25, halign="center"))), label)
        #     i += inc
        #
        # l = label
        #
        # i =miny
        # while miny<= i <= maxy:
        #     print("y inc")
        #     l = solid.union()(solid.translate([0, i, 0])(label), l)
        #     i += 0.5
        for i in str(self.fileName):
            cur = pos[0]
            label = solid.translate([pos[0][0], pos[0][1], self.maxz-0.2])(solid.linear_extrude(height=(self.thickness)/3)(solid.text(str(i), size=0.5, halign="center", valign="center")))
            self.model = solid.difference()(self.model, label)
            pos.append(pos.pop(0))
            while abs(cur[0]-pos[0][0])<0.5 and abs(cur[1]-pos[0][1])<0.5:
                pos.append(pos.pop(0))



    def Center(self):

        volume, cog, inertia = self.mesh.get_mass_properties()
        print("Volume                                  = {0}".format(volume))
        print("Position of the center of gravity (COG) = {0}".format(cog))
        m_centered = solid.translate([-cog[0], -cog[1], 0])(
            self.model
        )
        return m_centered

    def find_minmax(self):
        minx = maxx = miny = maxy = minz = maxz = None
        for p in self.mesh.points:
            # p contains (x, y, z)
            if minx is None:
                minx = p[Dimension.X]
                maxx = p[Dimension.X]
                miny = p[Dimension.Y]
                maxy = p[Dimension.Y]
                minz = p[Dimension.Z]
                maxz = p[Dimension.Z]
            else:
                maxx = max(p[Dimension.X], maxx)
                minx = min(p[Dimension.X], minx)
                maxy = max(p[Dimension.Y], maxy)
                miny = min(p[Dimension.Y], miny)
                maxz = max(p[Dimension.Z], maxz)
                minz = min(p[Dimension.Z], minz)
        lenx = maxx - minx
        leny = maxy - miny
        lenz = maxz - minz
        return minx, maxx, miny, maxy, minz, maxz

    # def generate_Mesh(self):
    #     self.mesh = mesh.Mesh.from_file(self.location + "/" + str(int(self.fileName)//8)+ "b.stl")

    def get_top(self):
        top = solid.projection(cut=True)(solid.translate([0,0,-1*self.thickness*(self.layer+1)])(self.model))
        useable_area = solid.offset(r=-0.45)(top)
        self.useable_area = useable_area
        solid.scad_render_to_file(self.useable_area, self.location+'/' + 'toptemp.scad')
        outputSTL(From=self.location+'/' + 'toptemp.scad', To=self.location+"/top"+ self.dxf)

        # os.system("toSTL.sh out/toptemp.scad renders/" + self.fileName + ".dxf")
        dxf = DXF(self.location+"/top"+ self.dxf)
        min_p=dxf.points[0][0]
        points_ordered = dxf.points
        i=0
        while i <= len(dxf.points)+1:
            while math.sqrt((dxf.points[0][0]-dxf.points[1][0])**2+(dxf.points[0][1]-dxf.points[1][1])**2) > 0.1:
                dxf.points.insert(1, [(dxf.points[0][0]+dxf.points[1][0])/2, (dxf.points[0][1]+dxf.points[1][1])/2])
                i = i-1
            dxf.points.append(dxf.points.pop(0))
            i+=1
        for i in range(len(dxf.points)):
            dxf.points.append(dxf.points.pop(0))
            if dxf.points[0][0] < min_p:
                min_p = dxf.points[0][0]
                points_ordered = dxf.points.copy()
        dxf.points = points_ordered.copy()

        print(dxf.points)
        self.add_label(dxf.points)

class DXF:
    def __init__(self, file):
        self.file = file
        self.Lines = []
        self.points = []
        doc = ezdxf.readfile(self.file)
        msp = doc.modelspace()
        for e in msp:
            if e.dxftype() == "LINE":
                self.Lines.append(e)
                self.points.append([e.dxf.start[0], e.dxf.start[1]])
        # self.points.append([self.Lines[-1].dxf.end[0], self.Lines[-1].dxf.end[1]])
        self.area = None
        self.center = None
        self.polygon = sg.Polygon(self.points)

    def get_area(self):
        self.area = self.polygon.area
        return self.area

    def get_center(self):
        x_sum = 0
        y_sum =0
        for i in self.points:
            x_sum += i[0]
            y_sum += i[1]
        x_c = x_sum/len(self.points)
        y_c = y_sum/len(self.points)
        return (x_c, y_c)

    def split(self, maxdim):
        splits = []
        length = 0
        pieces = [[]]
        prev = self.points[-1]
        pieces[-1].append(prev)
        for j in self.points:
            length = length + math.sqrt((prev[0]-j[0])**2+(prev[1]-j[1])**2)
            if length >= maxdim:
                pieces[-1].append(j)
                pieces.append([])
                length = 0
            pieces[-1].append(j)
            prev = j
        for j in pieces:
            j.insert(0, [0,0])
            piece = solid.linear_extrude(height=10)(solid.polygon(j))
            splits.append(piece)
        return splits
    def refine_points(self):
        i=0
        while i <= len(self.points)+1:
            while math.sqrt((self.points[0][0]-self.points[1][0])**2+(self.points[0][1]-self.points[1][1])**2) > 0.1:
                self.points.insert(1, [(self.points[0][0]+self.points[1][0])/2, (self.points[0][1]+self.points[1][1])/2])
                i = i-1
            self.points.append(self.points.pop(0))
            i+=1


if __name__== "__main__":
    test = DXF("C:/Users/Daniel/Documents/repos/Shell_Maker/output/0top_slice.dxf")
    test.refine_points()
    k = test.split(48)
    for i in range(len(k)):
        solid.scad_render_to_file(k[i], str(i) + ".scad")


 
 
************************************************/
