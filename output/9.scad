// Generated by SolidPython 1.1.3 on 2024-05-19 23:41:19


intersection() {
	difference() {
		intersection() {
			translate(v = [0, 0, 0]) {
				import(file = "CE3E3V2_Bottom_shell.stl", origin = [0, 0]);
			}
			translate(v = [-90.04029846191406, -32.690147399902344, 0]) {
				cube(size = [180.0806, 65.380295, 2]);
			}
		}
		linear_extrude(height = 999) {
			offset(r = -1) {
				import(file = "C:/Users/Daniel/Documents/repos/Shell_Maker/output/0top_slice.dxf", origin = [0, 0]);
			}
		}
	}
	translate(v = [0, 0, 0]) {
		linear_extrude(height = 10) {
			polygon(points = [[0, 0], [10.0538778770, -32.5640804687], [10.1060767422, -32.5643781250], [10.1582756074, -32.5646757813], [10.2104744727, -32.5649734375], [10.2626733379, -32.5652710937], [10.3148722031, -32.5655687500], [10.3670710684, -32.5658664062], [10.4192699336, -32.5661640625], [10.4714687988, -32.5664617188], [10.5236676641, -32.5667593750], [10.5758665293, -32.5670570313], [10.6280653945, -32.5673546875], [10.6802642598, -32.5676523437], [10.7324631250, -32.5679500000], [10.7846619902, -32.5682476563], [10.8368608555, -32.5685453125], [10.8890597207, -32.5688429688], [10.9412585859, -32.5691406250], [10.9934574512, -32.5694382813], [11.0456563164, -32.5697359375], [11.0978551816, -32.5700335938], [11.1500540469, -32.5703312500], [11.2022529121, -32.5706289063], [11.2544517773, -32.5709265625], [11.3066506426, -32.5712242188], [11.3588495078, -32.5715218750], [11.4110483730, -32.5718195313], [11.4632472383, -32.5721171875], [11.5154461035, -32.5724148438], [11.5676449687, -32.5727125000], [11.6198438340, -32.5730101563], [11.6720426992, -32.5733078125], [11.7242415645, -32.5736054688], [11.7764404297, -32.5739031250], [11.8286392949, -32.5742007813], [11.8808381602, -32.5744984375], [11.9330370254, -32.5747960938], [11.9852358906, -32.5750937500], [12.0374347559, -32.5753914063], [12.0896336211, -32.5756890625], [12.1418324863, -32.5759867188], [12.1940313516, -32.5762843750], [12.2462302168, -32.5765820313], [12.2984290820, -32.5768796875], [12.3506279473, -32.5771773438], [12.4028268125, -32.5774750000], [12.4550256777, -32.5777726563], [12.5072245430, -32.5780703125], [12.5594234082, -32.5783679688], [12.6116222734, -32.5786656250], [12.6638211387, -32.5789632813], [12.7160200039, -32.5792609375], [12.7682188691, -32.5795585938], [12.8204177344, -32.5798562500], [12.8726165996, -32.5801539063], [12.9248154648, -32.5804515625], [12.9770143301, -32.5807492188], [13.0292131953, -32.5810468750], [13.0814120605, -32.5813445313], [13.1336109258, -32.5816421875], [13.1858097910, -32.5819398438], [13.2380086562, -32.5822375000], [13.2902075215, -32.5825351563], [13.3424063867, -32.5828328125], [13.3946052520, -32.5831304687], [13.4468041172, -32.5834281250], [13.4990029824, -32.5837257813], [13.5512018477, -32.5840234375], [13.6034007129, -32.5843210938], [13.6555995781, -32.5846187500], [13.7077984434, -32.5849164063], [13.7599973086, -32.5852140625], [13.8121961738, -32.5855117187], [13.8643950391, -32.5858093750], [13.9165939043, -32.5861070313], [13.9687927695, -32.5864046875], [14.0209916348, -32.5867023438], [14.0731905000, -32.5870000000], [14.1253893652, -32.5872976563], [14.1775882305, -32.5875953125], [14.2297870957, -32.5878929687], [14.2819859609, -32.5881906250], [14.3341848262, -32.5884882813], [14.3863836914, -32.5887859375], [14.4385825566, -32.5890835938], [14.4907814219, -32.5893812500], [14.5429802871, -32.5896789063], [14.5951791523, -32.5899765625], [14.6473780176, -32.5902742187], [14.6995768828, -32.5905718750], [14.7517757480, -32.5908695313], [14.8039746133, -32.5911671875], [14.8561734785, -32.5914648438], [14.9083723437, -32.5917625000], [14.9605712090, -32.5920601562], [15.0127700742, -32.5923578125], [15.0649689395, -32.5926554687], [15.1171678047, -32.5929531250], [15.1693666699, -32.5932507813], [15.2215655352, -32.5935484375], [15.2737644004, -32.5938460938], [15.3259632656, -32.5941437500], [15.3781621309, -32.5944414062], [15.4303609961, -32.5947390625], [15.4825598613, -32.5950367187], [15.5347587266, -32.5953343750], [15.5869575918, -32.5956320313], [15.6391564570, -32.5959296875], [15.6913553223, -32.5962273438], [15.7435541875, -32.5965250000], [15.7957530527, -32.5968226562], [15.8479519180, -32.5971203125], [15.9001507832, -32.5974179687], [15.9523496484, -32.5977156250], [16.0045485137, -32.5980132813], [16.0567473789, -32.5983109375], [16.1089462441, -32.5986085938], [16.1611451094, -32.5989062500], [16.2133439746, -32.5992039062], [16.2655428398, -32.5995015625], [16.3177417051, -32.5997992187], [16.3699405703, -32.6000968750], [16.4221394355, -32.6003945313], [16.4743383008, -32.6006921875], [16.5265371660, -32.6009898437], [16.5787360312, -32.6012875000], [16.6309348965, -32.6015851562], [16.6831337617, -32.6018828125], [16.7353326270, -32.6021804687], [16.7875314922, -32.6024781250], [16.8397303574, -32.6027757813], [16.8919292227, -32.6030734375], [16.9441280879, -32.6033710937], [16.9963269531, -32.6036687500], [17.0485258184, -32.6039664062], [17.1007246836, -32.6042640625], [17.1529235488, -32.6045617188], [17.2051224141, -32.6048593750], [17.2573212793, -32.6051570313], [17.3095201445, -32.6054546875], [17.3617190098, -32.6057523437], [17.4139178750, -32.6060500000], [17.4661167402, -32.6063476563], [17.5183156055, -32.6066453125], [17.5705144707, -32.6069429688], [17.6227133359, -32.6072406250], [17.6749122012, -32.6075382813], [17.7271110664, -32.6078359375], [17.7793099316, -32.6081335938], [17.8315087969, -32.6084312500], [17.8837076621, -32.6087289063], [17.9359065273, -32.6090265625], [17.9881053926, -32.6093242188], [18.0403042578, -32.6096218750], [18.0925031230, -32.6099195313], [18.1447019883, -32.6102171875], [18.1969008535, -32.6105148438], [18.2490997187, -32.6108125000], [18.3012985840, -32.6111101563], [18.3534974492, -32.6114078125], [18.4056963145, -32.6117054688], [18.4578951797, -32.6120031250], [18.5100940449, -32.6123007813], [18.5622929102, -32.6125984375], [18.6144917754, -32.6128960938], [18.6666906406, -32.6131937500], [18.7188895059, -32.6134914063], [18.7710883711, -32.6137890625], [18.8232872363, -32.6140867188], [18.8754861016, -32.6143843750], [18.9276849668, -32.6146820313], [18.9798838320, -32.6149796875], [19.0320826973, -32.6152773438], [19.0842815625, -32.6155750000], [19.1364804277, -32.6158726563], [19.1886792930, -32.6161703125], [19.2408781582, -32.6164679688], [19.2930770234, -32.6167656250], [19.3452758887, -32.6170632813], [19.3974747539, -32.6173609375], [19.4496736191, -32.6176585938], [19.5018724844, -32.6179562500], [19.5540713496, -32.6182539063], [19.6062702148, -32.6185515625], [19.6584690801, -32.6188492188], [19.7106679453, -32.6191468750], [19.7628668105, -32.6194445313], [19.8150656758, -32.6197421875], [19.8672645410, -32.6200398438], [19.9194634062, -32.6203375000], [19.9716622715, -32.6206351563], [20.0238611367, -32.6209328125], [20.0760600020, -32.6212304687], [20.1282588672, -32.6215281250], [20.1804577324, -32.6218257813], [20.2326565977, -32.6221234375], [20.2848554629, -32.6224210938], [20.3370543281, -32.6227187500], [20.3892531934, -32.6230164063], [20.4414520586, -32.6233140625], [20.4936509238, -32.6236117187], [20.5458497891, -32.6239093750], [20.5980486543, -32.6242070313], [20.6502475195, -32.6245046875], [20.7024463848, -32.6248023438], [20.7546452500, -32.6251000000], [20.8068441152, -32.6253976563], [20.8590429805, -32.6256953125], [20.9112418457, -32.6259929687], [20.9634407109, -32.6262906250], [21.0156395762, -32.6265882813], [21.0678384414, -32.6268859375], [21.1200373066, -32.6271835938], [21.1722361719, -32.6274812500], [21.2244350371, -32.6277789063], [21.2766339023, -32.6280765625], [21.3288327676, -32.6283742187], [21.3810316328, -32.6286718750], [21.4332304980, -32.6289695313], [21.4854293633, -32.6292671875], [21.5376282285, -32.6295648438], [21.5898270937, -32.6298625000], [21.6420259590, -32.6301601562], [21.6942248242, -32.6304578125], [21.7464236895, -32.6307554687], [21.7986225547, -32.6310531250], [21.8508214199, -32.6313507813], [21.9030202852, -32.6316484375], [21.9552191504, -32.6319460938], [22.0074180156, -32.6322437500], [22.0596168809, -32.6325414062], [22.1118157461, -32.6328390625], [22.1640146113, -32.6331367187], [22.2162134766, -32.6334343750], [22.2684123418, -32.6337320313], [22.3206112070, -32.6340296875], [22.3728100723, -32.6343273438], [22.4250089375, -32.6346250000], [22.4772078027, -32.6349226562], [22.5294066680, -32.6352203125], [22.5816055332, -32.6355179687], [22.6338043984, -32.6358156250], [22.6860032637, -32.6361132813], [22.7382021289, -32.6364109375], [22.7904009941, -32.6367085938], [22.8425998594, -32.6370062500], [22.8947987246, -32.6373039062], [22.9469975898, -32.6376015625], [22.9991964551, -32.6378992187], [23.0513953203, -32.6381968750], [23.1035941855, -32.6384945313], [23.1557930508, -32.6387921875], [23.2079919160, -32.6390898437], [23.2601907812, -32.6393875000], [23.3123896465, -32.6396851562], [23.3645885117, -32.6399828125], [23.4167873770, -32.6402804687], [23.4689862422, -32.6405781250], [23.5211851074, -32.6408757813], [23.5733839727, -32.6411734375], [23.6255828379, -32.6414710937], [23.6777817031, -32.6417687500], [23.7299805684, -32.6420664062], [23.7821794336, -32.6423640625], [23.8343782988, -32.6426617188], [23.8865771641, -32.6429593750], [23.9387760293, -32.6432570313], [23.9909748945, -32.6435546875], [24.0431737598, -32.6438523437], [24.0953726250, -32.6441500000], [24.1475714902, -32.6444476563], [24.1997703555, -32.6447453125], [24.2519692207, -32.6450429688], [24.3041680859, -32.6453406250], [24.3563669512, -32.6456382813], [24.4085658164, -32.6459359375], [24.4607646816, -32.6462335938], [24.5129635469, -32.6465312500], [24.5651624121, -32.6468289063], [24.6173612773, -32.6471265625], [24.6695601426, -32.6474242188], [24.7217590078, -32.6477218750], [24.7739578730, -32.6480195313], [24.8261567383, -32.6483171875], [24.8783556035, -32.6486148438], [24.9305544687, -32.6489125000], [24.9827533340, -32.6492101563], [25.0349521992, -32.6495078125], [25.0871510645, -32.6498054688], [25.1393499297, -32.6501031250], [25.1915487949, -32.6504007813], [25.2437476602, -32.6506984375], [25.2959465254, -32.6509960938], [25.3481453906, -32.6512937500], [25.4003442559, -32.6515914063], [25.4525431211, -32.6518890625], [25.5047419863, -32.6521867188], [25.5569408516, -32.6524843750], [25.6091397168, -32.6527820313], [25.6613385820, -32.6530796875], [25.7135374473, -32.6533773438], [25.7657363125, -32.6536750000], [25.8179351777, -32.6539726563], [25.8701340430, -32.6542703125], [25.9223329082, -32.6545679688], [25.9745317734, -32.6548656250], [26.0267306387, -32.6551632813], [26.0789295039, -32.6554609375], [26.1311283691, -32.6557585938], [26.1833272344, -32.6560562500], [26.2355260996, -32.6563539063], [26.2877249648, -32.6566515625], [26.3399238301, -32.6569492188], [26.3921226953, -32.6572468750], [26.4443215605, -32.6575445313], [26.4965204258, -32.6578421875], [26.5487192910, -32.6581398438], [26.6009181562, -32.6584375000], [26.6531170215, -32.6587351563], [26.7053158867, -32.6590328125], [26.7575147520, -32.6593304687], [26.8097136172, -32.6596281250], [26.8619124824, -32.6599257813], [26.9141113477, -32.6602234375], [26.9663102129, -32.6605210938], [27.0185090781, -32.6608187500], [27.0707079434, -32.6611164063], [27.1229068086, -32.6614140625], [27.1751056738, -32.6617117187], [27.2273045391, -32.6620093750], [27.2795034043, -32.6623070313], [27.3317022695, -32.6626046875], [27.3839011348, -32.6629023438], [27.4361000000, -32.6632000000], [27.5059824219, -32.6626515625], [27.5758648437, -32.6621031250], [27.6457472656, -32.6615546875], [27.7156296875, -32.6610062500], [27.7855121094, -32.6604578125], [27.8553945312, -32.6599093750], [27.9252769531, -32.6593609375], [27.9951593750, -32.6588125000], [28.0650417969, -32.6582640625], [28.1349242188, -32.6577156250], [28.2048066406, -32.6571671875], [28.2746890625, -32.6566187500], [28.3445714844, -32.6560703125], [28.4144539062, -32.6555218750], [28.4843363281, -32.6549734375], [28.5542187500, -32.6544250000], [28.6241011719, -32.6538765625], [28.6939835937, -32.6533281250], [28.7638660156, -32.6527796875], [28.8337484375, -32.6522312500], [28.9036308594, -32.6516828125], [28.9735132812, -32.6511343750], [29.0433957031, -32.6505859375], [29.1132781250, -32.6500375000], [29.1831605469, -32.6494890625], [29.2530429687, -32.6489406250], [29.3229253906, -32.6483921875], [29.3928078125, -32.6478437500], [29.4626902344, -32.6472953125], [29.5325726562, -32.6467468750], [29.6024550781, -32.6461984375], [29.6723375000, -32.6456500000], [29.7422199219, -32.6451015625], [29.8121023437, -32.6445531250], [29.8819847656, -32.6440046875], [29.9518671875, -32.6434562500], [30.0217496094, -32.6429078125], [30.0916320313, -32.6423593750], [30.1615144531, -32.6418109375], [30.2313968750, -32.6412625000], [30.3012792969, -32.6407140625], [30.3711617187, -32.6401656250], [30.4410441406, -32.6396171875], [30.5109265625, -32.6390687500], [30.5808089844, -32.6385203125], [30.6506914062, -32.6379718750], [30.7205738281, -32.6374234375], [30.7904562500, -32.6368750000], [30.8603386719, -32.6363265625], [30.9302210937, -32.6357781250], [31.0001035156, -32.6352296875], [31.0699859375, -32.6346812500], [31.1398683594, -32.6341328125], [31.2097507813, -32.6335843750], [31.2796332031, -32.6330359375], [31.3495156250, -32.6324875000], [31.4193980469, -32.6319390625], [31.4892804687, -32.6313906250], [31.5591628906, -32.6308421875], [31.6290453125, -32.6302937500], [31.6989277344, -32.6297453125], [31.7688101562, -32.6291968750], [31.8386925781, -32.6286484375], [31.9085750000, -32.6281000000], [31.9784574219, -32.6275515625], [32.0483398438, -32.6270031250], [32.1182222656, -32.6264546875], [32.1881046875, -32.6259062500], [32.2579871094, -32.6253578125], [32.3278695313, -32.6248093750], [32.3977519531, -32.6242609375], [32.4676343750, -32.6237125000], [32.5375167969, -32.6231640625], [32.6073992188, -32.6226156250], [32.6772816406, -32.6220671875], [32.7471640625, -32.6215187500], [32.8170464844, -32.6209703125], [32.8869289063, -32.6204218750], [32.9568113281, -32.6198734375], [33.0266937500, -32.6193250000], [33.0965761719, -32.6187765625], [33.1664585937, -32.6182281250], [33.2363410156, -32.6176796875], [33.3062234375, -32.6171312500], [33.3761058594, -32.6165828125], [33.4459882812, -32.6160343750], [33.5158707031, -32.6154859375], [33.5857531250, -32.6149375000], [33.6556355469, -32.6143890625], [33.7255179687, -32.6138406250], [33.7954003906, -32.6132921875], [33.8652828125, -32.6127437500], [33.9351652344, -32.6121953125], [34.0050476562, -32.6116468750], [34.0749300781, -32.6110984375], [34.1448125000, -32.6105500000], [34.2146949219, -32.6100015625], [34.2845773438, -32.6094531250], [34.3544597656, -32.6089046875], [34.4243421875, -32.6083562500], [34.4942246094, -32.6078078125], [34.5641070313, -32.6072593750], [34.6339894531, -32.6067109375], [34.7038718750, -32.6061625000], [34.7737542969, -32.6056140625], [34.8436367188, -32.6050656250], [34.9135191406, -32.6045171875], [34.9834015625, -32.6039687500], [35.0532839844, -32.6034203125], [35.1231664063, -32.6028718750], [35.1930488281, -32.6023234375], [35.2629312500, -32.6017750000], [35.3328136719, -32.6012265625], [35.4026960937, -32.6006781250], [35.4725785156, -32.6001296875], [35.5424609375, -32.5995812500], [35.6123433594, -32.5990328125], [35.6822257812, -32.5984843750], [35.7521082031, -32.5979359375], [35.8219906250, -32.5973875000], [35.8918730469, -32.5968390625], [35.9617554687, -32.5962906250], [36.0316378906, -32.5957421875], [36.1015203125, -32.5951937500], [36.1714027344, -32.5946453125], [36.2412851563, -32.5940968750], [36.3111675781, -32.5935484375], [36.3810500000, -32.5930000000], [36.4509324219, -32.5924515625], [36.5208148438, -32.5919031250], [36.5906972656, -32.5913546875], [36.6605796875, -32.5908062500], [36.7304621094, -32.5902578125], [36.8003445313, -32.5897093750], [36.8702269531, -32.5891609375], [36.9401093750, -32.5886125000], [37.0099917969, -32.5880640625], [37.0798742188, -32.5875156250], [37.1497566406, -32.5869671875], [37.2196390625, -32.5864187500], [37.2895214844, -32.5858703125], [37.3594039063, -32.5853218750], [37.4292863281, -32.5847734375], [37.4991687500, -32.5842250000], [37.5690511719, -32.5836765625], [37.6389335937, -32.5831281250], [37.7088160156, -32.5825796875], [37.7786984375, -32.5820312500], [37.8485808594, -32.5814828125], [37.9184632812, -32.5809343750], [37.9883457031, -32.5803859375], [38.0582281250, -32.5798375000], [38.1281105469, -32.5792890625], [38.1979929688, -32.5787406250], [38.2678753906, -32.5781921875], [38.3377578125, -32.5776437500], [38.4076402344, -32.5770953125], [38.4775226563, -32.5765468750], [38.5474050781, -32.5759984375], [38.6172875000, -32.5754500000], [38.6871699219, -32.5749015625], [38.7570523438, -32.5743531250], [38.8269347656, -32.5738046875], [38.8968171875, -32.5732562500], [38.9666996094, -32.5727078125], [39.0365820313, -32.5721593750], [39.1064644531, -32.5716109375], [39.1763468750, -32.5710625000], [39.2462292969, -32.5705140625], [39.3161117188, -32.5699656250], [39.3859941406, -32.5694171875], [39.4558765625, -32.5688687500], [39.5257589844, -32.5683203125], [39.5956414063, -32.5677718750], [39.6655238281, -32.5672234375], [39.7354062500, -32.5666750000], [39.8052886719, -32.5661265625], [39.8751710937, -32.5655781250], [39.9450535156, -32.5650296875], [40.0149359375, -32.5644812500], [40.0848183594, -32.5639328125], [40.1547007812, -32.5633843750], [40.2245832031, -32.5628359375], [40.2944656250, -32.5622875000], [40.3643480469, -32.5617390625], [40.4342304688, -32.5611906250], [40.5041128906, -32.5606421875], [40.5739953125, -32.5600937500], [40.6438777344, -32.5595453125], [40.7137601563, -32.5589968750], [40.7836425781, -32.5584484375], [40.8535250000, -32.5579000000], [40.9234074219, -32.5573515625], [40.9932898438, -32.5568031250], [41.0631722656, -32.5562546875], [41.1330546875, -32.5557062500], [41.2029371094, -32.5551578125], [41.2728195313, -32.5546093750], [41.3427019531, -32.5540609375], [41.4125843750, -32.5535125000], [41.4824667969, -32.5529640625], [41.5523492188, -32.5524156250], [41.6222316406, -32.5518671875], [41.6921140625, -32.5513187500], [41.7619964844, -32.5507703125], [41.8318789063, -32.5502218750], [41.9017613281, -32.5496734375]]);
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
import math
import time

from stl import mesh, Dimension

from tkinter import Tk     # from tkinter import Tk for Python 3.x
from tkinter.filedialog import askopenfilename
from mpl_toolkits.mplot3d import art3d
from matplotlib import pyplot as plt
import solid
import os
import ezdxf
import shapely.geometry as sg
import subprocess
from GUI import getSCADPath



def outputSTL(From, To, PATH=getSCADPath()):
    subprocess.Popen(PATH + " -o " + To + " " + From)
    while not os.path.exists(To):
        time.sleep(1)


def get_size(i):
    x_list = [int(a) for a in str(i)]
    return len(x_list)



class Model:
    def __init__(self, model, fileName, location, layer, thickness):
        self.location = location
        self.code = None
        self.fileName = fileName
        self.stl = fileName + ".stl"
        self.layer = layer
        self.thickness = thickness
        self.maxz = (layer+1)*thickness
        self.dxf = fileName + ".dxf"
        self.scad = fileName + ".scad"
        self.model = model
        self.center = None
        self.width = 10
        self.mesh = None
        self.useable_area = None


    def get_code(self):
        max_dim = 0.05
        max_array = 6

        num = int(self.fileName)
        nums = [int(a) for a in str(num)]
        nums.reverse()
        indices = nums
        length = len(nums)

        print(indices)
        t = 0
        i = 0
        cubes = []
        x = 0
        y = 0
        width = 0.01
        while x <= max_dim:
            while y <= max_dim:
                print(indices)
                if nums == []:
                    break
                if indices[0] != 0:
                    cubes.append(solid.translate([x, y, 0])(solid.cube(size=t / 1000 + 0.001)))
                    y += max_dim / (max_array - 1)
                    nums[0] = nums[0] - 1
                else:
                    indices.pop(0)
                    t += 1
                i += 1
            x += max_dim / (max_array - 1)
            y = 0

        outside = solid.translate([-width / 2, -width / 2])(solid.cube(max_dim + (length - 1) / 1000 + 0.001 + width))
        self.code = solid.difference()(outside, cubes)
        self.code = solid.projection(cut=True)(self.code)
        solid.scad_render_to_file(self.code, self.location + "/code.scad")
        outputSTL(From=self.location+"/code.scad", To=self.location+"code.dxf", PATH=getSCADPath())
        # os.system("toSTL.sh renders/code.scad renders/code.dxf")
        return self.location+"/code.dxf"

    def download(self, type):
        if type =="stl":
            print("generating:" + self.location+"/"+ self.fileName+".stl")
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".stl")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".stl")
        elif type == "dxf":
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".dxf")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".dxf")

    def render(self):
        solid.scad_render_to_file(self.model, self.location+"/"+ self.fileName+'.scad')
        while not os.path.exists(self.location+"/"+self.fileName+".scad"):
            time.sleep(1)

    def get_points(self):
        doc = ezdxf.readfile(filename=self.location+"/"+ self.fileName+".dxf")
        msp = doc.modelspace()
        i=0
        lists = []
        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return [start, end]

        for e in msp.query("LINE"):
            line = helper(e)
            if not lists:
                lists.append([line])
            else:
                if lists[i][len(lists)-1][1] != line[0]:
                    lists.append([line])
                    i+=1
                else:
                    lists[i].append(line)

    def get_points2(self, FILE):
        doc = ezdxf.readfile(filename=FILE)
        msp = doc.modelspace()
        i = 0
        lists = []

        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return (start, end)

        for e in msp.query("LINE"):
            line = helper(e)
            if lists==[]:
                lists.append([line])
            else:
                if lists[i][len(lists[i]) - 1][1] != line[0]:
                    lists.append([line])
                    i += 1
                else:
                    lists[i].append(line)
        return lists

    def add_code(self):
        dxf = solid.projection(cut=False)(self.model)
        offset = solid.offset(r=-0.1)(dxf)
        solid.scad_render_to_file(offset, self.location+'/offset.scad')
        os.system("toSTL.sh renders/offset.scad renders/offset.dxf")
        lines = self.get_points2("renders/offset.dxf")
        x = lines[0][0][0][0]
        y = lines[0][0][0][1]
        print(x)
        print(y)
        code = solid.translate([x,y,0])(self.code)
        code = solid.linear_extrude(height=999)(code)
        save = self.model
        self.model = solid.projection()(solid.difference()(self.model, code))
        self.render()
        self.download("dxf")
        self.model = save

    def add_label(self, pos):
        # num = 12
        # minx, maxx, miny, maxy, minz, maxz = self.find_minmax()
        maxz = self.maxz
        # label = solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.5, halign="center"))
        # i=minx
        # print("x-len: " + str(maxx-minx))
        # print(i)
        # inc = (maxx-minx)/num
        # while minx <= i <= maxx:
        #     label = solid.union()(solid.translate([i, 0, maxz - 0.2])(solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.25, halign="center"))), label)
        #     i += inc
        #
        # l = label
        #
        # i =miny
        # while miny<= i <= maxy:
        #     print("y inc")
        #     l = solid.union()(solid.translate([0, i, 0])(label), l)
        #     i += 0.5
        for i in str(self.fileName):
            cur = pos[0]
            label = solid.translate([pos[0][0], pos[0][1], self.maxz-0.2])(solid.linear_extrude(height=(self.thickness)/3)(solid.text(str(i), size=0.5, halign="center", valign="center")))
            self.model = solid.difference()(self.model, label)
            pos.append(pos.pop(0))
            while abs(cur[0]-pos[0][0])<0.5 and abs(cur[1]-pos[0][1])<0.5:
                pos.append(pos.pop(0))



    def Center(self):

        volume, cog, inertia = self.mesh.get_mass_properties()
        print("Volume                                  = {0}".format(volume))
        print("Position of the center of gravity (COG) = {0}".format(cog))
        m_centered = solid.translate([-cog[0], -cog[1], 0])(
            self.model
        )
        return m_centered

    def find_minmax(self):
        minx = maxx = miny = maxy = minz = maxz = None
        for p in self.mesh.points:
            # p contains (x, y, z)
            if minx is None:
                minx = p[Dimension.X]
                maxx = p[Dimension.X]
                miny = p[Dimension.Y]
                maxy = p[Dimension.Y]
                minz = p[Dimension.Z]
                maxz = p[Dimension.Z]
            else:
                maxx = max(p[Dimension.X], maxx)
                minx = min(p[Dimension.X], minx)
                maxy = max(p[Dimension.Y], maxy)
                miny = min(p[Dimension.Y], miny)
                maxz = max(p[Dimension.Z], maxz)
                minz = min(p[Dimension.Z], minz)
        lenx = maxx - minx
        leny = maxy - miny
        lenz = maxz - minz
        return minx, maxx, miny, maxy, minz, maxz

    # def generate_Mesh(self):
    #     self.mesh = mesh.Mesh.from_file(self.location + "/" + str(int(self.fileName)//8)+ "b.stl")

    def get_top(self):
        top = solid.projection(cut=True)(solid.translate([0,0,-1*self.thickness*(self.layer+1)])(self.model))
        useable_area = solid.offset(r=-0.45)(top)
        self.useable_area = useable_area
        solid.scad_render_to_file(self.useable_area, self.location+'/' + 'toptemp.scad')
        outputSTL(From=self.location+'/' + 'toptemp.scad', To=self.location+"/top"+ self.dxf)

        # os.system("toSTL.sh out/toptemp.scad renders/" + self.fileName + ".dxf")
        dxf = DXF(self.location+"/top"+ self.dxf)
        min_p=dxf.points[0][0]
        points_ordered = dxf.points
        i=0
        while i <= len(dxf.points)+1:
            while math.sqrt((dxf.points[0][0]-dxf.points[1][0])**2+(dxf.points[0][1]-dxf.points[1][1])**2) > 0.1:
                dxf.points.insert(1, [(dxf.points[0][0]+dxf.points[1][0])/2, (dxf.points[0][1]+dxf.points[1][1])/2])
                i = i-1
            dxf.points.append(dxf.points.pop(0))
            i+=1
        for i in range(len(dxf.points)):
            dxf.points.append(dxf.points.pop(0))
            if dxf.points[0][0] < min_p:
                min_p = dxf.points[0][0]
                points_ordered = dxf.points.copy()
        dxf.points = points_ordered.copy()

        print(dxf.points)
        self.add_label(dxf.points)

class DXF:
    def __init__(self, file):
        self.file = file
        self.Lines = []
        self.points = []
        doc = ezdxf.readfile(self.file)
        msp = doc.modelspace()
        for e in msp:
            if e.dxftype() == "LINE":
                self.Lines.append(e)
                self.points.append([e.dxf.start[0], e.dxf.start[1]])
        # self.points.append([self.Lines[-1].dxf.end[0], self.Lines[-1].dxf.end[1]])
        self.area = None
        self.center = None
        self.polygon = sg.Polygon(self.points)

    def get_area(self):
        self.area = self.polygon.area
        return self.area

    def get_center(self):
        x_sum = 0
        y_sum =0
        for i in self.points:
            x_sum += i[0]
            y_sum += i[1]
        x_c = x_sum/len(self.points)
        y_c = y_sum/len(self.points)
        return (x_c, y_c)

    def split(self, maxdim):
        splits = []
        length = 0
        pieces = [[]]
        prev = self.points[0]
        for j in self.points:
            length = length + math.sqrt((prev[0]-j[0])**2+(prev[1]-j[1])**2)
            if length >= maxdim:
                pieces[-1].append(j)
                pieces.append([])
                length = 0
            pieces[-1].append(j)
            prev = j
        for j in pieces:
            j.insert(0, [0,0])
            piece = solid.linear_extrude(height=10)(solid.polygon(j))
            splits.append(piece)
        return splits
    def refine_points(self):
        i=0
        while i <= len(self.points)+1:
            while math.sqrt((self.points[0][0]-self.points[1][0])**2+(self.points[0][1]-self.points[1][1])**2) > 0.1:
                self.points.insert(1, [(self.points[0][0]+self.points[1][0])/2, (self.points[0][1]+self.points[1][1])/2])
                i = i-1
            self.points.append(self.points.pop(0))
            i+=1


if __name__== "__main__":
    test = DXF("C:/Users/Daniel/Documents/repos/Shell_Maker/output/0top_slice.dxf")
    test.refine_points()
    k = test.split(48)
    for i in range(len(k)):
        solid.scad_render_to_file(k[i], str(i) + ".scad")


 
 
************************************************/
