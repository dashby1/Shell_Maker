// Generated by SolidPython 1.1.3 on 2024-05-19 23:42:09


intersection() {
	intersection() {
		translate(v = [0, 0, 0]) {
			import(file = "CE3E3V2_Bottom_shell.stl", origin = [0, 0]);
		}
		translate(v = [-90.04029846191406, -32.690147399902344, 18]) {
			cube(size = [180.0806, 65.380295, 2]);
		}
	}
	translate(v = [0, 0, 18]) {
		linear_extrude(height = 10) {
			polygon(points = [[0, 0], [-2.8953900000, 25.6810000000], [-2.9792939844, 25.6652835938], [-3.0631979687, 25.6495671875], [-3.1471019531, 25.6338507813], [-3.2310059375, 25.6181343750], [-3.3149099219, 25.6024179688], [-3.3988139063, 25.5867015625], [-3.4827178906, 25.5709851563], [-3.5666218750, 25.5552687500], [-3.6505258594, 25.5395523438], [-3.7344298437, 25.5238359375], [-3.8183338281, 25.5081195313], [-3.9022378125, 25.4924031250], [-3.9861417969, 25.4766867188], [-4.0700457812, 25.4609703125], [-4.1539497656, 25.4452539063], [-4.2378537500, 25.4295375000], [-4.3217577344, 25.4138210938], [-4.4056617187, 25.3981046875], [-4.4895657031, 25.3823882813], [-4.5734696875, 25.3666718750], [-4.6573736719, 25.3509554688], [-4.7412776562, 25.3352390625], [-4.8251816406, 25.3195226563], [-4.9090856250, 25.3038062500], [-4.9929896094, 25.2880898438], [-5.0768935937, 25.2723734375], [-5.1607975781, 25.2566570313], [-5.2447015625, 25.2409406250], [-5.3286055469, 25.2252242188], [-5.4125095312, 25.2095078125], [-5.4964135156, 25.1937914062], [-5.5803175000, 25.1780750000], [-5.6642214844, 25.1623585937], [-5.7481254687, 25.1466421875], [-5.8320294531, 25.1309257812], [-5.9159334375, 25.1152093750], [-5.9998374219, 25.0994929687], [-6.0837414062, 25.0837765625], [-6.1676453906, 25.0680601562], [-6.2515493750, 25.0523437500], [-6.3354533594, 25.0366273437], [-6.4193573437, 25.0209109375], [-6.5032613281, 25.0051945312], [-6.5871653125, 24.9894781250], [-6.6710692969, 24.9737617187], [-6.7549732812, 24.9580453125], [-6.8388772656, 24.9423289062], [-6.9227812500, 24.9266125000], [-7.0066852344, 24.9108960938], [-7.0905892187, 24.8951796875], [-7.1744932031, 24.8794632813], [-7.2583971875, 24.8637468750], [-7.3423011719, 24.8480304688], [-7.4262051562, 24.8323140625], [-7.5101091406, 24.8165976563], [-7.5940131250, 24.8008812500], [-7.6779171094, 24.7851648438], [-7.7618210938, 24.7694484375], [-7.8457250781, 24.7537320313], [-7.9296290625, 24.7380156250], [-8.0135330469, 24.7222992188], [-8.0974370312, 24.7065828125], [-8.1813410156, 24.6908664063], [-8.2652450000, 24.6751500000], [-8.3491489844, 24.6594335938], [-8.4330529688, 24.6437171875], [-8.5169569531, 24.6280007813], [-8.6008609375, 24.6122843750], [-8.6847649219, 24.5965679688], [-8.7686689062, 24.5808515625], [-8.8525728906, 24.5651351563], [-8.9364768750, 24.5494187500], [-9.0203808594, 24.5337023438], [-9.1042848438, 24.5179859375], [-9.1881888281, 24.5022695313], [-9.2720928125, 24.4865531250], [-9.3559967969, 24.4708367188], [-9.4399007812, 24.4551203125], [-9.5238047656, 24.4394039062], [-9.6077087500, 24.4236875000], [-9.6916127344, 24.4079710937], [-9.7755167188, 24.3922546875], [-9.8594207031, 24.3765382812], [-9.9433246875, 24.3608218750], [-10.0272286719, 24.3451054687], [-10.1111326562, 24.3293890625], [-10.1950366406, 24.3136726562], [-10.2789406250, 24.2979562500], [-10.3628446094, 24.2822398437], [-10.4467485938, 24.2665234375], [-10.5306525781, 24.2508070312], [-10.6145565625, 24.2350906250], [-10.6984605469, 24.2193742187], [-10.7823645312, 24.2036578125], [-10.8662685156, 24.1879414062], [-10.9501725000, 24.1722250000], [-11.0340764844, 24.1565085938], [-11.1179804688, 24.1407921875], [-11.2018844531, 24.1250757813], [-11.2857884375, 24.1093593750], [-11.3696924219, 24.0936429688], [-11.4535964062, 24.0779265625], [-11.5375003906, 24.0622101563], [-11.6214043750, 24.0464937500], [-11.7053083594, 24.0307773438], [-11.7892123438, 24.0150609375], [-11.8731163281, 23.9993445313], [-11.9570203125, 23.9836281250], [-12.0409242969, 23.9679117188], [-12.1248282813, 23.9521953125], [-12.2087322656, 23.9364789063], [-12.2926362500, 23.9207625000], [-12.3765402344, 23.9050460938], [-12.4604442188, 23.8893296875], [-12.5443482031, 23.8736132813], [-12.6282521875, 23.8578968750], [-12.7121561719, 23.8421804688], [-12.7960601563, 23.8264640625], [-12.8799641406, 23.8107476563], [-12.9638681250, 23.7950312500], [-13.0477721094, 23.7793148438], [-13.1316760938, 23.7635984375], [-13.2155800781, 23.7478820313], [-13.2994840625, 23.7321656250], [-13.3833880469, 23.7164492188], [-13.4672920313, 23.7007328125], [-13.5511960156, 23.6850164062], [-13.6351000000, 23.6693000000], [-13.6915375000, 23.6583375000], [-13.7479750000, 23.6473750000], [-13.8044125000, 23.6364125000], [-13.8608500000, 23.6254500000], [-13.9172875000, 23.6144875000], [-13.9737250000, 23.6035250000], [-14.0301625000, 23.5925625000], [-14.0866000000, 23.5816000000], [-14.1420000000, 23.5703000000], [-14.1974000000, 23.5590000000], [-14.2687890625, 23.5439656250], [-14.3401781250, 23.5289312500], [-14.4115671875, 23.5138968750], [-14.4829562500, 23.4988625000], [-14.5543453125, 23.4838281250], [-14.6257343750, 23.4687937500], [-14.6971234375, 23.4537593750], [-14.7685125000, 23.4387250000], [-14.8399015625, 23.4236906250], [-14.9112906250, 23.4086562500], [-14.9826796875, 23.3936218750], [-15.0540687500, 23.3785875000], [-15.1254578125, 23.3635531250], [-15.1968468750, 23.3485187500], [-15.2682359375, 23.3334843750], [-15.3396250000, 23.3184500000], [-15.4110140625, 23.3034156250], [-15.4824031250, 23.2883812500], [-15.5537921875, 23.2733468750], [-15.6251812500, 23.2583125000], [-15.6965703125, 23.2432781250], [-15.7679593750, 23.2282437500], [-15.8393484375, 23.2132093750], [-15.9107375000, 23.1981750000], [-15.9821265625, 23.1831406250], [-16.0535156250, 23.1681062500], [-16.1249046875, 23.1530718750], [-16.1962937500, 23.1380375000], [-16.2676828125, 23.1230031250], [-16.3390718750, 23.1079687500], [-16.4104609375, 23.0929343750], [-16.4818500000, 23.0779000000], [-16.5532390625, 23.0628656250], [-16.6246281250, 23.0478312500], [-16.6960171875, 23.0327968750], [-16.7674062500, 23.0177625000], [-16.8387953125, 23.0027281250], [-16.9101843750, 22.9876937500], [-16.9815734375, 22.9726593750], [-17.0529625000, 22.9576250000], [-17.1243515625, 22.9425906250], [-17.1957406250, 22.9275562500], [-17.2671296875, 22.9125218750], [-17.3385187500, 22.8974875000], [-17.4099078125, 22.8824531250], [-17.4812968750, 22.8674187500], [-17.5526859375, 22.8523843750], [-17.6240750000, 22.8373500000], [-17.6954640625, 22.8223156250], [-17.7668531250, 22.8072812500], [-17.8382421875, 22.7922468750], [-17.9096312500, 22.7772125000], [-17.9810203125, 22.7621781250], [-18.0524093750, 22.7471437500], [-18.1237984375, 22.7321093750], [-18.1951875000, 22.7170750000], [-18.2665765625, 22.7020406250], [-18.3379656250, 22.6870062500], [-18.4093546875, 22.6719718750], [-18.4807437500, 22.6569375000], [-18.5521328125, 22.6419031250], [-18.6235218750, 22.6268687500], [-18.6949109375, 22.6118343750], [-18.7663000000, 22.5968000000], [-18.7727000000, 22.5954000000], [-18.8561789063, 22.5758945313], [-18.9396578125, 22.5563890625], [-19.0231367188, 22.5368835938], [-19.1066156250, 22.5173781250], [-19.1900945312, 22.4978726563], [-19.2735734375, 22.4783671875], [-19.3570523437, 22.4588617188], [-19.4405312500, 22.4393562500], [-19.5240101563, 22.4198507813], [-19.6074890625, 22.4003453125], [-19.6909679688, 22.3808398438], [-19.7744468750, 22.3613343750], [-19.8579257812, 22.3418289063], [-19.9414046875, 22.3223234375], [-20.0248835937, 22.3028179688], [-20.1083625000, 22.2833125000], [-20.1918414062, 22.2638070313], [-20.2753203125, 22.2443015625], [-20.3587992188, 22.2247960938], [-20.4422781250, 22.2052906250], [-20.5257570312, 22.1857851563], [-20.6092359375, 22.1662796875], [-20.6927148437, 22.1467742188], [-20.7761937500, 22.1272687500], [-20.8596726562, 22.1077632813], [-20.9431515625, 22.0882578125], [-21.0266304687, 22.0687523438], [-21.1101093750, 22.0492468750], [-21.1935882813, 22.0297414063], [-21.2770671875, 22.0102359375], [-21.3605460938, 21.9907304688], [-21.4440250000, 21.9712250000], [-21.5275039062, 21.9517195313], [-21.6109828125, 21.9322140625], [-21.6944617187, 21.9127085938], [-21.7779406250, 21.8932031250], [-21.8614195313, 21.8736976563], [-21.9448984375, 21.8541921875], [-22.0283773438, 21.8346867188], [-22.1118562500, 21.8151812500], [-22.1953351563, 21.7956757813], [-22.2788140625, 21.7761703125], [-22.3622929688, 21.7566648438], [-22.4457718750, 21.7371593750], [-22.5292507812, 21.7176539063], [-22.6127296875, 21.6981484375], [-22.6962085938, 21.6786429688], [-22.7796875000, 21.6591375000], [-22.8631664063, 21.6396320313], [-22.9466453125, 21.6201265625], [-23.0301242188, 21.6006210938], [-23.1136031250, 21.5811156250], [-23.1970820312, 21.5616101563], [-23.2805609375, 21.5421046875], [-23.3640398437, 21.5225992188], [-23.4475187500, 21.5030937500], [-23.5309976563, 21.4835882813], [-23.6144765625, 21.4640828125], [-23.6979554688, 21.4445773438], [-23.7814343750, 21.4250718750], [-23.8649132812, 21.4055664063], [-23.9483921875, 21.3860609375], [-24.0318710937, 21.3665554688], [-24.1153500000, 21.3470500000], [-24.1988289063, 21.3275445313], [-24.2823078125, 21.3080390625], [-24.3657867188, 21.2885335938], [-24.4492656250, 21.2690281250], [-24.5327445312, 21.2495226563], [-24.6162234375, 21.2300171875], [-24.6997023437, 21.2105117188], [-24.7831812500, 21.1910062500], [-24.8666601562, 21.1715007813], [-24.9501390625, 21.1519953125], [-25.0336179688, 21.1324898438], [-25.1170968750, 21.1129843750], [-25.2005757812, 21.0934789063], [-25.2840546875, 21.0739734375], [-25.3675335937, 21.0544679688], [-25.4510125000, 21.0349625000], [-25.5344914062, 21.0154570313], [-25.6179703125, 20.9959515625], [-25.7014492187, 20.9764460938], [-25.7849281250, 20.9569406250], [-25.8684070312, 20.9374351563], [-25.9518859375, 20.9179296875], [-26.0353648437, 20.8984242188], [-26.1188437500, 20.8789187500], [-26.2023226562, 20.8594132813], [-26.2858015625, 20.8399078125], [-26.3692804687, 20.8204023438], [-26.4527593750, 20.8008968750], [-26.5362382813, 20.7813914063], [-26.6197171875, 20.7618859375], [-26.7031960938, 20.7423804688], [-26.7866750000, 20.7228750000], [-26.8701539062, 20.7033695313], [-26.9536328125, 20.6838640625], [-27.0371117187, 20.6643585938], [-27.1205906250, 20.6448531250], [-27.2040695312, 20.6253476562], [-27.2875484375, 20.6058421875], [-27.3710273438, 20.5863367188], [-27.4545062500, 20.5668312500], [-27.5379851563, 20.5473257813], [-27.6214640625, 20.5278203125], [-27.7049429688, 20.5083148438], [-27.7884218750, 20.4888093750], [-27.8719007812, 20.4693039063], [-27.9553796875, 20.4497984375], [-28.0388585937, 20.4302929688], [-28.1223375000, 20.4107875000], [-28.2058164063, 20.3912820313], [-28.2892953125, 20.3717765625], [-28.3727742188, 20.3522710938], [-28.4562531250, 20.3327656250], [-28.5397320312, 20.3132601563], [-28.6232109375, 20.2937546875], [-28.7066898437, 20.2742492188], [-28.7901687500, 20.2547437500], [-28.8736476563, 20.2352382813], [-28.9571265625, 20.2157328125], [-29.0406054688, 20.1962273438], [-29.1240843750, 20.1767218750], [-29.2075632812, 20.1572164063], [-29.2910421875, 20.1377109375], [-29.3745210937, 20.1182054688], [-29.4580000000, 20.0987000000], [-29.5540000000, 20.0762500000], [-29.6500000000, 20.0538000000], [-29.7460000000, 20.0313500000], [-29.8420000000, 20.0089000000], [-29.9380000000, 19.9864500000], [-30.0340000000, 19.9640000000], [-30.1300000000, 19.9415500000], [-30.2260000000, 19.9191000000], [-30.2919875000, 19.9021656250], [-30.3579750000, 19.8852312500], [-30.4239625000, 19.8682968750], [-30.4899500000, 19.8513625000], [-30.5559375000, 19.8344281250], [-30.6219250000, 19.8174937500], [-30.6879125000, 19.8005593750], [-30.7539000000, 19.7836250000], [-30.8198875000, 19.7666906250], [-30.8858750000, 19.7497562500], [-30.9518625000, 19.7328218750], [-31.0178500000, 19.7158875000], [-31.0838375000, 19.6989531250], [-31.1498250000, 19.6820187500], [-31.2158125000, 19.6650843750], [-31.2818000000, 19.6481500000], [-31.3477875000, 19.6312156250], [-31.4137750000, 19.6142812500], [-31.4797625000, 19.5973468750], [-31.5457500000, 19.5804125000], [-31.6117375000, 19.5634781250], [-31.6777250000, 19.5465437500], [-31.7437125000, 19.5296093750], [-31.8097000000, 19.5126750000], [-31.8756875000, 19.4957406250], [-31.9416750000, 19.4788062500], [-32.0076625000, 19.4618718750], [-32.0736500000, 19.4449375000], [-32.1396375000, 19.4280031250], [-32.2056250000, 19.4110687500], [-32.2716125000, 19.3941343750], [-32.3376000000, 19.3772000000], [-32.4035875000, 19.3602656250], [-32.4695750000, 19.3433312500], [-32.5355625000, 19.3263968750], [-32.6015500000, 19.3094625000], [-32.6675375000, 19.2925281250], [-32.7335250000, 19.2755937500], [-32.7995125000, 19.2586593750], [-32.8655000000, 19.2417250000], [-32.9314875000, 19.2247906250], [-32.9974750000, 19.2078562500], [-33.0634625000, 19.1909218750], [-33.1294500000, 19.1739875000], [-33.1954375000, 19.1570531250], [-33.2614250000, 19.1401187500], [-33.3274125000, 19.1231843750], [-33.3934000000, 19.1062500000], [-33.4593875000, 19.0893156250], [-33.5253750000, 19.0723812500], [-33.5913625000, 19.0554468750], [-33.6573500000, 19.0385125000], [-33.7233375000, 19.0215781250], [-33.7893250000, 19.0046437500], [-33.8553125000, 18.9877093750], [-33.9213000000, 18.9707750000], [-33.9872875000, 18.9538406250], [-34.0532750000, 18.9369062500], [-34.1192625000, 18.9199718750], [-34.1852500000, 18.9030375000], [-34.2512375000, 18.8861031250], [-34.3172250000, 18.8691687500], [-34.3832125000, 18.8522343750], [-34.4492000000, 18.8353000000], [-34.4987000000, 18.8222000000], [-34.5503320313, 18.8080671875], [-34.6019640625, 18.7939343750], [-34.6535960937, 18.7798015625], [-34.7052281250, 18.7656687500], [-34.7568601562, 18.7515359375], [-34.8084921875, 18.7374031250], [-34.8601242187, 18.7232703125], [-34.9117562500, 18.7091375000], [-34.9633882812, 18.6950046875], [-35.0150203125, 18.6808718750], [-35.0666523438, 18.6667390625], [-35.1182843750, 18.6526062500], [-35.1699164063, 18.6384734375], [-35.2215484375, 18.6243406250], [-35.2731804687, 18.6102078125], [-35.3248125000, 18.5960750000], [-35.3764445313, 18.5819421875], [-35.4280765625, 18.5678093750], [-35.4797085937, 18.5536765625], [-35.5313406250, 18.5395437500], [-35.5829726562, 18.5254109375], [-35.6346046875, 18.5112781250], [-35.6862367188, 18.4971453125], [-35.7378687500, 18.4830125000], [-35.7895007813, 18.4688796875], [-35.8411328125, 18.4547468750], [-35.8927648438, 18.4406140625], [-35.9443968750, 18.4264812500], [-35.9960289063, 18.4123484375], [-36.0476609375, 18.3982156250], [-36.0992929687, 18.3840828125], [-36.1509250000, 18.3699500000], [-36.2025570313, 18.3558171875], [-36.2541890625, 18.3416843750], [-36.3058210937, 18.3275515625], [-36.3574531250, 18.3134187500], [-36.4090851563, 18.2992859375], [-36.4607171875, 18.2851531250], [-36.5123492187, 18.2710203125], [-36.5639812500, 18.2568875000], [-36.6156132812, 18.2427546875], [-36.6672453125, 18.2286218750], [-36.7188773438, 18.2144890625], [-36.7705093750, 18.2003562500], [-36.8221414063, 18.1862234375], [-36.8737734375, 18.1720906250], [-36.9254054688, 18.1579578125], [-36.9770375000, 18.1438250000], [-37.0286695313, 18.1296921875], [-37.0803015625, 18.1155593750], [-37.1319335937, 18.1014265625], [-37.1835656250, 18.0872937500], [-37.2351976563, 18.0731609375], [-37.2868296875, 18.0590281250], [-37.3384617188, 18.0448953125], [-37.3900937500, 18.0307625000], [-37.4417257813, 18.0166296875], [-37.4933578125, 18.0024968750], [-37.5449898438, 17.9883640625], [-37.5966218750, 17.9742312500], [-37.6482539063, 17.9600984375], [-37.6998859375, 17.9459656250], [-37.7515179688, 17.9318328125], [-37.8031500000, 17.9177000000], [-37.8547820313, 17.9035671875], [-37.9064140625, 17.8894343750], [-37.9580460937, 17.8753015625], [-38.0096781250, 17.8611687500], [-38.0613101563, 17.8470359375], [-38.1129421875, 17.8329031250], [-38.1645742187, 17.8187703125], [-38.2162062500, 17.8046375000], [-38.2678382813, 17.7905046875], [-38.3194703125, 17.7763718750], [-38.3711023438, 17.7622390625], [-38.4227343750, 17.7481062500], [-38.4743664063, 17.7339734375], [-38.5259984375, 17.7198406250], [-38.5776304688, 17.7057078125], [-38.6292625000, 17.6915750000], [-38.6808945313, 17.6774421875], [-38.7325265625, 17.6633093750], [-38.7841585937, 17.6491765625], [-38.8357906250, 17.6350437500], [-38.8874226563, 17.6209109375], [-38.9390546875, 17.6067781250], [-38.9906867188, 17.5926453125], [-39.0423187500, 17.5785125000], [-39.0939507813, 17.5643796875], [-39.1455828125, 17.5502468750], [-39.1972148438, 17.5361140625], [-39.2488468750, 17.5219812500], [-39.3004789063, 17.5078484375], [-39.3521109375, 17.4937156250], [-39.4037429688, 17.4795828125], [-39.4553750000, 17.4654500000], [-39.5070070313, 17.4513171875], [-39.5586390625, 17.4371843750], [-39.6102710938, 17.4230515625], [-39.6619031250, 17.4089187500], [-39.7135351563, 17.3947859375], [-39.7651671875, 17.3806531250], [-39.8167992187, 17.3665203125], [-39.8684312500, 17.3523875000], [-39.9200632813, 17.3382546875], [-39.9716953125, 17.3241218750], [-40.0233273437, 17.3099890625], [-40.0749593750, 17.2958562500], [-40.1265914063, 17.2817234375], [-40.1782234375, 17.2675906250], [-40.2298554687, 17.2534578125], [-40.2814875000, 17.2393250000], [-40.3331195312, 17.2251921875], [-40.3847515625, 17.2110593750], [-40.4363835937, 17.1969265625], [-40.4880156250, 17.1827937500], [-40.5396476562, 17.1686609375], [-40.5912796875, 17.1545281250], [-40.6429117187, 17.1403953125], [-40.6945437500, 17.1262625000], [-40.7461757812, 17.1121296875], [-40.7978078125, 17.0979968750], [-40.8494398437, 17.0838640625], [-40.9010718750, 17.0697312500], [-40.9527039063, 17.0555984375], [-41.0043359375, 17.0414656250], [-41.0559679687, 17.0273328125], [-41.1076000000, 17.0132000000], [-41.1597875000, 16.9988500000], [-41.2119750000, 16.9845000000], [-41.2641625000, 16.9701500000], [-41.3163500000, 16.9558000000], [-41.3685375000, 16.9414500000], [-41.4207250000, 16.9271000000], [-41.4729125000, 16.9127500000], [-41.5251000000, 16.8984000000], [-41.5954156250, 16.8778781250], [-41.6657312500, 16.8573562500], [-41.7360468750, 16.8368343750], [-41.8063625000, 16.8163125000], [-41.8766781250, 16.7957906250], [-41.9469937500, 16.7752687500], [-42.0173093750, 16.7547468750], [-42.0876250000, 16.7342250000], [-42.1579406250, 16.7137031250], [-42.2282562500, 16.6931812500], [-42.2985718750, 16.6726593750], [-42.3688875000, 16.6521375000], [-42.4392031250, 16.6316156250], [-42.5095187500, 16.6110937500], [-42.5798343750, 16.5905718750], [-42.6501500000, 16.5700500000], [-42.7204656250, 16.5495281250], [-42.7907812500, 16.5290062500], [-42.8610968750, 16.5084843750], [-42.9314125000, 16.4879625000], [-43.0017281250, 16.4674406250], [-43.0720437500, 16.4469187500], [-43.1423593750, 16.4263968750], [-43.2126750000, 16.4058750000], [-43.2829906250, 16.3853531250], [-43.3533062500, 16.3648312500], [-43.4236218750, 16.3443093750], [-43.4939375000, 16.3237875000], [-43.5642531250, 16.3032656250], [-43.6345687500, 16.2827437500], [-43.7048843750, 16.2622218750], [-43.7752000000, 16.2417000000], [-43.8455156250, 16.2211781250], [-43.9158312500, 16.2006562500], [-43.9861468750, 16.1801343750], [-44.0564625000, 16.1596125000], [-44.1267781250, 16.1390906250], [-44.1970937500, 16.1185687500], [-44.2674093750, 16.0980468750], [-44.3377250000, 16.0775250000], [-44.4080406250, 16.0570031250], [-44.4783562500, 16.0364812500], [-44.5486718750, 16.0159593750], [-44.6189875000, 15.9954375000], [-44.6893031250, 15.9749156250], [-44.7596187500, 15.9543937500], [-44.8299343750, 15.9338718750], [-44.9002500000, 15.9133500000], [-44.9705656250, 15.8928281250], [-45.0408812500, 15.8723062500], [-45.1111968750, 15.8517843750], [-45.1815125000, 15.8312625000], [-45.2518281250, 15.8107406250], [-45.3221437500, 15.7902187500], [-45.3924593750, 15.7696968750], [-45.4627750000, 15.7491750000], [-45.5330906250, 15.7286531250], [-45.6034062500, 15.7081312500], [-45.6737218750, 15.6876093750], [-45.7440375000, 15.6670875000], [-45.8143531250, 15.6465656250], [-45.8846687500, 15.6260437500], [-45.9549843750, 15.6055218750], [-46.0253000000, 15.5850000000], [-46.0519000000, 15.5770000000], [-46.1076367188, 15.5596250000], [-46.1633734375, 15.5422500000], [-46.2191101562, 15.5248750000], [-46.2748468750, 15.5075000000], [-46.3305835938, 15.4901250000], [-46.3863203125, 15.4727500000], [-46.4420570313, 15.4553750000], [-46.4977937500, 15.4380000000], [-46.5535304687, 15.4206250000], [-46.6092671875, 15.4032500000], [-46.6650039063, 15.3858750000], [-46.7207406250, 15.3685000000], [-46.7764773438, 15.3511250000], [-46.8322140625, 15.3337500000], [-46.8879507812, 15.3163750000], [-46.9436875000, 15.2990000000], [-46.9994242188, 15.2816250000], [-47.0551609375, 15.2642500000], [-47.1108976563, 15.2468750000], [-47.1666343750, 15.2295000000], [-47.2223710937, 15.2121250000], [-47.2781078125, 15.1947500000], [-47.3338445313, 15.1773750000], [-47.3895812500, 15.1600000000], [-47.4453179688, 15.1426250000], [-47.5010546875, 15.1252500000], [-47.5567914062, 15.1078750000], [-47.6125281250, 15.0905000000], [-47.6682648438, 15.0731250000], [-47.7240015625, 15.0557500000], [-47.7797382813, 15.0383750000], [-47.8354750000, 15.0210000000], [-47.8912117188, 15.0036250000], [-47.9469484375, 14.9862500000], [-48.0026851562, 14.9688750000], [-48.0584218750, 14.9515000000], [-48.1141585938, 14.9341250000], [-48.1698953125, 14.9167500000], [-48.2256320313, 14.8993750000], [-48.2813687500, 14.8820000000], [-48.3371054687, 14.8646250000], [-48.3928421875, 14.8472500000], [-48.4485789063, 14.8298750000], [-48.5043156250, 14.8125000000], [-48.5600523438, 14.7951250000], [-48.6157890625, 14.7777500000], [-48.6715257812, 14.7603750000], [-48.7272625000, 14.7430000000], [-48.7829992188, 14.7256250000], [-48.8387359375, 14.7082500000], [-48.8944726563, 14.6908750000], [-48.9502093750, 14.6735000000], [-49.0059460937, 14.6561250000], [-49.0616828125, 14.6387500000], [-49.1174195313, 14.6213750000], [-49.1731562500, 14.6040000000], [-49.2288929688, 14.5866250000], [-49.2846296875, 14.5692500000], [-49.3403664062, 14.5518750000], [-49.3961031250, 14.5345000000], [-49.4518398438, 14.5171250000], [-49.5075765625, 14.4997500000], [-49.5633132813, 14.4823750000]]);
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
import math
import time

from stl import mesh, Dimension

from tkinter import Tk     # from tkinter import Tk for Python 3.x
from tkinter.filedialog import askopenfilename
from mpl_toolkits.mplot3d import art3d
from matplotlib import pyplot as plt
import solid
import os
import ezdxf
import shapely.geometry as sg
import subprocess
from GUI import getSCADPath



def outputSTL(From, To, PATH=getSCADPath()):
    subprocess.Popen(PATH + " -o " + To + " " + From)
    while not os.path.exists(To):
        time.sleep(1)


def get_size(i):
    x_list = [int(a) for a in str(i)]
    return len(x_list)



class Model:
    def __init__(self, model, fileName, location, layer, thickness):
        self.location = location
        self.code = None
        self.fileName = fileName
        self.stl = fileName + ".stl"
        self.layer = layer
        self.thickness = thickness
        self.maxz = (layer+1)*thickness
        self.dxf = fileName + ".dxf"
        self.scad = fileName + ".scad"
        self.model = model
        self.center = None
        self.width = 10
        self.mesh = None
        self.useable_area = None


    def get_code(self):
        max_dim = 0.05
        max_array = 6

        num = int(self.fileName)
        nums = [int(a) for a in str(num)]
        nums.reverse()
        indices = nums
        length = len(nums)

        print(indices)
        t = 0
        i = 0
        cubes = []
        x = 0
        y = 0
        width = 0.01
        while x <= max_dim:
            while y <= max_dim:
                print(indices)
                if nums == []:
                    break
                if indices[0] != 0:
                    cubes.append(solid.translate([x, y, 0])(solid.cube(size=t / 1000 + 0.001)))
                    y += max_dim / (max_array - 1)
                    nums[0] = nums[0] - 1
                else:
                    indices.pop(0)
                    t += 1
                i += 1
            x += max_dim / (max_array - 1)
            y = 0

        outside = solid.translate([-width / 2, -width / 2])(solid.cube(max_dim + (length - 1) / 1000 + 0.001 + width))
        self.code = solid.difference()(outside, cubes)
        self.code = solid.projection(cut=True)(self.code)
        solid.scad_render_to_file(self.code, self.location + "/code.scad")
        outputSTL(From=self.location+"/code.scad", To=self.location+"code.dxf", PATH=getSCADPath())
        # os.system("toSTL.sh renders/code.scad renders/code.dxf")
        return self.location+"/code.dxf"

    def download(self, type):
        if type =="stl":
            print("generating:" + self.location+"/"+ self.fileName+".stl")
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".stl")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".stl")
        elif type == "dxf":
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".dxf")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".dxf")

    def render(self):
        solid.scad_render_to_file(self.model, self.location+"/"+ self.fileName+'.scad')
        while not os.path.exists(self.location+"/"+self.fileName+".scad"):
            time.sleep(1)

    def get_points(self):
        doc = ezdxf.readfile(filename=self.location+"/"+ self.fileName+".dxf")
        msp = doc.modelspace()
        i=0
        lists = []
        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return [start, end]

        for e in msp.query("LINE"):
            line = helper(e)
            if not lists:
                lists.append([line])
            else:
                if lists[i][len(lists)-1][1] != line[0]:
                    lists.append([line])
                    i+=1
                else:
                    lists[i].append(line)

    def get_points2(self, FILE):
        doc = ezdxf.readfile(filename=FILE)
        msp = doc.modelspace()
        i = 0
        lists = []

        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return (start, end)

        for e in msp.query("LINE"):
            line = helper(e)
            if lists==[]:
                lists.append([line])
            else:
                if lists[i][len(lists[i]) - 1][1] != line[0]:
                    lists.append([line])
                    i += 1
                else:
                    lists[i].append(line)
        return lists

    def add_code(self):
        dxf = solid.projection(cut=False)(self.model)
        offset = solid.offset(r=-0.1)(dxf)
        solid.scad_render_to_file(offset, self.location+'/offset.scad')
        os.system("toSTL.sh renders/offset.scad renders/offset.dxf")
        lines = self.get_points2("renders/offset.dxf")
        x = lines[0][0][0][0]
        y = lines[0][0][0][1]
        print(x)
        print(y)
        code = solid.translate([x,y,0])(self.code)
        code = solid.linear_extrude(height=999)(code)
        save = self.model
        self.model = solid.projection()(solid.difference()(self.model, code))
        self.render()
        self.download("dxf")
        self.model = save

    def add_label(self, pos):
        # num = 12
        # minx, maxx, miny, maxy, minz, maxz = self.find_minmax()
        maxz = self.maxz
        # label = solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.5, halign="center"))
        # i=minx
        # print("x-len: " + str(maxx-minx))
        # print(i)
        # inc = (maxx-minx)/num
        # while minx <= i <= maxx:
        #     label = solid.union()(solid.translate([i, 0, maxz - 0.2])(solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.25, halign="center"))), label)
        #     i += inc
        #
        # l = label
        #
        # i =miny
        # while miny<= i <= maxy:
        #     print("y inc")
        #     l = solid.union()(solid.translate([0, i, 0])(label), l)
        #     i += 0.5
        for i in str(self.fileName):
            cur = pos[0]
            label = solid.translate([pos[0][0], pos[0][1], self.maxz-0.2])(solid.linear_extrude(height=(self.thickness)/3)(solid.text(str(i), size=0.5, halign="center", valign="center")))
            self.model = solid.difference()(self.model, label)
            pos.append(pos.pop(0))
            while abs(cur[0]-pos[0][0])<0.5 and abs(cur[1]-pos[0][1])<0.5:
                pos.append(pos.pop(0))



    def Center(self):

        volume, cog, inertia = self.mesh.get_mass_properties()
        print("Volume                                  = {0}".format(volume))
        print("Position of the center of gravity (COG) = {0}".format(cog))
        m_centered = solid.translate([-cog[0], -cog[1], 0])(
            self.model
        )
        return m_centered

    def find_minmax(self):
        minx = maxx = miny = maxy = minz = maxz = None
        for p in self.mesh.points:
            # p contains (x, y, z)
            if minx is None:
                minx = p[Dimension.X]
                maxx = p[Dimension.X]
                miny = p[Dimension.Y]
                maxy = p[Dimension.Y]
                minz = p[Dimension.Z]
                maxz = p[Dimension.Z]
            else:
                maxx = max(p[Dimension.X], maxx)
                minx = min(p[Dimension.X], minx)
                maxy = max(p[Dimension.Y], maxy)
                miny = min(p[Dimension.Y], miny)
                maxz = max(p[Dimension.Z], maxz)
                minz = min(p[Dimension.Z], minz)
        lenx = maxx - minx
        leny = maxy - miny
        lenz = maxz - minz
        return minx, maxx, miny, maxy, minz, maxz

    # def generate_Mesh(self):
    #     self.mesh = mesh.Mesh.from_file(self.location + "/" + str(int(self.fileName)//8)+ "b.stl")

    def get_top(self):
        top = solid.projection(cut=True)(solid.translate([0,0,-1*self.thickness*(self.layer+1)])(self.model))
        useable_area = solid.offset(r=-0.45)(top)
        self.useable_area = useable_area
        solid.scad_render_to_file(self.useable_area, self.location+'/' + 'toptemp.scad')
        outputSTL(From=self.location+'/' + 'toptemp.scad', To=self.location+"/top"+ self.dxf)

        # os.system("toSTL.sh out/toptemp.scad renders/" + self.fileName + ".dxf")
        dxf = DXF(self.location+"/top"+ self.dxf)
        min_p=dxf.points[0][0]
        points_ordered = dxf.points
        i=0
        while i <= len(dxf.points)+1:
            while math.sqrt((dxf.points[0][0]-dxf.points[1][0])**2+(dxf.points[0][1]-dxf.points[1][1])**2) > 0.1:
                dxf.points.insert(1, [(dxf.points[0][0]+dxf.points[1][0])/2, (dxf.points[0][1]+dxf.points[1][1])/2])
                i = i-1
            dxf.points.append(dxf.points.pop(0))
            i+=1
        for i in range(len(dxf.points)):
            dxf.points.append(dxf.points.pop(0))
            if dxf.points[0][0] < min_p:
                min_p = dxf.points[0][0]
                points_ordered = dxf.points.copy()
        dxf.points = points_ordered.copy()

        print(dxf.points)
        self.add_label(dxf.points)

class DXF:
    def __init__(self, file):
        self.file = file
        self.Lines = []
        self.points = []
        doc = ezdxf.readfile(self.file)
        msp = doc.modelspace()
        for e in msp:
            if e.dxftype() == "LINE":
                self.Lines.append(e)
                self.points.append([e.dxf.start[0], e.dxf.start[1]])
        # self.points.append([self.Lines[-1].dxf.end[0], self.Lines[-1].dxf.end[1]])
        self.area = None
        self.center = None
        self.polygon = sg.Polygon(self.points)

    def get_area(self):
        self.area = self.polygon.area
        return self.area

    def get_center(self):
        x_sum = 0
        y_sum =0
        for i in self.points:
            x_sum += i[0]
            y_sum += i[1]
        x_c = x_sum/len(self.points)
        y_c = y_sum/len(self.points)
        return (x_c, y_c)

    def split(self, maxdim):
        splits = []
        length = 0
        pieces = [[]]
        prev = self.points[0]
        for j in self.points:
            length = length + math.sqrt((prev[0]-j[0])**2+(prev[1]-j[1])**2)
            if length >= maxdim:
                pieces[-1].append(j)
                pieces.append([])
                length = 0
            pieces[-1].append(j)
            prev = j
        for j in pieces:
            j.insert(0, [0,0])
            piece = solid.linear_extrude(height=10)(solid.polygon(j))
            splits.append(piece)
        return splits
    def refine_points(self):
        i=0
        while i <= len(self.points)+1:
            while math.sqrt((self.points[0][0]-self.points[1][0])**2+(self.points[0][1]-self.points[1][1])**2) > 0.1:
                self.points.insert(1, [(self.points[0][0]+self.points[1][0])/2, (self.points[0][1]+self.points[1][1])/2])
                i = i-1
            self.points.append(self.points.pop(0))
            i+=1


if __name__== "__main__":
    test = DXF("C:/Users/Daniel/Documents/repos/Shell_Maker/output/0top_slice.dxf")
    test.refine_points()
    k = test.split(48)
    for i in range(len(k)):
        solid.scad_render_to_file(k[i], str(i) + ".scad")


 
 
************************************************/
