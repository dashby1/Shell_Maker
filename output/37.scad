// Generated by SolidPython 1.1.3 on 2024-05-19 23:41:42


intersection() {
	difference() {
		intersection() {
			translate(v = [0, 0, 0]) {
				import(file = "CE3E3V2_Bottom_shell.stl", origin = [0, 0]);
			}
			translate(v = [-90.04029846191406, -32.690147399902344, 8]) {
				cube(size = [180.0806, 65.380295, 2]);
			}
		}
		linear_extrude(height = 999) {
			offset(r = -1) {
				import(file = "C:/Users/Daniel/Documents/repos/Shell_Maker/output/4top_slice.dxf", origin = [0, 0]);
			}
		}
	}
	translate(v = [0, 0, 8]) {
		linear_extrude(height = 10) {
			polygon(points = [[0, 0], [-44.9066906250, 15.9099531250], [-44.9834500000, 15.8875500000], [-45.0602093750, 15.8651468750], [-45.1369687500, 15.8427437500], [-45.2137281250, 15.8203406250], [-45.2904875000, 15.7979375000], [-45.3672468750, 15.7755343750], [-45.4440062500, 15.7531312500], [-45.5207656250, 15.7307281250], [-45.5975250000, 15.7083250000], [-45.6742843750, 15.6859218750], [-45.7510437500, 15.6635187500], [-45.8278031250, 15.6411156250], [-45.9045625000, 15.6187125000], [-45.9813218750, 15.5963093750], [-46.0580812500, 15.5739062500], [-46.1348406250, 15.5515031250], [-46.2116000000, 15.5291000000], [-46.2648000000, 15.5132000000], [-46.3143937500, 15.4977390625], [-46.3639875000, 15.4822781250], [-46.4135812500, 15.4668171875], [-46.4631750000, 15.4513562500], [-46.5127687500, 15.4358953125], [-46.5623625000, 15.4204343750], [-46.6119562500, 15.4049734375], [-46.6615500000, 15.3895125000], [-46.7111437500, 15.3740515625], [-46.7607375000, 15.3585906250], [-46.8103312500, 15.3431296875], [-46.8599250000, 15.3276687500], [-46.9095187500, 15.3122078125], [-46.9591125000, 15.2967468750], [-47.0087062500, 15.2812859375], [-47.0583000000, 15.2658250000], [-47.1078937500, 15.2503640625], [-47.1574875000, 15.2349031250], [-47.2070812500, 15.2194421875], [-47.2566750000, 15.2039812500], [-47.3062687500, 15.1885203125], [-47.3558625000, 15.1730593750], [-47.4054562500, 15.1575984375], [-47.4550500000, 15.1421375000], [-47.5046437500, 15.1266765625], [-47.5542375000, 15.1112156250], [-47.6038312500, 15.0957546875], [-47.6534250000, 15.0802937500], [-47.7030187500, 15.0648328125], [-47.7526125000, 15.0493718750], [-47.8022062500, 15.0339109375], [-47.8518000000, 15.0184500000], [-47.9013937500, 15.0029890625], [-47.9509875000, 14.9875281250], [-48.0005812500, 14.9720671875], [-48.0501750000, 14.9566062500], [-48.0997687500, 14.9411453125], [-48.1493625000, 14.9256843750], [-48.1989562500, 14.9102234375], [-48.2485500000, 14.8947625000], [-48.2981437500, 14.8793015625], [-48.3477375000, 14.8638406250], [-48.3973312500, 14.8483796875], [-48.4469250000, 14.8329187500], [-48.4965187500, 14.8174578125], [-48.5461125000, 14.8019968750], [-48.5957062500, 14.7865359375], [-48.6453000000, 14.7710750000], [-48.6948937500, 14.7556140625], [-48.7444875000, 14.7401531250], [-48.7940812500, 14.7246921875], [-48.8436750000, 14.7092312500], [-48.8932687500, 14.6937703125], [-48.9428625000, 14.6783093750], [-48.9924562500, 14.6628484375], [-49.0420500000, 14.6473875000], [-49.0916437500, 14.6319265625], [-49.1412375000, 14.6164656250], [-49.1908312500, 14.6010046875], [-49.2404250000, 14.5855437500], [-49.2900187500, 14.5700828125], [-49.3396125000, 14.5546218750], [-49.3892062500, 14.5391609375], [-49.4388000000, 14.5237000000], [-49.5046671875, 14.5031218750], [-49.5705343750, 14.4825437500], [-49.6364015625, 14.4619656250], [-49.7022687500, 14.4413875000], [-49.7681359375, 14.4208093750], [-49.8340031250, 14.4002312500], [-49.8998703125, 14.3796531250], [-49.9657375000, 14.3590750000], [-50.0316046875, 14.3384968750], [-50.0974718750, 14.3179187500], [-50.1633390625, 14.2973406250], [-50.2292062500, 14.2767625000], [-50.2950734375, 14.2561843750], [-50.3609406250, 14.2356062500], [-50.4268078125, 14.2150281250], [-50.4926750000, 14.1944500000], [-50.5585421875, 14.1738718750], [-50.6244093750, 14.1532937500], [-50.6902765625, 14.1327156250], [-50.7561437500, 14.1121375000], [-50.8220109375, 14.0915593750], [-50.8878781250, 14.0709812500], [-50.9537453125, 14.0504031250], [-51.0196125000, 14.0298250000], [-51.0854796875, 14.0092468750], [-51.1513468750, 13.9886687500], [-51.2172140625, 13.9680906250], [-51.2830812500, 13.9475125000], [-51.3489484375, 13.9269343750], [-51.4148156250, 13.9063562500], [-51.4806828125, 13.8857781250], [-51.5465500000, 13.8652000000], [-51.6124171875, 13.8446218750], [-51.6782843750, 13.8240437500], [-51.7441515625, 13.8034656250], [-51.8100187500, 13.7828875000], [-51.8758859375, 13.7623093750], [-51.9417531250, 13.7417312500], [-52.0076203125, 13.7211531250], [-52.0734875000, 13.7005750000], [-52.1393546875, 13.6799968750], [-52.2052218750, 13.6594187500], [-52.2710890625, 13.6388406250], [-52.3369562500, 13.6182625000], [-52.4028234375, 13.5976843750], [-52.4686906250, 13.5771062500], [-52.5345578125, 13.5565281250], [-52.6004250000, 13.5359500000], [-52.6662921875, 13.5153718750], [-52.7321593750, 13.4947937500], [-52.7980265625, 13.4742156250], [-52.8638937500, 13.4536375000], [-52.9297609375, 13.4330593750], [-52.9956281250, 13.4124812500], [-53.0614953125, 13.3919031250], [-53.1273625000, 13.3713250000], [-53.1932296875, 13.3507468750], [-53.2590968750, 13.3301687500], [-53.3249640625, 13.3095906250], [-53.3908312500, 13.2890125000], [-53.4566984375, 13.2684343750], [-53.5225656250, 13.2478562500], [-53.5884328125, 13.2272781250], [-53.6543000000, 13.2067000000], [-53.7467875000, 13.1762375000], [-53.8392750000, 13.1457750000], [-53.9317625000, 13.1153125000], [-54.0242500000, 13.0848500000], [-54.1167375000, 13.0543875000], [-54.2092250000, 13.0239250000], [-54.3017125000, 12.9934625000], [-54.3942000000, 12.9630000000], [-54.4866875000, 12.9325375000], [-54.5791750000, 12.9020750000], [-54.6716625000, 12.8716125000], [-54.7641500000, 12.8411500000], [-54.8566375000, 12.8106875000], [-54.9491250000, 12.7802250000], [-55.0416125000, 12.7497625000], [-55.1341000000, 12.7193000000], [-55.1857281250, 12.7022000000], [-55.2373562500, 12.6851000000], [-55.2889843750, 12.6680000000], [-55.3406125000, 12.6509000000], [-55.3922406250, 12.6338000000], [-55.4438687500, 12.6167000000], [-55.4954968750, 12.5996000000], [-55.5471250000, 12.5825000000], [-55.5987531250, 12.5654000000], [-55.6503812500, 12.5483000000], [-55.7020093750, 12.5312000000], [-55.7536375000, 12.5141000000], [-55.8052656250, 12.4970000000], [-55.8568937500, 12.4799000000], [-55.9085218750, 12.4628000000], [-55.9601500000, 12.4457000000], [-56.0117781250, 12.4286000000], [-56.0634062500, 12.4115000000], [-56.1150343750, 12.3944000000], [-56.1666625000, 12.3773000000], [-56.2182906250, 12.3602000000], [-56.2699187500, 12.3431000000], [-56.3215468750, 12.3260000000], [-56.3731750000, 12.3089000000], [-56.4248031250, 12.2918000000], [-56.4764312500, 12.2747000000], [-56.5280593750, 12.2576000000], [-56.5796875000, 12.2405000000], [-56.6313156250, 12.2234000000], [-56.6829437500, 12.2063000000], [-56.7345718750, 12.1892000000], [-56.7862000000, 12.1721000000], [-56.8501500000, 12.1506000000], [-56.9141000000, 12.1291000000], [-56.9811375000, 12.1054437500], [-57.0481750000, 12.0817875000], [-57.1152125000, 12.0581312500], [-57.1822500000, 12.0344750000], [-57.2492875000, 12.0108187500], [-57.3163250000, 11.9871625000], [-57.3833625000, 11.9635062500], [-57.4504000000, 11.9398500000], [-57.5174375000, 11.9161937500], [-57.5844750000, 11.8925375000], [-57.6515125000, 11.8688812500], [-57.7185500000, 11.8452250000], [-57.7855875000, 11.8215687500], [-57.8526250000, 11.7979125000], [-57.9196625000, 11.7742562500], [-57.9867000000, 11.7506000000], [-58.0537375000, 11.7269437500], [-58.1207750000, 11.7032875000], [-58.1878125000, 11.6796312500], [-58.2548500000, 11.6559750000], [-58.3218875000, 11.6323187500], [-58.3889250000, 11.6086625000], [-58.4559625000, 11.5850062500], [-58.5230000000, 11.5613500000], [-58.5900375000, 11.5376937500], [-58.6570750000, 11.5140375000], [-58.7241125000, 11.4903812500], [-58.7911500000, 11.4667250000], [-58.8581875000, 11.4430687500], [-58.9252250000, 11.4194125000], [-58.9922625000, 11.3957562500], [-59.0593000000, 11.3721000000], [-59.1263375000, 11.3484437500], [-59.1933750000, 11.3247875000], [-59.2604125000, 11.3011312500], [-59.3274500000, 11.2774750000], [-59.3944875000, 11.2538187500], [-59.4615250000, 11.2301625000], [-59.5285625000, 11.2065062500], [-59.5956000000, 11.1828500000], [-59.6626375000, 11.1591937500], [-59.7296750000, 11.1355375000], [-59.7967125000, 11.1118812500], [-59.8637500000, 11.0882250000], [-59.9307875000, 11.0645687500], [-59.9978250000, 11.0409125000], [-60.0648625000, 11.0172562500], [-60.1319000000, 10.9936000000], [-60.1989375000, 10.9699437500], [-60.2659750000, 10.9462875000], [-60.3330125000, 10.9226312500], [-60.4000500000, 10.8989750000], [-60.4670875000, 10.8753187500], [-60.5341250000, 10.8516625000], [-60.6011625000, 10.8280062500], [-60.6682000000, 10.8043500000], [-60.7352375000, 10.7806937500], [-60.8022750000, 10.7570375000], [-60.8693125000, 10.7333812500], [-60.9363500000, 10.7097250000], [-61.0033875000, 10.6860687500], [-61.0704250000, 10.6624125000], [-61.1374625000, 10.6387562500], [-61.2045000000, 10.6151000000], [-61.2765750000, 10.5895375000], [-61.3486500000, 10.5639750000], [-61.4207250000, 10.5384125000], [-61.4928000000, 10.5128500000], [-61.5648750000, 10.4872875000], [-61.6369500000, 10.4617250000], [-61.7090250000, 10.4361625000], [-61.7811000000, 10.4106000000], [-61.8531750000, 10.3850375000], [-61.9252500000, 10.3594750000], [-61.9973250000, 10.3339125000], [-62.0694000000, 10.3083500000], [-62.1414750000, 10.2827875000], [-62.2135500000, 10.2572250000], [-62.2856250000, 10.2316625000], [-62.3577000000, 10.2061000000], [-62.4308000000, 10.1799609375], [-62.5039000000, 10.1538218750], [-62.5770000000, 10.1276828125], [-62.6501000000, 10.1015437500], [-62.7232000000, 10.0754046875], [-62.7963000000, 10.0492656250], [-62.8694000000, 10.0231265625], [-62.9425000000, 9.9969875000], [-63.0156000000, 9.9708484375], [-63.0887000000, 9.9447093750], [-63.1618000000, 9.9185703125], [-63.2349000000, 9.8924312500], [-63.3080000000, 9.8662921875], [-63.3811000000, 9.8401531250], [-63.4542000000, 9.8140140625], [-63.5273000000, 9.7878750000], [-63.6004000000, 9.7617359375], [-63.6735000000, 9.7355968750], [-63.7466000000, 9.7094578125], [-63.8197000000, 9.6833187500], [-63.8928000000, 9.6571796875], [-63.9659000000, 9.6310406250], [-64.0390000000, 9.6049015625], [-64.1121000000, 9.5787625000], [-64.1852000000, 9.5526234375], [-64.2583000000, 9.5264843750], [-64.3314000000, 9.5003453125], [-64.4045000000, 9.4742062500], [-64.4776000000, 9.4480671875], [-64.5507000000, 9.4219281250], [-64.6238000000, 9.3957890625], [-64.6969000000, 9.3696500000], [-64.7700000000, 9.3435109375], [-64.8431000000, 9.3173718750], [-64.9162000000, 9.2912328125], [-64.9893000000, 9.2650937500], [-65.0624000000, 9.2389546875], [-65.1355000000, 9.2128156250], [-65.2086000000, 9.1866765625], [-65.2817000000, 9.1605375000], [-65.3548000000, 9.1343984375], [-65.4279000000, 9.1082593750], [-65.5010000000, 9.0821203125], [-65.5741000000, 9.0559812500], [-65.6472000000, 9.0298421875], [-65.7203000000, 9.0037031250], [-65.7934000000, 8.9775640625], [-65.8665000000, 8.9514250000], [-65.9396000000, 8.9252859375], [-66.0127000000, 8.8991468750], [-66.0858000000, 8.8730078125], [-66.1589000000, 8.8468687500], [-66.2320000000, 8.8207296875], [-66.3051000000, 8.7945906250], [-66.3782000000, 8.7684515625], [-66.4513000000, 8.7423125000], [-66.5244000000, 8.7161734375], [-66.5975000000, 8.6900343750], [-66.6706000000, 8.6638953125], [-66.7437000000, 8.6377562500], [-66.8168000000, 8.6116171875], [-66.8899000000, 8.5854781250], [-66.9630000000, 8.5593390625], [-67.0361000000, 8.5332000000], [-67.1278500000, 8.4987600000], [-67.2196000000, 8.4643200000], [-67.2845937500, 8.4394821875], [-67.3495875000, 8.4146443750], [-67.4145812500, 8.3898065625], [-67.4795750000, 8.3649687500], [-67.5445687500, 8.3401309375], [-67.6095625000, 8.3152931250], [-67.6745562500, 8.2904553125], [-67.7395500000, 8.2656175000], [-67.8045437500, 8.2407796875], [-67.8695375000, 8.2159418750], [-67.9345312500, 8.1911040625], [-67.9995250000, 8.1662662500], [-68.0645187500, 8.1414284375], [-68.1295125000, 8.1165906250], [-68.1945062500, 8.0917528125], [-68.2595000000, 8.0669150000], [-68.3244937500, 8.0420771875], [-68.3894875000, 8.0172393750], [-68.4544812500, 7.9924015625], [-68.5194750000, 7.9675637500], [-68.5844687500, 7.9427259375], [-68.6494625000, 7.9178881250], [-68.7144562500, 7.8930503125], [-68.7794500000, 7.8682125000], [-68.8444437500, 7.8433746875], [-68.9094375000, 7.8185368750], [-68.9744312500, 7.7936990625], [-69.0394250000, 7.7688612500], [-69.1044187500, 7.7440234375], [-69.1694125000, 7.7191856250], [-69.2344062500, 7.6943478125], [-69.2994000000, 7.6695100000], [-69.3862125000, 7.6364362500], [-69.4730250000, 7.6033625000], [-69.5598375000, 7.5702887500], [-69.6466500000, 7.5372150000], [-69.7334625000, 7.5041412500], [-69.8202750000, 7.4710675000], [-69.9070875000, 7.4379937500], [-69.9939000000, 7.4049200000], [-70.0660812500, 7.3769306250], [-70.1382625000, 7.3489412500], [-70.2104437500, 7.3209518750], [-70.2826250000, 7.2929625000], [-70.3548062500, 7.2649731250], [-70.4269875000, 7.2369837500], [-70.4991687500, 7.2089943750], [-70.5713500000, 7.1810050000], [-70.6435312500, 7.1530156250], [-70.7157125000, 7.1250262500], [-70.7878937500, 7.0970368750], [-70.8600750000, 7.0690475000], [-70.9322562500, 7.0410581250], [-71.0044375000, 7.0130687500], [-71.0766187500, 6.9850793750], [-71.1488000000, 6.9570900000], [-71.2021937500, 6.9359756250], [-71.2555875000, 6.9148612500], [-71.3089812500, 6.8937468750], [-71.3623750000, 6.8726325000], [-71.4157687500, 6.8515181250], [-71.4691625000, 6.8304037500], [-71.5225562500, 6.8092893750], [-71.5759500000, 6.7881750000], [-71.6293437500, 6.7670606250], [-71.6827375000, 6.7459462500], [-71.7361312500, 6.7248318750], [-71.7895250000, 6.7037175000], [-71.8429187500, 6.6826031250], [-71.8963125000, 6.6614887500], [-71.9497062500, 6.6403743750], [-72.0031000000, 6.6192600000], [-72.0530234375, 6.5988487500], [-72.1029468750, 6.5784375000], [-72.1528703125, 6.5580262500], [-72.2027937500, 6.5376150000], [-72.2527171875, 6.5172037500], [-72.3026406250, 6.4967925000], [-72.3525640625, 6.4763812500], [-72.4024875000, 6.4559700000], [-72.4524109375, 6.4355587500], [-72.5023343750, 6.4151475000], [-72.5522578125, 6.3947362500], [-72.6021812500, 6.3743250000], [-72.6521046875, 6.3539137500], [-72.7020281250, 6.3335025000], [-72.7519515625, 6.3130912500], [-72.8018750000, 6.2926800000], [-72.8517984375, 6.2722687500], [-72.9017218750, 6.2518575000], [-72.9516453125, 6.2314462500], [-73.0015687500, 6.2110350000], [-73.0514921875, 6.1906237500], [-73.1014156250, 6.1702125000], [-73.1513390625, 6.1498012500], [-73.2012625000, 6.1293900000], [-73.2511859375, 6.1089787500], [-73.3011093750, 6.0885675000], [-73.3510328125, 6.0681562500], [-73.4009562500, 6.0477450000], [-73.4508796875, 6.0273337500], [-73.5008031250, 6.0069225000], [-73.5507265625, 5.9865112500], [-73.6006500000, 5.9661000000], [-73.6505734375, 5.9456887500], [-73.7004968750, 5.9252775000], [-73.7504203125, 5.9048662500], [-73.8003437500, 5.8844550000], [-73.8502671875, 5.8640437500], [-73.9001906250, 5.8436325000], [-73.9501140625, 5.8232212500], [-74.0000375000, 5.8028100000], [-74.0499609375, 5.7823987500], [-74.0998843750, 5.7619875000], [-74.1498078125, 5.7415762500], [-74.1997312500, 5.7211650000], [-74.2496546875, 5.7007537500], [-74.2995781250, 5.6803425000], [-74.3495015625, 5.6599312500], [-74.3994250000, 5.6395200000], [-74.4493484375, 5.6191087500], [-74.4992718750, 5.5986975000], [-74.5491953125, 5.5782862500], [-74.5991187500, 5.5578750000], [-74.6490421875, 5.5374637500], [-74.6989656250, 5.5170525000], [-74.7488890625, 5.4966412500], [-74.7988125000, 5.4762300000], [-74.8487359375, 5.4558187500], [-74.8986593750, 5.4354075000], [-74.9485828125, 5.4149962500], [-74.9985062500, 5.3945850000], [-75.0484296875, 5.3741737500], [-75.0983531250, 5.3537625000], [-75.1482765625, 5.3333512500], [-75.1982000000, 5.3129400000], [-75.2888375000, 5.2755700000], [-75.3794750000, 5.2382000000], [-75.4701125000, 5.2008300000], [-75.5607500000, 5.1634600000], [-75.6513875000, 5.1260900000], [-75.7420250000, 5.0887200000], [-75.8326625000, 5.0513500000], [-75.9233000000, 5.0139800000], [-75.9883906250, 4.9866132813], [-76.0534812500, 4.9592465625], [-76.1185718750, 4.9318798437], [-76.1836625000, 4.9045131250], [-76.2487531250, 4.8771464063], [-76.3138437500, 4.8497796875], [-76.3789343750, 4.8224129688], [-76.4440250000, 4.7950462500], [-76.5091156250, 4.7676795312], [-76.5742062500, 4.7403128125], [-76.6392968750, 4.7129460938], [-76.7043875000, 4.6855793750], [-76.7694781250, 4.6582126562], [-76.8345687500, 4.6308459375], [-76.8996593750, 4.6034792187], [-76.9647500000, 4.5761125000], [-77.0298406250, 4.5487457813], [-77.0949312500, 4.5213790625], [-77.1600218750, 4.4940123437], [-77.2251125000, 4.4666456250], [-77.2902031250, 4.4392789062], [-77.3552937500, 4.4119121875], [-77.4203843750, 4.3845454687], [-77.4854750000, 4.3571787500], [-77.5505656250, 4.3298120312], [-77.6156562500, 4.3024453125], [-77.6807468750, 4.2750785937], [-77.7458375000, 4.2477118750], [-77.8109281250, 4.2203451562], [-77.8760187500, 4.1929784375], [-77.9411093750, 4.1656117187], [-78.0062000000, 4.1382450000], [-78.0712906250, 4.1108782812], [-78.1363812500, 4.0835115625], [-78.2014718750, 4.0561448437], [-78.2665625000, 4.0287781250], [-78.3316531250, 4.0014114062], [-78.3967437500, 3.9740446875], [-78.4618343750, 3.9466779687], [-78.5269250000, 3.9193112500], [-78.5920156250, 3.8919445313], [-78.6571062500, 3.8645778125], [-78.7221968750, 3.8372110937], [-78.7872875000, 3.8098443750], [-78.8523781250, 3.7824776562], [-78.9174687500, 3.7551109375], [-78.9825593750, 3.7277442187], [-79.0476500000, 3.7003775000], [-79.1127406250, 3.6730107812], [-79.1778312500, 3.6456440625], [-79.2429218750, 3.6182773437], [-79.3080125000, 3.5909106250], [-79.3731031250, 3.5635439062], [-79.4381937500, 3.5361771875], [-79.5032843750, 3.5088104687], [-79.5683750000, 3.4814437500], [-79.6334656250, 3.4540770312], [-79.6985562500, 3.4267103125], [-79.7636468750, 3.3993435937], [-79.8287375000, 3.3719768750], [-79.8938281250, 3.3446101562], [-79.9589187500, 3.3172434375], [-80.0240093750, 3.2898767187], [-80.0891000000, 3.2625100000], [-80.1406875000, 3.2400912500], [-80.1922750000, 3.2176725000], [-80.2438625000, 3.1952537500], [-80.2954500000, 3.1728350000], [-80.3470375000, 3.1504162500], [-80.3986250000, 3.1279975000], [-80.4502125000, 3.1055787500], [-80.5018000000, 3.0831600000], [-80.5518875000, 3.0602015625], [-80.6019750000, 3.0372431250], [-80.6520625000, 3.0142846875], [-80.7021500000, 2.9913262500], [-80.7522375000, 2.9683678125], [-80.8023250000, 2.9454093750], [-80.8524125000, 2.9224509375], [-80.9025000000, 2.8994925000], [-80.9525875000, 2.8765340625], [-81.0026750000, 2.8535756250], [-81.0527625000, 2.8306171875], [-81.1028500000, 2.8076587500], [-81.1529375000, 2.7847003125], [-81.2030250000, 2.7617418750], [-81.2531125000, 2.7387834375], [-81.3032000000, 2.7158250000], [-81.3532875000, 2.6928665625], [-81.4033750000, 2.6699081250], [-81.4534625000, 2.6469496875], [-81.5035500000, 2.6239912500], [-81.5536375000, 2.6010328125], [-81.6037250000, 2.5780743750], [-81.6538125000, 2.5551159375], [-81.7039000000, 2.5321575000], [-81.7539875000, 2.5091990625], [-81.8040750000, 2.4862406250], [-81.8541625000, 2.4632821875], [-81.9042500000, 2.4403237500], [-81.9543375000, 2.4173653125], [-82.0044250000, 2.3944068750], [-82.0545125000, 2.3714484375], [-82.1046000000, 2.3484900000], [-82.1546875000, 2.3255315625], [-82.2047750000, 2.3025731250], [-82.2548625000, 2.2796146875], [-82.3049500000, 2.2566562500], [-82.3550375000, 2.2336978125], [-82.4051250000, 2.2107393750], [-82.4552125000, 2.1877809375], [-82.5053000000, 2.1648225000], [-82.5553875000, 2.1418640625], [-82.6054750000, 2.1189056250], [-82.6555625000, 2.0959471875], [-82.7056500000, 2.0729887500], [-82.7557375000, 2.0500303125], [-82.8058250000, 2.0270718750], [-82.8559125000, 2.0041134375], [-82.9060000000, 1.9811550000], [-82.9560875000, 1.9581965625], [-83.0061750000, 1.9352381250], [-83.0562625000, 1.9122796875], [-83.1063500000, 1.8893212500], [-83.1564375000, 1.8663628125], [-83.2065250000, 1.8434043750], [-83.2566125000, 1.8204459375], [-83.3067000000, 1.7974875000], [-83.3567875000, 1.7745290625], [-83.4068750000, 1.7515706250], [-83.4569625000, 1.7286121875], [-83.5070500000, 1.7056537500], [-83.5571375000, 1.6826953125], [-83.6072250000, 1.6597368750], [-83.6573125000, 1.6367784375], [-83.7074000000, 1.6138200000], [-83.7675953125, 1.5867637031], [-83.8277906250, 1.5597074063], [-83.8879859375, 1.5326511094], [-83.9481812500, 1.5055948125], [-84.0083765625, 1.4785385156], [-84.0685718750, 1.4514822188], [-84.1287671875, 1.4244259219], [-84.1889625000, 1.3973696250], [-84.2491578125, 1.3703133281], [-84.3093531250, 1.3432570313], [-84.3695484375, 1.3162007344], [-84.4297437500, 1.2891444375], [-84.4899390625, 1.2620881406], [-84.5501343750, 1.2350318438], [-84.6103296875, 1.2079755469], [-84.6705250000, 1.1809192500], [-84.7307203125, 1.1538629531], [-84.7909156250, 1.1268066563], [-84.8511109375, 1.0997503594], [-84.9113062500, 1.0726940625], [-84.9715015625, 1.0456377656], [-85.0316968750, 1.0185814688], [-85.0918921875, 0.9915251719], [-85.1520875000, 0.9644688750], [-85.2122828125, 0.9374125781], [-85.2724781250, 0.9103562813], [-85.3326734375, 0.8832999844], [-85.3928687500, 0.8562436875], [-85.4530640625, 0.8291873906], [-85.5132593750, 0.8021310938], [-85.5734546875, 0.7750747969], [-85.6336500000, 0.7480185000], [-85.6938453125, 0.7209622031], [-85.7540406250, 0.6939059063], [-85.8142359375, 0.6668496094], [-85.8744312500, 0.6397933125], [-85.9346265625, 0.6127370156], [-85.9948218750, 0.5856807188], [-86.0550171875, 0.5586244219], [-86.1152125000, 0.5315681250], [-86.1754078125, 0.5045118281], [-86.2356031250, 0.4774555313], [-86.2957984375, 0.4503992344], [-86.3559937500, 0.4233429375], [-86.4161890625, 0.3962866406], [-86.4763843750, 0.3692303438], [-86.5365796875, 0.3421740469], [-86.5967750000, 0.3151177500], [-86.6569703125, 0.2880614531], [-86.7171656250, 0.2610051563], [-86.7773609375, 0.2339488594], [-86.8375562500, 0.2068925625], [-86.8977515625, 0.1798362656], [-86.9579468750, 0.1527799688], [-87.0181421875, 0.1257236719], [-87.0783375000, 0.0986673750], [-87.1385328125, 0.0716110781], [-87.1987281250, 0.0445547813], [-87.2589234375, 0.0174984844], [-87.3191187500, -0.0095578125], [-87.3793140625, -0.0366141094], [-87.4395093750, -0.0636704062], [-87.4997046875, -0.0907267031], [-87.5599000000, -0.1177830000], [-87.4793625000, -0.1544385313], [-87.3988250000, -0.1910940625], [-87.3182875000, -0.2277495937], [-87.2377500000, -0.2644051250], [-87.1572125000, -0.3010606563], [-87.0766750000, -0.3377161875], [-86.9961375000, -0.3743717187], [-86.9156000000, -0.4110272500], [-86.8350625000, -0.4476827812], [-86.7545250000, -0.4843383125], [-86.6739875000, -0.5209938438], [-86.5934500000, -0.5576493750], [-86.5129125000, -0.5943049062], [-86.4323750000, -0.6309604375], [-86.3518375000, -0.6676159687], [-86.2713000000, -0.7042715000], [-86.1907625000, -0.7409270312], [-86.1102250000, -0.7775825625], [-86.0296875000, -0.8142380937], [-85.9491500000, -0.8508936250], [-85.8686125000, -0.8875491562], [-85.7880750000, -0.9242046875], [-85.7075375000, -0.9608602187], [-85.6270000000, -0.9975157500], [-85.5464625000, -1.0341712812], [-85.4659250000, -1.0708268125], [-85.3853875000, -1.1074823438], [-85.3048500000, -1.1441378750]]);
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
import math
import time

from stl import mesh, Dimension

from tkinter import Tk     # from tkinter import Tk for Python 3.x
from tkinter.filedialog import askopenfilename
from mpl_toolkits.mplot3d import art3d
from matplotlib import pyplot as plt
import solid
import os
import ezdxf
import shapely.geometry as sg
import subprocess
from GUI import getSCADPath



def outputSTL(From, To, PATH=getSCADPath()):
    subprocess.Popen(PATH + " -o " + To + " " + From)
    while not os.path.exists(To):
        time.sleep(1)


def get_size(i):
    x_list = [int(a) for a in str(i)]
    return len(x_list)



class Model:
    def __init__(self, model, fileName, location, layer, thickness):
        self.location = location
        self.code = None
        self.fileName = fileName
        self.stl = fileName + ".stl"
        self.layer = layer
        self.thickness = thickness
        self.maxz = (layer+1)*thickness
        self.dxf = fileName + ".dxf"
        self.scad = fileName + ".scad"
        self.model = model
        self.center = None
        self.width = 10
        self.mesh = None
        self.useable_area = None


    def get_code(self):
        max_dim = 0.05
        max_array = 6

        num = int(self.fileName)
        nums = [int(a) for a in str(num)]
        nums.reverse()
        indices = nums
        length = len(nums)

        print(indices)
        t = 0
        i = 0
        cubes = []
        x = 0
        y = 0
        width = 0.01
        while x <= max_dim:
            while y <= max_dim:
                print(indices)
                if nums == []:
                    break
                if indices[0] != 0:
                    cubes.append(solid.translate([x, y, 0])(solid.cube(size=t / 1000 + 0.001)))
                    y += max_dim / (max_array - 1)
                    nums[0] = nums[0] - 1
                else:
                    indices.pop(0)
                    t += 1
                i += 1
            x += max_dim / (max_array - 1)
            y = 0

        outside = solid.translate([-width / 2, -width / 2])(solid.cube(max_dim + (length - 1) / 1000 + 0.001 + width))
        self.code = solid.difference()(outside, cubes)
        self.code = solid.projection(cut=True)(self.code)
        solid.scad_render_to_file(self.code, self.location + "/code.scad")
        outputSTL(From=self.location+"/code.scad", To=self.location+"code.dxf", PATH=getSCADPath())
        # os.system("toSTL.sh renders/code.scad renders/code.dxf")
        return self.location+"/code.dxf"

    def download(self, type):
        if type =="stl":
            print("generating:" + self.location+"/"+ self.fileName+".stl")
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".stl")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".stl")
        elif type == "dxf":
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".dxf")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".dxf")

    def render(self):
        solid.scad_render_to_file(self.model, self.location+"/"+ self.fileName+'.scad')
        while not os.path.exists(self.location+"/"+self.fileName+".scad"):
            time.sleep(1)

    def get_points(self):
        doc = ezdxf.readfile(filename=self.location+"/"+ self.fileName+".dxf")
        msp = doc.modelspace()
        i=0
        lists = []
        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return [start, end]

        for e in msp.query("LINE"):
            line = helper(e)
            if not lists:
                lists.append([line])
            else:
                if lists[i][len(lists)-1][1] != line[0]:
                    lists.append([line])
                    i+=1
                else:
                    lists[i].append(line)

    def get_points2(self, FILE):
        doc = ezdxf.readfile(filename=FILE)
        msp = doc.modelspace()
        i = 0
        lists = []

        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return (start, end)

        for e in msp.query("LINE"):
            line = helper(e)
            if lists==[]:
                lists.append([line])
            else:
                if lists[i][len(lists[i]) - 1][1] != line[0]:
                    lists.append([line])
                    i += 1
                else:
                    lists[i].append(line)
        return lists

    def add_code(self):
        dxf = solid.projection(cut=False)(self.model)
        offset = solid.offset(r=-0.1)(dxf)
        solid.scad_render_to_file(offset, self.location+'/offset.scad')
        os.system("toSTL.sh renders/offset.scad renders/offset.dxf")
        lines = self.get_points2("renders/offset.dxf")
        x = lines[0][0][0][0]
        y = lines[0][0][0][1]
        print(x)
        print(y)
        code = solid.translate([x,y,0])(self.code)
        code = solid.linear_extrude(height=999)(code)
        save = self.model
        self.model = solid.projection()(solid.difference()(self.model, code))
        self.render()
        self.download("dxf")
        self.model = save

    def add_label(self, pos):
        # num = 12
        # minx, maxx, miny, maxy, minz, maxz = self.find_minmax()
        maxz = self.maxz
        # label = solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.5, halign="center"))
        # i=minx
        # print("x-len: " + str(maxx-minx))
        # print(i)
        # inc = (maxx-minx)/num
        # while minx <= i <= maxx:
        #     label = solid.union()(solid.translate([i, 0, maxz - 0.2])(solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.25, halign="center"))), label)
        #     i += inc
        #
        # l = label
        #
        # i =miny
        # while miny<= i <= maxy:
        #     print("y inc")
        #     l = solid.union()(solid.translate([0, i, 0])(label), l)
        #     i += 0.5
        for i in str(self.fileName):
            cur = pos[0]
            label = solid.translate([pos[0][0], pos[0][1], self.maxz-0.2])(solid.linear_extrude(height=(self.thickness)/3)(solid.text(str(i), size=0.5, halign="center", valign="center")))
            self.model = solid.difference()(self.model, label)
            pos.append(pos.pop(0))
            while abs(cur[0]-pos[0][0])<0.5 and abs(cur[1]-pos[0][1])<0.5:
                pos.append(pos.pop(0))



    def Center(self):

        volume, cog, inertia = self.mesh.get_mass_properties()
        print("Volume                                  = {0}".format(volume))
        print("Position of the center of gravity (COG) = {0}".format(cog))
        m_centered = solid.translate([-cog[0], -cog[1], 0])(
            self.model
        )
        return m_centered

    def find_minmax(self):
        minx = maxx = miny = maxy = minz = maxz = None
        for p in self.mesh.points:
            # p contains (x, y, z)
            if minx is None:
                minx = p[Dimension.X]
                maxx = p[Dimension.X]
                miny = p[Dimension.Y]
                maxy = p[Dimension.Y]
                minz = p[Dimension.Z]
                maxz = p[Dimension.Z]
            else:
                maxx = max(p[Dimension.X], maxx)
                minx = min(p[Dimension.X], minx)
                maxy = max(p[Dimension.Y], maxy)
                miny = min(p[Dimension.Y], miny)
                maxz = max(p[Dimension.Z], maxz)
                minz = min(p[Dimension.Z], minz)
        lenx = maxx - minx
        leny = maxy - miny
        lenz = maxz - minz
        return minx, maxx, miny, maxy, minz, maxz

    # def generate_Mesh(self):
    #     self.mesh = mesh.Mesh.from_file(self.location + "/" + str(int(self.fileName)//8)+ "b.stl")

    def get_top(self):
        top = solid.projection(cut=True)(solid.translate([0,0,-1*self.thickness*(self.layer+1)])(self.model))
        useable_area = solid.offset(r=-0.45)(top)
        self.useable_area = useable_area
        solid.scad_render_to_file(self.useable_area, self.location+'/' + 'toptemp.scad')
        outputSTL(From=self.location+'/' + 'toptemp.scad', To=self.location+"/top"+ self.dxf)

        # os.system("toSTL.sh out/toptemp.scad renders/" + self.fileName + ".dxf")
        dxf = DXF(self.location+"/top"+ self.dxf)
        min_p=dxf.points[0][0]
        points_ordered = dxf.points
        i=0
        while i <= len(dxf.points)+1:
            while math.sqrt((dxf.points[0][0]-dxf.points[1][0])**2+(dxf.points[0][1]-dxf.points[1][1])**2) > 0.1:
                dxf.points.insert(1, [(dxf.points[0][0]+dxf.points[1][0])/2, (dxf.points[0][1]+dxf.points[1][1])/2])
                i = i-1
            dxf.points.append(dxf.points.pop(0))
            i+=1
        for i in range(len(dxf.points)):
            dxf.points.append(dxf.points.pop(0))
            if dxf.points[0][0] < min_p:
                min_p = dxf.points[0][0]
                points_ordered = dxf.points.copy()
        dxf.points = points_ordered.copy()

        print(dxf.points)
        self.add_label(dxf.points)

class DXF:
    def __init__(self, file):
        self.file = file
        self.Lines = []
        self.points = []
        doc = ezdxf.readfile(self.file)
        msp = doc.modelspace()
        for e in msp:
            if e.dxftype() == "LINE":
                self.Lines.append(e)
                self.points.append([e.dxf.start[0], e.dxf.start[1]])
        # self.points.append([self.Lines[-1].dxf.end[0], self.Lines[-1].dxf.end[1]])
        self.area = None
        self.center = None
        self.polygon = sg.Polygon(self.points)

    def get_area(self):
        self.area = self.polygon.area
        return self.area

    def get_center(self):
        x_sum = 0
        y_sum =0
        for i in self.points:
            x_sum += i[0]
            y_sum += i[1]
        x_c = x_sum/len(self.points)
        y_c = y_sum/len(self.points)
        return (x_c, y_c)

    def split(self, maxdim):
        splits = []
        length = 0
        pieces = [[]]
        prev = self.points[0]
        for j in self.points:
            length = length + math.sqrt((prev[0]-j[0])**2+(prev[1]-j[1])**2)
            if length >= maxdim:
                pieces[-1].append(j)
                pieces.append([])
                length = 0
            pieces[-1].append(j)
            prev = j
        for j in pieces:
            j.insert(0, [0,0])
            piece = solid.linear_extrude(height=10)(solid.polygon(j))
            splits.append(piece)
        return splits
    def refine_points(self):
        i=0
        while i <= len(self.points)+1:
            while math.sqrt((self.points[0][0]-self.points[1][0])**2+(self.points[0][1]-self.points[1][1])**2) > 0.1:
                self.points.insert(1, [(self.points[0][0]+self.points[1][0])/2, (self.points[0][1]+self.points[1][1])/2])
                i = i-1
            self.points.append(self.points.pop(0))
            i+=1


if __name__== "__main__":
    test = DXF("C:/Users/Daniel/Documents/repos/Shell_Maker/output/0top_slice.dxf")
    test.refine_points()
    k = test.split(48)
    for i in range(len(k)):
        solid.scad_render_to_file(k[i], str(i) + ".scad")


 
 
************************************************/
