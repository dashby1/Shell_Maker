// Generated by SolidPython 1.1.3 on 2024-05-19 23:42:01


intersection() {
	difference() {
		intersection() {
			translate(v = [0, 0, 0]) {
				import(file = "CE3E3V2_Bottom_shell.stl", origin = [0, 0]);
			}
			translate(v = [-90.04029846191406, -32.690147399902344, 14]) {
				cube(size = [180.0806, 65.380295, 2]);
			}
		}
		linear_extrude(height = 999) {
			offset(r = -1) {
				import(file = "C:/Users/Daniel/Documents/repos/Shell_Maker/output/7top_slice.dxf", origin = [0, 0]);
			}
		}
	}
	translate(v = [0, 0, 14]) {
		linear_extrude(height = 10) {
			polygon(points = [[0, 0], [5.3385582813, -26.9302921875], [5.4285212500, -26.9438875000], [5.5184842188, -26.9574828125], [5.6084471875, -26.9710781250], [5.6984101562, -26.9846734375], [5.7883731250, -26.9982687500], [5.8783360937, -27.0118640625], [5.9682990625, -27.0254593750], [6.0582620312, -27.0390546875], [6.1482250000, -27.0526500000], [6.2381879688, -27.0662453125], [6.3281509375, -27.0798406250], [6.4181139063, -27.0934359375], [6.5080768750, -27.1070312500], [6.5980398438, -27.1206265625], [6.6880028125, -27.1342218750], [6.7779657812, -27.1478171875], [6.8679287500, -27.1614125000], [6.9578917188, -27.1750078125], [7.0478546875, -27.1886031250], [7.1378176562, -27.2021984375], [7.2277806250, -27.2157937500], [7.3177435937, -27.2293890625], [7.4077065625, -27.2429843750], [7.4976695312, -27.2565796875], [7.5876325000, -27.2701750000], [7.6775954687, -27.2837703125], [7.7675584375, -27.2973656250], [7.8575214062, -27.3109609375], [7.9474843750, -27.3245562500], [8.0374473437, -27.3381515625], [8.1274103125, -27.3517468750], [8.2173732812, -27.3653421875], [8.3073362500, -27.3789375000], [8.3972992187, -27.3925328125], [8.4872621875, -27.4061281250], [8.5772251562, -27.4197234375], [8.6671881250, -27.4333187500], [8.7571510938, -27.4469140625], [8.8471140625, -27.4605093750], [8.9370770312, -27.4741046875], [9.0270400000, -27.4877000000], [9.1243300000, -27.5001000000], [9.2216200000, -27.5125000000], [9.3189100000, -27.5249000000], [9.4162000000, -27.5373000000], [9.4733406250, -27.5438968750], [9.5304812500, -27.5504937500], [9.5876218750, -27.5570906250], [9.6447625000, -27.5636875000], [9.7019031250, -27.5702843750], [9.7590437500, -27.5768812500], [9.8161843750, -27.5834781250], [9.8733250000, -27.5900750000], [9.9304656250, -27.5966718750], [9.9876062500, -27.6032687500], [10.0447468750, -27.6098656250], [10.1018875000, -27.6164625000], [10.1590281250, -27.6230593750], [10.2161687500, -27.6296562500], [10.2733093750, -27.6362531250], [10.3304500000, -27.6428500000], [10.3875906250, -27.6494468750], [10.4447312500, -27.6560437500], [10.5018718750, -27.6626406250], [10.5590125000, -27.6692375000], [10.6161531250, -27.6758343750], [10.6732937500, -27.6824312500], [10.7304343750, -27.6890281250], [10.7875750000, -27.6956250000], [10.8447156250, -27.7022218750], [10.9018562500, -27.7088187500], [10.9589968750, -27.7154156250], [11.0161375000, -27.7220125000], [11.0732781250, -27.7286093750], [11.1304187500, -27.7352062500], [11.1875593750, -27.7418031250], [11.2447000000, -27.7484000000], [11.3018406250, -27.7549968750], [11.3589812500, -27.7615937500], [11.4161218750, -27.7681906250], [11.4732625000, -27.7747875000], [11.5304031250, -27.7813843750], [11.5875437500, -27.7879812500], [11.6446843750, -27.7945781250], [11.7018250000, -27.8011750000], [11.7589656250, -27.8077718750], [11.8161062500, -27.8143687500], [11.8732468750, -27.8209656250], [11.9303875000, -27.8275625000], [11.9875281250, -27.8341593750], [12.0446687500, -27.8407562500], [12.1018093750, -27.8473531250], [12.1589500000, -27.8539500000], [12.2160906250, -27.8605468750], [12.2732312500, -27.8671437500], [12.3303718750, -27.8737406250], [12.3875125000, -27.8803375000], [12.4446531250, -27.8869343750], [12.5017937500, -27.8935312500], [12.5589343750, -27.9001281250], [12.6160750000, -27.9067250000], [12.6732156250, -27.9133218750], [12.7303562500, -27.9199187500], [12.7874968750, -27.9265156250], [12.8446375000, -27.9331125000], [12.9017781250, -27.9397093750], [12.9589187500, -27.9463062500], [13.0160593750, -27.9529031250], [13.0732000000, -27.9595000000], [13.1690250000, -27.9697750000], [13.2648500000, -27.9800500000], [13.3606750000, -27.9903250000], [13.4565000000, -28.0006000000], [13.5068875000, -28.0051375000], [13.5572750000, -28.0096750000], [13.6076625000, -28.0142125000], [13.6580500000, -28.0187500000], [13.7084375000, -28.0232875000], [13.7588250000, -28.0278250000], [13.8092125000, -28.0323625000], [13.8596000000, -28.0369000000], [13.9125250000, -28.0408625000], [13.9654500000, -28.0448250000], [14.0183750000, -28.0487875000], [14.0713000000, -28.0527500000], [14.1242250000, -28.0567125000], [14.1771500000, -28.0606750000], [14.2300750000, -28.0646375000], [14.2830000000, -28.0686000000], [14.3386718750, -28.0722328125], [14.3943437500, -28.0758656250], [14.4500156250, -28.0794984375], [14.5056875000, -28.0831312500], [14.5613593750, -28.0867640625], [14.6170312500, -28.0903968750], [14.6727031250, -28.0940296875], [14.7283750000, -28.0976625000], [14.7840468750, -28.1012953125], [14.8397187500, -28.1049281250], [14.8953906250, -28.1085609375], [14.9510625000, -28.1121937500], [15.0067343750, -28.1158265625], [15.0624062500, -28.1194593750], [15.1180781250, -28.1230921875], [15.1737500000, -28.1267250000], [15.2294218750, -28.1303578125], [15.2850937500, -28.1339906250], [15.3407656250, -28.1376234375], [15.3964375000, -28.1412562500], [15.4521093750, -28.1448890625], [15.5077812500, -28.1485218750], [15.5634531250, -28.1521546875], [15.6191250000, -28.1557875000], [15.6747968750, -28.1594203125], [15.7304687500, -28.1630531250], [15.7861406250, -28.1666859375], [15.8418125000, -28.1703187500], [15.8974843750, -28.1739515625], [15.9531562500, -28.1775843750], [16.0088281250, -28.1812171875], [16.0645000000, -28.1848500000], [16.1201718750, -28.1884828125], [16.1758437500, -28.1921156250], [16.2315156250, -28.1957484375], [16.2871875000, -28.1993812500], [16.3428593750, -28.2030140625], [16.3985312500, -28.2066468750], [16.4542031250, -28.2102796875], [16.5098750000, -28.2139125000], [16.5655468750, -28.2175453125], [16.6212187500, -28.2211781250], [16.6768906250, -28.2248109375], [16.7325625000, -28.2284437500], [16.7882343750, -28.2320765625], [16.8439062500, -28.2357093750], [16.8995781250, -28.2393421875], [16.9552500000, -28.2429750000], [17.0109218750, -28.2466078125], [17.0665937500, -28.2502406250], [17.1222656250, -28.2538734375], [17.1779375000, -28.2575062500], [17.2336093750, -28.2611390625], [17.2892812500, -28.2647718750], [17.3449531250, -28.2684046875], [17.4006250000, -28.2720375000], [17.4562968750, -28.2756703125], [17.5119687500, -28.2793031250], [17.5676406250, -28.2829359375], [17.6233125000, -28.2865687500], [17.6789843750, -28.2902015625], [17.7346562500, -28.2938343750], [17.7903281250, -28.2974671875], [17.8460000000, -28.3011000000], [17.8973500000, -28.3034250000], [17.9487000000, -28.3057500000], [18.0000500000, -28.3080750000], [18.0514000000, -28.3104000000], [18.1344750000, -28.3122000000], [18.2175500000, -28.3140000000], [18.3006250000, -28.3158000000], [18.3837000000, -28.3176000000], [18.4793343750, -28.3186187500], [18.5749687500, -28.3196375000], [18.6706031250, -28.3206562500], [18.7662375000, -28.3216750000], [18.8618718750, -28.3226937500], [18.9575062500, -28.3237125000], [19.0531406250, -28.3247312500], [19.1487750000, -28.3257500000], [19.2444093750, -28.3267687500], [19.3400437500, -28.3277875000], [19.4356781250, -28.3288062500], [19.5313125000, -28.3298250000], [19.6269468750, -28.3308437500], [19.7225812500, -28.3318625000], [19.8182156250, -28.3328812500], [19.9138500000, -28.3339000000], [20.0094843750, -28.3349187500], [20.1051187500, -28.3359375000], [20.2007531250, -28.3369562500], [20.2963875000, -28.3379750000], [20.3920218750, -28.3389937500], [20.4876562500, -28.3400125000], [20.5832906250, -28.3410312500], [20.6789250000, -28.3420500000], [20.7745593750, -28.3430687500], [20.8701937500, -28.3440875000], [20.9658281250, -28.3451062500], [21.0614625000, -28.3461250000], [21.1570968750, -28.3471437500], [21.2527312500, -28.3481625000], [21.3483656250, -28.3491812500], [21.4440000000, -28.3502000000], [21.4968000000, -28.3491500000], [21.5496000000, -28.3481000000], [21.6036000000, -28.3467875000], [21.6576000000, -28.3454750000], [21.7116000000, -28.3441625000], [21.7656000000, -28.3428500000], [21.8196000000, -28.3415375000], [21.8736000000, -28.3402250000], [21.9276000000, -28.3389125000], [21.9816000000, -28.3376000000], [22.0356000000, -28.3362875000], [22.0896000000, -28.3349750000], [22.1436000000, -28.3336625000], [22.1976000000, -28.3323500000], [22.2516000000, -28.3310375000], [22.3056000000, -28.3297250000], [22.3596000000, -28.3284125000], [22.4136000000, -28.3271000000], [22.4960000000, -28.3248000000], [22.5584250000, -28.3213500000], [22.6208500000, -28.3179000000], [22.6832750000, -28.3144500000], [22.7457000000, -28.3110000000], [22.7978625000, -28.3078625000], [22.8500250000, -28.3047250000], [22.9021875000, -28.3015875000], [22.9543500000, -28.2984500000], [23.0065125000, -28.2953125000], [23.0586750000, -28.2921750000], [23.1108375000, -28.2890375000], [23.1630000000, -28.2859000000], [23.2157234375, -28.2820734375], [23.2684468750, -28.2782468750], [23.3211703125, -28.2744203125], [23.3738937500, -28.2705937500], [23.4266171875, -28.2667671875], [23.4793406250, -28.2629406250], [23.5320640625, -28.2591140625], [23.5847875000, -28.2552875000], [23.6375109375, -28.2514609375], [23.6902343750, -28.2476343750], [23.7429578125, -28.2438078125], [23.7956812500, -28.2399812500], [23.8484046875, -28.2361546875], [23.9011281250, -28.2323281250], [23.9538515625, -28.2285015625], [24.0065750000, -28.2246750000], [24.0592984375, -28.2208484375], [24.1120218750, -28.2170218750], [24.1647453125, -28.2131953125], [24.2174687500, -28.2093687500], [24.2701921875, -28.2055421875], [24.3229156250, -28.2017156250], [24.3756390625, -28.1978890625], [24.4283625000, -28.1940625000], [24.4810859375, -28.1902359375], [24.5338093750, -28.1864093750], [24.5865328125, -28.1825828125], [24.6392562500, -28.1787562500], [24.6919796875, -28.1749296875], [24.7447031250, -28.1711031250], [24.7974265625, -28.1672765625], [24.8501500000, -28.1634500000], [24.9028734375, -28.1596234375], [24.9555968750, -28.1557968750], [25.0083203125, -28.1519703125], [25.0610437500, -28.1481437500], [25.1137671875, -28.1443171875], [25.1664906250, -28.1404906250], [25.2192140625, -28.1366640625], [25.2719375000, -28.1328375000], [25.3246609375, -28.1290109375], [25.3773843750, -28.1251843750], [25.4301078125, -28.1213578125], [25.4828312500, -28.1175312500], [25.5355546875, -28.1137046875], [25.5882781250, -28.1098781250], [25.6410015625, -28.1060515625], [25.6937250000, -28.1022250000], [25.7464484375, -28.0983984375], [25.7991718750, -28.0945718750], [25.8518953125, -28.0907453125], [25.9046187500, -28.0869187500], [25.9573421875, -28.0830921875], [26.0100656250, -28.0792656250], [26.0627890625, -28.0754390625], [26.1155125000, -28.0716125000], [26.1682359375, -28.0677859375], [26.2209593750, -28.0639593750], [26.2736828125, -28.0601328125], [26.3264062500, -28.0563062500], [26.3791296875, -28.0524796875], [26.4318531250, -28.0486531250], [26.4845765625, -28.0448265625], [26.5373000000, -28.0410000000], [26.6148000000, -28.0339000000], [26.6789000000, -28.0272000000], [26.7430000000, -28.0205000000], [26.7999562500, -28.0128250000], [26.8569125000, -28.0051500000], [26.9138687500, -27.9974750000], [26.9708250000, -27.9898000000], [27.0277812500, -27.9821250000], [27.0847375000, -27.9744500000], [27.1416937500, -27.9667750000], [27.1986500000, -27.9591000000], [27.2556062500, -27.9514250000], [27.3125625000, -27.9437500000], [27.3695187500, -27.9360750000], [27.4264750000, -27.9284000000], [27.4834312500, -27.9207250000], [27.5403875000, -27.9130500000], [27.5973437500, -27.9053750000], [27.6543000000, -27.8977000000], [27.7112562500, -27.8900250000], [27.7682125000, -27.8823500000], [27.8251687500, -27.8746750000], [27.8821250000, -27.8670000000], [27.9390812500, -27.8593250000], [27.9960375000, -27.8516500000], [28.0529937500, -27.8439750000], [28.1099500000, -27.8363000000], [28.1669062500, -27.8286250000], [28.2238625000, -27.8209500000], [28.2808187500, -27.8132750000], [28.3377750000, -27.8056000000], [28.3947312500, -27.7979250000], [28.4516875000, -27.7902500000], [28.5086437500, -27.7825750000], [28.5656000000, -27.7749000000], [28.6158500000, -27.7686250000], [28.6661000000, -27.7623500000], [28.7163500000, -27.7560750000], [28.7666000000, -27.7498000000], [28.8419687500, -27.7369125000], [28.9173375000, -27.7240250000], [28.9927062500, -27.7111375000], [29.0680750000, -27.6982500000], [29.1434437500, -27.6853625000], [29.2188125000, -27.6724750000], [29.2941812500, -27.6595875000], [29.3695500000, -27.6467000000], [29.4449187500, -27.6338125000], [29.5202875000, -27.6209250000], [29.5956562500, -27.6080375000], [29.6710250000, -27.5951500000], [29.7463937500, -27.5822625000], [29.8217625000, -27.5693750000], [29.8971312500, -27.5564875000], [29.9725000000, -27.5436000000], [30.0681000000, -27.5272000000], [30.0782000000, -27.5253000000], [30.1304453125, -27.5129390625], [30.1826906250, -27.5005781250], [30.2349359375, -27.4882171875], [30.2871812500, -27.4758562500], [30.3394265625, -27.4634953125], [30.3916718750, -27.4511343750], [30.4439171875, -27.4387734375], [30.4961625000, -27.4264125000], [30.5484078125, -27.4140515625], [30.6006531250, -27.4016906250], [30.6528984375, -27.3893296875], [30.7051437500, -27.3769687500], [30.7573890625, -27.3646078125], [30.8096343750, -27.3522468750], [30.8618796875, -27.3398859375], [30.9141250000, -27.3275250000], [30.9663703125, -27.3151640625], [31.0186156250, -27.3028031250], [31.0708609375, -27.2904421875], [31.1231062500, -27.2780812500], [31.1753515625, -27.2657203125], [31.2275968750, -27.2533593750], [31.2798421875, -27.2409984375], [31.3320875000, -27.2286375000], [31.3843328125, -27.2162765625], [31.4365781250, -27.2039156250], [31.4888234375, -27.1915546875], [31.5410687500, -27.1791937500], [31.5933140625, -27.1668328125], [31.6455593750, -27.1544718750], [31.6978046875, -27.1421109375], [31.7500500000, -27.1297500000], [31.8022953125, -27.1173890625], [31.8545406250, -27.1050281250], [31.9067859375, -27.0926671875], [31.9590312500, -27.0803062500], [32.0112765625, -27.0679453125], [32.0635218750, -27.0555843750], [32.1157671875, -27.0432234375], [32.1680125000, -27.0308625000], [32.2202578125, -27.0185015625], [32.2725031250, -27.0061406250], [32.3247484375, -26.9937796875], [32.3769937500, -26.9814187500], [32.4292390625, -26.9690578125], [32.4814843750, -26.9566968750], [32.5337296875, -26.9443359375], [32.5859750000, -26.9319750000], [32.6382203125, -26.9196140625], [32.6904656250, -26.9072531250], [32.7427109375, -26.8948921875], [32.7949562500, -26.8825312500], [32.8472015625, -26.8701703125], [32.8994468750, -26.8578093750], [32.9516921875, -26.8454484375], [33.0039375000, -26.8330875000], [33.0561828125, -26.8207265625], [33.1084281250, -26.8083656250], [33.1606734375, -26.7960046875], [33.2129187500, -26.7836437500], [33.2651640625, -26.7712828125], [33.3174093750, -26.7589218750], [33.3696546875, -26.7465609375], [33.4219000000, -26.7342000000], [33.4759312500, -26.7213937500], [33.5299625000, -26.7085875000], [33.5839937500, -26.6957812500], [33.6380250000, -26.6829750000], [33.6920562500, -26.6701687500], [33.7460875000, -26.6573625000], [33.8001187500, -26.6445562500], [33.8541500000, -26.6317500000], [33.9081812500, -26.6189437500], [33.9622125000, -26.6061375000], [34.0162437500, -26.5933312500], [34.0702750000, -26.5805250000], [34.1243062500, -26.5677187500], [34.1783375000, -26.5549125000], [34.2323687500, -26.5421062500], [34.2864000000, -26.5293000000], [34.2916000000, -26.5278000000], [34.3558062500, -26.5077500000], [34.4200125000, -26.4877000000], [34.4842187500, -26.4676500000], [34.5484250000, -26.4476000000], [34.6126312500, -26.4275500000], [34.6768375000, -26.4075000000], [34.7410437500, -26.3874500000], [34.8052500000, -26.3674000000], [34.8694562500, -26.3473500000], [34.9336625000, -26.3273000000], [34.9978687500, -26.3072500000], [35.0620750000, -26.2872000000], [35.1262812500, -26.2671500000], [35.1904875000, -26.2471000000], [35.2546937500, -26.2270500000], [35.3189000000, -26.2070000000], [35.3831062500, -26.1869500000], [35.4473125000, -26.1669000000], [35.5115187500, -26.1468500000], [35.5757250000, -26.1268000000], [35.6399312500, -26.1067500000], [35.7041375000, -26.0867000000], [35.7683437500, -26.0666500000], [35.8325500000, -26.0466000000], [35.8967562500, -26.0265500000], [35.9609625000, -26.0065000000], [36.0251687500, -25.9864500000], [36.0893750000, -25.9664000000], [36.1535812500, -25.9463500000], [36.2177875000, -25.9263000000], [36.2819937500, -25.9062500000], [36.3462000000, -25.8862000000], [36.4341500000, -25.8587500000], [36.5221000000, -25.8313000000], [36.5702437500, -25.8139156250], [36.6183875000, -25.7965312500], [36.6665312500, -25.7791468750], [36.7146750000, -25.7617625000], [36.7628187500, -25.7443781250], [36.8109625000, -25.7269937500], [36.8591062500, -25.7096093750], [36.9072500000, -25.6922250000], [36.9553937500, -25.6748406250], [37.0035375000, -25.6574562500], [37.0516812500, -25.6400718750], [37.0998250000, -25.6226875000], [37.1479687500, -25.6053031250], [37.1961125000, -25.5879187500], [37.2442562500, -25.5705343750], [37.2924000000, -25.5531500000], [37.3405437500, -25.5357656250], [37.3886875000, -25.5183812500], [37.4368312500, -25.5009968750], [37.4849750000, -25.4836125000], [37.5331187500, -25.4662281250], [37.5812625000, -25.4488437500], [37.6294062500, -25.4314593750], [37.6775500000, -25.4140750000], [37.7256937500, -25.3966906250], [37.7738375000, -25.3793062500], [37.8219812500, -25.3619218750], [37.8701250000, -25.3445375000], [37.9182687500, -25.3271531250], [37.9664125000, -25.3097687500], [38.0145562500, -25.2923843750], [38.0627000000, -25.2750000000], [38.1107375000, -25.2577125000], [38.1587750000, -25.2404250000], [38.2068125000, -25.2231375000], [38.2548500000, -25.2058500000], [38.3028875000, -25.1885625000], [38.3509250000, -25.1712750000], [38.3989625000, -25.1539875000], [38.4470000000, -25.1367000000], [38.4607000000, -25.1315000000], [38.5116703125, -25.1093890625], [38.5626406250, -25.0872781250], [38.6136109375, -25.0651671875], [38.6645812500, -25.0430562500], [38.7155515625, -25.0209453125], [38.7665218750, -24.9988343750], [38.8174921875, -24.9767234375], [38.8684625000, -24.9546125000], [38.9194328125, -24.9325015625], [38.9704031250, -24.9103906250], [39.0213734375, -24.8882796875], [39.0723437500, -24.8661687500], [39.1233140625, -24.8440578125], [39.1742843750, -24.8219468750], [39.2252546875, -24.7998359375], [39.2762250000, -24.7777250000], [39.3271953125, -24.7556140625], [39.3781656250, -24.7335031250], [39.4291359375, -24.7113921875], [39.4801062500, -24.6892812500], [39.5310765625, -24.6671703125], [39.5820468750, -24.6450593750], [39.6330171875, -24.6229484375], [39.6839875000, -24.6008375000], [39.7349578125, -24.5787265625], [39.7859281250, -24.5566156250], [39.8368984375, -24.5345046875], [39.8878687500, -24.5123937500], [39.9388390625, -24.4902828125], [39.9898093750, -24.4681718750], [40.0407796875, -24.4460609375], [40.0917500000, -24.4239500000], [40.1427203125, -24.4018390625], [40.1936906250, -24.3797281250], [40.2446609375, -24.3576171875], [40.2956312500, -24.3355062500], [40.3466015625, -24.3133953125], [40.3975718750, -24.2912843750], [40.4485421875, -24.2691734375], [40.4995125000, -24.2470625000], [40.5504828125, -24.2249515625], [40.6014531250, -24.2028406250], [40.6524234375, -24.1807296875], [40.7033937500, -24.1586187500], [40.7543640625, -24.1365078125], [40.8053343750, -24.1143968750], [40.8563046875, -24.0922859375], [40.9072750000, -24.0701750000], [40.9582453125, -24.0480640625], [41.0092156250, -24.0259531250], [41.0601859375, -24.0038421875], [41.1111562500, -23.9817312500], [41.1621265625, -23.9596203125], [41.2130968750, -23.9375093750], [41.2640671875, -23.9153984375], [41.3150375000, -23.8932875000], [41.3660078125, -23.8711765625], [41.4169781250, -23.8490656250], [41.4679484375, -23.8269546875], [41.5189187500, -23.8048437500], [41.5698890625, -23.7827328125], [41.6208593750, -23.7606218750], [41.6718296875, -23.7385109375], [41.7228000000, -23.7164000000], [41.7945125000, -23.6864875000], [41.8662250000, -23.6565750000], [41.9379375000, -23.6266625000], [42.0096500000, -23.5967500000], [42.0813625000, -23.5668375000], [42.1530750000, -23.5369250000], [42.2247875000, -23.5070125000], [42.2965000000, -23.4771000000], [42.3826000000, -23.4367000000], [42.4687000000, -23.3963000000], [42.5349500000, -23.3631625000], [42.6012000000, -23.3300250000], [42.6674500000, -23.2968875000], [42.7337000000, -23.2637500000], [42.7999500000, -23.2306125000], [42.8662000000, -23.1974750000], [42.9324500000, -23.1643375000], [42.9987000000, -23.1312000000], [43.0649500000, -23.0980625000], [43.1312000000, -23.0649250000], [43.1974500000, -23.0317875000], [43.2637000000, -22.9986500000], [43.3299500000, -22.9655125000], [43.3962000000, -22.9323750000], [43.4624500000, -22.8992375000], [43.5287000000, -22.8661000000], [43.6113500000, -22.8261000000], [43.6940000000, -22.7861000000], [43.7427000000, -22.7596656250], [43.7914000000, -22.7332312500], [43.8401000000, -22.7067968750], [43.8888000000, -22.6803625000], [43.9375000000, -22.6539281250], [43.9862000000, -22.6274937500], [44.0349000000, -22.6010593750], [44.0836000000, -22.5746250000], [44.1323000000, -22.5481906250], [44.1810000000, -22.5217562500], [44.2297000000, -22.4953218750], [44.2784000000, -22.4688875000], [44.3271000000, -22.4424531250], [44.3758000000, -22.4160187500], [44.4245000000, -22.3895843750], [44.4732000000, -22.3631500000], [44.5219000000, -22.3367156250], [44.5706000000, -22.3102812500], [44.6193000000, -22.2838468750], [44.6680000000, -22.2574125000], [44.7167000000, -22.2309781250], [44.7654000000, -22.2045437500], [44.8141000000, -22.1781093750], [44.8628000000, -22.1516750000], [44.9115000000, -22.1252406250], [44.9602000000, -22.0988062500], [45.0089000000, -22.0723718750], [45.0576000000, -22.0459375000], [45.1063000000, -22.0195031250], [45.1550000000, -21.9930687500], [45.2037000000, -21.9666343750], [45.2524000000, -21.9402000000], [45.3360750000, -21.8952250000], [45.4197500000, -21.8502500000], [45.5034250000, -21.8052750000], [45.5871000000, -21.7603000000], [45.6374000000, -21.7318000000], [45.6860609375, -21.7014421875], [45.7347218750, -21.6710843750], [45.7833828125, -21.6407265625], [45.8320437500, -21.6103687500], [45.8807046875, -21.5800109375], [45.9293656250, -21.5496531250], [45.9780265625, -21.5192953125], [46.0266875000, -21.4889375000], [46.0753484375, -21.4585796875], [46.1240093750, -21.4282218750], [46.1726703125, -21.3978640625], [46.2213312500, -21.3675062500], [46.2699921875, -21.3371484375], [46.3186531250, -21.3067906250], [46.3673140625, -21.2764328125], [46.4159750000, -21.2460750000], [46.4646359375, -21.2157171875], [46.5132968750, -21.1853593750], [46.5619578125, -21.1550015625], [46.6106187500, -21.1246437500], [46.6592796875, -21.0942859375], [46.7079406250, -21.0639281250], [46.7566015625, -21.0335703125], [46.8052625000, -21.0032125000], [46.8539234375, -20.9728546875], [46.9025843750, -20.9424968750], [46.9512453125, -20.9121390625], [46.9999062500, -20.8817812500], [47.0485671875, -20.8514234375], [47.0972281250, -20.8210656250], [47.1458890625, -20.7907078125], [47.1945500000, -20.7603500000], [47.2432109375, -20.7299921875], [47.2918718750, -20.6996343750], [47.3405328125, -20.6692765625], [47.3891937500, -20.6389187500], [47.4378546875, -20.6085609375], [47.4865156250, -20.5782031250], [47.5351765625, -20.5478453125], [47.5838375000, -20.5174875000], [47.6324984375, -20.4871296875], [47.6811593750, -20.4567718750], [47.7298203125, -20.4264140625], [47.7784812500, -20.3960562500], [47.8271421875, -20.3656984375], [47.8758031250, -20.3353406250], [47.9244640625, -20.3049828125], [47.9731250000, -20.2746250000], [48.0217859375, -20.2442671875], [48.0704468750, -20.2139093750], [48.1191078125, -20.1835515625], [48.1677687500, -20.1531937500], [48.2164296875, -20.1228359375], [48.2650906250, -20.0924781250], [48.3137515625, -20.0621203125], [48.3624125000, -20.0317625000], [48.4110734375, -20.0014046875], [48.4597343750, -19.9710468750], [48.5083953125, -19.9406890625], [48.5570562500, -19.9103312500], [48.6057171875, -19.8799734375], [48.6543781250, -19.8496156250], [48.7030390625, -19.8192578125], [48.7517000000, -19.7889000000], [48.8167000000, -19.7486750000], [48.8817000000, -19.7084500000], [48.9467000000, -19.6682250000], [49.0117000000, -19.6280000000], [49.0174000000, -19.6241000000], [49.0756312500, -19.5831687500], [49.1338625000, -19.5422375000], [49.1920937500, -19.5013062500], [49.2503250000, -19.4603750000], [49.3085562500, -19.4194437500], [49.3667875000, -19.3785125000], [49.4250187500, -19.3375812500], [49.4832500000, -19.2966500000], [49.5414812500, -19.2557187500], [49.5997125000, -19.2147875000], [49.6579437500, -19.1738562500], [49.7161750000, -19.1329250000], [49.7744062500, -19.0919937500], [49.8326375000, -19.0510625000], [49.8908687500, -19.0101312500], [49.9491000000, -18.9692000000], [50.0078500000, -18.9278750000], [50.0666000000, -18.8865500000], [50.1253500000, -18.8452250000], [50.1841000000, -18.8039000000], [50.2398031250, -18.7611687500], [50.2955062500, -18.7184375000], [50.3512093750, -18.6757062500], [50.4069125000, -18.6329750000], [50.4626156250, -18.5902437500], [50.5183187500, -18.5475125000], [50.5740218750, -18.5047812500], [50.6297250000, -18.4620500000], [50.6854281250, -18.4193187500], [50.7411312500, -18.3765875000], [50.7968343750, -18.3338562500], [50.8525375000, -18.2911250000], [50.9082406250, -18.2483937500], [50.9639437500, -18.2056625000], [51.0196468750, -18.1629312500]]);
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
import math
import time

from stl import mesh, Dimension

from tkinter import Tk     # from tkinter import Tk for Python 3.x
from tkinter.filedialog import askopenfilename
from mpl_toolkits.mplot3d import art3d
from matplotlib import pyplot as plt
import solid
import os
import ezdxf
import shapely.geometry as sg
import subprocess
from GUI import getSCADPath



def outputSTL(From, To, PATH=getSCADPath()):
    subprocess.Popen(PATH + " -o " + To + " " + From)
    while not os.path.exists(To):
        time.sleep(1)


def get_size(i):
    x_list = [int(a) for a in str(i)]
    return len(x_list)



class Model:
    def __init__(self, model, fileName, location, layer, thickness):
        self.location = location
        self.code = None
        self.fileName = fileName
        self.stl = fileName + ".stl"
        self.layer = layer
        self.thickness = thickness
        self.maxz = (layer+1)*thickness
        self.dxf = fileName + ".dxf"
        self.scad = fileName + ".scad"
        self.model = model
        self.center = None
        self.width = 10
        self.mesh = None
        self.useable_area = None


    def get_code(self):
        max_dim = 0.05
        max_array = 6

        num = int(self.fileName)
        nums = [int(a) for a in str(num)]
        nums.reverse()
        indices = nums
        length = len(nums)

        print(indices)
        t = 0
        i = 0
        cubes = []
        x = 0
        y = 0
        width = 0.01
        while x <= max_dim:
            while y <= max_dim:
                print(indices)
                if nums == []:
                    break
                if indices[0] != 0:
                    cubes.append(solid.translate([x, y, 0])(solid.cube(size=t / 1000 + 0.001)))
                    y += max_dim / (max_array - 1)
                    nums[0] = nums[0] - 1
                else:
                    indices.pop(0)
                    t += 1
                i += 1
            x += max_dim / (max_array - 1)
            y = 0

        outside = solid.translate([-width / 2, -width / 2])(solid.cube(max_dim + (length - 1) / 1000 + 0.001 + width))
        self.code = solid.difference()(outside, cubes)
        self.code = solid.projection(cut=True)(self.code)
        solid.scad_render_to_file(self.code, self.location + "/code.scad")
        outputSTL(From=self.location+"/code.scad", To=self.location+"code.dxf", PATH=getSCADPath())
        # os.system("toSTL.sh renders/code.scad renders/code.dxf")
        return self.location+"/code.dxf"

    def download(self, type):
        if type =="stl":
            print("generating:" + self.location+"/"+ self.fileName+".stl")
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".stl")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".stl")
        elif type == "dxf":
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".dxf")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".dxf")

    def render(self):
        solid.scad_render_to_file(self.model, self.location+"/"+ self.fileName+'.scad')
        while not os.path.exists(self.location+"/"+self.fileName+".scad"):
            time.sleep(1)

    def get_points(self):
        doc = ezdxf.readfile(filename=self.location+"/"+ self.fileName+".dxf")
        msp = doc.modelspace()
        i=0
        lists = []
        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return [start, end]

        for e in msp.query("LINE"):
            line = helper(e)
            if not lists:
                lists.append([line])
            else:
                if lists[i][len(lists)-1][1] != line[0]:
                    lists.append([line])
                    i+=1
                else:
                    lists[i].append(line)

    def get_points2(self, FILE):
        doc = ezdxf.readfile(filename=FILE)
        msp = doc.modelspace()
        i = 0
        lists = []

        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return (start, end)

        for e in msp.query("LINE"):
            line = helper(e)
            if lists==[]:
                lists.append([line])
            else:
                if lists[i][len(lists[i]) - 1][1] != line[0]:
                    lists.append([line])
                    i += 1
                else:
                    lists[i].append(line)
        return lists

    def add_code(self):
        dxf = solid.projection(cut=False)(self.model)
        offset = solid.offset(r=-0.1)(dxf)
        solid.scad_render_to_file(offset, self.location+'/offset.scad')
        os.system("toSTL.sh renders/offset.scad renders/offset.dxf")
        lines = self.get_points2("renders/offset.dxf")
        x = lines[0][0][0][0]
        y = lines[0][0][0][1]
        print(x)
        print(y)
        code = solid.translate([x,y,0])(self.code)
        code = solid.linear_extrude(height=999)(code)
        save = self.model
        self.model = solid.projection()(solid.difference()(self.model, code))
        self.render()
        self.download("dxf")
        self.model = save

    def add_label(self, pos):
        # num = 12
        # minx, maxx, miny, maxy, minz, maxz = self.find_minmax()
        maxz = self.maxz
        # label = solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.5, halign="center"))
        # i=minx
        # print("x-len: " + str(maxx-minx))
        # print(i)
        # inc = (maxx-minx)/num
        # while minx <= i <= maxx:
        #     label = solid.union()(solid.translate([i, 0, maxz - 0.2])(solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.25, halign="center"))), label)
        #     i += inc
        #
        # l = label
        #
        # i =miny
        # while miny<= i <= maxy:
        #     print("y inc")
        #     l = solid.union()(solid.translate([0, i, 0])(label), l)
        #     i += 0.5
        for i in str(self.fileName):
            cur = pos[0]
            label = solid.translate([pos[0][0], pos[0][1], self.maxz-0.2])(solid.linear_extrude(height=(self.thickness)/3)(solid.text(str(i), size=0.5, halign="center", valign="center")))
            self.model = solid.difference()(self.model, label)
            pos.append(pos.pop(0))
            while abs(cur[0]-pos[0][0])<0.5 and abs(cur[1]-pos[0][1])<0.5:
                pos.append(pos.pop(0))



    def Center(self):

        volume, cog, inertia = self.mesh.get_mass_properties()
        print("Volume                                  = {0}".format(volume))
        print("Position of the center of gravity (COG) = {0}".format(cog))
        m_centered = solid.translate([-cog[0], -cog[1], 0])(
            self.model
        )
        return m_centered

    def find_minmax(self):
        minx = maxx = miny = maxy = minz = maxz = None
        for p in self.mesh.points:
            # p contains (x, y, z)
            if minx is None:
                minx = p[Dimension.X]
                maxx = p[Dimension.X]
                miny = p[Dimension.Y]
                maxy = p[Dimension.Y]
                minz = p[Dimension.Z]
                maxz = p[Dimension.Z]
            else:
                maxx = max(p[Dimension.X], maxx)
                minx = min(p[Dimension.X], minx)
                maxy = max(p[Dimension.Y], maxy)
                miny = min(p[Dimension.Y], miny)
                maxz = max(p[Dimension.Z], maxz)
                minz = min(p[Dimension.Z], minz)
        lenx = maxx - minx
        leny = maxy - miny
        lenz = maxz - minz
        return minx, maxx, miny, maxy, minz, maxz

    # def generate_Mesh(self):
    #     self.mesh = mesh.Mesh.from_file(self.location + "/" + str(int(self.fileName)//8)+ "b.stl")

    def get_top(self):
        top = solid.projection(cut=True)(solid.translate([0,0,-1*self.thickness*(self.layer+1)])(self.model))
        useable_area = solid.offset(r=-0.45)(top)
        self.useable_area = useable_area
        solid.scad_render_to_file(self.useable_area, self.location+'/' + 'toptemp.scad')
        outputSTL(From=self.location+'/' + 'toptemp.scad', To=self.location+"/top"+ self.dxf)

        # os.system("toSTL.sh out/toptemp.scad renders/" + self.fileName + ".dxf")
        dxf = DXF(self.location+"/top"+ self.dxf)
        min_p=dxf.points[0][0]
        points_ordered = dxf.points
        i=0
        while i <= len(dxf.points)+1:
            while math.sqrt((dxf.points[0][0]-dxf.points[1][0])**2+(dxf.points[0][1]-dxf.points[1][1])**2) > 0.1:
                dxf.points.insert(1, [(dxf.points[0][0]+dxf.points[1][0])/2, (dxf.points[0][1]+dxf.points[1][1])/2])
                i = i-1
            dxf.points.append(dxf.points.pop(0))
            i+=1
        for i in range(len(dxf.points)):
            dxf.points.append(dxf.points.pop(0))
            if dxf.points[0][0] < min_p:
                min_p = dxf.points[0][0]
                points_ordered = dxf.points.copy()
        dxf.points = points_ordered.copy()

        print(dxf.points)
        self.add_label(dxf.points)

class DXF:
    def __init__(self, file):
        self.file = file
        self.Lines = []
        self.points = []
        doc = ezdxf.readfile(self.file)
        msp = doc.modelspace()
        for e in msp:
            if e.dxftype() == "LINE":
                self.Lines.append(e)
                self.points.append([e.dxf.start[0], e.dxf.start[1]])
        # self.points.append([self.Lines[-1].dxf.end[0], self.Lines[-1].dxf.end[1]])
        self.area = None
        self.center = None
        self.polygon = sg.Polygon(self.points)

    def get_area(self):
        self.area = self.polygon.area
        return self.area

    def get_center(self):
        x_sum = 0
        y_sum =0
        for i in self.points:
            x_sum += i[0]
            y_sum += i[1]
        x_c = x_sum/len(self.points)
        y_c = y_sum/len(self.points)
        return (x_c, y_c)

    def split(self, maxdim):
        splits = []
        length = 0
        pieces = [[]]
        prev = self.points[0]
        for j in self.points:
            length = length + math.sqrt((prev[0]-j[0])**2+(prev[1]-j[1])**2)
            if length >= maxdim:
                pieces[-1].append(j)
                pieces.append([])
                length = 0
            pieces[-1].append(j)
            prev = j
        for j in pieces:
            j.insert(0, [0,0])
            piece = solid.linear_extrude(height=10)(solid.polygon(j))
            splits.append(piece)
        return splits
    def refine_points(self):
        i=0
        while i <= len(self.points)+1:
            while math.sqrt((self.points[0][0]-self.points[1][0])**2+(self.points[0][1]-self.points[1][1])**2) > 0.1:
                self.points.insert(1, [(self.points[0][0]+self.points[1][0])/2, (self.points[0][1]+self.points[1][1])/2])
                i = i-1
            self.points.append(self.points.pop(0))
            i+=1


if __name__== "__main__":
    test = DXF("C:/Users/Daniel/Documents/repos/Shell_Maker/output/0top_slice.dxf")
    test.refine_points()
    k = test.split(48)
    for i in range(len(k)):
        solid.scad_render_to_file(k[i], str(i) + ".scad")


 
 
************************************************/
