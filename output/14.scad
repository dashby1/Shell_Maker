// Generated by SolidPython 1.1.3 on 2024-05-26 01:58:55


intersection() {
	difference() {
		intersection() {
			translate(v = [0, 0, 0]) {
				import(file = "CE3E3V2_Bottom_shell.stl", origin = [0, 0]);
			}
			translate(v = [-90.04029846191406, -32.690147399902344, 2]) {
				cube(size = [180.0806, 65.380295, 2]);
			}
		}
		linear_extrude(height = 999) {
			offset(r = -1) {
				import(file = "C:/Users/Daniel/Documents/repos/Shell_Maker/output/1top_slice.dxf", origin = [0, 0]);
			}
		}
	}
	translate(v = [0, 0, 2]) {
		linear_extrude(height = 10) {
			polygon(points = [[0, 0], [-28.4176398438, 21.9539414062], [-28.4344906250, 21.8842843750], [-28.4513414063, 21.8146273438], [-28.4681921875, 21.7449703125], [-28.4850429688, 21.6753132813], [-28.5018937500, 21.6056562500], [-28.5187445313, 21.5359992188], [-28.5355953125, 21.4663421875], [-28.5524460937, 21.3966851563], [-28.5692968750, 21.3270281250], [-28.5861476562, 21.2573710938], [-28.6029984375, 21.1877140625], [-28.6198492187, 21.1180570313], [-28.6367000000, 21.0484000000], [-28.6402000000, 20.9528500000], [-28.6437000000, 20.8573000000], [-28.6472000000, 20.7617500000], [-28.6507000000, 20.6662000000], [-28.6542000000, 20.5706500000], [-28.6577000000, 20.4751000000], [-28.6612000000, 20.3795500000], [-28.6647000000, 20.2840000000], [-28.7137187500, 20.2725406250], [-28.7627375000, 20.2610812500], [-28.8117562500, 20.2496218750], [-28.8607750000, 20.2381625000], [-28.9097937500, 20.2267031250], [-28.9588125000, 20.2152437500], [-29.0078312500, 20.2037843750], [-29.0568500000, 20.1923250000], [-29.1058687500, 20.1808656250], [-29.1548875000, 20.1694062500], [-29.2039062500, 20.1579468750], [-29.2529250000, 20.1464875000], [-29.3019437500, 20.1350281250], [-29.3509625000, 20.1235687500], [-29.3999812500, 20.1121093750], [-29.4490000000, 20.1006500000], [-29.4980187500, 20.0891906250], [-29.5470375000, 20.0777312500], [-29.5960562500, 20.0662718750], [-29.6450750000, 20.0548125000], [-29.6940937500, 20.0433531250], [-29.7431125000, 20.0318937500], [-29.7921312500, 20.0204343750], [-29.8411500000, 20.0089750000], [-29.8901687500, 19.9975156250], [-29.9391875000, 19.9860562500], [-29.9882062500, 19.9745968750], [-30.0372250000, 19.9631375000], [-30.0862437500, 19.9516781250], [-30.1352625000, 19.9402187500], [-30.1842812500, 19.9287593750], [-30.2333000000, 19.9173000000], [-30.2991734375, 19.9003937500], [-30.3650468750, 19.8834875000], [-30.4309203125, 19.8665812500], [-30.4967937500, 19.8496750000], [-30.5626671875, 19.8327687500], [-30.6285406250, 19.8158625000], [-30.6944140625, 19.7989562500], [-30.7602875000, 19.7820500000], [-30.8261609375, 19.7651437500], [-30.8920343750, 19.7482375000], [-30.9579078125, 19.7313312500], [-31.0237812500, 19.7144250000], [-31.0896546875, 19.6975187500], [-31.1555281250, 19.6806125000], [-31.2214015625, 19.6637062500], [-31.2872750000, 19.6468000000], [-31.3531484375, 19.6298937500], [-31.4190218750, 19.6129875000], [-31.4848953125, 19.5960812500], [-31.5507687500, 19.5791750000], [-31.6166421875, 19.5622687500], [-31.6825156250, 19.5453625000], [-31.7483890625, 19.5284562500], [-31.8142625000, 19.5115500000], [-31.8801359375, 19.4946437500], [-31.9460093750, 19.4777375000], [-32.0118828125, 19.4608312500], [-32.0777562500, 19.4439250000], [-32.1436296875, 19.4270187500], [-32.2095031250, 19.4101125000], [-32.2753765625, 19.3932062500], [-32.3412500000, 19.3763000000], [-32.4071234375, 19.3593937500], [-32.4729968750, 19.3424875000], [-32.5388703125, 19.3255812500], [-32.6047437500, 19.3086750000], [-32.6706171875, 19.2917687500], [-32.7364906250, 19.2748625000], [-32.8023640625, 19.2579562500], [-32.8682375000, 19.2410500000], [-32.9341109375, 19.2241437500], [-32.9999843750, 19.2072375000], [-33.0658578125, 19.1903312500], [-33.1317312500, 19.1734250000], [-33.1976046875, 19.1565187500], [-33.2634781250, 19.1396125000], [-33.3293515625, 19.1227062500], [-33.3952250000, 19.1058000000], [-33.4610984375, 19.0888937500], [-33.5269718750, 19.0719875000], [-33.5928453125, 19.0550812500], [-33.6587187500, 19.0381750000], [-33.7245921875, 19.0212687500], [-33.7904656250, 19.0043625000], [-33.8563390625, 18.9874562500], [-33.9222125000, 18.9705500000], [-33.9880859375, 18.9536437500], [-34.0539593750, 18.9367375000], [-34.1198328125, 18.9198312500], [-34.1857062500, 18.9029250000], [-34.2515796875, 18.8860187500], [-34.3174531250, 18.8691125000], [-34.3833265625, 18.8522062500], [-34.4492000000, 18.8353000000], [-34.5420500000, 18.8107875000], [-34.6349000000, 18.7862750000], [-34.7277500000, 18.7617625000], [-34.8206000000, 18.7372500000], [-34.9134500000, 18.7127375000], [-35.0063000000, 18.6882250000], [-35.0991500000, 18.6637125000], [-35.1920000000, 18.6392000000], [-35.2585000000, 18.6210000000], [-35.3107250000, 18.6066437500], [-35.3629500000, 18.5922875000], [-35.4151750000, 18.5779312500], [-35.4674000000, 18.5635750000], [-35.5196250000, 18.5492187500], [-35.5718500000, 18.5348625000], [-35.6240750000, 18.5205062500], [-35.6763000000, 18.5061500000], [-35.7285250000, 18.4917937500], [-35.7807500000, 18.4774375000], [-35.8329750000, 18.4630812500], [-35.8852000000, 18.4487250000], [-35.9374250000, 18.4343687500], [-35.9896500000, 18.4200125000], [-36.0418750000, 18.4056562500], [-36.0941000000, 18.3913000000], [-36.1688890625, 18.3701710938], [-36.2436781250, 18.3490421875], [-36.3184671875, 18.3279132812], [-36.3932562500, 18.3067843750], [-36.4680453125, 18.2856554688], [-36.5428343750, 18.2645265625], [-36.6176234375, 18.2433976563], [-36.6924125000, 18.2222687500], [-36.7672015625, 18.2011398437], [-36.8419906250, 18.1800109375], [-36.9167796875, 18.1588820313], [-36.9915687500, 18.1377531250], [-37.0663578125, 18.1166242188], [-37.1411468750, 18.0954953125], [-37.2159359375, 18.0743664063], [-37.2907250000, 18.0532375000], [-37.3655140625, 18.0321085938], [-37.4403031250, 18.0109796875], [-37.5150921875, 17.9898507812], [-37.5898812500, 17.9687218750], [-37.6646703125, 17.9475929688], [-37.7394593750, 17.9264640625], [-37.8142484375, 17.9053351563], [-37.8890375000, 17.8842062500], [-37.9638265625, 17.8630773437], [-38.0386156250, 17.8419484375], [-38.1134046875, 17.8208195313], [-38.1881937500, 17.7996906250], [-38.2629828125, 17.7785617188], [-38.3377718750, 17.7574328125], [-38.4125609375, 17.7363039063], [-38.4873500000, 17.7151750000], [-38.5621390625, 17.6940460938], [-38.6369281250, 17.6729171875], [-38.7117171875, 17.6517882812], [-38.7865062500, 17.6306593750], [-38.8612953125, 17.6095304688], [-38.9360843750, 17.5884015625], [-39.0108734375, 17.5672726563], [-39.0856625000, 17.5461437500], [-39.1604515625, 17.5250148438], [-39.2352406250, 17.5038859375], [-39.3100296875, 17.4827570313], [-39.3848187500, 17.4616281250], [-39.4596078125, 17.4404992188], [-39.5343968750, 17.4193703125], [-39.6091859375, 17.3982414063], [-39.6839750000, 17.3771125000], [-39.7587640625, 17.3559835938], [-39.8335531250, 17.3348546875], [-39.9083421875, 17.3137257812], [-39.9831312500, 17.2925968750], [-40.0579203125, 17.2714679688], [-40.1327093750, 17.2503390625], [-40.2074984375, 17.2292101562], [-40.2822875000, 17.2080812500], [-40.3570765625, 17.1869523438], [-40.4318656250, 17.1658234375], [-40.5066546875, 17.1446945312], [-40.5814437500, 17.1235656250], [-40.6562328125, 17.1024367187], [-40.7310218750, 17.0813078125], [-40.8058109375, 17.0601789063], [-40.8806000000, 17.0390500000], [-40.9553890625, 17.0179210937], [-41.0301781250, 16.9967921875], [-41.1049671875, 16.9756632813], [-41.1797562500, 16.9545343750], [-41.2545453125, 16.9334054688], [-41.3293343750, 16.9122765625], [-41.4041234375, 16.8911476562], [-41.4789125000, 16.8700187500], [-41.5537015625, 16.8488898438], [-41.6284906250, 16.8277609375], [-41.7032796875, 16.8066320312], [-41.7780687500, 16.7855031250], [-41.8528578125, 16.7643742187], [-41.9276468750, 16.7432453125], [-42.0024359375, 16.7221164063], [-42.0772250000, 16.7009875000], [-42.1520140625, 16.6798585937], [-42.2268031250, 16.6587296875], [-42.3015921875, 16.6376007813], [-42.3763812500, 16.6164718750], [-42.4511703125, 16.5953429688], [-42.5259593750, 16.5742140625], [-42.6007484375, 16.5530851562], [-42.6755375000, 16.5319562500], [-42.7503265625, 16.5108273438], [-42.8251156250, 16.4896984375], [-42.8999046875, 16.4685695312], [-42.9746937500, 16.4474406250], [-43.0494828125, 16.4263117188], [-43.1242718750, 16.4051828125], [-43.1990609375, 16.3840539063], [-43.2738500000, 16.3629250000], [-43.3486390625, 16.3417960937], [-43.4234281250, 16.3206671875], [-43.4982171875, 16.2995382813], [-43.5730062500, 16.2784093750], [-43.6477953125, 16.2572804688], [-43.7225843750, 16.2361515625], [-43.7973734375, 16.2150226562], [-43.8721625000, 16.1938937500], [-43.9469515625, 16.1727648438], [-44.0217406250, 16.1516359375], [-44.0965296875, 16.1305070312], [-44.1713187500, 16.1093781250], [-44.2461078125, 16.0882492188], [-44.3208968750, 16.0671203125], [-44.3956859375, 16.0459914063], [-44.4704750000, 16.0248625000], [-44.5452640625, 16.0037335937], [-44.6200531250, 15.9826046875], [-44.6948421875, 15.9614757813], [-44.7696312500, 15.9403468750], [-44.8444203125, 15.9192179688], [-44.9192093750, 15.8980890625], [-44.9939984375, 15.8769601563], [-45.0687875000, 15.8558312500], [-45.1435765625, 15.8347023438], [-45.2183656250, 15.8135734375], [-45.2931546875, 15.7924445313], [-45.3679437500, 15.7713156250], [-45.4427328125, 15.7501867187], [-45.5175218750, 15.7290578125], [-45.5923109375, 15.7079289063], [-45.6671000000, 15.6868000000], [-45.7551250000, 15.6611000000], [-45.8431500000, 15.6354000000], [-45.9311750000, 15.6097000000], [-46.0192000000, 15.5840000000], [-46.1072250000, 15.5583000000], [-46.1952500000, 15.5326000000], [-46.2832750000, 15.5069000000], [-46.3713000000, 15.4812000000], [-46.4245000000, 15.4653000000], [-46.4754500000, 15.4494000000], [-46.5264000000, 15.4335000000], [-46.5773500000, 15.4176000000], [-46.6283000000, 15.4017000000], [-46.6831906250, 15.3845515625], [-46.7380812500, 15.3674031250], [-46.7929718750, 15.3502546875], [-46.8478625000, 15.3331062500], [-46.9027531250, 15.3159578125], [-46.9576437500, 15.2988093750], [-47.0125343750, 15.2816609375], [-47.0674250000, 15.2645125000], [-47.1223156250, 15.2473640625], [-47.1772062500, 15.2302156250], [-47.2320968750, 15.2130671875], [-47.2869875000, 15.1959187500], [-47.3418781250, 15.1787703125], [-47.3967687500, 15.1616218750], [-47.4516593750, 15.1444734375], [-47.5065500000, 15.1273250000], [-47.5614406250, 15.1101765625], [-47.6163312500, 15.0930281250], [-47.6712218750, 15.0758796875], [-47.7261125000, 15.0587312500], [-47.7810031250, 15.0415828125], [-47.8358937500, 15.0244343750], [-47.8907843750, 15.0072859375], [-47.9456750000, 14.9901375000], [-48.0005656250, 14.9729890625], [-48.0554562500, 14.9558406250], [-48.1103468750, 14.9386921875], [-48.1652375000, 14.9215437500], [-48.2201281250, 14.9043953125], [-48.2750187500, 14.8872468750], [-48.3299093750, 14.8700984375], [-48.3848000000, 14.8529500000], [-48.4396906250, 14.8358015625], [-48.4945812500, 14.8186531250], [-48.5494718750, 14.8015046875], [-48.6043625000, 14.7843562500], [-48.6592531250, 14.7672078125], [-48.7141437500, 14.7500593750], [-48.7690343750, 14.7329109375], [-48.8239250000, 14.7157625000], [-48.8788156250, 14.6986140625], [-48.9337062500, 14.6814656250], [-48.9885968750, 14.6643171875], [-49.0434875000, 14.6471687500], [-49.0983781250, 14.6300203125], [-49.1532687500, 14.6128718750], [-49.2081593750, 14.5957234375], [-49.2630500000, 14.5785750000], [-49.3179406250, 14.5614265625], [-49.3728312500, 14.5442781250], [-49.4277218750, 14.5271296875], [-49.4826125000, 14.5099812500], [-49.5375031250, 14.4928328125], [-49.5923937500, 14.4756843750], [-49.6472843750, 14.4585359375], [-49.7021750000, 14.4413875000], [-49.7570656250, 14.4242390625], [-49.8119562500, 14.4070906250], [-49.8668468750, 14.3899421875], [-49.9217375000, 14.3727937500], [-49.9766281250, 14.3556453125], [-50.0315187500, 14.3384968750], [-50.0864093750, 14.3213484375], [-50.1413000000, 14.3042000000], [-50.1961906250, 14.2870515625], [-50.2510812500, 14.2699031250], [-50.3059718750, 14.2527546875], [-50.3608625000, 14.2356062500], [-50.4157531250, 14.2184578125], [-50.4706437500, 14.2013093750], [-50.5255343750, 14.1841609375], [-50.5804250000, 14.1670125000], [-50.6353156250, 14.1498640625], [-50.6902062500, 14.1327156250], [-50.7450968750, 14.1155671875], [-50.7999875000, 14.0984187500], [-50.8548781250, 14.0812703125], [-50.9097687500, 14.0641218750], [-50.9646593750, 14.0469734375], [-51.0195500000, 14.0298250000], [-51.0744406250, 14.0126765625], [-51.1293312500, 13.9955281250], [-51.1842218750, 13.9783796875], [-51.2391125000, 13.9612312500], [-51.2940031250, 13.9440828125], [-51.3488937500, 13.9269343750], [-51.4037843750, 13.9097859375], [-51.4586750000, 13.8926375000], [-51.5135656250, 13.8754890625], [-51.5684562500, 13.8583406250], [-51.6233468750, 13.8411921875], [-51.6782375000, 13.8240437500], [-51.7331281250, 13.8068953125], [-51.7880187500, 13.7897468750], [-51.8429093750, 13.7725984375], [-51.8978000000, 13.7554500000], [-51.9526906250, 13.7383015625], [-52.0075812500, 13.7211531250], [-52.0624718750, 13.7040046875], [-52.1173625000, 13.6868562500], [-52.1722531250, 13.6697078125], [-52.2271437500, 13.6525593750], [-52.2820343750, 13.6354109375], [-52.3369250000, 13.6182625000], [-52.3918156250, 13.6011140625], [-52.4467062500, 13.5839656250], [-52.5015968750, 13.5668171875], [-52.5564875000, 13.5496687500], [-52.6113781250, 13.5325203125], [-52.6662687500, 13.5153718750], [-52.7211593750, 13.4982234375], [-52.7760500000, 13.4810750000], [-52.8309406250, 13.4639265625], [-52.8858312500, 13.4467781250], [-52.9407218750, 13.4296296875], [-52.9956125000, 13.4124812500], [-53.0505031250, 13.3953328125], [-53.1053937500, 13.3781843750], [-53.1602843750, 13.3610359375], [-53.2151750000, 13.3438875000], [-53.2700656250, 13.3267390625], [-53.3249562500, 13.3095906250], [-53.3798468750, 13.2924421875], [-53.4347375000, 13.2752937500], [-53.4896281250, 13.2581453125], [-53.5445187500, 13.2409968750], [-53.5994093750, 13.2238484375], [-53.6543000000, 13.2067000000], [-53.7102000000, 13.1882875000], [-53.7661000000, 13.1698750000], [-53.8220000000, 13.1514625000], [-53.8779000000, 13.1330500000], [-53.9338000000, 13.1146375000], [-53.9897000000, 13.0962250000], [-54.0456000000, 13.0778125000], [-54.1015000000, 13.0594000000], [-54.1494437500, 13.0435218750], [-54.1973875000, 13.0276437500], [-54.2453312500, 13.0117656250], [-54.2932750000, 12.9958875000], [-54.3412187500, 12.9800093750], [-54.3891625000, 12.9641312500], [-54.4371062500, 12.9482531250], [-54.4850500000, 12.9323750000], [-54.5329937500, 12.9164968750], [-54.5809375000, 12.9006187500], [-54.6288812500, 12.8847406250], [-54.6768250000, 12.8688625000], [-54.7247687500, 12.8529843750], [-54.7727125000, 12.8371062500], [-54.8206562500, 12.8212281250], [-54.8686000000, 12.8053500000], [-54.9165437500, 12.7894718750], [-54.9644875000, 12.7735937500], [-55.0124312500, 12.7577156250], [-55.0603750000, 12.7418375000], [-55.1083187500, 12.7259593750], [-55.1562625000, 12.7100812500], [-55.2042062500, 12.6942031250], [-55.2521500000, 12.6783250000], [-55.3000937500, 12.6624468750], [-55.3480375000, 12.6465687500], [-55.3959812500, 12.6306906250], [-55.4439250000, 12.6148125000], [-55.4918687500, 12.5989343750], [-55.5398125000, 12.5830562500], [-55.5877562500, 12.5671781250], [-55.6357000000, 12.5513000000], [-55.6836437500, 12.5354218750], [-55.7315875000, 12.5195437500], [-55.7795312500, 12.5036656250], [-55.8274750000, 12.4877875000], [-55.8754187500, 12.4719093750], [-55.9233625000, 12.4560312500], [-55.9713062500, 12.4401531250], [-56.0192500000, 12.4242750000], [-56.0671937500, 12.4083968750], [-56.1151375000, 12.3925187500], [-56.1630812500, 12.3766406250], [-56.2110250000, 12.3607625000], [-56.2589687500, 12.3448843750], [-56.3069125000, 12.3290062500], [-56.3548562500, 12.3131281250], [-56.4028000000, 12.2972500000], [-56.4507437500, 12.2813718750], [-56.4986875000, 12.2654937500], [-56.5466312500, 12.2496156250], [-56.5945750000, 12.2337375000], [-56.6425187500, 12.2178593750], [-56.6904625000, 12.2019812500], [-56.7384062500, 12.1861031250], [-56.7863500000, 12.1702250000], [-56.8342937500, 12.1543468750], [-56.8822375000, 12.1384687500], [-56.9301812500, 12.1225906250], [-56.9781250000, 12.1067125000], [-57.0260687500, 12.0908343750], [-57.0740125000, 12.0749562500], [-57.1219562500, 12.0590781250], [-57.1699000000, 12.0432000000], [-57.2338500000, 12.0217000000], [-57.2978000000, 12.0002000000], [-57.3536750000, 11.9804875000], [-57.4095500000, 11.9607750000], [-57.4654250000, 11.9410625000], [-57.5213000000, 11.9213500000], [-57.5771750000, 11.9016375000], [-57.6330500000, 11.8819250000], [-57.6889250000, 11.8622125000], [-57.7448000000, 11.8425000000], [-57.8168750000, 11.8169250000], [-57.8889500000, 11.7913500000], [-57.9610250000, 11.7657750000], [-58.0331000000, 11.7402000000], [-58.1051750000, 11.7146250000], [-58.1772500000, 11.6890500000], [-58.2493250000, 11.6634750000], [-58.3214000000, 11.6379000000], [-58.3934750000, 11.6123250000], [-58.4655500000, 11.5867500000], [-58.5376250000, 11.5611750000], [-58.6097000000, 11.5356000000], [-58.6817750000, 11.5100250000], [-58.7538500000, 11.4844500000], [-58.8259250000, 11.4588750000], [-58.8980000000, 11.4333000000], [-58.9658804688, 11.4090284375], [-59.0337609375, 11.3847568750], [-59.1016414063, 11.3604853125], [-59.1695218750, 11.3362137500], [-59.2374023438, 11.3119421875], [-59.3052828125, 11.2876706250], [-59.3731632813, 11.2633990625], [-59.4410437500, 11.2391275000], [-59.5089242188, 11.2148559375], [-59.5768046875, 11.1905843750], [-59.6446851563, 11.1663128125], [-59.7125656250, 11.1420412500], [-59.7804460938, 11.1177696875], [-59.8483265625, 11.0934981250], [-59.9162070313, 11.0692265625], [-59.9840875000, 11.0449550000], [-60.0519679688, 11.0206834375], [-60.1198484375, 10.9964118750], [-60.1877289063, 10.9721403125], [-60.2556093750, 10.9478687500], [-60.3234898438, 10.9235971875], [-60.3913703125, 10.8993256250], [-60.4592507813, 10.8750540625], [-60.5271312500, 10.8507825000], [-60.5950117188, 10.8265109375], [-60.6628921875, 10.8022393750], [-60.7307726563, 10.7779678125], [-60.7986531250, 10.7536962500], [-60.8665335938, 10.7294246875], [-60.9344140625, 10.7051531250], [-61.0022945313, 10.6808815625], [-61.0701750000, 10.6566100000], [-61.1380554688, 10.6323384375], [-61.2059359375, 10.6080668750], [-61.2738164063, 10.5837953125], [-61.3416968750, 10.5595237500], [-61.4095773438, 10.5352521875], [-61.4774578125, 10.5109806250], [-61.5453382813, 10.4867090625], [-61.6132187500, 10.4624375000], [-61.6810992188, 10.4381659375], [-61.7489796875, 10.4138943750], [-61.8168601563, 10.3896228125], [-61.8847406250, 10.3653512500], [-61.9526210938, 10.3410796875], [-62.0205015625, 10.3168081250], [-62.0883820313, 10.2925365625], [-62.1562625000, 10.2682650000], [-62.2241429688, 10.2439934375], [-62.2920234375, 10.2197218750], [-62.3599039063, 10.1954503125], [-62.4277843750, 10.1711787500], [-62.4956648438, 10.1469071875], [-62.5635453125, 10.1226356250], [-62.6314257813, 10.0983640625], [-62.6993062500, 10.0740925000], [-62.7671867188, 10.0498209375], [-62.8350671875, 10.0255493750], [-62.9029476563, 10.0012778125], [-62.9708281250, 9.9770062500], [-63.0387085938, 9.9527346875], [-63.1065890625, 9.9284631250], [-63.1744695313, 9.9041915625], [-63.2423500000, 9.8799200000], [-63.3102304688, 9.8556484375], [-63.3781109375, 9.8313768750], [-63.4459914063, 9.8071053125], [-63.5138718750, 9.7828337500], [-63.5817523438, 9.7585621875], [-63.6496328125, 9.7342906250], [-63.7175132813, 9.7100190625], [-63.7853937500, 9.6857475000], [-63.8532742188, 9.6614759375], [-63.9211546875, 9.6372043750], [-63.9890351563, 9.6129328125], [-64.0569156250, 9.5886612500], [-64.1247960938, 9.5643896875], [-64.1926765625, 9.5401181250], [-64.2605570313, 9.5158465625], [-64.3284375000, 9.4915750000], [-64.3963179687, 9.4673034375], [-64.4641984375, 9.4430318750], [-64.5320789063, 9.4187603125], [-64.5999593750, 9.3944887500], [-64.6678398438, 9.3702171875], [-64.7357203125, 9.3459456250], [-64.8036007812, 9.3216740625], [-64.8714812500, 9.2974025000], [-64.9393617188, 9.2731309375], [-65.0072421875, 9.2488593750], [-65.0751226563, 9.2245878125], [-65.1430031250, 9.2003162500], [-65.2108835937, 9.1760446875], [-65.2787640625, 9.1517731250], [-65.3466445313, 9.1275015625], [-65.4145250000, 9.1032300000], [-65.4824054687, 9.0789584375], [-65.5502859375, 9.0546868750], [-65.6181664062, 9.0304153125], [-65.6860468750, 9.0061437500], [-65.7539273437, 8.9818721875], [-65.8218078125, 8.9576006250], [-65.8896882812, 8.9333290625], [-65.9575687500, 8.9090575000], [-66.0254492187, 8.8847859375], [-66.0933296875, 8.8605143750], [-66.1612101562, 8.8362428125], [-66.2290906250, 8.8119712500], [-66.2969710937, 8.7876996875], [-66.3648515625, 8.7634281250], [-66.4327320312, 8.7391565625], [-66.5006125000, 8.7148850000], [-66.5684929687, 8.6906134375], [-66.6363734375, 8.6663418750], [-66.7042539062, 8.6420703125], [-66.7721343750, 8.6177987500], [-66.8400148437, 8.5935271875], [-66.9078953125, 8.5692556250], [-66.9757757812, 8.5449840625], [-67.0436562500, 8.5207125000], [-67.1115367187, 8.4964409375], [-67.1794171875, 8.4721693750], [-67.2472976562, 8.4478978125], [-67.3151781250, 8.4236262500], [-67.3830585937, 8.3993546875], [-67.4509390625, 8.3750831250], [-67.5188195312, 8.3508115625], [-67.5867000000, 8.3265400000], [-67.6785000000, 8.2920900000], [-67.7703000000, 8.2576400000], [-67.8443250000, 8.2293525000], [-67.9183500000, 8.2010650000], [-67.9923750000, 8.1727775000], [-68.0664000000, 8.1444900000], [-68.1387500000, 8.1169287500], [-68.2111000000, 8.0893675000], [-68.2834500000, 8.0618062500], [-68.3558000000, 8.0342450000], [-68.4281500000, 8.0066837500], [-68.5005000000, 7.9791225000], [-68.5728500000, 7.9515612500], [-68.6452000000, 7.9240000000], [-68.7175500000, 7.8964387500], [-68.7899000000, 7.8688775000], [-68.8622500000, 7.8413162500], [-68.9346000000, 7.8137550000], [-69.0069500000, 7.7861937500], [-69.0793000000, 7.7586325000], [-69.1516500000, 7.7310712500], [-69.2240000000, 7.7035100000], [-69.2841500000, 7.6801843750], [-69.3443000000, 7.6568587500], [-69.4044500000, 7.6335331250], [-69.4646000000, 7.6102075000], [-69.5247500000, 7.5868818750], [-69.5849000000, 7.5635562500], [-69.6450500000, 7.5402306250], [-69.7052000000, 7.5169050000], [-69.7653500000, 7.4935793750], [-69.8255000000, 7.4702537500], [-69.8856500000, 7.4469281250], [-69.9458000000, 7.4236025000], [-70.0059500000, 7.4002768750], [-70.0661000000, 7.3769512500], [-70.1262500000, 7.3536256250], [-70.1864000000, 7.3303000000], [-70.2465500000, 7.3069743750], [-70.3067000000, 7.2836487500], [-70.3668500000, 7.2603231250], [-70.4270000000, 7.2369975000], [-70.4871500000, 7.2136718750], [-70.5473000000, 7.1903462500], [-70.6074500000, 7.1670206250], [-70.6676000000, 7.1436950000], [-70.7277500000, 7.1203693750], [-70.7879000000, 7.0970437500], [-70.8480500000, 7.0737181250], [-70.9082000000, 7.0503925000], [-70.9683500000, 7.0270668750], [-71.0285000000, 7.0037412500], [-71.0886500000, 6.9804156250], [-71.1488000000, 6.9570900000], [-71.2214500000, 6.9283575000], [-71.2941000000, 6.8996250000], [-71.3667500000, 6.8708925000], [-71.4394000000, 6.8421600000], [-71.4857593750, 6.8232058594], [-71.5321187500, 6.8042517187], [-71.5784781250, 6.7852975781], [-71.6248375000, 6.7663434375], [-71.6711968750, 6.7473892969], [-71.7175562500, 6.7284351562], [-71.7639156250, 6.7094810156], [-71.8102750000, 6.6905268750], [-71.8566343750, 6.6715727344], [-71.9029937500, 6.6526185937], [-71.9493531250, 6.6336644531], [-71.9957125000, 6.6147103125], [-72.0420718750, 6.5957561719], [-72.0884312500, 6.5768020312], [-72.1347906250, 6.5578478906], [-72.1811500000, 6.5388937500], [-72.2275093750, 6.5199396094], [-72.2738687500, 6.5009854687], [-72.3202281250, 6.4820313281], [-72.3665875000, 6.4630771875], [-72.4129468750, 6.4441230469], [-72.4593062500, 6.4251689062], [-72.5056656250, 6.4062147656], [-72.5520250000, 6.3872606250], [-72.5983843750, 6.3683064844], [-72.6447437500, 6.3493523437], [-72.6911031250, 6.3303982031], [-72.7374625000, 6.3114440625], [-72.7838218750, 6.2924899219]]);
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
import math
import time

from stl import mesh, Dimension

from tkinter import Tk     # from tkinter import Tk for Python 3.x
from tkinter.filedialog import askopenfilename
from mpl_toolkits.mplot3d import art3d
from matplotlib import pyplot as plt
import solid
import os
import ezdxf
import shapely.geometry as sg
import subprocess
from GUI import getSCADPath



def outputSTL(From, To, PATH=getSCADPath()):
    subprocess.Popen(PATH + " -o " + To + " " + From)
    while not os.path.exists(To):
        time.sleep(1)

class Model:
    def __init__(self, model, fileName, location, layer, thickness):
        self.location = location
        self.code = None
        self.fileName = fileName
        self.stl = fileName + ".stl"
        self.layer = layer
        self.thickness = thickness
        self.maxz = (layer+1)*thickness
        self.dxf = fileName + ".dxf"
        self.scad = fileName + ".scad"
        self.model = model
        self.center = None
        self.width = 10
        self.mesh = None
        self.useable_area = None


    def get_code(self):
        max_dim = 0.05
        max_array = 6

        num = int(self.fileName)
        nums = [int(a) for a in str(num)]
        nums.reverse()
        indices = nums
        length = len(nums)

        print(indices)
        t = 0
        i = 0
        cubes = []
        x = 0
        y = 0
        width = 0.01
        while x <= max_dim:
            while y <= max_dim:
                print(indices)
                if nums == []:
                    break
                if indices[0] != 0:
                    cubes.append(solid.translate([x, y, 0])(solid.cube(size=t / 1000 + 0.001)))
                    y += max_dim / (max_array - 1)
                    nums[0] = nums[0] - 1
                else:
                    indices.pop(0)
                    t += 1
                i += 1
            x += max_dim / (max_array - 1)
            y = 0

        outside = solid.translate([-width / 2, -width / 2])(solid.cube(max_dim + (length - 1) / 1000 + 0.001 + width))
        self.code = solid.difference()(outside, cubes)
        self.code = solid.projection(cut=True)(self.code)
        solid.scad_render_to_file(self.code, self.location + "/code.scad")
        outputSTL(From=self.location+"/code.scad", To=self.location+"code.dxf", PATH=getSCADPath())
        # os.system("toSTL.sh renders/code.scad renders/code.dxf")
        return self.location+"/code.dxf"

    def download(self, type):
        if type =="stl":
            print("generating:" + self.location+"/"+ self.fileName+".stl")
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".stl")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".stl")
        elif type == "dxf":
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".dxf")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".dxf")

    def render(self):
        solid.scad_render_to_file(self.model, self.location+"/"+ self.fileName+'.scad')
        while not os.path.exists(self.location+"/"+self.fileName+".scad"):
            time.sleep(1)
        # outputSTL(From= self.location+"/"+ self.fileName+'.scad', To=self.location+"/"+ self.fileName+'.stl')

    def get_points(self):
        doc = ezdxf.readfile(filename=self.location+"/"+ self.fileName+".dxf")
        msp = doc.modelspace()
        i=0
        lists = []
        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return [start, end]

        for e in msp.query("LINE"):
            line = helper(e)
            if not lists:
                lists.append([line])
            else:
                if lists[i][len(lists)-1][1] != line[0]:
                    lists.append([line])
                    i+=1
                else:
                    lists[i].append(line)

    def get_points2(self, FILE):
        doc = ezdxf.readfile(filename=FILE)
        msp = doc.modelspace()
        i = 0
        lists = []

        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return (start, end)

        for e in msp.query("LINE"):
            line = helper(e)
            if lists==[]:
                lists.append([line])
            else:
                if lists[i][len(lists[i]) - 1][1] != line[0]:
                    lists.append([line])
                    i += 1
                else:
                    lists[i].append(line)
        return lists

    def add_code(self):
        dxf = solid.projection(cut=False)(self.model)
        offset = solid.offset(r=-0.1)(dxf)
        solid.scad_render_to_file(offset, self.location+'/offset.scad')
        os.system("toSTL.sh renders/offset.scad renders/offset.dxf")
        lines = self.get_points2("renders/offset.dxf")
        x = lines[0][0][0][0]
        y = lines[0][0][0][1]
        print(x)
        print(y)
        code = solid.translate([x,y,0])(self.code)
        code = solid.linear_extrude(height=999)(code)
        save = self.model
        self.model = solid.projection()(solid.difference()(self.model, code))
        self.render()
        self.download("dxf")
        self.model = save

    def add_label(self, pos):
        # num = 12
        # minx, maxx, miny, maxy, minz, maxz = self.find_minmax()
        maxz = self.maxz
        # label = solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.5, halign="center"))
        # i=minx
        # print("x-len: " + str(maxx-minx))
        # print(i)
        # inc = (maxx-minx)/num
        # while minx <= i <= maxx:
        #     label = solid.union()(solid.translate([i, 0, maxz - 0.2])(solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.25, halign="center"))), label)
        #     i += inc
        #
        # l = label
        #
        # i =miny
        # while miny<= i <= maxy:
        #     print("y inc")
        #     l = solid.union()(solid.translate([0, i, 0])(label), l)
        #     i += 0.5
        for i in str(self.fileName):
            cur = pos[0]
            label = solid.translate([pos[0][0], pos[0][1], self.maxz-0.2])(solid.linear_extrude(height=(self.thickness)/3)(solid.text(str(i), size=0.5, halign="center", valign="center")))
            self.model = solid.difference()(self.model, label)
            pos.append(pos.pop(0))
            while abs(cur[0]-pos[0][0])<0.5 and abs(cur[1]-pos[0][1])<0.5:
                pos.append(pos.pop(0))



    def Center(self):

        volume, cog, inertia = self.mesh.get_mass_properties()
        print("Volume                                  = {0}".format(volume))
        print("Position of the center of gravity (COG) = {0}".format(cog))
        m_centered = solid.translate([-cog[0], -cog[1], 0])(
            self.model
        )
        return m_centered

    def find_minmax(self):
        minx = maxx = miny = maxy = minz = maxz = None
        for p in self.mesh.points:
            # p contains (x, y, z)
            if minx is None:
                minx = p[Dimension.X]
                maxx = p[Dimension.X]
                miny = p[Dimension.Y]
                maxy = p[Dimension.Y]
                minz = p[Dimension.Z]
                maxz = p[Dimension.Z]
            else:
                maxx = max(p[Dimension.X], maxx)
                minx = min(p[Dimension.X], minx)
                maxy = max(p[Dimension.Y], maxy)
                miny = min(p[Dimension.Y], miny)
                maxz = max(p[Dimension.Z], maxz)
                minz = min(p[Dimension.Z], minz)
        lenx = maxx - minx
        leny = maxy - miny
        lenz = maxz - minz
        return minx, maxx, miny, maxy, minz, maxz

    # def generate_Mesh(self):
    #     self.mesh = mesh.Mesh.from_file(self.location + "/" + str(int(self.fileName)//8)+ "b.stl")

    def get_top(self):
        top = solid.projection(cut=True)(solid.translate([0,0,-1*self.thickness*(self.layer+1)])(self.model))
        useable_area = solid.offset(r=-0.45)(top)
        self.useable_area = useable_area
        solid.scad_render_to_file(self.useable_area, self.location+'/' + 'toptemp.scad')
        outputSTL(From=self.location+'/' + 'toptemp.scad', To=self.location+"/top"+ self.dxf)

        # os.system("toSTL.sh out/toptemp.scad renders/" + self.fileName + ".dxf")
        dxf = DXF(self.location+"/top"+ self.dxf)
        min_p=dxf.points[0][0]
        points_ordered = dxf.points
        i=0
        while i <= len(dxf.points)+1:
            while math.sqrt((dxf.points[0][0]-dxf.points[1][0])**2+(dxf.points[0][1]-dxf.points[1][1])**2) > 0.1:
                dxf.points.insert(1, [(dxf.points[0][0]+dxf.points[1][0])/2, (dxf.points[0][1]+dxf.points[1][1])/2])
                i = i-1
            dxf.points.append(dxf.points.pop(0))
            i+=1
        for i in range(len(dxf.points)):
            dxf.points.append(dxf.points.pop(0))
            if dxf.points[0][0] < min_p:
                min_p = dxf.points[0][0]
                points_ordered = dxf.points.copy()
        dxf.points = points_ordered.copy()

        print(dxf.points)
        self.add_label(dxf.points)

class DXF:
    def __init__(self, file):
        self.file = file
        self.Lines = []
        self.points = []
        doc = ezdxf.readfile(self.file)
        msp = doc.modelspace()
        for e in msp:
            if e.dxftype() == "LINE":
                self.Lines.append(e)
                self.points.append([e.dxf.start[0], e.dxf.start[1]])
        # self.points.append([self.Lines[-1].dxf.end[0], self.Lines[-1].dxf.end[1]])
        self.area = None
        self.center = None
        self.polygon = sg.Polygon(self.points)

    def get_area(self):
        self.area = self.polygon.area
        return self.area

    def get_center(self):
        x_sum = 0
        y_sum =0
        for i in self.points:
            x_sum += i[0]
            y_sum += i[1]
        x_c = x_sum/len(self.points)
        y_c = y_sum/len(self.points)
        return (x_c, y_c)

    def split(self, maxdim):
        splits = []
        length = 0
        pieces = [[]]
        prev = self.points[-1]
        pieces[-1].append(prev)
        for j in self.points:
            length = length + math.sqrt((prev[0]-j[0])**2+(prev[1]-j[1])**2)
            if length >= maxdim:
                pieces[-1].append(j)
                pieces.append([])
                length = 0
            pieces[-1].append(j)
            prev = j
        for j in pieces:
            j.insert(0, [0,0])
            piece = solid.linear_extrude(height=10)(solid.polygon(j))
            splits.append(piece)
        return splits
    def refine_points(self):
        i=0
        while i <= len(self.points)+1:
            while math.sqrt((self.points[0][0]-self.points[1][0])**2+(self.points[0][1]-self.points[1][1])**2) > 0.1:
                self.points.insert(1, [(self.points[0][0]+self.points[1][0])/2, (self.points[0][1]+self.points[1][1])/2])
                i = i-1
            self.points.append(self.points.pop(0))
            i+=1


if __name__== "__main__":
    test = DXF("C:/Users/Daniel/Documents/repos/Shell_Maker/output/0top_slice.dxf")
    test.refine_points()
    k = test.split(48)
    for i in range(len(k)):
        solid.scad_render_to_file(k[i], str(i) + ".scad")


 
 
************************************************/
