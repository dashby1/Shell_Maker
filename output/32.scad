// Generated by SolidPython 1.1.3 on 2024-05-26 01:59:12


intersection() {
	difference() {
		intersection() {
			translate(v = [0, 0, 0]) {
				import(file = "CE3E3V2_Bottom_shell.stl", origin = [0, 0]);
			}
			translate(v = [-90.04029846191406, -32.690147399902344, 6]) {
				cube(size = [180.0806, 65.380295, 2]);
			}
		}
		linear_extrude(height = 999) {
			offset(r = -1) {
				import(file = "C:/Users/Daniel/Documents/repos/Shell_Maker/output/3top_slice.dxf", origin = [0, 0]);
			}
		}
	}
	translate(v = [0, 0, 6]) {
		linear_extrude(height = 10) {
			polygon(points = [[0, 0], [-41.2613250000, -17.0435710937], [-41.2106000000, -17.0577468750], [-41.1598750000, -17.0719226562], [-41.1091500000, -17.0860984375], [-41.0584250000, -17.1002742187], [-41.0077000000, -17.1144500000], [-40.9569750000, -17.1286257812], [-40.9062500000, -17.1428015625], [-40.8555250000, -17.1569773437], [-40.8048000000, -17.1711531250], [-40.7540750000, -17.1853289062], [-40.7033500000, -17.1995046875], [-40.6526250000, -17.2136804687], [-40.6019000000, -17.2278562500], [-40.5511750000, -17.2420320312], [-40.5004500000, -17.2562078125], [-40.4497250000, -17.2703835938], [-40.3990000000, -17.2845593750], [-40.3482750000, -17.2987351563], [-40.2975500000, -17.3129109375], [-40.2468250000, -17.3270867187], [-40.1961000000, -17.3412625000], [-40.1453750000, -17.3554382812], [-40.0946500000, -17.3696140625], [-40.0439250000, -17.3837898437], [-39.9932000000, -17.3979656250], [-39.9424750000, -17.4121414062], [-39.8917500000, -17.4263171875], [-39.8410250000, -17.4404929688], [-39.7903000000, -17.4546687500], [-39.7395750000, -17.4688445312], [-39.6888500000, -17.4830203125], [-39.6381250000, -17.4971960938], [-39.5874000000, -17.5113718750], [-39.5366750000, -17.5255476563], [-39.4859500000, -17.5397234375], [-39.4352250000, -17.5538992188], [-39.3845000000, -17.5680750000], [-39.3337750000, -17.5822507812], [-39.2830500000, -17.5964265625], [-39.2323250000, -17.6106023437], [-39.1816000000, -17.6247781250], [-39.1308750000, -17.6389539062], [-39.0801500000, -17.6531296875], [-39.0294250000, -17.6673054688], [-38.9787000000, -17.6814812500], [-38.9279750000, -17.6956570313], [-38.8772500000, -17.7098328125], [-38.8265250000, -17.7240085938], [-38.7758000000, -17.7381843750], [-38.7250750000, -17.7523601563], [-38.6743500000, -17.7665359375], [-38.6236250000, -17.7807117188], [-38.5729000000, -17.7948875000], [-38.5221750000, -17.8090632813], [-38.4714500000, -17.8232390625], [-38.4207250000, -17.8374148438], [-38.3700000000, -17.8515906250], [-38.3192750000, -17.8657664062], [-38.2685500000, -17.8799421875], [-38.2178250000, -17.8941179687], [-38.1671000000, -17.9082937500], [-38.1163750000, -17.9224695312], [-38.0656500000, -17.9366453125], [-38.0149250000, -17.9508210937], [-37.9642000000, -17.9649968750], [-37.9134750000, -17.9791726562], [-37.8627500000, -17.9933484375], [-37.8120250000, -18.0075242187], [-37.7613000000, -18.0217000000], [-37.7096562500, -18.0357500000], [-37.6580125000, -18.0498000000], [-37.6063687500, -18.0638500000], [-37.5547250000, -18.0779000000], [-37.5030812500, -18.0919500000], [-37.4514375000, -18.1060000000], [-37.3997937500, -18.1200500000], [-37.3481500000, -18.1341000000], [-37.2965062500, -18.1481500000], [-37.2448625000, -18.1622000000], [-37.1932187500, -18.1762500000], [-37.1415750000, -18.1903000000], [-37.0899312500, -18.2043500000], [-37.0382875000, -18.2184000000], [-36.9866437500, -18.2324500000], [-36.9350000000, -18.2465000000], [-36.8670000000, -18.2648281250], [-36.7990000000, -18.2831562500], [-36.7310000000, -18.3014843750], [-36.6630000000, -18.3198125000], [-36.5950000000, -18.3381406250], [-36.5270000000, -18.3564687500], [-36.4590000000, -18.3747968750], [-36.3910000000, -18.3931250000], [-36.3230000000, -18.4114531250], [-36.2550000000, -18.4297812500], [-36.1870000000, -18.4481093750], [-36.1190000000, -18.4664375000], [-36.0510000000, -18.4847656250], [-35.9830000000, -18.5030937500], [-35.9150000000, -18.5214218750], [-35.8470000000, -18.5397500000], [-35.7790000000, -18.5580781250], [-35.7110000000, -18.5764062500], [-35.6430000000, -18.5947343750], [-35.5750000000, -18.6130625000], [-35.5070000000, -18.6313906250], [-35.4390000000, -18.6497187500], [-35.3710000000, -18.6680468750], [-35.3030000000, -18.6863750000], [-35.2350000000, -18.7047031250], [-35.1670000000, -18.7230312500], [-35.0990000000, -18.7413593750], [-35.0310000000, -18.7596875000], [-34.9630000000, -18.7780156250], [-34.8950000000, -18.7963437500], [-34.8270000000, -18.8146718750], [-34.7590000000, -18.8330000000], [-34.6820250000, -18.8530125000], [-34.6050500000, -18.8730250000], [-34.5280750000, -18.8930375000], [-34.4511000000, -18.9130500000], [-34.3741250000, -18.9330625000], [-34.2971500000, -18.9530750000], [-34.2201750000, -18.9730875000], [-34.1432000000, -18.9931000000], [-34.0662250000, -19.0131125000], [-33.9892500000, -19.0331250000], [-33.9122750000, -19.0531375000], [-33.8353000000, -19.0731500000], [-33.7583250000, -19.0931625000], [-33.6813500000, -19.1131750000], [-33.6043750000, -19.1331875000], [-33.5274000000, -19.1532000000], [-33.4426187500, -19.1746062500], [-33.3578375000, -19.1960125000], [-33.2730562500, -19.2174187500], [-33.1882750000, -19.2388250000], [-33.1034937500, -19.2602312500], [-33.0187125000, -19.2816375000], [-32.9339312500, -19.3030437500], [-32.8491500000, -19.3244500000], [-32.7643687500, -19.3458562500], [-32.6795875000, -19.3672625000], [-32.5948062500, -19.3886687500], [-32.5100250000, -19.4100750000], [-32.4252437500, -19.4314812500], [-32.3404625000, -19.4528875000], [-32.2556812500, -19.4742937500], [-32.1709000000, -19.4957000000], [-32.0816546875, -19.5174218750], [-31.9924093750, -19.5391437500], [-31.9031640625, -19.5608656250], [-31.8139187500, -19.5825875000], [-31.7246734375, -19.6043093750], [-31.6354281250, -19.6260312500], [-31.5461828125, -19.6477531250], [-31.4569375000, -19.6694750000], [-31.3676921875, -19.6911968750], [-31.2784468750, -19.7129187500], [-31.1892015625, -19.7346406250], [-31.0999562500, -19.7563625000], [-31.0107109375, -19.7780843750], [-30.9214656250, -19.7998062500], [-30.8322203125, -19.8215281250], [-30.7429750000, -19.8432500000], [-30.6537296875, -19.8649718750], [-30.5644843750, -19.8866937500], [-30.4752390625, -19.9084156250], [-30.3859937500, -19.9301375000], [-30.2967484375, -19.9518593750], [-30.2075031250, -19.9735812500], [-30.1182578125, -19.9953031250], [-30.0290125000, -20.0170250000], [-29.9397671875, -20.0387468750], [-29.8505218750, -20.0604687500], [-29.7612765625, -20.0821906250], [-29.6720312500, -20.1039125000], [-29.5827859375, -20.1256343750], [-29.4935406250, -20.1473562500], [-29.4042953125, -20.1690781250], [-29.3150500000, -20.1908000000], [-29.2258046875, -20.2125218750], [-29.1365593750, -20.2342437500], [-29.0473140625, -20.2559656250], [-28.9580687500, -20.2776875000], [-28.8688234375, -20.2994093750], [-28.7795781250, -20.3211312500], [-28.6903328125, -20.3428531250], [-28.6010875000, -20.3645750000], [-28.5118421875, -20.3862968750], [-28.4225968750, -20.4080187500], [-28.3333515625, -20.4297406250], [-28.2441062500, -20.4514625000], [-28.1548609375, -20.4731843750], [-28.0656156250, -20.4949062500], [-27.9763703125, -20.5166281250], [-27.8871250000, -20.5383500000], [-27.7978796875, -20.5600718750], [-27.7086343750, -20.5817937500], [-27.6193890625, -20.6035156250], [-27.5301437500, -20.6252375000], [-27.4408984375, -20.6469593750], [-27.3516531250, -20.6686812500], [-27.2624078125, -20.6904031250], [-27.1731625000, -20.7121250000], [-27.0839171875, -20.7338468750], [-26.9946718750, -20.7555687500], [-26.9054265625, -20.7772906250], [-26.8161812500, -20.7990125000], [-26.7269359375, -20.8207343750], [-26.6376906250, -20.8424562500], [-26.5484453125, -20.8641781250], [-26.4592000000, -20.8859000000], [-26.4076312500, -20.8981937500], [-26.3560625000, -20.9104875000], [-26.3044937500, -20.9227812500], [-26.2529250000, -20.9350750000], [-26.2013562500, -20.9473687500], [-26.1497875000, -20.9596625000], [-26.0982187500, -20.9719562500], [-26.0466500000, -20.9842500000], [-25.9950812500, -20.9965437500], [-25.9435125000, -21.0088375000], [-25.8919437500, -21.0211312500], [-25.8403750000, -21.0334250000], [-25.7888062500, -21.0457187500], [-25.7372375000, -21.0580125000], [-25.6856687500, -21.0703062500], [-25.6341000000, -21.0826000000], [-25.5402562500, -21.1042593750], [-25.4464125000, -21.1259187500], [-25.3525687500, -21.1475781250], [-25.2587250000, -21.1692375000], [-25.1648812500, -21.1908968750], [-25.0710375000, -21.2125562500], [-24.9771937500, -21.2342156250], [-24.8833500000, -21.2558750000], [-24.7895062500, -21.2775343750], [-24.6956625000, -21.2991937500], [-24.6018187500, -21.3208531250], [-24.5079750000, -21.3425125000], [-24.4141312500, -21.3641718750], [-24.3202875000, -21.3858312500], [-24.2264437500, -21.4074906250], [-24.1326000000, -21.4291500000], [-24.0387562500, -21.4508093750], [-23.9449125000, -21.4724687500], [-23.8510687500, -21.4941281250], [-23.7572250000, -21.5157875000], [-23.6633812500, -21.5374468750], [-23.5695375000, -21.5591062500], [-23.4756937500, -21.5807656250], [-23.3818500000, -21.6024250000], [-23.2880062500, -21.6240843750], [-23.1941625000, -21.6457437500], [-23.1003187500, -21.6674031250], [-23.0064750000, -21.6890625000], [-22.9126312500, -21.7107218750], [-22.8187875000, -21.7323812500], [-22.7249437500, -21.7540406250], [-22.6311000000, -21.7757000000], [-22.5418750000, -21.7955000000], [-22.4526500000, -21.8153000000], [-22.3634250000, -21.8351000000], [-22.2742000000, -21.8549000000], [-22.1849750000, -21.8747000000], [-22.0957500000, -21.8945000000], [-22.0065250000, -21.9143000000], [-21.9173000000, -21.9341000000], [-21.8607093750, -21.9458593750], [-21.8041187500, -21.9576187500], [-21.7475281250, -21.9693781250], [-21.6909375000, -21.9811375000], [-21.6343468750, -21.9928968750], [-21.5777562500, -22.0046562500], [-21.5211656250, -22.0164156250], [-21.4645750000, -22.0281750000], [-21.4079843750, -22.0399343750], [-21.3513937500, -22.0516937500], [-21.2948031250, -22.0634531250], [-21.2382125000, -22.0752125000], [-21.1816218750, -22.0869718750], [-21.1250312500, -22.0987312500], [-21.0684406250, -22.1104906250], [-21.0118500000, -22.1222500000], [-20.9552593750, -22.1340093750], [-20.8986687500, -22.1457687500], [-20.8420781250, -22.1575281250], [-20.7854875000, -22.1692875000], [-20.7288968750, -22.1810468750], [-20.6723062500, -22.1928062500], [-20.6157156250, -22.2045656250], [-20.5591250000, -22.2163250000], [-20.5025343750, -22.2280843750], [-20.4459437500, -22.2398437500], [-20.3893531250, -22.2516031250], [-20.3327625000, -22.2633625000], [-20.2761718750, -22.2751218750], [-20.2195812500, -22.2868812500], [-20.1629906250, -22.2986406250], [-20.1064000000, -22.3104000000], [-20.0129359375, -22.3305281250], [-19.9194718750, -22.3506562500], [-19.8260078125, -22.3707843750], [-19.7325437500, -22.3909125000], [-19.6390796875, -22.4110406250], [-19.5456156250, -22.4311687500], [-19.4521515625, -22.4512968750], [-19.3586875000, -22.4714250000], [-19.2652234375, -22.4915531250], [-19.1717593750, -22.5116812500], [-19.0782953125, -22.5318093750], [-18.9848312500, -22.5519375000], [-18.8913671875, -22.5720656250], [-18.7979031250, -22.5921937500], [-18.7044390625, -22.6123218750], [-18.6109750000, -22.6324500000], [-18.5175109375, -22.6525781250], [-18.4240468750, -22.6727062500], [-18.3305828125, -22.6928343750], [-18.2371187500, -22.7129625000], [-18.1436546875, -22.7330906250], [-18.0501906250, -22.7532187500], [-17.9567265625, -22.7733468750], [-17.8632625000, -22.7934750000], [-17.7697984375, -22.8136031250], [-17.6763343750, -22.8337312500], [-17.5828703125, -22.8538593750], [-17.4894062500, -22.8739875000], [-17.3959421875, -22.8941156250], [-17.3024781250, -22.9142437500], [-17.2090140625, -22.9343718750], [-17.1155500000, -22.9545000000], [-17.0220859375, -22.9746281250], [-16.9286218750, -22.9947562500], [-16.8351578125, -23.0148843750], [-16.7416937500, -23.0350125000], [-16.6482296875, -23.0551406250], [-16.5547656250, -23.0752687500], [-16.4613015625, -23.0953968750], [-16.3678375000, -23.1155250000], [-16.2743734375, -23.1356531250], [-16.1809093750, -23.1557812500], [-16.0874453125, -23.1759093750], [-15.9939812500, -23.1960375000], [-15.9005171875, -23.2161656250], [-15.8070531250, -23.2362937500], [-15.7135890625, -23.2564218750], [-15.6201250000, -23.2765500000], [-15.5266609375, -23.2966781250], [-15.4331968750, -23.3168062500], [-15.3397328125, -23.3369343750], [-15.2462687500, -23.3570625000], [-15.1528046875, -23.3771906250], [-15.0593406250, -23.3973187500], [-14.9658765625, -23.4174468750], [-14.8724125000, -23.4375750000], [-14.7789484375, -23.4577031250], [-14.6854843750, -23.4778312500], [-14.5920203125, -23.4979593750], [-14.4985562500, -23.5180875000], [-14.4050921875, -23.5382156250], [-14.3116281250, -23.5583437500], [-14.2181640625, -23.5784718750], [-14.1247000000, -23.5986000000], [-14.0588531250, -23.6116562500], [-13.9930062500, -23.6247125000], [-13.9271593750, -23.6377687500], [-13.8613125000, -23.6508250000], [-13.7954656250, -23.6638812500], [-13.7296187500, -23.6769375000], [-13.6637718750, -23.6899937500], [-13.5979250000, -23.7030500000], [-13.5320781250, -23.7161062500], [-13.4662312500, -23.7291625000], [-13.4003843750, -23.7422187500], [-13.3345375000, -23.7552750000], [-13.2686906250, -23.7683312500], [-13.2028437500, -23.7813875000], [-13.1369968750, -23.7944437500], [-13.0711500000, -23.8075000000], [-13.0053031250, -23.8205562500], [-12.9394562500, -23.8336125000], [-12.8736093750, -23.8466687500], [-12.8077625000, -23.8597250000], [-12.7419156250, -23.8727812500], [-12.6760687500, -23.8858375000], [-12.6102218750, -23.8988937500], [-12.5443750000, -23.9119500000], [-12.4785281250, -23.9250062500], [-12.4126812500, -23.9380625000], [-12.3468343750, -23.9511187500], [-12.2809875000, -23.9641750000], [-12.2151406250, -23.9772312500], [-12.1492937500, -23.9902875000], [-12.0834468750, -24.0033437500], [-12.0176000000, -24.0164000000], [-11.9431385937, -24.0299265625], [-11.8686771875, -24.0434531250], [-11.7942157813, -24.0569796875], [-11.7197543750, -24.0705062500], [-11.6452929688, -24.0840328125], [-11.5708315625, -24.0975593750], [-11.4963701563, -24.1110859375], [-11.4219087500, -24.1246125000], [-11.3474473437, -24.1381390625], [-11.2729859375, -24.1516656250], [-11.1985245312, -24.1651921875], [-11.1240631250, -24.1787187500], [-11.0496017187, -24.1922453125], [-10.9751403125, -24.2057718750], [-10.9006789062, -24.2192984375], [-10.8262175000, -24.2328250000], [-10.7517560937, -24.2463515625], [-10.6772946875, -24.2598781250], [-10.6028332812, -24.2734046875], [-10.5283718750, -24.2869312500], [-10.4539104687, -24.3004578125], [-10.3794490625, -24.3139843750], [-10.3049876562, -24.3275109375], [-10.2305262500, -24.3410375000], [-10.1560648437, -24.3545640625], [-10.0816034375, -24.3680906250], [-10.0071420312, -24.3816171875], [-9.9326806250, -24.3951437500], [-9.8582192187, -24.4086703125], [-9.7837578125, -24.4221968750], [-9.7092964062, -24.4357234375], [-9.6348350000, -24.4492500000], [-9.5603735937, -24.4627765625], [-9.4859121875, -24.4763031250], [-9.4114507812, -24.4898296875], [-9.3369893750, -24.5033562500], [-9.2625279687, -24.5168828125], [-9.1880665625, -24.5304093750], [-9.1136051562, -24.5439359375], [-9.0391437500, -24.5574625000], [-8.9646823437, -24.5709890625], [-8.8902209375, -24.5845156250], [-8.8157595313, -24.5980421875], [-8.7412981250, -24.6115687500], [-8.6668367187, -24.6250953125], [-8.5923753125, -24.6386218750], [-8.5179139062, -24.6521484375], [-8.4434525000, -24.6656750000], [-8.3689910937, -24.6792015625], [-8.2945296875, -24.6927281250], [-8.2200682812, -24.7062546875], [-8.1456068750, -24.7197812500], [-8.0711454687, -24.7333078125], [-7.9966840625, -24.7468343750], [-7.9222226562, -24.7603609375], [-7.8477612500, -24.7738875000], [-7.7732998437, -24.7874140625], [-7.6988384375, -24.8009406250], [-7.6243770312, -24.8144671875], [-7.5499156250, -24.8279937500], [-7.4754542188, -24.8415203125], [-7.4009928125, -24.8550468750], [-7.3265314062, -24.8685734375], [-7.2520700000, -24.8821000000], [-7.1776085937, -24.8956265625], [-7.1031471875, -24.9091531250], [-7.0286857812, -24.9226796875], [-6.9542243750, -24.9362062500], [-6.8797629688, -24.9497328125], [-6.8053015625, -24.9632593750], [-6.7308401563, -24.9767859375], [-6.6563787500, -24.9903125000], [-6.5819173437, -25.0038390625], [-6.5074559375, -25.0173656250], [-6.4329945312, -25.0308921875], [-6.3585331250, -25.0444187500], [-6.2840717188, -25.0579453125], [-6.2096103125, -25.0714718750], [-6.1351489063, -25.0849984375], [-6.0606875000, -25.0985250000], [-5.9862260938, -25.1120515625], [-5.9117646875, -25.1255781250], [-5.8373032812, -25.1391046875], [-5.7628418750, -25.1526312500], [-5.6883804688, -25.1661578125], [-5.6139190625, -25.1796843750], [-5.5394576563, -25.1932109375], [-5.4649962500, -25.2067375000], [-5.3905348438, -25.2202640625], [-5.3160734375, -25.2337906250], [-5.2416120312, -25.2473171875], [-5.1671506250, -25.2608437500], [-5.0926892187, -25.2743703125], [-5.0182278125, -25.2878968750], [-4.9437664062, -25.3014234375], [-4.8693050000, -25.3149500000], [-4.7948435938, -25.3284765625], [-4.7203821875, -25.3420031250], [-4.6459207813, -25.3555296875], [-4.5714593750, -25.3690562500], [-4.4969979687, -25.3825828125], [-4.4225365625, -25.3961093750], [-4.3480751562, -25.4096359375], [-4.2736137500, -25.4231625000], [-4.1991523438, -25.4366890625], [-4.1246909375, -25.4502156250], [-4.0502295313, -25.4637421875], [-3.9757681250, -25.4772687500], [-3.9013067187, -25.4907953125], [-3.8268453125, -25.5043218750], [-3.7523839063, -25.5178484375], [-3.6779225000, -25.5313750000], [-3.6034610938, -25.5449015625], [-3.5289996875, -25.5584281250], [-3.4545382813, -25.5719546875], [-3.3800768750, -25.5854812500], [-3.3056154688, -25.5990078125], [-3.2311540625, -25.6125343750], [-3.1566926563, -25.6260609375], [-3.0822312500, -25.6395875000], [-3.0077698438, -25.6531140625], [-2.9333084375, -25.6666406250], [-2.8588470313, -25.6801671875], [-2.7843856250, -25.6936937500], [-2.7099242188, -25.7072203125], [-2.6354628125, -25.7207468750], [-2.5610014062, -25.7342734375], [-2.4865400000, -25.7478000000], [-2.3965901563, -25.7613929688], [-2.3066403125, -25.7749859375], [-2.2166904687, -25.7885789062], [-2.1267406250, -25.8021718750], [-2.0367907813, -25.8157648437], [-1.9468409375, -25.8293578125], [-1.8568910938, -25.8429507812], [-1.7669412500, -25.8565437500], [-1.6769914062, -25.8701367188], [-1.5870415625, -25.8837296875], [-1.4970917188, -25.8973226563], [-1.4071418750, -25.9109156250], [-1.3171920313, -25.9245085938], [-1.2272421875, -25.9381015625], [-1.1372923437, -25.9516945313], [-1.0473425000, -25.9652875000], [-0.9573926563, -25.9788804688], [-0.8674428125, -25.9924734375], [-0.7774929688, -26.0060664063], [-0.6875431250, -26.0196593750], [-0.5975932813, -26.0332523438], [-0.5076434375, -26.0468453125], [-0.4176935938, -26.0604382813], [-0.3277437500, -26.0740312500], [-0.2377939063, -26.0876242188], [-0.1478440625, -26.1012171875], [-0.0578942188, -26.1148101562], [0.0320556250, -26.1284031250], [0.1220054687, -26.1419960937], [0.2119553125, -26.1555890625], [0.3019051562, -26.1691820312], [0.3918550000, -26.1827750000], [0.4818048437, -26.1963679687], [0.5717546875, -26.2099609375], [0.6617045312, -26.2235539063], [0.7516543750, -26.2371468750], [0.8416042187, -26.2507398438], [0.9315540625, -26.2643328125], [1.0215039062, -26.2779257813], [1.1114537500, -26.2915187500], [1.2014035937, -26.3051117188], [1.2913534375, -26.3187046875], [1.3813032812, -26.3322976563], [1.4712531250, -26.3458906250], [1.5612029687, -26.3594835938], [1.6511528125, -26.3730765625], [1.7411026562, -26.3866695312], [1.8310525000, -26.4002625000], [1.9210023437, -26.4138554688], [2.0109521875, -26.4274484375], [2.1009020312, -26.4410414062], [2.1908518750, -26.4546343750], [2.2808017187, -26.4682273437], [2.3707515625, -26.4818203125], [2.4607014062, -26.4954132812], [2.5506512500, -26.5090062500], [2.6406010937, -26.5225992187], [2.7305509375, -26.5361921875], [2.8205007812, -26.5497851562], [2.9104506250, -26.5633781250], [3.0004004687, -26.5769710938], [3.0903503125, -26.5905640625], [3.1803001562, -26.6041570313], [3.2702500000, -26.6177500000], [3.3601998437, -26.6313429688], [3.4501496875, -26.6449359375], [3.5400995312, -26.6585289063], [3.6300493750, -26.6721218750], [3.7199992187, -26.6857148438], [3.8099490625, -26.6993078125], [3.8998989062, -26.7129007813], [3.9898487500, -26.7264937500]]);
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
import math
import time

from stl import mesh, Dimension

from tkinter import Tk     # from tkinter import Tk for Python 3.x
from tkinter.filedialog import askopenfilename
from mpl_toolkits.mplot3d import art3d
from matplotlib import pyplot as plt
import solid
import os
import ezdxf
import shapely.geometry as sg
import subprocess
from GUI import getSCADPath



def outputSTL(From, To, PATH=getSCADPath()):
    subprocess.Popen(PATH + " -o " + To + " " + From)
    while not os.path.exists(To):
        time.sleep(1)

class Model:
    def __init__(self, model, fileName, location, layer, thickness):
        self.location = location
        self.code = None
        self.fileName = fileName
        self.stl = fileName + ".stl"
        self.layer = layer
        self.thickness = thickness
        self.maxz = (layer+1)*thickness
        self.dxf = fileName + ".dxf"
        self.scad = fileName + ".scad"
        self.model = model
        self.center = None
        self.width = 10
        self.mesh = None
        self.useable_area = None


    def get_code(self):
        max_dim = 0.05
        max_array = 6

        num = int(self.fileName)
        nums = [int(a) for a in str(num)]
        nums.reverse()
        indices = nums
        length = len(nums)

        print(indices)
        t = 0
        i = 0
        cubes = []
        x = 0
        y = 0
        width = 0.01
        while x <= max_dim:
            while y <= max_dim:
                print(indices)
                if nums == []:
                    break
                if indices[0] != 0:
                    cubes.append(solid.translate([x, y, 0])(solid.cube(size=t / 1000 + 0.001)))
                    y += max_dim / (max_array - 1)
                    nums[0] = nums[0] - 1
                else:
                    indices.pop(0)
                    t += 1
                i += 1
            x += max_dim / (max_array - 1)
            y = 0

        outside = solid.translate([-width / 2, -width / 2])(solid.cube(max_dim + (length - 1) / 1000 + 0.001 + width))
        self.code = solid.difference()(outside, cubes)
        self.code = solid.projection(cut=True)(self.code)
        solid.scad_render_to_file(self.code, self.location + "/code.scad")
        outputSTL(From=self.location+"/code.scad", To=self.location+"code.dxf", PATH=getSCADPath())
        # os.system("toSTL.sh renders/code.scad renders/code.dxf")
        return self.location+"/code.dxf"

    def download(self, type):
        if type =="stl":
            print("generating:" + self.location+"/"+ self.fileName+".stl")
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".stl")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".stl")
        elif type == "dxf":
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".dxf")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".dxf")

    def render(self):
        solid.scad_render_to_file(self.model, self.location+"/"+ self.fileName+'.scad')
        while not os.path.exists(self.location+"/"+self.fileName+".scad"):
            time.sleep(1)
        # outputSTL(From= self.location+"/"+ self.fileName+'.scad', To=self.location+"/"+ self.fileName+'.stl')

    def get_points(self):
        doc = ezdxf.readfile(filename=self.location+"/"+ self.fileName+".dxf")
        msp = doc.modelspace()
        i=0
        lists = []
        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return [start, end]

        for e in msp.query("LINE"):
            line = helper(e)
            if not lists:
                lists.append([line])
            else:
                if lists[i][len(lists)-1][1] != line[0]:
                    lists.append([line])
                    i+=1
                else:
                    lists[i].append(line)

    def get_points2(self, FILE):
        doc = ezdxf.readfile(filename=FILE)
        msp = doc.modelspace()
        i = 0
        lists = []

        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return (start, end)

        for e in msp.query("LINE"):
            line = helper(e)
            if lists==[]:
                lists.append([line])
            else:
                if lists[i][len(lists[i]) - 1][1] != line[0]:
                    lists.append([line])
                    i += 1
                else:
                    lists[i].append(line)
        return lists

    def add_code(self):
        dxf = solid.projection(cut=False)(self.model)
        offset = solid.offset(r=-0.1)(dxf)
        solid.scad_render_to_file(offset, self.location+'/offset.scad')
        os.system("toSTL.sh renders/offset.scad renders/offset.dxf")
        lines = self.get_points2("renders/offset.dxf")
        x = lines[0][0][0][0]
        y = lines[0][0][0][1]
        print(x)
        print(y)
        code = solid.translate([x,y,0])(self.code)
        code = solid.linear_extrude(height=999)(code)
        save = self.model
        self.model = solid.projection()(solid.difference()(self.model, code))
        self.render()
        self.download("dxf")
        self.model = save

    def add_label(self, pos):
        # num = 12
        # minx, maxx, miny, maxy, minz, maxz = self.find_minmax()
        maxz = self.maxz
        # label = solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.5, halign="center"))
        # i=minx
        # print("x-len: " + str(maxx-minx))
        # print(i)
        # inc = (maxx-minx)/num
        # while minx <= i <= maxx:
        #     label = solid.union()(solid.translate([i, 0, maxz - 0.2])(solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.25, halign="center"))), label)
        #     i += inc
        #
        # l = label
        #
        # i =miny
        # while miny<= i <= maxy:
        #     print("y inc")
        #     l = solid.union()(solid.translate([0, i, 0])(label), l)
        #     i += 0.5
        for i in str(self.fileName):
            cur = pos[0]
            label = solid.translate([pos[0][0], pos[0][1], self.maxz-0.2])(solid.linear_extrude(height=(self.thickness)/3)(solid.text(str(i), size=0.5, halign="center", valign="center")))
            self.model = solid.difference()(self.model, label)
            pos.append(pos.pop(0))
            while abs(cur[0]-pos[0][0])<0.5 and abs(cur[1]-pos[0][1])<0.5:
                pos.append(pos.pop(0))



    def Center(self):

        volume, cog, inertia = self.mesh.get_mass_properties()
        print("Volume                                  = {0}".format(volume))
        print("Position of the center of gravity (COG) = {0}".format(cog))
        m_centered = solid.translate([-cog[0], -cog[1], 0])(
            self.model
        )
        return m_centered

    def find_minmax(self):
        minx = maxx = miny = maxy = minz = maxz = None
        for p in self.mesh.points:
            # p contains (x, y, z)
            if minx is None:
                minx = p[Dimension.X]
                maxx = p[Dimension.X]
                miny = p[Dimension.Y]
                maxy = p[Dimension.Y]
                minz = p[Dimension.Z]
                maxz = p[Dimension.Z]
            else:
                maxx = max(p[Dimension.X], maxx)
                minx = min(p[Dimension.X], minx)
                maxy = max(p[Dimension.Y], maxy)
                miny = min(p[Dimension.Y], miny)
                maxz = max(p[Dimension.Z], maxz)
                minz = min(p[Dimension.Z], minz)
        lenx = maxx - minx
        leny = maxy - miny
        lenz = maxz - minz
        return minx, maxx, miny, maxy, minz, maxz

    # def generate_Mesh(self):
    #     self.mesh = mesh.Mesh.from_file(self.location + "/" + str(int(self.fileName)//8)+ "b.stl")

    def get_top(self):
        top = solid.projection(cut=True)(solid.translate([0,0,-1*self.thickness*(self.layer+1)])(self.model))
        useable_area = solid.offset(r=-0.45)(top)
        self.useable_area = useable_area
        solid.scad_render_to_file(self.useable_area, self.location+'/' + 'toptemp.scad')
        outputSTL(From=self.location+'/' + 'toptemp.scad', To=self.location+"/top"+ self.dxf)

        # os.system("toSTL.sh out/toptemp.scad renders/" + self.fileName + ".dxf")
        dxf = DXF(self.location+"/top"+ self.dxf)
        min_p=dxf.points[0][0]
        points_ordered = dxf.points
        i=0
        while i <= len(dxf.points)+1:
            while math.sqrt((dxf.points[0][0]-dxf.points[1][0])**2+(dxf.points[0][1]-dxf.points[1][1])**2) > 0.1:
                dxf.points.insert(1, [(dxf.points[0][0]+dxf.points[1][0])/2, (dxf.points[0][1]+dxf.points[1][1])/2])
                i = i-1
            dxf.points.append(dxf.points.pop(0))
            i+=1
        for i in range(len(dxf.points)):
            dxf.points.append(dxf.points.pop(0))
            if dxf.points[0][0] < min_p:
                min_p = dxf.points[0][0]
                points_ordered = dxf.points.copy()
        dxf.points = points_ordered.copy()

        print(dxf.points)
        self.add_label(dxf.points)

class DXF:
    def __init__(self, file):
        self.file = file
        self.Lines = []
        self.points = []
        doc = ezdxf.readfile(self.file)
        msp = doc.modelspace()
        for e in msp:
            if e.dxftype() == "LINE":
                self.Lines.append(e)
                self.points.append([e.dxf.start[0], e.dxf.start[1]])
        # self.points.append([self.Lines[-1].dxf.end[0], self.Lines[-1].dxf.end[1]])
        self.area = None
        self.center = None
        self.polygon = sg.Polygon(self.points)

    def get_area(self):
        self.area = self.polygon.area
        return self.area

    def get_center(self):
        x_sum = 0
        y_sum =0
        for i in self.points:
            x_sum += i[0]
            y_sum += i[1]
        x_c = x_sum/len(self.points)
        y_c = y_sum/len(self.points)
        return (x_c, y_c)

    def split(self, maxdim):
        splits = []
        length = 0
        pieces = [[]]
        prev = self.points[-1]
        pieces[-1].append(prev)
        for j in self.points:
            length = length + math.sqrt((prev[0]-j[0])**2+(prev[1]-j[1])**2)
            if length >= maxdim:
                pieces[-1].append(j)
                pieces.append([])
                length = 0
            pieces[-1].append(j)
            prev = j
        for j in pieces:
            j.insert(0, [0,0])
            piece = solid.linear_extrude(height=10)(solid.polygon(j))
            splits.append(piece)
        return splits
    def refine_points(self):
        i=0
        while i <= len(self.points)+1:
            while math.sqrt((self.points[0][0]-self.points[1][0])**2+(self.points[0][1]-self.points[1][1])**2) > 0.1:
                self.points.insert(1, [(self.points[0][0]+self.points[1][0])/2, (self.points[0][1]+self.points[1][1])/2])
                i = i-1
            self.points.append(self.points.pop(0))
            i+=1


if __name__== "__main__":
    test = DXF("C:/Users/Daniel/Documents/repos/Shell_Maker/output/0top_slice.dxf")
    test.refine_points()
    k = test.split(48)
    for i in range(len(k)):
        solid.scad_render_to_file(k[i], str(i) + ".scad")


 
 
************************************************/
