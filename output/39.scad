// Generated by SolidPython 1.1.3 on 2024-05-26 01:59:20


intersection() {
	difference() {
		intersection() {
			translate(v = [0, 0, 0]) {
				import(file = "CE3E3V2_Bottom_shell.stl", origin = [0, 0]);
			}
			translate(v = [-90.04029846191406, -32.690147399902344, 8]) {
				cube(size = [180.0806, 65.380295, 2]);
			}
		}
		linear_extrude(height = 999) {
			offset(r = -1) {
				import(file = "C:/Users/Daniel/Documents/repos/Shell_Maker/output/4top_slice.dxf", origin = [0, 0]);
			}
		}
	}
	translate(v = [0, 0, 8]) {
		linear_extrude(height = 10) {
			polygon(points = [[0, 0], [-40.2445984375, -17.3338171875], [-40.1656937500, -17.3558687500], [-40.0867890625, -17.3779203125], [-40.0078843750, -17.3999718750], [-39.9289796875, -17.4220234375], [-39.8500750000, -17.4440750000], [-39.7711703125, -17.4661265625], [-39.6922656250, -17.4881781250], [-39.6133609375, -17.5102296875], [-39.5344562500, -17.5322812500], [-39.4555515625, -17.5543328125], [-39.3766468750, -17.5763843750], [-39.2977421875, -17.5984359375], [-39.2188375000, -17.6204875000], [-39.1399328125, -17.6425390625], [-39.0610281250, -17.6645906250], [-38.9821234375, -17.6866421875], [-38.9032187500, -17.7086937500], [-38.8243140625, -17.7307453125], [-38.7454093750, -17.7527968750], [-38.6665046875, -17.7748484375], [-38.5876000000, -17.7969000000], [-38.5359562500, -17.8109500000], [-38.4843125000, -17.8250000000], [-38.4326687500, -17.8390500000], [-38.3810250000, -17.8531000000], [-38.3293812500, -17.8671500000], [-38.2777375000, -17.8812000000], [-38.2260937500, -17.8952500000], [-38.1744500000, -17.9093000000], [-38.1228062500, -17.9233500000], [-38.0711625000, -17.9374000000], [-38.0195187500, -17.9514500000], [-37.9678750000, -17.9655000000], [-37.9162312500, -17.9795500000], [-37.8645875000, -17.9936000000], [-37.8129437500, -18.0076500000], [-37.7613000000, -18.0217000000], [-37.7108890625, -18.0352859375], [-37.6604781250, -18.0488718750], [-37.6100671875, -18.0624578125], [-37.5596562500, -18.0760437500], [-37.5092453125, -18.0896296875], [-37.4588343750, -18.1032156250], [-37.4084234375, -18.1168015625], [-37.3580125000, -18.1303875000], [-37.3076015625, -18.1439734375], [-37.2571906250, -18.1575593750], [-37.2067796875, -18.1711453125], [-37.1563687500, -18.1847312500], [-37.1059578125, -18.1983171875], [-37.0555468750, -18.2119031250], [-37.0051359375, -18.2254890625], [-36.9547250000, -18.2390750000], [-36.9043140625, -18.2526609375], [-36.8539031250, -18.2662468750], [-36.8034921875, -18.2798328125], [-36.7530812500, -18.2934187500], [-36.7026703125, -18.3070046875], [-36.6522593750, -18.3205906250], [-36.6018484375, -18.3341765625], [-36.5514375000, -18.3477625000], [-36.5010265625, -18.3613484375], [-36.4506156250, -18.3749343750], [-36.4002046875, -18.3885203125], [-36.3497937500, -18.4021062500], [-36.2993828125, -18.4156921875], [-36.2489718750, -18.4292781250], [-36.1985609375, -18.4428640625], [-36.1481500000, -18.4564500000], [-36.0977390625, -18.4700359375], [-36.0473281250, -18.4836218750], [-35.9969171875, -18.4972078125], [-35.9465062500, -18.5107937500], [-35.8960953125, -18.5243796875], [-35.8456843750, -18.5379656250], [-35.7952734375, -18.5515515625], [-35.7448625000, -18.5651375000], [-35.6944515625, -18.5787234375], [-35.6440406250, -18.5923093750], [-35.5936296875, -18.6058953125], [-35.5432187500, -18.6194812500], [-35.4928078125, -18.6330671875], [-35.4423968750, -18.6466531250], [-35.3919859375, -18.6602390625], [-35.3415750000, -18.6738250000], [-35.2911640625, -18.6874109375], [-35.2407531250, -18.7009968750], [-35.1903421875, -18.7145828125], [-35.1399312500, -18.7281687500], [-35.0895203125, -18.7417546875], [-35.0391093750, -18.7553406250], [-34.9886984375, -18.7689265625], [-34.9382875000, -18.7825125000], [-34.8878765625, -18.7960984375], [-34.8374656250, -18.8096843750], [-34.7870546875, -18.8232703125], [-34.7366437500, -18.8368562500], [-34.6862328125, -18.8504421875], [-34.6358218750, -18.8640281250], [-34.5854109375, -18.8776140625], [-34.5350000000, -18.8912000000], [-34.4720250000, -18.9075750000], [-34.4090500000, -18.9239500000], [-34.3460750000, -18.9403250000], [-34.2831000000, -18.9567000000], [-34.2201250000, -18.9730750000], [-34.1571500000, -18.9894500000], [-34.0941750000, -19.0058250000], [-34.0312000000, -19.0222000000], [-33.9682250000, -19.0385750000], [-33.9052500000, -19.0549500000], [-33.8422750000, -19.0713250000], [-33.7793000000, -19.0877000000], [-33.7163250000, -19.1040750000], [-33.6533500000, -19.1204500000], [-33.5903750000, -19.1368250000], [-33.5274000000, -19.1532000000], [-33.4711250000, -19.1674093750], [-33.4148500000, -19.1816187500], [-33.3585750000, -19.1958281250], [-33.3023000000, -19.2100375000], [-33.2460250000, -19.2242468750], [-33.1897500000, -19.2384562500], [-33.1334750000, -19.2526656250], [-33.0772000000, -19.2668750000], [-33.0209250000, -19.2810843750], [-32.9646500000, -19.2952937500], [-32.9083750000, -19.3095031250], [-32.8521000000, -19.3237125000], [-32.7958250000, -19.3379218750], [-32.7395500000, -19.3521312500], [-32.6832750000, -19.3663406250], [-32.6270000000, -19.3805500000], [-32.5707250000, -19.3947593750], [-32.5144500000, -19.4089687500], [-32.4581750000, -19.4231781250], [-32.4019000000, -19.4373875000], [-32.3456250000, -19.4515968750], [-32.2893500000, -19.4658062500], [-32.2330750000, -19.4800156250], [-32.1768000000, -19.4942250000], [-32.1205250000, -19.5084343750], [-32.0642500000, -19.5226437500], [-32.0079750000, -19.5368531250], [-31.9517000000, -19.5510625000], [-31.8954250000, -19.5652718750], [-31.8391500000, -19.5794812500], [-31.7828750000, -19.5936906250], [-31.7266000000, -19.6079000000], [-31.6571875000, -19.6247937500], [-31.5877750000, -19.6416875000], [-31.5183625000, -19.6585812500], [-31.4489500000, -19.6754750000], [-31.3795375000, -19.6923687500], [-31.3101250000, -19.7092625000], [-31.2407125000, -19.7261562500], [-31.1713000000, -19.7430500000], [-31.1018875000, -19.7599437500], [-31.0324750000, -19.7768375000], [-30.9630625000, -19.7937312500], [-30.8936500000, -19.8106250000], [-30.8242375000, -19.8275187500], [-30.7548250000, -19.8444125000], [-30.6854125000, -19.8613062500], [-30.6160000000, -19.8782000000], [-30.5465875000, -19.8950937500], [-30.4771750000, -19.9119875000], [-30.4077625000, -19.9288812500], [-30.3383500000, -19.9457750000], [-30.2689375000, -19.9626687500], [-30.1995250000, -19.9795625000], [-30.1301125000, -19.9964562500], [-30.0607000000, -20.0133500000], [-29.9912875000, -20.0302437500], [-29.9218750000, -20.0471375000], [-29.8524625000, -20.0640312500], [-29.7830500000, -20.0809250000], [-29.7136375000, -20.0978187500], [-29.6442250000, -20.1147125000], [-29.5748125000, -20.1316062500], [-29.5054000000, -20.1485000000], [-29.4359875000, -20.1653937500], [-29.3665750000, -20.1822875000], [-29.2971625000, -20.1991812500], [-29.2277500000, -20.2160750000], [-29.1583375000, -20.2329687500], [-29.0889250000, -20.2498625000], [-29.0195125000, -20.2667562500], [-28.9501000000, -20.2836500000], [-28.8806875000, -20.3005437500], [-28.8112750000, -20.3174375000], [-28.7418625000, -20.3343312500], [-28.6724500000, -20.3512250000], [-28.6030375000, -20.3681187500], [-28.5336250000, -20.3850125000], [-28.4642125000, -20.4019062500], [-28.3948000000, -20.4188000000], [-28.3253875000, -20.4356937500], [-28.2559750000, -20.4525875000], [-28.1865625000, -20.4694812500], [-28.1171500000, -20.4863750000], [-28.0477375000, -20.5032687500], [-27.9783250000, -20.5201625000], [-27.9089125000, -20.5370562500], [-27.8395000000, -20.5539500000], [-27.7700875000, -20.5708437500], [-27.7006750000, -20.5877375000], [-27.6312625000, -20.6046312500], [-27.5618500000, -20.6215250000], [-27.4924375000, -20.6384187500], [-27.4230250000, -20.6553125000], [-27.3536125000, -20.6722062500], [-27.2842000000, -20.6891000000], [-27.2326375000, -20.7014000000], [-27.1810750000, -20.7137000000], [-27.1295125000, -20.7260000000], [-27.0779500000, -20.7383000000], [-27.0263875000, -20.7506000000], [-26.9748250000, -20.7629000000], [-26.9232625000, -20.7752000000], [-26.8717000000, -20.7875000000], [-26.8201375000, -20.7998000000], [-26.7685750000, -20.8121000000], [-26.7170125000, -20.8244000000], [-26.6654500000, -20.8367000000], [-26.6138875000, -20.8490000000], [-26.5623250000, -20.8613000000], [-26.5107625000, -20.8736000000], [-26.4592000000, -20.8859000000], [-26.3882328125, -20.9022781250], [-26.3172656250, -20.9186562500], [-26.2462984375, -20.9350343750], [-26.1753312500, -20.9514125000], [-26.1043640625, -20.9677906250], [-26.0333968750, -20.9841687500], [-25.9624296875, -21.0005468750], [-25.8914625000, -21.0169250000], [-25.8204953125, -21.0333031250], [-25.7495281250, -21.0496812500], [-25.6785609375, -21.0660593750], [-25.6075937500, -21.0824375000], [-25.5366265625, -21.0988156250], [-25.4656593750, -21.1151937500], [-25.3946921875, -21.1315718750], [-25.3237250000, -21.1479500000], [-25.2527578125, -21.1643281250], [-25.1817906250, -21.1807062500], [-25.1108234375, -21.1970843750], [-25.0398562500, -21.2134625000], [-24.9688890625, -21.2298406250], [-24.8979218750, -21.2462187500], [-24.8269546875, -21.2625968750], [-24.7559875000, -21.2789750000], [-24.6850203125, -21.2953531250], [-24.6140531250, -21.3117312500], [-24.5430859375, -21.3281093750], [-24.4721187500, -21.3444875000], [-24.4011515625, -21.3608656250], [-24.3301843750, -21.3772437500], [-24.2592171875, -21.3936218750], [-24.1882500000, -21.4100000000], [-24.1172828125, -21.4263781250], [-24.0463156250, -21.4427562500], [-23.9753484375, -21.4591343750], [-23.9043812500, -21.4755125000], [-23.8334140625, -21.4918906250], [-23.7624468750, -21.5082687500], [-23.6914796875, -21.5246468750], [-23.6205125000, -21.5410250000], [-23.5495453125, -21.5574031250], [-23.4785781250, -21.5737812500], [-23.4076109375, -21.5901593750], [-23.3366437500, -21.6065375000], [-23.2656765625, -21.6229156250], [-23.1947093750, -21.6392937500], [-23.1237421875, -21.6556718750], [-23.0527750000, -21.6720500000], [-22.9818078125, -21.6884281250], [-22.9108406250, -21.7048062500], [-22.8398734375, -21.7211843750], [-22.7689062500, -21.7375625000], [-22.6979390625, -21.7539406250], [-22.6269718750, -21.7703187500], [-22.5560046875, -21.7866968750], [-22.4850375000, -21.8030750000], [-22.4140703125, -21.8194531250], [-22.3431031250, -21.8358312500], [-22.2721359375, -21.8522093750], [-22.2011687500, -21.8685875000], [-22.1302015625, -21.8849656250], [-22.0592343750, -21.9013437500], [-21.9882671875, -21.9177218750], [-21.9173000000, -21.9341000000], [-21.8280625000, -21.9539000000], [-21.7388250000, -21.9737000000], [-21.6495875000, -21.9935000000], [-21.5603500000, -22.0133000000], [-21.4711125000, -22.0331000000], [-21.3818750000, -22.0529000000], [-21.2926375000, -22.0727000000], [-21.2034000000, -22.0925000000], [-21.1276406250, -22.1082437500], [-21.0518812500, -22.1239875000], [-20.9761218750, -22.1397312500], [-20.9003625000, -22.1554750000], [-20.8246031250, -22.1712187500], [-20.7488437500, -22.1869625000], [-20.6730843750, -22.2027062500], [-20.5973250000, -22.2184500000], [-20.5215656250, -22.2341937500], [-20.4458062500, -22.2499375000], [-20.3700468750, -22.2656812500], [-20.2942875000, -22.2814250000], [-20.2185281250, -22.2971687500], [-20.1427687500, -22.3129125000], [-20.0670093750, -22.3286562500], [-19.9912500000, -22.3444000000], [-19.9154906250, -22.3601437500], [-19.8397312500, -22.3758875000], [-19.7639718750, -22.3916312500], [-19.6882125000, -22.4073750000], [-19.6124531250, -22.4231187500], [-19.5366937500, -22.4388625000], [-19.4609343750, -22.4546062500], [-19.3851750000, -22.4703500000], [-19.3094156250, -22.4860937500], [-19.2336562500, -22.5018375000], [-19.1578968750, -22.5175812500], [-19.0821375000, -22.5333250000], [-19.0063781250, -22.5490687500], [-18.9306187500, -22.5648125000], [-18.8548593750, -22.5805562500], [-18.7791000000, -22.5963000000], [-18.7063750000, -22.6119609375], [-18.6336500000, -22.6276218750], [-18.5609250000, -22.6432828125], [-18.4882000000, -22.6589437500], [-18.4154750000, -22.6746046875], [-18.3427500000, -22.6902656250], [-18.2700250000, -22.7059265625], [-18.1973000000, -22.7215875000], [-18.1245750000, -22.7372484375], [-18.0518500000, -22.7529093750], [-17.9791250000, -22.7685703125], [-17.9064000000, -22.7842312500], [-17.8336750000, -22.7998921875], [-17.7609500000, -22.8155531250], [-17.6882250000, -22.8312140625], [-17.6155000000, -22.8468750000], [-17.5427750000, -22.8625359375], [-17.4700500000, -22.8781968750], [-17.3973250000, -22.8938578125], [-17.3246000000, -22.9095187500], [-17.2518750000, -22.9251796875], [-17.1791500000, -22.9408406250], [-17.1064250000, -22.9565015625], [-17.0337000000, -22.9721625000], [-16.9609750000, -22.9878234375], [-16.8882500000, -23.0034843750], [-16.8155250000, -23.0191453125], [-16.7428000000, -23.0348062500], [-16.6700750000, -23.0504671875], [-16.5973500000, -23.0661281250], [-16.5246250000, -23.0817890625], [-16.4519000000, -23.0974500000], [-16.3791750000, -23.1131109375], [-16.3064500000, -23.1287718750], [-16.2337250000, -23.1444328125], [-16.1610000000, -23.1600937500], [-16.0882750000, -23.1757546875], [-16.0155500000, -23.1914156250], [-15.9428250000, -23.2070765625], [-15.8701000000, -23.2227375000], [-15.7973750000, -23.2383984375], [-15.7246500000, -23.2540593750], [-15.6519250000, -23.2697203125], [-15.5792000000, -23.2853812500], [-15.5064750000, -23.3010421875], [-15.4337500000, -23.3167031250], [-15.3610250000, -23.3323640625], [-15.2883000000, -23.3480250000], [-15.2155750000, -23.3636859375], [-15.1428500000, -23.3793468750], [-15.0701250000, -23.3950078125], [-14.9974000000, -23.4106687500], [-14.9246750000, -23.4263296875], [-14.8519500000, -23.4419906250], [-14.7792250000, -23.4576515625], [-14.7065000000, -23.4733125000], [-14.6337750000, -23.4889734375], [-14.5610500000, -23.5046343750], [-14.4883250000, -23.5202953125], [-14.4156000000, -23.5359562500], [-14.3428750000, -23.5516171875], [-14.2701500000, -23.5672781250], [-14.1974250000, -23.5829390625], [-14.1247000000, -23.5986000000], [-14.0588500000, -23.6116562500], [-13.9930000000, -23.6247125000], [-13.9271500000, -23.6377687500], [-13.8613000000, -23.6508250000], [-13.7954500000, -23.6638812500], [-13.7296000000, -23.6769375000], [-13.6637500000, -23.6899937500], [-13.5979000000, -23.7030500000], [-13.5320500000, -23.7161062500], [-13.4662000000, -23.7291625000], [-13.4003500000, -23.7422187500], [-13.3345000000, -23.7552750000], [-13.2686500000, -23.7683312500], [-13.2028000000, -23.7813875000], [-13.1369500000, -23.7944437500], [-13.0711000000, -23.8075000000], [-13.0052500000, -23.8205562500], [-12.9394000000, -23.8336125000], [-12.8735500000, -23.8466687500], [-12.8077000000, -23.8597250000], [-12.7418500000, -23.8727812500], [-12.6760000000, -23.8858375000], [-12.6101500000, -23.8988937500], [-12.5443000000, -23.9119500000], [-12.4784500000, -23.9250062500], [-12.4126000000, -23.9380625000], [-12.3467500000, -23.9511187500], [-12.2809000000, -23.9641750000], [-12.2150500000, -23.9772312500], [-12.1492000000, -23.9902875000], [-12.0833500000, -24.0033437500], [-12.0175000000, -24.0164000000], [-11.9430393750, -24.0299265625], [-11.8685787500, -24.0434531250], [-11.7941181250, -24.0569796875], [-11.7196575000, -24.0705062500], [-11.6451968750, -24.0840328125], [-11.5707362500, -24.0975593750], [-11.4962756250, -24.1110859375], [-11.4218150000, -24.1246125000], [-11.3473543750, -24.1381390625], [-11.2728937500, -24.1516656250], [-11.1984331250, -24.1651921875], [-11.1239725000, -24.1787187500], [-11.0495118750, -24.1922453125], [-10.9750512500, -24.2057718750], [-10.9005906250, -24.2192984375], [-10.8261300000, -24.2328250000], [-10.7516693750, -24.2463515625], [-10.6772087500, -24.2598781250], [-10.6027481250, -24.2734046875], [-10.5282875000, -24.2869312500], [-10.4538268750, -24.3004578125], [-10.3793662500, -24.3139843750], [-10.3049056250, -24.3275109375], [-10.2304450000, -24.3410375000], [-10.1559843750, -24.3545640625], [-10.0815237500, -24.3680906250], [-10.0070631250, -24.3816171875], [-9.9326025000, -24.3951437500], [-9.8581418750, -24.4086703125], [-9.7836812500, -24.4221968750], [-9.7092206250, -24.4357234375], [-9.6347600000, -24.4492500000], [-9.5602993750, -24.4627765625], [-9.4858387500, -24.4763031250], [-9.4113781250, -24.4898296875], [-9.3369175000, -24.5033562500], [-9.2624568750, -24.5168828125], [-9.1879962500, -24.5304093750], [-9.1135356250, -24.5439359375], [-9.0390750000, -24.5574625000], [-8.9646143750, -24.5709890625], [-8.8901537500, -24.5845156250], [-8.8156931250, -24.5980421875], [-8.7412325000, -24.6115687500], [-8.6667718750, -24.6250953125], [-8.5923112500, -24.6386218750], [-8.5178506250, -24.6521484375], [-8.4433900000, -24.6656750000], [-8.3689293750, -24.6792015625], [-8.2944687500, -24.6927281250], [-8.2200081250, -24.7062546875], [-8.1455475000, -24.7197812500], [-8.0710868750, -24.7333078125], [-7.9966262500, -24.7468343750], [-7.9221656250, -24.7603609375], [-7.8477050000, -24.7738875000], [-7.7732443750, -24.7874140625], [-7.6987837500, -24.8009406250], [-7.6243231250, -24.8144671875], [-7.5498625000, -24.8279937500], [-7.4754018750, -24.8415203125], [-7.4009412500, -24.8550468750], [-7.3264806250, -24.8685734375], [-7.2520200000, -24.8821000000], [-7.1775593750, -24.8956265625], [-7.1030987500, -24.9091531250], [-7.0286381250, -24.9226796875], [-6.9541775000, -24.9362062500], [-6.8797168750, -24.9497328125], [-6.8052562500, -24.9632593750], [-6.7307956250, -24.9767859375], [-6.6563350000, -24.9903125000], [-6.5818743750, -25.0038390625], [-6.5074137500, -25.0173656250], [-6.4329531250, -25.0308921875], [-6.3584925000, -25.0444187500], [-6.2840318750, -25.0579453125], [-6.2095712500, -25.0714718750], [-6.1351106250, -25.0849984375], [-6.0606500000, -25.0985250000], [-5.9861893750, -25.1120515625], [-5.9117287500, -25.1255781250], [-5.8372681250, -25.1391046875], [-5.7628075000, -25.1526312500], [-5.6883468750, -25.1661578125], [-5.6138862500, -25.1796843750], [-5.5394256250, -25.1932109375], [-5.4649650000, -25.2067375000], [-5.3905043750, -25.2202640625], [-5.3160437500, -25.2337906250], [-5.2415831250, -25.2473171875], [-5.1671225000, -25.2608437500], [-5.0926618750, -25.2743703125], [-5.0182012500, -25.2878968750], [-4.9437406250, -25.3014234375], [-4.8692800000, -25.3149500000], [-4.7948193750, -25.3284765625], [-4.7203587500, -25.3420031250], [-4.6458981250, -25.3555296875], [-4.5714375000, -25.3690562500], [-4.4969768750, -25.3825828125], [-4.4225162500, -25.3961093750], [-4.3480556250, -25.4096359375], [-4.2735950000, -25.4231625000], [-4.1991343750, -25.4366890625], [-4.1246737500, -25.4502156250], [-4.0502131250, -25.4637421875], [-3.9757525000, -25.4772687500], [-3.9012918750, -25.4907953125], [-3.8268312500, -25.5043218750], [-3.7523706250, -25.5178484375], [-3.6779100000, -25.5313750000], [-3.6034493750, -25.5449015625], [-3.5289887500, -25.5584281250], [-3.4545281250, -25.5719546875], [-3.3800675000, -25.5854812500], [-3.3056068750, -25.5990078125], [-3.2311462500, -25.6125343750], [-3.1566856250, -25.6260609375], [-3.0822250000, -25.6395875000], [-3.0077643750, -25.6531140625], [-2.9333037500, -25.6666406250], [-2.8588431250, -25.6801671875], [-2.7843825000, -25.6936937500], [-2.7099218750, -25.7072203125], [-2.6354612500, -25.7207468750], [-2.5610006250, -25.7342734375], [-2.4865400000, -25.7478000000], [-2.3965901563, -25.7613929688], [-2.3066403125, -25.7749859375], [-2.2166904687, -25.7885789062], [-2.1267406250, -25.8021718750], [-2.0367907813, -25.8157648437], [-1.9468409375, -25.8293578125], [-1.8568910938, -25.8429507812], [-1.7669412500, -25.8565437500], [-1.6769914062, -25.8701367188], [-1.5870415625, -25.8837296875], [-1.4970917188, -25.8973226563], [-1.4071418750, -25.9109156250], [-1.3171920313, -25.9245085938], [-1.2272421875, -25.9381015625], [-1.1372923437, -25.9516945313], [-1.0473425000, -25.9652875000], [-0.9573926563, -25.9788804688], [-0.8674428125, -25.9924734375], [-0.7774929688, -26.0060664063], [-0.6875431250, -26.0196593750], [-0.5975932813, -26.0332523438], [-0.5076434375, -26.0468453125], [-0.4176935938, -26.0604382813], [-0.3277437500, -26.0740312500], [-0.2377939063, -26.0876242188], [-0.1478440625, -26.1012171875], [-0.0578942188, -26.1148101562], [0.0320556250, -26.1284031250], [0.1220054687, -26.1419960937], [0.2119553125, -26.1555890625], [0.3019051562, -26.1691820312], [0.3918550000, -26.1827750000], [0.4818048437, -26.1963679687], [0.5717546875, -26.2099609375], [0.6617045312, -26.2235539063], [0.7516543750, -26.2371468750], [0.8416042187, -26.2507398438], [0.9315540625, -26.2643328125], [1.0215039062, -26.2779257813], [1.1114537500, -26.2915187500], [1.2014035937, -26.3051117188], [1.2913534375, -26.3187046875], [1.3813032812, -26.3322976563], [1.4712531250, -26.3458906250], [1.5612029687, -26.3594835938], [1.6511528125, -26.3730765625], [1.7411026562, -26.3866695312], [1.8310525000, -26.4002625000], [1.9210023437, -26.4138554688], [2.0109521875, -26.4274484375], [2.1009020312, -26.4410414062], [2.1908518750, -26.4546343750], [2.2808017187, -26.4682273437], [2.3707515625, -26.4818203125], [2.4607014062, -26.4954132812], [2.5506512500, -26.5090062500], [2.6406010937, -26.5225992187], [2.7305509375, -26.5361921875], [2.8205007812, -26.5497851562], [2.9104506250, -26.5633781250], [3.0004004687, -26.5769710938], [3.0903503125, -26.5905640625], [3.1803001562, -26.6041570313], [3.2702500000, -26.6177500000], [3.3601998437, -26.6313429688], [3.4501496875, -26.6449359375], [3.5400995312, -26.6585289063], [3.6300493750, -26.6721218750], [3.7199992187, -26.6857148438], [3.8099490625, -26.6993078125], [3.8998989062, -26.7129007813], [3.9898487500, -26.7264937500], [4.0797985937, -26.7400867188], [4.1697484375, -26.7536796875], [4.2596982812, -26.7672726563], [4.3496481250, -26.7808656250], [4.4395979688, -26.7944585938], [4.5295478125, -26.8080515625], [4.6194976562, -26.8216445313], [4.7094475000, -26.8352375000], [4.7993973437, -26.8488304688], [4.8893471875, -26.8624234375], [4.9792970312, -26.8760164062], [5.0692468750, -26.8896093750]]);
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
import math
import time

from stl import mesh, Dimension

from tkinter import Tk     # from tkinter import Tk for Python 3.x
from tkinter.filedialog import askopenfilename
from mpl_toolkits.mplot3d import art3d
from matplotlib import pyplot as plt
import solid
import os
import ezdxf
import shapely.geometry as sg
import subprocess
from GUI import getSCADPath



def outputSTL(From, To, PATH=getSCADPath()):
    subprocess.Popen(PATH + " -o " + To + " " + From)
    while not os.path.exists(To):
        time.sleep(1)

class Model:
    def __init__(self, model, fileName, location, layer, thickness):
        self.location = location
        self.code = None
        self.fileName = fileName
        self.stl = fileName + ".stl"
        self.layer = layer
        self.thickness = thickness
        self.maxz = (layer+1)*thickness
        self.dxf = fileName + ".dxf"
        self.scad = fileName + ".scad"
        self.model = model
        self.center = None
        self.width = 10
        self.mesh = None
        self.useable_area = None


    def get_code(self):
        max_dim = 0.05
        max_array = 6

        num = int(self.fileName)
        nums = [int(a) for a in str(num)]
        nums.reverse()
        indices = nums
        length = len(nums)

        print(indices)
        t = 0
        i = 0
        cubes = []
        x = 0
        y = 0
        width = 0.01
        while x <= max_dim:
            while y <= max_dim:
                print(indices)
                if nums == []:
                    break
                if indices[0] != 0:
                    cubes.append(solid.translate([x, y, 0])(solid.cube(size=t / 1000 + 0.001)))
                    y += max_dim / (max_array - 1)
                    nums[0] = nums[0] - 1
                else:
                    indices.pop(0)
                    t += 1
                i += 1
            x += max_dim / (max_array - 1)
            y = 0

        outside = solid.translate([-width / 2, -width / 2])(solid.cube(max_dim + (length - 1) / 1000 + 0.001 + width))
        self.code = solid.difference()(outside, cubes)
        self.code = solid.projection(cut=True)(self.code)
        solid.scad_render_to_file(self.code, self.location + "/code.scad")
        outputSTL(From=self.location+"/code.scad", To=self.location+"code.dxf", PATH=getSCADPath())
        # os.system("toSTL.sh renders/code.scad renders/code.dxf")
        return self.location+"/code.dxf"

    def download(self, type):
        if type =="stl":
            print("generating:" + self.location+"/"+ self.fileName+".stl")
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".stl")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".stl")
        elif type == "dxf":
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".dxf")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".dxf")

    def render(self):
        solid.scad_render_to_file(self.model, self.location+"/"+ self.fileName+'.scad')
        while not os.path.exists(self.location+"/"+self.fileName+".scad"):
            time.sleep(1)
        # outputSTL(From= self.location+"/"+ self.fileName+'.scad', To=self.location+"/"+ self.fileName+'.stl')

    def get_points(self):
        doc = ezdxf.readfile(filename=self.location+"/"+ self.fileName+".dxf")
        msp = doc.modelspace()
        i=0
        lists = []
        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return [start, end]

        for e in msp.query("LINE"):
            line = helper(e)
            if not lists:
                lists.append([line])
            else:
                if lists[i][len(lists)-1][1] != line[0]:
                    lists.append([line])
                    i+=1
                else:
                    lists[i].append(line)

    def get_points2(self, FILE):
        doc = ezdxf.readfile(filename=FILE)
        msp = doc.modelspace()
        i = 0
        lists = []

        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return (start, end)

        for e in msp.query("LINE"):
            line = helper(e)
            if lists==[]:
                lists.append([line])
            else:
                if lists[i][len(lists[i]) - 1][1] != line[0]:
                    lists.append([line])
                    i += 1
                else:
                    lists[i].append(line)
        return lists

    def add_code(self):
        dxf = solid.projection(cut=False)(self.model)
        offset = solid.offset(r=-0.1)(dxf)
        solid.scad_render_to_file(offset, self.location+'/offset.scad')
        os.system("toSTL.sh renders/offset.scad renders/offset.dxf")
        lines = self.get_points2("renders/offset.dxf")
        x = lines[0][0][0][0]
        y = lines[0][0][0][1]
        print(x)
        print(y)
        code = solid.translate([x,y,0])(self.code)
        code = solid.linear_extrude(height=999)(code)
        save = self.model
        self.model = solid.projection()(solid.difference()(self.model, code))
        self.render()
        self.download("dxf")
        self.model = save

    def add_label(self, pos):
        # num = 12
        # minx, maxx, miny, maxy, minz, maxz = self.find_minmax()
        maxz = self.maxz
        # label = solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.5, halign="center"))
        # i=minx
        # print("x-len: " + str(maxx-minx))
        # print(i)
        # inc = (maxx-minx)/num
        # while minx <= i <= maxx:
        #     label = solid.union()(solid.translate([i, 0, maxz - 0.2])(solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.25, halign="center"))), label)
        #     i += inc
        #
        # l = label
        #
        # i =miny
        # while miny<= i <= maxy:
        #     print("y inc")
        #     l = solid.union()(solid.translate([0, i, 0])(label), l)
        #     i += 0.5
        for i in str(self.fileName):
            cur = pos[0]
            label = solid.translate([pos[0][0], pos[0][1], self.maxz-0.2])(solid.linear_extrude(height=(self.thickness)/3)(solid.text(str(i), size=0.5, halign="center", valign="center")))
            self.model = solid.difference()(self.model, label)
            pos.append(pos.pop(0))
            while abs(cur[0]-pos[0][0])<0.5 and abs(cur[1]-pos[0][1])<0.5:
                pos.append(pos.pop(0))



    def Center(self):

        volume, cog, inertia = self.mesh.get_mass_properties()
        print("Volume                                  = {0}".format(volume))
        print("Position of the center of gravity (COG) = {0}".format(cog))
        m_centered = solid.translate([-cog[0], -cog[1], 0])(
            self.model
        )
        return m_centered

    def find_minmax(self):
        minx = maxx = miny = maxy = minz = maxz = None
        for p in self.mesh.points:
            # p contains (x, y, z)
            if minx is None:
                minx = p[Dimension.X]
                maxx = p[Dimension.X]
                miny = p[Dimension.Y]
                maxy = p[Dimension.Y]
                minz = p[Dimension.Z]
                maxz = p[Dimension.Z]
            else:
                maxx = max(p[Dimension.X], maxx)
                minx = min(p[Dimension.X], minx)
                maxy = max(p[Dimension.Y], maxy)
                miny = min(p[Dimension.Y], miny)
                maxz = max(p[Dimension.Z], maxz)
                minz = min(p[Dimension.Z], minz)
        lenx = maxx - minx
        leny = maxy - miny
        lenz = maxz - minz
        return minx, maxx, miny, maxy, minz, maxz

    # def generate_Mesh(self):
    #     self.mesh = mesh.Mesh.from_file(self.location + "/" + str(int(self.fileName)//8)+ "b.stl")

    def get_top(self):
        top = solid.projection(cut=True)(solid.translate([0,0,-1*self.thickness*(self.layer+1)])(self.model))
        useable_area = solid.offset(r=-0.45)(top)
        self.useable_area = useable_area
        solid.scad_render_to_file(self.useable_area, self.location+'/' + 'toptemp.scad')
        outputSTL(From=self.location+'/' + 'toptemp.scad', To=self.location+"/top"+ self.dxf)

        # os.system("toSTL.sh out/toptemp.scad renders/" + self.fileName + ".dxf")
        dxf = DXF(self.location+"/top"+ self.dxf)
        min_p=dxf.points[0][0]
        points_ordered = dxf.points
        i=0
        while i <= len(dxf.points)+1:
            while math.sqrt((dxf.points[0][0]-dxf.points[1][0])**2+(dxf.points[0][1]-dxf.points[1][1])**2) > 0.1:
                dxf.points.insert(1, [(dxf.points[0][0]+dxf.points[1][0])/2, (dxf.points[0][1]+dxf.points[1][1])/2])
                i = i-1
            dxf.points.append(dxf.points.pop(0))
            i+=1
        for i in range(len(dxf.points)):
            dxf.points.append(dxf.points.pop(0))
            if dxf.points[0][0] < min_p:
                min_p = dxf.points[0][0]
                points_ordered = dxf.points.copy()
        dxf.points = points_ordered.copy()

        print(dxf.points)
        self.add_label(dxf.points)

class DXF:
    def __init__(self, file):
        self.file = file
        self.Lines = []
        self.points = []
        doc = ezdxf.readfile(self.file)
        msp = doc.modelspace()
        for e in msp:
            if e.dxftype() == "LINE":
                self.Lines.append(e)
                self.points.append([e.dxf.start[0], e.dxf.start[1]])
        # self.points.append([self.Lines[-1].dxf.end[0], self.Lines[-1].dxf.end[1]])
        self.area = None
        self.center = None
        self.polygon = sg.Polygon(self.points)

    def get_area(self):
        self.area = self.polygon.area
        return self.area

    def get_center(self):
        x_sum = 0
        y_sum =0
        for i in self.points:
            x_sum += i[0]
            y_sum += i[1]
        x_c = x_sum/len(self.points)
        y_c = y_sum/len(self.points)
        return (x_c, y_c)

    def split(self, maxdim):
        splits = []
        length = 0
        pieces = [[]]
        prev = self.points[-1]
        pieces[-1].append(prev)
        for j in self.points:
            length = length + math.sqrt((prev[0]-j[0])**2+(prev[1]-j[1])**2)
            if length >= maxdim:
                pieces[-1].append(j)
                pieces.append([])
                length = 0
            pieces[-1].append(j)
            prev = j
        for j in pieces:
            j.insert(0, [0,0])
            piece = solid.linear_extrude(height=10)(solid.polygon(j))
            splits.append(piece)
        return splits
    def refine_points(self):
        i=0
        while i <= len(self.points)+1:
            while math.sqrt((self.points[0][0]-self.points[1][0])**2+(self.points[0][1]-self.points[1][1])**2) > 0.1:
                self.points.insert(1, [(self.points[0][0]+self.points[1][0])/2, (self.points[0][1]+self.points[1][1])/2])
                i = i-1
            self.points.append(self.points.pop(0))
            i+=1


if __name__== "__main__":
    test = DXF("C:/Users/Daniel/Documents/repos/Shell_Maker/output/0top_slice.dxf")
    test.refine_points()
    k = test.split(48)
    for i in range(len(k)):
        solid.scad_render_to_file(k[i], str(i) + ".scad")


 
 
************************************************/
