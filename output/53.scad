// Generated by SolidPython 1.1.3 on 2024-05-26 01:59:36


intersection() {
	difference() {
		intersection() {
			translate(v = [0, 0, 0]) {
				import(file = "CE3E3V2_Bottom_shell.stl", origin = [0, 0]);
			}
			translate(v = [-90.04029846191406, -32.690147399902344, 12]) {
				cube(size = [180.0806, 65.380295, 2]);
			}
		}
		linear_extrude(height = 999) {
			offset(r = -1) {
				import(file = "C:/Users/Daniel/Documents/repos/Shell_Maker/output/6top_slice.dxf", origin = [0, 0]);
			}
		}
	}
	translate(v = [0, 0, 12]) {
		linear_extrude(height = 10) {
			polygon(points = [[0, 0], [-43.7642875000, -16.3494375000], [-43.7076171875, -16.3658109375], [-43.6509468750, -16.3821843750], [-43.5942765625, -16.3985578125], [-43.5376062500, -16.4149312500], [-43.4809359375, -16.4313046875], [-43.4242656250, -16.4476781250], [-43.3675953125, -16.4640515625], [-43.3109250000, -16.4804250000], [-43.2542546875, -16.4967984375], [-43.1975843750, -16.5131718750], [-43.1409140625, -16.5295453125], [-43.0842437500, -16.5459187500], [-43.0275734375, -16.5622921875], [-42.9709031250, -16.5786656250], [-42.9142328125, -16.5950390625], [-42.8575625000, -16.6114125000], [-42.8008921875, -16.6277859375], [-42.7442218750, -16.6441593750], [-42.6875515625, -16.6605328125], [-42.6308812500, -16.6769062500], [-42.5742109375, -16.6932796875], [-42.5175406250, -16.7096531250], [-42.4608703125, -16.7260265625], [-42.4042000000, -16.7424000000], [-42.3365750000, -16.7613000000], [-42.2689500000, -16.7802000000], [-42.2013250000, -16.7991000000], [-42.1337000000, -16.8180000000], [-42.0660750000, -16.8369000000], [-41.9984500000, -16.8558000000], [-41.9308250000, -16.8747000000], [-41.8632000000, -16.8936000000], [-41.7955750000, -16.9125000000], [-41.7279500000, -16.9314000000], [-41.6603250000, -16.9503000000], [-41.5927000000, -16.9692000000], [-41.5250750000, -16.9881000000], [-41.4574500000, -17.0070000000], [-41.3898250000, -17.0259000000], [-41.3222000000, -17.0448000000], [-41.2545750000, -17.0637000000], [-41.1869500000, -17.0826000000], [-41.1193250000, -17.1015000000], [-41.0517000000, -17.1204000000], [-40.9840750000, -17.1393000000], [-40.9164500000, -17.1582000000], [-40.8488250000, -17.1771000000], [-40.7812000000, -17.1960000000], [-40.7135750000, -17.2149000000], [-40.6459500000, -17.2338000000], [-40.5783250000, -17.2527000000], [-40.5107000000, -17.2716000000], [-40.4430750000, -17.2905000000], [-40.3754500000, -17.3094000000], [-40.3078250000, -17.3283000000], [-40.2402000000, -17.3472000000], [-40.1885562500, -17.3612500000], [-40.1369125000, -17.3753000000], [-40.0852687500, -17.3893500000], [-40.0336250000, -17.4034000000], [-39.9819812500, -17.4174500000], [-39.9303375000, -17.4315000000], [-39.8786937500, -17.4455500000], [-39.8270500000, -17.4596000000], [-39.7754062500, -17.4736500000], [-39.7237625000, -17.4877000000], [-39.6721187500, -17.5017500000], [-39.6204750000, -17.5158000000], [-39.5688312500, -17.5298500000], [-39.5171875000, -17.5439000000], [-39.4655437500, -17.5579500000], [-39.4139000000, -17.5720000000], [-39.3306703125, -17.5944328125], [-39.2474406250, -17.6168656250], [-39.1642109375, -17.6392984375], [-39.0809812500, -17.6617312500], [-38.9977515625, -17.6841640625], [-38.9145218750, -17.7065968750], [-38.8312921875, -17.7290296875], [-38.7480625000, -17.7514625000], [-38.6648328125, -17.7738953125], [-38.5816031250, -17.7963281250], [-38.4983734375, -17.8187609375], [-38.4151437500, -17.8411937500], [-38.3319140625, -17.8636265625], [-38.2486843750, -17.8860593750], [-38.1654546875, -17.9084921875], [-38.0822250000, -17.9309250000], [-37.9989953125, -17.9533578125], [-37.9157656250, -17.9757906250], [-37.8325359375, -17.9982234375], [-37.7493062500, -18.0206562500], [-37.6660765625, -18.0430890625], [-37.5828468750, -18.0655218750], [-37.4996171875, -18.0879546875], [-37.4163875000, -18.1103875000], [-37.3331578125, -18.1328203125], [-37.2499281250, -18.1552531250], [-37.1666984375, -18.1776859375], [-37.0834687500, -18.2001187500], [-37.0002390625, -18.2225515625], [-36.9170093750, -18.2449843750], [-36.8337796875, -18.2674171875], [-36.7505500000, -18.2898500000], [-36.6673203125, -18.3122828125], [-36.5840906250, -18.3347156250], [-36.5008609375, -18.3571484375], [-36.4176312500, -18.3795812500], [-36.3344015625, -18.4020140625], [-36.2511718750, -18.4244468750], [-36.1679421875, -18.4468796875], [-36.0847125000, -18.4693125000], [-36.0014828125, -18.4917453125], [-35.9182531250, -18.5141781250], [-35.8350234375, -18.5366109375], [-35.7517937500, -18.5590437500], [-35.6685640625, -18.5814765625], [-35.5853343750, -18.6039093750], [-35.5021046875, -18.6263421875], [-35.4188750000, -18.6487750000], [-35.3356453125, -18.6712078125], [-35.2524156250, -18.6936406250], [-35.1691859375, -18.7160734375], [-35.0859562500, -18.7385062500], [-35.0027265625, -18.7609390625], [-34.9194968750, -18.7833718750], [-34.8362671875, -18.8058046875], [-34.7530375000, -18.8282375000], [-34.6698078125, -18.8506703125], [-34.5865781250, -18.8731031250], [-34.5033484375, -18.8955359375], [-34.4201187500, -18.9179687500], [-34.3368890625, -18.9404015625], [-34.2536593750, -18.9628343750], [-34.1704296875, -18.9852671875], [-34.0872000000, -19.0077000000], [-34.0172250000, -19.0258875000], [-33.9472500000, -19.0440750000], [-33.8772750000, -19.0622625000], [-33.8073000000, -19.0804500000], [-33.7373250000, -19.0986375000], [-33.6673500000, -19.1168250000], [-33.5973750000, -19.1350125000], [-33.5274000000, -19.1532000000], [-33.4433562500, -19.1744187500], [-33.3593125000, -19.1956375000], [-33.2752687500, -19.2168562500], [-33.1912250000, -19.2380750000], [-33.1071812500, -19.2592937500], [-33.0231375000, -19.2805125000], [-32.9390937500, -19.3017312500], [-32.8550500000, -19.3229500000], [-32.7710062500, -19.3441687500], [-32.6869625000, -19.3653875000], [-32.6029187500, -19.3866062500], [-32.5188750000, -19.4078250000], [-32.4348312500, -19.4290437500], [-32.3507875000, -19.4502625000], [-32.2667437500, -19.4714812500], [-32.1827000000, -19.4927000000], [-32.0986562500, -19.5139187500], [-32.0146125000, -19.5351375000], [-31.9305687500, -19.5563562500], [-31.8465250000, -19.5775750000], [-31.7624812500, -19.5987937500], [-31.6784375000, -19.6200125000], [-31.5943937500, -19.6412312500], [-31.5103500000, -19.6624500000], [-31.4263062500, -19.6836687500], [-31.3422625000, -19.7048875000], [-31.2582187500, -19.7261062500], [-31.1741750000, -19.7473250000], [-31.0901312500, -19.7685437500], [-31.0060875000, -19.7897625000], [-30.9220437500, -19.8109812500], [-30.8380000000, -19.8322000000], [-30.7785093750, -19.8466812500], [-30.7190187500, -19.8611625000], [-30.6595281250, -19.8756437500], [-30.6000375000, -19.8901250000], [-30.5405468750, -19.9046062500], [-30.4810562500, -19.9190875000], [-30.4215656250, -19.9335687500], [-30.3620750000, -19.9480500000], [-30.3025843750, -19.9625312500], [-30.2430937500, -19.9770125000], [-30.1836031250, -19.9914937500], [-30.1241125000, -20.0059750000], [-30.0646218750, -20.0204562500], [-30.0051312500, -20.0349375000], [-29.9456406250, -20.0494187500], [-29.8861500000, -20.0639000000], [-29.8266593750, -20.0783812500], [-29.7671687500, -20.0928625000], [-29.7076781250, -20.1073437500], [-29.6481875000, -20.1218250000], [-29.5886968750, -20.1363062500], [-29.5292062500, -20.1507875000], [-29.4697156250, -20.1652687500], [-29.4102250000, -20.1797500000], [-29.3507343750, -20.1942312500], [-29.2912437500, -20.2087125000], [-29.2317531250, -20.2231937500], [-29.1722625000, -20.2376750000], [-29.1127718750, -20.2521562500], [-29.0532812500, -20.2666375000], [-28.9937906250, -20.2811187500], [-28.9343000000, -20.2956000000], [-28.8827375000, -20.3078937500], [-28.8311750000, -20.3201875000], [-28.7796125000, -20.3324812500], [-28.7280500000, -20.3447750000], [-28.6764875000, -20.3570687500], [-28.6249250000, -20.3693625000], [-28.5733625000, -20.3816562500], [-28.5218000000, -20.3939500000], [-28.4702375000, -20.4062437500], [-28.4186750000, -20.4185375000], [-28.3671125000, -20.4308312500], [-28.3155500000, -20.4431250000], [-28.2639875000, -20.4554187500], [-28.2124250000, -20.4677125000], [-28.1608625000, -20.4800062500], [-28.1093000000, -20.4923000000], [-28.0497710938, -20.5060390625], [-27.9902421875, -20.5197781250], [-27.9307132813, -20.5335171875], [-27.8711843750, -20.5472562500], [-27.8116554687, -20.5609953125], [-27.7521265625, -20.5747343750], [-27.6925976563, -20.5884734375], [-27.6330687500, -20.6022125000], [-27.5735398437, -20.6159515625], [-27.5140109375, -20.6296906250], [-27.4544820313, -20.6434296875], [-27.3949531250, -20.6571687500], [-27.3354242187, -20.6709078125], [-27.2758953125, -20.6846468750], [-27.2163664063, -20.6983859375], [-27.1568375000, -20.7121250000], [-27.0973085938, -20.7258640625], [-27.0377796875, -20.7396031250], [-26.9782507813, -20.7533421875], [-26.9187218750, -20.7670812500], [-26.8591929688, -20.7808203125], [-26.7996640625, -20.7945593750], [-26.7401351562, -20.8082984375], [-26.6806062500, -20.8220375000], [-26.6210773438, -20.8357765625], [-26.5615484375, -20.8495156250], [-26.5020195312, -20.8632546875], [-26.4424906250, -20.8769937500], [-26.3829617187, -20.8907328125], [-26.3234328125, -20.9044718750], [-26.2639039063, -20.9182109375], [-26.2043750000, -20.9319500000], [-26.1448460937, -20.9456890625], [-26.0853171875, -20.9594281250], [-26.0257882813, -20.9731671875], [-25.9662593750, -20.9869062500], [-25.9067304687, -21.0006453125], [-25.8472015625, -21.0143843750], [-25.7876726563, -21.0281234375], [-25.7281437500, -21.0418625000], [-25.6686148437, -21.0556015625], [-25.6090859375, -21.0693406250], [-25.5495570313, -21.0830796875], [-25.4900281250, -21.0968187500], [-25.4304992188, -21.1105578125], [-25.3709703125, -21.1242968750], [-25.3114414062, -21.1380359375], [-25.2519125000, -21.1517750000], [-25.1923835938, -21.1655140625], [-25.1328546875, -21.1792531250], [-25.0733257812, -21.1929921875], [-25.0137968750, -21.2067312500], [-24.9542679687, -21.2204703125], [-24.8947390625, -21.2342093750], [-24.8352101562, -21.2479484375], [-24.7756812500, -21.2616875000], [-24.7161523437, -21.2754265625], [-24.6566234375, -21.2891656250], [-24.5970945313, -21.3029046875], [-24.5375656250, -21.3166437500], [-24.4780367187, -21.3303828125], [-24.4185078125, -21.3441218750], [-24.3589789063, -21.3578609375], [-24.2994500000, -21.3716000000], [-24.2399210937, -21.3853390625], [-24.1803921875, -21.3990781250], [-24.1208632813, -21.4128171875], [-24.0613343750, -21.4265562500], [-24.0018054687, -21.4402953125], [-23.9422765625, -21.4540343750], [-23.8827476563, -21.4677734375], [-23.8232187500, -21.4815125000], [-23.7636898438, -21.4952515625], [-23.7041609375, -21.5089906250], [-23.6446320313, -21.5227296875], [-23.5851031250, -21.5364687500], [-23.5255742188, -21.5502078125], [-23.4660453125, -21.5639468750], [-23.4065164062, -21.5776859375], [-23.3469875000, -21.5914250000], [-23.2874585938, -21.6051640625], [-23.2279296875, -21.6189031250], [-23.1684007812, -21.6326421875], [-23.1088718750, -21.6463812500], [-23.0493429687, -21.6601203125], [-22.9898140625, -21.6738593750], [-22.9302851563, -21.6875984375], [-22.8707562500, -21.7013375000], [-22.8112273437, -21.7150765625], [-22.7516984375, -21.7288156250], [-22.6921695313, -21.7425546875], [-22.6326406250, -21.7562937500], [-22.5731117187, -21.7700328125], [-22.5135828125, -21.7837718750], [-22.4540539063, -21.7975109375], [-22.3945250000, -21.8112500000], [-22.3349960938, -21.8249890625], [-22.2754671875, -21.8387281250], [-22.2159382813, -21.8524671875], [-22.1564093750, -21.8662062500], [-22.0968804688, -21.8799453125], [-22.0373515625, -21.8936843750], [-21.9778226562, -21.9074234375], [-21.9182937500, -21.9211625000], [-21.8587648438, -21.9349015625], [-21.7992359375, -21.9486406250], [-21.7397070312, -21.9623796875], [-21.6801781250, -21.9761187500], [-21.6206492187, -21.9898578125], [-21.5611203125, -22.0035968750], [-21.5015914063, -22.0173359375], [-21.4420625000, -22.0310750000], [-21.3825335937, -22.0448140625], [-21.3230046875, -22.0585531250], [-21.2634757813, -22.0722921875], [-21.2039468750, -22.0860312500], [-21.1444179687, -22.0997703125], [-21.0848890625, -22.1135093750], [-21.0253601563, -22.1272484375], [-20.9658312500, -22.1409875000], [-20.9063023437, -22.1547265625], [-20.8467734375, -22.1684656250], [-20.7872445313, -22.1822046875], [-20.7277156250, -22.1959437500], [-20.6681867188, -22.2096828125], [-20.6086578125, -22.2234218750], [-20.5491289062, -22.2371609375], [-20.4896000000, -22.2509000000], [-20.4003750000, -22.2707000000], [-20.3111500000, -22.2905000000], [-20.2219250000, -22.3103000000], [-20.1327000000, -22.3301000000], [-20.0434750000, -22.3499000000], [-19.9542500000, -22.3697000000], [-19.8650250000, -22.3895000000], [-19.7758000000, -22.4093000000], [-19.7187468750, -22.4211546875], [-19.6616937500, -22.4330093750], [-19.6046406250, -22.4448640625], [-19.5475875000, -22.4567187500], [-19.4905343750, -22.4685734375], [-19.4334812500, -22.4804281250], [-19.3764281250, -22.4922828125], [-19.3193750000, -22.5041375000], [-19.2623218750, -22.5159921875], [-19.2052687500, -22.5278468750], [-19.1482156250, -22.5397015625], [-19.0911625000, -22.5515562500], [-19.0341093750, -22.5634109375], [-18.9770562500, -22.5752656250], [-18.9200031250, -22.5871203125], [-18.8629500000, -22.5989750000], [-18.8058968750, -22.6108296875], [-18.7488437500, -22.6226843750], [-18.6917906250, -22.6345390625], [-18.6347375000, -22.6463937500], [-18.5776843750, -22.6582484375], [-18.5206312500, -22.6701031250], [-18.4635781250, -22.6819578125], [-18.4065250000, -22.6938125000], [-18.3494718750, -22.7056671875], [-18.2924187500, -22.7175218750], [-18.2353656250, -22.7293765625], [-18.1783125000, -22.7412312500], [-18.1212593750, -22.7530859375], [-18.0642062500, -22.7649406250], [-18.0071531250, -22.7767953125], [-17.9501000000, -22.7886500000], [-17.8930468750, -22.8005046875], [-17.8359937500, -22.8123593750], [-17.7789406250, -22.8242140625], [-17.7218875000, -22.8360687500], [-17.6648343750, -22.8479234375], [-17.6077812500, -22.8597781250], [-17.5507281250, -22.8716328125], [-17.4936750000, -22.8834875000], [-17.4366218750, -22.8953421875], [-17.3795687500, -22.9071968750], [-17.3225156250, -22.9190515625], [-17.2654625000, -22.9309062500], [-17.2084093750, -22.9427609375], [-17.1513562500, -22.9546156250], [-17.0943031250, -22.9664703125], [-17.0372500000, -22.9783250000], [-16.9801968750, -22.9901796875], [-16.9231437500, -23.0020343750], [-16.8660906250, -23.0138890625], [-16.8090375000, -23.0257437500], [-16.7519843750, -23.0375984375], [-16.6949312500, -23.0494531250], [-16.6378781250, -23.0613078125], [-16.5808250000, -23.0731625000], [-16.5237718750, -23.0850171875], [-16.4667187500, -23.0968718750], [-16.4096656250, -23.1087265625], [-16.3526125000, -23.1205812500], [-16.2955593750, -23.1324359375], [-16.2385062500, -23.1442906250], [-16.1814531250, -23.1561453125], [-16.1244000000, -23.1680000000], [-16.0621000000, -23.1814187500], [-15.9998000000, -23.1948375000], [-15.9375000000, -23.2082562500], [-15.8752000000, -23.2216750000], [-15.8129000000, -23.2350937500], [-15.7506000000, -23.2485125000], [-15.6883000000, -23.2619312500], [-15.6260000000, -23.2753500000], [-15.5637000000, -23.2887687500], [-15.5014000000, -23.3021875000], [-15.4391000000, -23.3156062500], [-15.3768000000, -23.3290250000], [-15.3145000000, -23.3424437500], [-15.2522000000, -23.3558625000], [-15.1899000000, -23.3692812500], [-15.1276000000, -23.3827000000], [-15.0653000000, -23.3961187500], [-15.0030000000, -23.4095375000], [-14.9407000000, -23.4229562500], [-14.8784000000, -23.4363750000], [-14.8161000000, -23.4497937500], [-14.7538000000, -23.4632125000], [-14.6915000000, -23.4766312500], [-14.6292000000, -23.4900500000], [-14.5669000000, -23.5034687500], [-14.5046000000, -23.5168875000], [-14.4423000000, -23.5303062500], [-14.3800000000, -23.5437250000], [-14.3177000000, -23.5571437500], [-14.2554000000, -23.5705625000], [-14.1931000000, -23.5839812500], [-14.1308000000, -23.5974000000], [-14.0647593750, -23.6104937500], [-13.9987187500, -23.6235875000], [-13.9326781250, -23.6366812500], [-13.8666375000, -23.6497750000], [-13.8005968750, -23.6628687500], [-13.7345562500, -23.6759625000], [-13.6685156250, -23.6890562500], [-13.6024750000, -23.7021500000], [-13.5364343750, -23.7152437500], [-13.4703937500, -23.7283375000], [-13.4043531250, -23.7414312500], [-13.3383125000, -23.7545250000], [-13.2722718750, -23.7676187500], [-13.2062312500, -23.7807125000], [-13.1401906250, -23.7938062500], [-13.0741500000, -23.8069000000], [-13.0081093750, -23.8199937500], [-12.9420687500, -23.8330875000], [-12.8760281250, -23.8461812500], [-12.8099875000, -23.8592750000], [-12.7439468750, -23.8723687500], [-12.6779062500, -23.8854625000], [-12.6118656250, -23.8985562500], [-12.5458250000, -23.9116500000], [-12.4797843750, -23.9247437500], [-12.4137437500, -23.9378375000], [-12.3477031250, -23.9509312500], [-12.2816625000, -23.9640250000], [-12.2156218750, -23.9771187500], [-12.1495812500, -23.9902125000], [-12.0835406250, -24.0033062500], [-12.0175000000, -24.0164000000], [-11.9430459375, -24.0299257813], [-11.8685918750, -24.0434515625], [-11.7941378125, -24.0569773438], [-11.7196837500, -24.0705031250], [-11.6452296875, -24.0840289063], [-11.5707756250, -24.0975546875], [-11.4963215625, -24.1110804687], [-11.4218675000, -24.1246062500], [-11.3474134375, -24.1381320312], [-11.2729593750, -24.1516578125], [-11.1985053125, -24.1651835938], [-11.1240512500, -24.1787093750], [-11.0495971875, -24.1922351562], [-10.9751431250, -24.2057609375], [-10.9006890625, -24.2192867188], [-10.8262350000, -24.2328125000], [-10.7517809375, -24.2463382813], [-10.6773268750, -24.2598640625], [-10.6028728125, -24.2733898437], [-10.5284187500, -24.2869156250], [-10.4539646875, -24.3004414062], [-10.3795106250, -24.3139671875], [-10.3050565625, -24.3274929688], [-10.2306025000, -24.3410187500], [-10.1561484375, -24.3545445312], [-10.0816943750, -24.3680703125], [-10.0072403125, -24.3815960938], [-9.9327862500, -24.3951218750], [-9.8583321875, -24.4086476563], [-9.7838781250, -24.4221734375], [-9.7094240625, -24.4356992187], [-9.6349700000, -24.4492250000], [-9.5605159375, -24.4627507812], [-9.4860618750, -24.4762765625], [-9.4116078125, -24.4898023438], [-9.3371537500, -24.5033281250], [-9.2626996875, -24.5168539062], [-9.1882456250, -24.5303796875], [-9.1137915625, -24.5439054688], [-9.0393375000, -24.5574312500], [-8.9648834375, -24.5709570312], [-8.8904293750, -24.5844828125], [-8.8159753125, -24.5980085937], [-8.7415212500, -24.6115343750], [-8.6670671875, -24.6250601562], [-8.5926131250, -24.6385859375], [-8.5181590625, -24.6521117187], [-8.4437050000, -24.6656375000], [-8.3692509375, -24.6791632812], [-8.2947968750, -24.6926890625], [-8.2203428125, -24.7062148438], [-8.1458887500, -24.7197406250], [-8.0714346875, -24.7332664062], [-7.9969806250, -24.7467921875], [-7.9225265625, -24.7603179687], [-7.8480725000, -24.7738437500], [-7.7736184375, -24.7873695312], [-7.6991643750, -24.8008953125], [-7.6247103125, -24.8144210937], [-7.5502562500, -24.8279468750], [-7.4758021875, -24.8414726562], [-7.4013481250, -24.8549984375], [-7.3268940625, -24.8685242188], [-7.2524400000, -24.8820500000], [-7.1779859375, -24.8955757812], [-7.1035318750, -24.9091015625], [-7.0290778125, -24.9226273438], [-6.9546237500, -24.9361531250], [-6.8801696875, -24.9496789062], [-6.8057156250, -24.9632046875], [-6.7312615625, -24.9767304688], [-6.6568075000, -24.9902562500], [-6.5823534375, -25.0037820313], [-6.5078993750, -25.0173078125], [-6.4334453125, -25.0308335937], [-6.3589912500, -25.0443593750], [-6.2845371875, -25.0578851562], [-6.2100831250, -25.0714109375], [-6.1356290625, -25.0849367188], [-6.0611750000, -25.0984625000], [-5.9867209375, -25.1119882812], [-5.9122668750, -25.1255140625], [-5.8378128125, -25.1390398438], [-5.7633587500, -25.1525656250], [-5.6889046875, -25.1660914063], [-5.6144506250, -25.1796171875], [-5.5399965625, -25.1931429687], [-5.4655425000, -25.2066687500], [-5.3910884375, -25.2201945312], [-5.3166343750, -25.2337203125], [-5.2421803125, -25.2472460938], [-5.1677262500, -25.2607718750], [-5.0932721875, -25.2742976562], [-5.0188181250, -25.2878234375], [-4.9443640625, -25.3013492188], [-4.8699100000, -25.3148750000], [-4.7954559375, -25.3284007813], [-4.7210018750, -25.3419265625], [-4.6465478125, -25.3554523437], [-4.5720937500, -25.3689781250], [-4.4976396875, -25.3825039062], [-4.4231856250, -25.3960296875], [-4.3487315625, -25.4095554687], [-4.2742775000, -25.4230812500], [-4.1998234375, -25.4366070312], [-4.1253693750, -25.4501328125], [-4.0509153125, -25.4636585938], [-3.9764612500, -25.4771843750], [-3.9020071875, -25.4907101562], [-3.8275531250, -25.5042359375], [-3.7530990625, -25.5177617187], [-3.6786450000, -25.5312875000], [-3.6041909375, -25.5448132812], [-3.5297368750, -25.5583390625], [-3.4552828125, -25.5718648437], [-3.3808287500, -25.5853906250], [-3.3063746875, -25.5989164062], [-3.2319206250, -25.6124421875], [-3.1574665625, -25.6259679688], [-3.0830125000, -25.6394937500], [-3.0085584375, -25.6530195312], [-2.9341043750, -25.6665453125], [-2.8596503125, -25.6800710937], [-2.7851962500, -25.6935968750], [-2.7107421875, -25.7071226562], [-2.6362881250, -25.7206484375], [-2.5618340625, -25.7341742187], [-2.4873800000, -25.7477000000], [-2.3974235938, -25.7612937500], [-2.3074671875, -25.7748875000], [-2.2175107812, -25.7884812500], [-2.1275543750, -25.8020750000], [-2.0375979688, -25.8156687500], [-1.9476415625, -25.8292625000], [-1.8576851562, -25.8428562500], [-1.7677287500, -25.8564500000], [-1.6777723437, -25.8700437500], [-1.5878159375, -25.8836375000], [-1.4978595312, -25.8972312500], [-1.4079031250, -25.9108250000], [-1.3179467187, -25.9244187500], [-1.2279903125, -25.9380125000], [-1.1380339063, -25.9516062500], [-1.0480775000, -25.9652000000], [-0.9581210937, -25.9787937500], [-0.8681646875, -25.9923875000], [-0.7782082812, -26.0059812500], [-0.6882518750, -26.0195750000], [-0.5982954687, -26.0331687500], [-0.5083390625, -26.0467625000], [-0.4183826562, -26.0603562500], [-0.3284262500, -26.0739500000], [-0.2384698438, -26.0875437500], [-0.1485134375, -26.1011375000], [-0.0585570313, -26.1147312500], [0.0313993750, -26.1283250000], [0.1213557812, -26.1419187500], [0.2113121875, -26.1555125000], [0.3012685937, -26.1691062500], [0.3912250000, -26.1827000000], [0.4811814062, -26.1962937500], [0.5711378125, -26.2098875000], [0.6610942187, -26.2234812500], [0.7510506250, -26.2370750000], [0.8410070312, -26.2506687500], [0.9309634375, -26.2642625000], [1.0209198438, -26.2778562500], [1.1108762500, -26.2914500000], [1.2008326563, -26.3050437500], [1.2907890625, -26.3186375000], [1.3807454688, -26.3322312500], [1.4707018750, -26.3458250000]]);
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
import math
import time

from stl import mesh, Dimension

from tkinter import Tk     # from tkinter import Tk for Python 3.x
from tkinter.filedialog import askopenfilename
from mpl_toolkits.mplot3d import art3d
from matplotlib import pyplot as plt
import solid
import os
import ezdxf
import shapely.geometry as sg
import subprocess
from GUI import getSCADPath



def outputSTL(From, To, PATH=getSCADPath()):
    subprocess.Popen(PATH + " -o " + To + " " + From)
    while not os.path.exists(To):
        time.sleep(1)

class Model:
    def __init__(self, model, fileName, location, layer, thickness):
        self.location = location
        self.code = None
        self.fileName = fileName
        self.stl = fileName + ".stl"
        self.layer = layer
        self.thickness = thickness
        self.maxz = (layer+1)*thickness
        self.dxf = fileName + ".dxf"
        self.scad = fileName + ".scad"
        self.model = model
        self.center = None
        self.width = 10
        self.mesh = None
        self.useable_area = None


    def get_code(self):
        max_dim = 0.05
        max_array = 6

        num = int(self.fileName)
        nums = [int(a) for a in str(num)]
        nums.reverse()
        indices = nums
        length = len(nums)

        print(indices)
        t = 0
        i = 0
        cubes = []
        x = 0
        y = 0
        width = 0.01
        while x <= max_dim:
            while y <= max_dim:
                print(indices)
                if nums == []:
                    break
                if indices[0] != 0:
                    cubes.append(solid.translate([x, y, 0])(solid.cube(size=t / 1000 + 0.001)))
                    y += max_dim / (max_array - 1)
                    nums[0] = nums[0] - 1
                else:
                    indices.pop(0)
                    t += 1
                i += 1
            x += max_dim / (max_array - 1)
            y = 0

        outside = solid.translate([-width / 2, -width / 2])(solid.cube(max_dim + (length - 1) / 1000 + 0.001 + width))
        self.code = solid.difference()(outside, cubes)
        self.code = solid.projection(cut=True)(self.code)
        solid.scad_render_to_file(self.code, self.location + "/code.scad")
        outputSTL(From=self.location+"/code.scad", To=self.location+"code.dxf", PATH=getSCADPath())
        # os.system("toSTL.sh renders/code.scad renders/code.dxf")
        return self.location+"/code.dxf"

    def download(self, type):
        if type =="stl":
            print("generating:" + self.location+"/"+ self.fileName+".stl")
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".stl")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".stl")
        elif type == "dxf":
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".dxf")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".dxf")

    def render(self):
        solid.scad_render_to_file(self.model, self.location+"/"+ self.fileName+'.scad')
        while not os.path.exists(self.location+"/"+self.fileName+".scad"):
            time.sleep(1)
        # outputSTL(From= self.location+"/"+ self.fileName+'.scad', To=self.location+"/"+ self.fileName+'.stl')

    def get_points(self):
        doc = ezdxf.readfile(filename=self.location+"/"+ self.fileName+".dxf")
        msp = doc.modelspace()
        i=0
        lists = []
        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return [start, end]

        for e in msp.query("LINE"):
            line = helper(e)
            if not lists:
                lists.append([line])
            else:
                if lists[i][len(lists)-1][1] != line[0]:
                    lists.append([line])
                    i+=1
                else:
                    lists[i].append(line)

    def get_points2(self, FILE):
        doc = ezdxf.readfile(filename=FILE)
        msp = doc.modelspace()
        i = 0
        lists = []

        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return (start, end)

        for e in msp.query("LINE"):
            line = helper(e)
            if lists==[]:
                lists.append([line])
            else:
                if lists[i][len(lists[i]) - 1][1] != line[0]:
                    lists.append([line])
                    i += 1
                else:
                    lists[i].append(line)
        return lists

    def add_code(self):
        dxf = solid.projection(cut=False)(self.model)
        offset = solid.offset(r=-0.1)(dxf)
        solid.scad_render_to_file(offset, self.location+'/offset.scad')
        os.system("toSTL.sh renders/offset.scad renders/offset.dxf")
        lines = self.get_points2("renders/offset.dxf")
        x = lines[0][0][0][0]
        y = lines[0][0][0][1]
        print(x)
        print(y)
        code = solid.translate([x,y,0])(self.code)
        code = solid.linear_extrude(height=999)(code)
        save = self.model
        self.model = solid.projection()(solid.difference()(self.model, code))
        self.render()
        self.download("dxf")
        self.model = save

    def add_label(self, pos):
        # num = 12
        # minx, maxx, miny, maxy, minz, maxz = self.find_minmax()
        maxz = self.maxz
        # label = solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.5, halign="center"))
        # i=minx
        # print("x-len: " + str(maxx-minx))
        # print(i)
        # inc = (maxx-minx)/num
        # while minx <= i <= maxx:
        #     label = solid.union()(solid.translate([i, 0, maxz - 0.2])(solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.25, halign="center"))), label)
        #     i += inc
        #
        # l = label
        #
        # i =miny
        # while miny<= i <= maxy:
        #     print("y inc")
        #     l = solid.union()(solid.translate([0, i, 0])(label), l)
        #     i += 0.5
        for i in str(self.fileName):
            cur = pos[0]
            label = solid.translate([pos[0][0], pos[0][1], self.maxz-0.2])(solid.linear_extrude(height=(self.thickness)/3)(solid.text(str(i), size=0.5, halign="center", valign="center")))
            self.model = solid.difference()(self.model, label)
            pos.append(pos.pop(0))
            while abs(cur[0]-pos[0][0])<0.5 and abs(cur[1]-pos[0][1])<0.5:
                pos.append(pos.pop(0))



    def Center(self):

        volume, cog, inertia = self.mesh.get_mass_properties()
        print("Volume                                  = {0}".format(volume))
        print("Position of the center of gravity (COG) = {0}".format(cog))
        m_centered = solid.translate([-cog[0], -cog[1], 0])(
            self.model
        )
        return m_centered

    def find_minmax(self):
        minx = maxx = miny = maxy = minz = maxz = None
        for p in self.mesh.points:
            # p contains (x, y, z)
            if minx is None:
                minx = p[Dimension.X]
                maxx = p[Dimension.X]
                miny = p[Dimension.Y]
                maxy = p[Dimension.Y]
                minz = p[Dimension.Z]
                maxz = p[Dimension.Z]
            else:
                maxx = max(p[Dimension.X], maxx)
                minx = min(p[Dimension.X], minx)
                maxy = max(p[Dimension.Y], maxy)
                miny = min(p[Dimension.Y], miny)
                maxz = max(p[Dimension.Z], maxz)
                minz = min(p[Dimension.Z], minz)
        lenx = maxx - minx
        leny = maxy - miny
        lenz = maxz - minz
        return minx, maxx, miny, maxy, minz, maxz

    # def generate_Mesh(self):
    #     self.mesh = mesh.Mesh.from_file(self.location + "/" + str(int(self.fileName)//8)+ "b.stl")

    def get_top(self):
        top = solid.projection(cut=True)(solid.translate([0,0,-1*self.thickness*(self.layer+1)])(self.model))
        useable_area = solid.offset(r=-0.45)(top)
        self.useable_area = useable_area
        solid.scad_render_to_file(self.useable_area, self.location+'/' + 'toptemp.scad')
        outputSTL(From=self.location+'/' + 'toptemp.scad', To=self.location+"/top"+ self.dxf)

        # os.system("toSTL.sh out/toptemp.scad renders/" + self.fileName + ".dxf")
        dxf = DXF(self.location+"/top"+ self.dxf)
        min_p=dxf.points[0][0]
        points_ordered = dxf.points
        i=0
        while i <= len(dxf.points)+1:
            while math.sqrt((dxf.points[0][0]-dxf.points[1][0])**2+(dxf.points[0][1]-dxf.points[1][1])**2) > 0.1:
                dxf.points.insert(1, [(dxf.points[0][0]+dxf.points[1][0])/2, (dxf.points[0][1]+dxf.points[1][1])/2])
                i = i-1
            dxf.points.append(dxf.points.pop(0))
            i+=1
        for i in range(len(dxf.points)):
            dxf.points.append(dxf.points.pop(0))
            if dxf.points[0][0] < min_p:
                min_p = dxf.points[0][0]
                points_ordered = dxf.points.copy()
        dxf.points = points_ordered.copy()

        print(dxf.points)
        self.add_label(dxf.points)

class DXF:
    def __init__(self, file):
        self.file = file
        self.Lines = []
        self.points = []
        doc = ezdxf.readfile(self.file)
        msp = doc.modelspace()
        for e in msp:
            if e.dxftype() == "LINE":
                self.Lines.append(e)
                self.points.append([e.dxf.start[0], e.dxf.start[1]])
        # self.points.append([self.Lines[-1].dxf.end[0], self.Lines[-1].dxf.end[1]])
        self.area = None
        self.center = None
        self.polygon = sg.Polygon(self.points)

    def get_area(self):
        self.area = self.polygon.area
        return self.area

    def get_center(self):
        x_sum = 0
        y_sum =0
        for i in self.points:
            x_sum += i[0]
            y_sum += i[1]
        x_c = x_sum/len(self.points)
        y_c = y_sum/len(self.points)
        return (x_c, y_c)

    def split(self, maxdim):
        splits = []
        length = 0
        pieces = [[]]
        prev = self.points[-1]
        pieces[-1].append(prev)
        for j in self.points:
            length = length + math.sqrt((prev[0]-j[0])**2+(prev[1]-j[1])**2)
            if length >= maxdim:
                pieces[-1].append(j)
                pieces.append([])
                length = 0
            pieces[-1].append(j)
            prev = j
        for j in pieces:
            j.insert(0, [0,0])
            piece = solid.linear_extrude(height=10)(solid.polygon(j))
            splits.append(piece)
        return splits
    def refine_points(self):
        i=0
        while i <= len(self.points)+1:
            while math.sqrt((self.points[0][0]-self.points[1][0])**2+(self.points[0][1]-self.points[1][1])**2) > 0.1:
                self.points.insert(1, [(self.points[0][0]+self.points[1][0])/2, (self.points[0][1]+self.points[1][1])/2])
                i = i-1
            self.points.append(self.points.pop(0))
            i+=1


if __name__== "__main__":
    test = DXF("C:/Users/Daniel/Documents/repos/Shell_Maker/output/0top_slice.dxf")
    test.refine_points()
    k = test.split(48)
    for i in range(len(k)):
        solid.scad_render_to_file(k[i], str(i) + ".scad")


 
 
************************************************/
