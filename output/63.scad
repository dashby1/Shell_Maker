// Generated by SolidPython 1.1.3 on 2024-05-19 23:42:08


intersection() {
	difference() {
		intersection() {
			translate(v = [0, 0, 0]) {
				import(file = "CE3E3V2_Bottom_shell.stl", origin = [0, 0]);
			}
			translate(v = [-90.04029846191406, -32.690147399902344, 16]) {
				cube(size = [180.0806, 65.380295, 2]);
			}
		}
		linear_extrude(height = 999) {
			offset(r = -1) {
				import(file = "C:/Users/Daniel/Documents/repos/Shell_Maker/output/8top_slice.dxf", origin = [0, 0]);
			}
		}
	}
	translate(v = [0, 0, 16]) {
		linear_extrude(height = 10) {
			polygon(points = [[0, 0], [44.0266187500, 22.6779937500], [43.9748375000, 22.7051875000], [43.9230562500, 22.7323812500], [43.8712750000, 22.7595750000], [43.8194937500, 22.7867687500], [43.7677125000, 22.8139625000], [43.7159312500, 22.8411562500], [43.6641500000, 22.8683500000], [43.6123687500, 22.8955437500], [43.5605875000, 22.9227375000], [43.5088062500, 22.9499312500], [43.4570250000, 22.9771250000], [43.4052437500, 23.0043187500], [43.3534625000, 23.0315125000], [43.3016812500, 23.0587062500], [43.2499000000, 23.0859000000], [43.2364000000, 23.0926000000], [43.1813968750, 23.1175843750], [43.1263937500, 23.1425687500], [43.0713906250, 23.1675531250], [43.0163875000, 23.1925375000], [42.9613843750, 23.2175218750], [42.9063812500, 23.2425062500], [42.8513781250, 23.2674906250], [42.7963750000, 23.2924750000], [42.7413718750, 23.3174593750], [42.6863687500, 23.3424437500], [42.6313656250, 23.3674281250], [42.5763625000, 23.3924125000], [42.5213593750, 23.4173968750], [42.4663562500, 23.4423812500], [42.4113531250, 23.4673656250], [42.3563500000, 23.4923500000], [42.3013468750, 23.5173343750], [42.2463437500, 23.5423187500], [42.1913406250, 23.5673031250], [42.1363375000, 23.5922875000], [42.0813343750, 23.6172718750], [42.0263312500, 23.6422562500], [41.9713281250, 23.6672406250], [41.9163250000, 23.6922250000], [41.8613218750, 23.7172093750], [41.8063187500, 23.7421937500], [41.7513156250, 23.7671781250], [41.6963125000, 23.7921625000], [41.6413093750, 23.8171468750], [41.5863062500, 23.8421312500], [41.5313031250, 23.8671156250], [41.4763000000, 23.8921000000], [41.4212968750, 23.9170843750], [41.3662937500, 23.9420687500], [41.3112906250, 23.9670531250], [41.2562875000, 23.9920375000], [41.2012843750, 24.0170218750], [41.1462812500, 24.0420062500], [41.0912781250, 24.0669906250], [41.0362750000, 24.0919750000], [40.9812718750, 24.1169593750], [40.9262687500, 24.1419437500], [40.8712656250, 24.1669281250], [40.8162625000, 24.1919125000], [40.7612593750, 24.2168968750], [40.7062562500, 24.2418812500], [40.6512531250, 24.2668656250], [40.5962500000, 24.2918500000], [40.5412468750, 24.3168343750], [40.4862437500, 24.3418187500], [40.4312406250, 24.3668031250], [40.3762375000, 24.3917875000], [40.3212343750, 24.4167718750], [40.2662312500, 24.4417562500], [40.2112281250, 24.4667406250], [40.1562250000, 24.4917250000], [40.1012218750, 24.5167093750], [40.0462187500, 24.5416937500], [39.9912156250, 24.5666781250], [39.9362125000, 24.5916625000], [39.8812093750, 24.6166468750], [39.8262062500, 24.6416312500], [39.7712031250, 24.6666156250], [39.7162000000, 24.6916000000], [39.6538750000, 24.7197500000], [39.5915500000, 24.7479000000], [39.5292250000, 24.7760500000], [39.4669000000, 24.8042000000], [39.4149000000, 24.8253000000], [39.3629000000, 24.8464000000], [39.3366000000, 24.8569000000], [39.2791468750, 24.8774812500], [39.2216937500, 24.8980625000], [39.1642406250, 24.9186437500], [39.1067875000, 24.9392250000], [39.0493343750, 24.9598062500], [38.9918812500, 24.9803875000], [38.9344281250, 25.0009687500], [38.8769750000, 25.0215500000], [38.8195218750, 25.0421312500], [38.7620687500, 25.0627125000], [38.7046156250, 25.0832937500], [38.6471625000, 25.1038750000], [38.5897093750, 25.1244562500], [38.5322562500, 25.1450375000], [38.4748031250, 25.1656187500], [38.4173500000, 25.1862000000], [38.3598968750, 25.2067812500], [38.3024437500, 25.2273625000], [38.2449906250, 25.2479437500], [38.1875375000, 25.2685250000], [38.1300843750, 25.2891062500], [38.0726312500, 25.3096875000], [38.0151781250, 25.3302687500], [37.9577250000, 25.3508500000], [37.9002718750, 25.3714312500], [37.8428187500, 25.3920125000], [37.7853656250, 25.4125937500], [37.7279125000, 25.4331750000], [37.6704593750, 25.4537562500], [37.6130062500, 25.4743375000], [37.5555531250, 25.4949187500], [37.4981000000, 25.5155000000], [37.4406468750, 25.5360812500], [37.3831937500, 25.5566625000], [37.3257406250, 25.5772437500], [37.2682875000, 25.5978250000], [37.2108343750, 25.6184062500], [37.1533812500, 25.6389875000], [37.0959281250, 25.6595687500], [37.0384750000, 25.6801500000], [36.9810218750, 25.7007312500], [36.9235687500, 25.7213125000], [36.8661156250, 25.7418937500], [36.8086625000, 25.7624750000], [36.7512093750, 25.7830562500], [36.6937562500, 25.8036375000], [36.6363031250, 25.8242187500], [36.5788500000, 25.8448000000], [36.5213968750, 25.8653812500], [36.4639437500, 25.8859625000], [36.4064906250, 25.9065437500], [36.3490375000, 25.9271250000], [36.2915843750, 25.9477062500], [36.2341312500, 25.9682875000], [36.1766781250, 25.9888687500], [36.1192250000, 26.0094500000], [36.0617718750, 26.0300312500], [36.0043187500, 26.0506125000], [35.9468656250, 26.0711937500], [35.8894125000, 26.0917750000], [35.8319593750, 26.1123562500], [35.7745062500, 26.1329375000], [35.7170531250, 26.1535187500], [35.6596000000, 26.1741000000], [35.5973500000, 26.1961250000], [35.5351000000, 26.2181500000], [35.4728500000, 26.2401750000], [35.4106000000, 26.2622000000], [35.3681000000, 26.2751000000], [35.3189546875, 26.2885000000], [35.2698093750, 26.3019000000], [35.2206640625, 26.3153000000], [35.1715187500, 26.3287000000], [35.1223734375, 26.3421000000], [35.0732281250, 26.3555000000], [35.0240828125, 26.3689000000], [34.9749375000, 26.3823000000], [34.9257921875, 26.3957000000], [34.8766468750, 26.4091000000], [34.8275015625, 26.4225000000], [34.7783562500, 26.4359000000], [34.7292109375, 26.4493000000], [34.6800656250, 26.4627000000], [34.6309203125, 26.4761000000], [34.5817750000, 26.4895000000], [34.5326296875, 26.5029000000], [34.4834843750, 26.5163000000], [34.4343390625, 26.5297000000], [34.3851937500, 26.5431000000], [34.3360484375, 26.5565000000], [34.2869031250, 26.5699000000], [34.2377578125, 26.5833000000], [34.1886125000, 26.5967000000], [34.1394671875, 26.6101000000], [34.0903218750, 26.6235000000], [34.0411765625, 26.6369000000], [33.9920312500, 26.6503000000], [33.9428859375, 26.6637000000], [33.8937406250, 26.6771000000], [33.8445953125, 26.6905000000], [33.7954500000, 26.7039000000], [33.7463046875, 26.7173000000], [33.6971593750, 26.7307000000], [33.6480140625, 26.7441000000], [33.5988687500, 26.7575000000], [33.5497234375, 26.7709000000], [33.5005781250, 26.7843000000], [33.4514328125, 26.7977000000], [33.4022875000, 26.8111000000], [33.3531421875, 26.8245000000], [33.3039968750, 26.8379000000], [33.2548515625, 26.8513000000], [33.2057062500, 26.8647000000], [33.1565609375, 26.8781000000], [33.1074156250, 26.8915000000], [33.0582703125, 26.9049000000], [33.0091250000, 26.9183000000], [32.9599796875, 26.9317000000], [32.9108343750, 26.9451000000], [32.8616890625, 26.9585000000], [32.8125437500, 26.9719000000], [32.7633984375, 26.9853000000], [32.7142531250, 26.9987000000], [32.6651078125, 27.0121000000], [32.6159625000, 27.0255000000], [32.5668171875, 27.0389000000], [32.5176718750, 27.0523000000], [32.4685265625, 27.0657000000], [32.4193812500, 27.0791000000], [32.3702359375, 27.0925000000], [32.3210906250, 27.1059000000], [32.2719453125, 27.1193000000], [32.2228000000, 27.1327000000], [32.1744000000, 27.1455500000], [32.1260000000, 27.1584000000], [32.0776000000, 27.1712500000], [32.0292000000, 27.1841000000], [31.9499750000, 27.2019625000], [31.8707500000, 27.2198250000], [31.7915250000, 27.2376875000], [31.7123000000, 27.2555500000], [31.6330750000, 27.2734125000], [31.5538500000, 27.2912750000], [31.4746250000, 27.3091375000], [31.3954000000, 27.3270000000], [31.3380000000, 27.3389000000], [31.2580031250, 27.3537062500], [31.1780062500, 27.3685125000], [31.0980093750, 27.3833187500], [31.0180125000, 27.3981250000], [30.9380156250, 27.4129312500], [30.8580187500, 27.4277375000], [30.7780218750, 27.4425437500], [30.6980250000, 27.4573500000], [30.6180281250, 27.4721562500], [30.5380312500, 27.4869625000], [30.4580343750, 27.5017687500], [30.3780375000, 27.5165750000], [30.2980406250, 27.5313812500], [30.2180437500, 27.5461875000], [30.1380468750, 27.5609937500], [30.0580500000, 27.5758000000], [29.9780531250, 27.5906062500], [29.8980562500, 27.6054125000], [29.8180593750, 27.6202187500], [29.7380625000, 27.6350250000], [29.6580656250, 27.6498312500], [29.5780687500, 27.6646375000], [29.4980718750, 27.6794437500], [29.4180750000, 27.6942500000], [29.3380781250, 27.7090562500], [29.2580812500, 27.7238625000], [29.1780843750, 27.7386687500], [29.0980875000, 27.7534750000], [29.0180906250, 27.7682812500], [28.9380937500, 27.7830875000], [28.8580968750, 27.7978937500], [28.7781000000, 27.8127000000], [28.7106500000, 27.8245000000], [28.6432000000, 27.8363000000], [28.5725000000, 27.8455500000], [28.5018000000, 27.8548000000], [28.4484906250, 27.8608656250], [28.3951812500, 27.8669312500], [28.3418718750, 27.8729968750], [28.2885625000, 27.8790625000], [28.2352531250, 27.8851281250], [28.1819437500, 27.8911937500], [28.1286343750, 27.8972593750], [28.0753250000, 27.9033250000], [28.0220156250, 27.9093906250], [27.9687062500, 27.9154562500], [27.9153968750, 27.9215218750], [27.8620875000, 27.9275875000], [27.8087781250, 27.9336531250], [27.7554687500, 27.9397187500], [27.7021593750, 27.9457843750], [27.6488500000, 27.9518500000], [27.5955406250, 27.9579156250], [27.5422312500, 27.9639812500], [27.4889218750, 27.9700468750], [27.4356125000, 27.9761125000], [27.3823031250, 27.9821781250], [27.3289937500, 27.9882437500], [27.2756843750, 27.9943093750], [27.2223750000, 28.0003750000], [27.1690656250, 28.0064406250], [27.1157562500, 28.0125062500], [27.0624468750, 28.0185718750], [27.0091375000, 28.0246375000], [26.9558281250, 28.0307031250], [26.9025187500, 28.0367687500], [26.8492093750, 28.0428343750], [26.7959000000, 28.0489000000], [26.7425906250, 28.0549656250], [26.6892812500, 28.0610312500], [26.6359718750, 28.0670968750], [26.5826625000, 28.0731625000], [26.5293531250, 28.0792281250], [26.4760437500, 28.0852937500], [26.4227343750, 28.0913593750], [26.3694250000, 28.0974250000], [26.3161156250, 28.1034906250], [26.2628062500, 28.1095562500], [26.2094968750, 28.1156218750], [26.1561875000, 28.1216875000], [26.1028781250, 28.1277531250], [26.0495687500, 28.1338187500], [25.9962593750, 28.1398843750], [25.9429500000, 28.1459500000], [25.8896406250, 28.1520156250], [25.8363312500, 28.1580812500], [25.7830218750, 28.1641468750], [25.7297125000, 28.1702125000], [25.6764031250, 28.1762781250], [25.6230937500, 28.1823437500], [25.5697843750, 28.1884093750], [25.5164750000, 28.1944750000], [25.4631656250, 28.2005406250], [25.4098562500, 28.2066062500], [25.3565468750, 28.2126718750], [25.3032375000, 28.2187375000], [25.2499281250, 28.2248031250], [25.1966187500, 28.2308687500], [25.1433093750, 28.2369343750], [25.0900000000, 28.2430000000], [25.0079000000, 28.2510000000], [24.9750000000, 28.2537000000], [24.8995250000, 28.2590625000], [24.8240500000, 28.2644250000], [24.7485750000, 28.2697875000], [24.6731000000, 28.2751500000], [24.5976250000, 28.2805125000], [24.5221500000, 28.2858750000], [24.4466750000, 28.2912375000], [24.3712000000, 28.2966000000], [24.3021500000, 28.2998500000], [24.2331000000, 28.3031000000], [24.1598812500, 28.3046546875], [24.0866625000, 28.3062093750], [24.0134437500, 28.3077640625], [23.9402250000, 28.3093187500], [23.8670062500, 28.3108734375], [23.7937875000, 28.3124281250], [23.7205687500, 28.3139828125], [23.6473500000, 28.3155375000], [23.5741312500, 28.3170921875], [23.5009125000, 28.3186468750], [23.4276937500, 28.3202015625], [23.3544750000, 28.3217562500], [23.2812562500, 28.3233109375], [23.2080375000, 28.3248656250], [23.1348187500, 28.3264203125], [23.0616000000, 28.3279750000], [22.9883812500, 28.3295296875], [22.9151625000, 28.3310843750], [22.8419437500, 28.3326390625], [22.7687250000, 28.3341937500], [22.6955062500, 28.3357484375], [22.6222875000, 28.3373031250], [22.5490687500, 28.3388578125], [22.4758500000, 28.3404125000], [22.4026312500, 28.3419671875], [22.3294125000, 28.3435218750], [22.2561937500, 28.3450765625], [22.1829750000, 28.3466312500], [22.1097562500, 28.3481859375], [22.0365375000, 28.3497406250], [21.9633187500, 28.3512953125], [21.8901000000, 28.3528500000], [21.8168812500, 28.3544046875], [21.7436625000, 28.3559593750], [21.6704437500, 28.3575140625], [21.5972250000, 28.3590687500], [21.5240062500, 28.3606234375], [21.4507875000, 28.3621781250], [21.3775687500, 28.3637328125], [21.3043500000, 28.3652875000], [21.2311312500, 28.3668421875], [21.1579125000, 28.3683968750], [21.0846937500, 28.3699515625], [21.0114750000, 28.3715062500], [20.9382562500, 28.3730609375], [20.8650375000, 28.3746156250], [20.7918187500, 28.3761703125], [20.7186000000, 28.3777250000], [20.6453812500, 28.3792796875], [20.5721625000, 28.3808343750], [20.4989437500, 28.3823890625], [20.4257250000, 28.3839437500], [20.3525062500, 28.3854984375], [20.2792875000, 28.3870531250], [20.2060687500, 28.3886078125], [20.1328500000, 28.3901625000], [20.0596312500, 28.3917171875], [19.9864125000, 28.3932718750], [19.9131937500, 28.3948265625], [19.8399750000, 28.3963812500], [19.7667562500, 28.3979359375], [19.6935375000, 28.3994906250], [19.6203187500, 28.4010453125], [19.5471000000, 28.4026000000], [19.4936500000, 28.4028500000], [19.4402000000, 28.4031000000], [19.3867500000, 28.4033500000], [19.3333000000, 28.4036000000], [19.2434000000, 28.4010000000], [19.1439000000, 28.3977687500], [19.0444000000, 28.3945375000], [18.9449000000, 28.3913062500], [18.8454000000, 28.3880750000], [18.7459000000, 28.3848437500], [18.6464000000, 28.3816125000], [18.5469000000, 28.3783812500], [18.4474000000, 28.3751500000], [18.3479000000, 28.3719187500], [18.2484000000, 28.3686875000], [18.1489000000, 28.3654562500], [18.0494000000, 28.3622250000], [17.9499000000, 28.3589937500], [17.8504000000, 28.3557625000], [17.7509000000, 28.3525312500], [17.6514000000, 28.3493000000], [17.6219000000, 28.3481000000], [17.5633687500, 28.3440328125], [17.5048375000, 28.3399656250], [17.4463062500, 28.3358984375], [17.3877750000, 28.3318312500], [17.3292437500, 28.3277640625], [17.2707125000, 28.3236968750], [17.2121812500, 28.3196296875], [17.1536500000, 28.3155625000], [17.0951187500, 28.3114953125], [17.0365875000, 28.3074281250], [16.9780562500, 28.3033609375], [16.9195250000, 28.2992937500], [16.8609937500, 28.2952265625], [16.8024625000, 28.2911593750], [16.7439312500, 28.2870921875], [16.6854000000, 28.2830250000], [16.6268687500, 28.2789578125], [16.5683375000, 28.2748906250], [16.5098062500, 28.2708234375], [16.4512750000, 28.2667562500], [16.3927437500, 28.2626890625], [16.3342125000, 28.2586218750], [16.2756812500, 28.2545546875], [16.2171500000, 28.2504875000], [16.1586187500, 28.2464203125], [16.1000875000, 28.2423531250], [16.0415562500, 28.2382859375], [15.9830250000, 28.2342187500], [15.9244937500, 28.2301515625], [15.8659625000, 28.2260843750], [15.8074312500, 28.2220171875], [15.7489000000, 28.2179500000], [15.6903687500, 28.2138828125], [15.6318375000, 28.2098156250], [15.5733062500, 28.2057484375], [15.5147750000, 28.2016812500], [15.4562437500, 28.1976140625], [15.3977125000, 28.1935468750], [15.3391812500, 28.1894796875], [15.2806500000, 28.1854125000], [15.2221187500, 28.1813453125], [15.1635875000, 28.1772781250], [15.1050562500, 28.1732109375], [15.0465250000, 28.1691437500], [14.9879937500, 28.1650765625], [14.9294625000, 28.1610093750], [14.8709312500, 28.1569421875], [14.8124000000, 28.1528750000], [14.7538687500, 28.1488078125], [14.6953375000, 28.1447406250], [14.6368062500, 28.1406734375], [14.5782750000, 28.1366062500], [14.5197437500, 28.1325390625], [14.4612125000, 28.1284718750], [14.4026812500, 28.1244046875], [14.3441500000, 28.1203375000], [14.2856187500, 28.1162703125], [14.2270875000, 28.1122031250], [14.1685562500, 28.1081359375], [14.1100250000, 28.1040687500], [14.0514937500, 28.1000015625], [13.9929625000, 28.0959343750], [13.9344312500, 28.0918671875], [13.8759000000, 28.0878000000], [13.8545000000, 28.0858000000], [13.7829331250, 28.0774328125], [13.7113662500, 28.0690656250], [13.6397993750, 28.0606984375], [13.5682325000, 28.0523312500], [13.4966656250, 28.0439640625], [13.4250987500, 28.0355968750], [13.3535318750, 28.0272296875], [13.2819650000, 28.0188625000], [13.2103981250, 28.0104953125], [13.1388312500, 28.0021281250], [13.0672643750, 27.9937609375], [12.9956975000, 27.9853937500], [12.9241306250, 27.9770265625], [12.8525637500, 27.9686593750], [12.7809968750, 27.9602921875], [12.7094300000, 27.9519250000], [12.6378631250, 27.9435578125], [12.5662962500, 27.9351906250], [12.4947293750, 27.9268234375], [12.4231625000, 27.9184562500], [12.3515956250, 27.9100890625], [12.2800287500, 27.9017218750], [12.2084618750, 27.8933546875], [12.1368950000, 27.8849875000], [12.0653281250, 27.8766203125], [11.9937612500, 27.8682531250], [11.9221943750, 27.8598859375], [11.8506275000, 27.8515187500], [11.7790606250, 27.8431515625], [11.7074937500, 27.8347843750], [11.6359268750, 27.8264171875], [11.5643600000, 27.8180500000], [11.4927931250, 27.8096828125], [11.4212262500, 27.8013156250], [11.3496593750, 27.7929484375], [11.2780925000, 27.7845812500], [11.2065256250, 27.7762140625], [11.1349587500, 27.7678468750], [11.0633918750, 27.7594796875], [10.9918250000, 27.7511125000], [10.9202581250, 27.7427453125], [10.8486912500, 27.7343781250], [10.7771243750, 27.7260109375], [10.7055575000, 27.7176437500], [10.6339906250, 27.7092765625], [10.5624237500, 27.7009093750], [10.4908568750, 27.6925421875], [10.4192900000, 27.6841750000], [10.3477231250, 27.6758078125], [10.2761562500, 27.6674406250], [10.2045893750, 27.6590734375], [10.1330225000, 27.6507062500], [10.0614556250, 27.6423390625], [9.9898887500, 27.6339718750], [9.9183218750, 27.6256046875], [9.8467550000, 27.6172375000], [9.7751881250, 27.6088703125], [9.7036212500, 27.6005031250], [9.6320543750, 27.5921359375], [9.5604875000, 27.5837687500], [9.4889206250, 27.5754015625], [9.4173537500, 27.5670343750], [9.3457868750, 27.5586671875], [9.2742200000, 27.5503000000], [9.1938825000, 27.5408000000], [9.1135450000, 27.5313000000], [9.0332075000, 27.5218000000], [8.9528700000, 27.5123000000], [8.8645400000, 27.4995500000], [8.7762100000, 27.4868000000], [8.6878800000, 27.4740500000], [8.5995500000, 27.4613000000], [8.5158425000, 27.4484187500], [8.4321350000, 27.4355375000], [8.3484275000, 27.4226562500], [8.2647200000, 27.4097750000], [8.1810125000, 27.3968937500], [8.0973050000, 27.3840125000], [8.0135975000, 27.3711312500], [7.9298900000, 27.3582500000], [7.8461825000, 27.3453687500], [7.7624750000, 27.3324875000], [7.6787675000, 27.3196062500], [7.5950600000, 27.3067250000], [7.5113525000, 27.2938437500], [7.4276450000, 27.2809625000], [7.3439375000, 27.2680812500], [7.2602300000, 27.2552000000], [7.1765225000, 27.2423187500], [7.0928150000, 27.2294375000], [7.0091075000, 27.2165562500], [6.9254000000, 27.2036750000], [6.8416925000, 27.1907937500], [6.7579850000, 27.1779125000], [6.6742775000, 27.1650312500], [6.5905700000, 27.1521500000], [6.5068625000, 27.1392687500], [6.4231550000, 27.1263875000], [6.3394475000, 27.1135062500], [6.2557400000, 27.1006250000], [6.1720325000, 27.0877437500], [6.0883250000, 27.0748625000], [6.0046175000, 27.0619812500], [5.9209100000, 27.0491000000], [5.8372025000, 27.0362187500], [5.7534950000, 27.0233375000], [5.6697875000, 27.0104562500], [5.5860800000, 26.9975750000], [5.5023725000, 26.9846937500], [5.4186650000, 26.9718125000], [5.3349575000, 26.9589312500], [5.2512500000, 26.9460500000], [5.1675425000, 26.9331687500], [5.0838350000, 26.9202875000], [5.0001275000, 26.9074062500], [4.9164200000, 26.8945250000], [4.8327125000, 26.8816437500], [4.7490050000, 26.8687625000], [4.6652975000, 26.8558812500], [4.5815900000, 26.8430000000], [4.4978825000, 26.8301187500], [4.4141750000, 26.8172375000], [4.3304675000, 26.8043562500], [4.2467600000, 26.7914750000], [4.1630525000, 26.7785937500], [4.0793450000, 26.7657125000], [3.9956375000, 26.7528312500], [3.9119300000, 26.7399500000], [3.8282225000, 26.7270687500], [3.7445150000, 26.7141875000], [3.6608075000, 26.7013062500], [3.5771000000, 26.6884250000], [3.4933925000, 26.6755437500], [3.4096850000, 26.6626625000], [3.3259775000, 26.6497812500], [3.2422700000, 26.6369000000], [3.1585625000, 26.6240187500], [3.0748550000, 26.6111375000], [2.9911475000, 26.5982562500], [2.9074400000, 26.5853750000], [2.8237325000, 26.5724937500], [2.7400250000, 26.5596125000], [2.6563175000, 26.5467312500], [2.5726100000, 26.5338500000], [2.4889025000, 26.5209687500], [2.4051950000, 26.5080875000], [2.3214875000, 26.4952062500], [2.2377800000, 26.4823250000], [2.1540725000, 26.4694437500], [2.0703650000, 26.4565625000], [1.9866575000, 26.4436812500], [1.9029500000, 26.4308000000], [1.8192425000, 26.4179187500], [1.7355350000, 26.4050375000], [1.6518275000, 26.3921562500], [1.5681200000, 26.3792750000], [1.4844125000, 26.3663937500], [1.4007050000, 26.3535125000], [1.3169975000, 26.3406312500], [1.2332900000, 26.3277500000], [1.1495825000, 26.3148687500], [1.0658750000, 26.3019875000], [0.9821675000, 26.2891062500], [0.8984600000, 26.2762250000], [0.8147525000, 26.2633437500], [0.7310450000, 26.2504625000], [0.6473375000, 26.2375812500], [0.5636300000, 26.2247000000], [0.4799225000, 26.2118187500], [0.3962150000, 26.1989375000], [0.3125075000, 26.1860562500], [0.2288000000, 26.1731750000], [0.1450925000, 26.1602937500], [0.0613850000, 26.1474125000], [-0.0223225000, 26.1345312500], [-0.1060300000, 26.1216500000], [-0.1897375000, 26.1087687500], [-0.2734450000, 26.0958875000], [-0.3571525000, 26.0830062500], [-0.4408600000, 26.0701250000], [-0.5245675000, 26.0572437500], [-0.6082750000, 26.0443625000], [-0.6919825000, 26.0314812500], [-0.7756900000, 26.0186000000], [-0.8593975000, 26.0057187500], [-0.9431050000, 25.9928375000], [-1.0268125000, 25.9799562500], [-1.1105200000, 25.9670750000], [-1.1942275000, 25.9541937500], [-1.2779350000, 25.9413125000], [-1.3616425000, 25.9284312500], [-1.4453500000, 25.9155500000], [-1.5290575000, 25.9026687500], [-1.6127650000, 25.8897875000], [-1.6964725000, 25.8769062500], [-1.7801800000, 25.8640250000], [-1.8638875000, 25.8511437500], [-1.9475950000, 25.8382625000], [-2.0313025000, 25.8253812500], [-2.1150100000, 25.8125000000], [-2.1703662500, 25.8035625000], [-2.2257225000, 25.7946250000], [-2.2810787500, 25.7856875000], [-2.3364350000, 25.7767500000], [-2.3917912500, 25.7678125000], [-2.4471475000, 25.7588750000], [-2.5025037500, 25.7499375000], [-2.5578600000, 25.7410000000], [-2.6422425000, 25.7260000000], [-2.7266250000, 25.7110000000], [-2.8110075000, 25.6960000000], [-2.8953900000, 25.6810000000]]);
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
import math
import time

from stl import mesh, Dimension

from tkinter import Tk     # from tkinter import Tk for Python 3.x
from tkinter.filedialog import askopenfilename
from mpl_toolkits.mplot3d import art3d
from matplotlib import pyplot as plt
import solid
import os
import ezdxf
import shapely.geometry as sg
import subprocess
from GUI import getSCADPath



def outputSTL(From, To, PATH=getSCADPath()):
    subprocess.Popen(PATH + " -o " + To + " " + From)
    while not os.path.exists(To):
        time.sleep(1)


def get_size(i):
    x_list = [int(a) for a in str(i)]
    return len(x_list)



class Model:
    def __init__(self, model, fileName, location, layer, thickness):
        self.location = location
        self.code = None
        self.fileName = fileName
        self.stl = fileName + ".stl"
        self.layer = layer
        self.thickness = thickness
        self.maxz = (layer+1)*thickness
        self.dxf = fileName + ".dxf"
        self.scad = fileName + ".scad"
        self.model = model
        self.center = None
        self.width = 10
        self.mesh = None
        self.useable_area = None


    def get_code(self):
        max_dim = 0.05
        max_array = 6

        num = int(self.fileName)
        nums = [int(a) for a in str(num)]
        nums.reverse()
        indices = nums
        length = len(nums)

        print(indices)
        t = 0
        i = 0
        cubes = []
        x = 0
        y = 0
        width = 0.01
        while x <= max_dim:
            while y <= max_dim:
                print(indices)
                if nums == []:
                    break
                if indices[0] != 0:
                    cubes.append(solid.translate([x, y, 0])(solid.cube(size=t / 1000 + 0.001)))
                    y += max_dim / (max_array - 1)
                    nums[0] = nums[0] - 1
                else:
                    indices.pop(0)
                    t += 1
                i += 1
            x += max_dim / (max_array - 1)
            y = 0

        outside = solid.translate([-width / 2, -width / 2])(solid.cube(max_dim + (length - 1) / 1000 + 0.001 + width))
        self.code = solid.difference()(outside, cubes)
        self.code = solid.projection(cut=True)(self.code)
        solid.scad_render_to_file(self.code, self.location + "/code.scad")
        outputSTL(From=self.location+"/code.scad", To=self.location+"code.dxf", PATH=getSCADPath())
        # os.system("toSTL.sh renders/code.scad renders/code.dxf")
        return self.location+"/code.dxf"

    def download(self, type):
        if type =="stl":
            print("generating:" + self.location+"/"+ self.fileName+".stl")
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".stl")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".stl")
        elif type == "dxf":
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".dxf")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".dxf")

    def render(self):
        solid.scad_render_to_file(self.model, self.location+"/"+ self.fileName+'.scad')
        while not os.path.exists(self.location+"/"+self.fileName+".scad"):
            time.sleep(1)

    def get_points(self):
        doc = ezdxf.readfile(filename=self.location+"/"+ self.fileName+".dxf")
        msp = doc.modelspace()
        i=0
        lists = []
        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return [start, end]

        for e in msp.query("LINE"):
            line = helper(e)
            if not lists:
                lists.append([line])
            else:
                if lists[i][len(lists)-1][1] != line[0]:
                    lists.append([line])
                    i+=1
                else:
                    lists[i].append(line)

    def get_points2(self, FILE):
        doc = ezdxf.readfile(filename=FILE)
        msp = doc.modelspace()
        i = 0
        lists = []

        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return (start, end)

        for e in msp.query("LINE"):
            line = helper(e)
            if lists==[]:
                lists.append([line])
            else:
                if lists[i][len(lists[i]) - 1][1] != line[0]:
                    lists.append([line])
                    i += 1
                else:
                    lists[i].append(line)
        return lists

    def add_code(self):
        dxf = solid.projection(cut=False)(self.model)
        offset = solid.offset(r=-0.1)(dxf)
        solid.scad_render_to_file(offset, self.location+'/offset.scad')
        os.system("toSTL.sh renders/offset.scad renders/offset.dxf")
        lines = self.get_points2("renders/offset.dxf")
        x = lines[0][0][0][0]
        y = lines[0][0][0][1]
        print(x)
        print(y)
        code = solid.translate([x,y,0])(self.code)
        code = solid.linear_extrude(height=999)(code)
        save = self.model
        self.model = solid.projection()(solid.difference()(self.model, code))
        self.render()
        self.download("dxf")
        self.model = save

    def add_label(self, pos):
        # num = 12
        # minx, maxx, miny, maxy, minz, maxz = self.find_minmax()
        maxz = self.maxz
        # label = solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.5, halign="center"))
        # i=minx
        # print("x-len: " + str(maxx-minx))
        # print(i)
        # inc = (maxx-minx)/num
        # while minx <= i <= maxx:
        #     label = solid.union()(solid.translate([i, 0, maxz - 0.2])(solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.25, halign="center"))), label)
        #     i += inc
        #
        # l = label
        #
        # i =miny
        # while miny<= i <= maxy:
        #     print("y inc")
        #     l = solid.union()(solid.translate([0, i, 0])(label), l)
        #     i += 0.5
        for i in str(self.fileName):
            cur = pos[0]
            label = solid.translate([pos[0][0], pos[0][1], self.maxz-0.2])(solid.linear_extrude(height=(self.thickness)/3)(solid.text(str(i), size=0.5, halign="center", valign="center")))
            self.model = solid.difference()(self.model, label)
            pos.append(pos.pop(0))
            while abs(cur[0]-pos[0][0])<0.5 and abs(cur[1]-pos[0][1])<0.5:
                pos.append(pos.pop(0))



    def Center(self):

        volume, cog, inertia = self.mesh.get_mass_properties()
        print("Volume                                  = {0}".format(volume))
        print("Position of the center of gravity (COG) = {0}".format(cog))
        m_centered = solid.translate([-cog[0], -cog[1], 0])(
            self.model
        )
        return m_centered

    def find_minmax(self):
        minx = maxx = miny = maxy = minz = maxz = None
        for p in self.mesh.points:
            # p contains (x, y, z)
            if minx is None:
                minx = p[Dimension.X]
                maxx = p[Dimension.X]
                miny = p[Dimension.Y]
                maxy = p[Dimension.Y]
                minz = p[Dimension.Z]
                maxz = p[Dimension.Z]
            else:
                maxx = max(p[Dimension.X], maxx)
                minx = min(p[Dimension.X], minx)
                maxy = max(p[Dimension.Y], maxy)
                miny = min(p[Dimension.Y], miny)
                maxz = max(p[Dimension.Z], maxz)
                minz = min(p[Dimension.Z], minz)
        lenx = maxx - minx
        leny = maxy - miny
        lenz = maxz - minz
        return minx, maxx, miny, maxy, minz, maxz

    # def generate_Mesh(self):
    #     self.mesh = mesh.Mesh.from_file(self.location + "/" + str(int(self.fileName)//8)+ "b.stl")

    def get_top(self):
        top = solid.projection(cut=True)(solid.translate([0,0,-1*self.thickness*(self.layer+1)])(self.model))
        useable_area = solid.offset(r=-0.45)(top)
        self.useable_area = useable_area
        solid.scad_render_to_file(self.useable_area, self.location+'/' + 'toptemp.scad')
        outputSTL(From=self.location+'/' + 'toptemp.scad', To=self.location+"/top"+ self.dxf)

        # os.system("toSTL.sh out/toptemp.scad renders/" + self.fileName + ".dxf")
        dxf = DXF(self.location+"/top"+ self.dxf)
        min_p=dxf.points[0][0]
        points_ordered = dxf.points
        i=0
        while i <= len(dxf.points)+1:
            while math.sqrt((dxf.points[0][0]-dxf.points[1][0])**2+(dxf.points[0][1]-dxf.points[1][1])**2) > 0.1:
                dxf.points.insert(1, [(dxf.points[0][0]+dxf.points[1][0])/2, (dxf.points[0][1]+dxf.points[1][1])/2])
                i = i-1
            dxf.points.append(dxf.points.pop(0))
            i+=1
        for i in range(len(dxf.points)):
            dxf.points.append(dxf.points.pop(0))
            if dxf.points[0][0] < min_p:
                min_p = dxf.points[0][0]
                points_ordered = dxf.points.copy()
        dxf.points = points_ordered.copy()

        print(dxf.points)
        self.add_label(dxf.points)

class DXF:
    def __init__(self, file):
        self.file = file
        self.Lines = []
        self.points = []
        doc = ezdxf.readfile(self.file)
        msp = doc.modelspace()
        for e in msp:
            if e.dxftype() == "LINE":
                self.Lines.append(e)
                self.points.append([e.dxf.start[0], e.dxf.start[1]])
        # self.points.append([self.Lines[-1].dxf.end[0], self.Lines[-1].dxf.end[1]])
        self.area = None
        self.center = None
        self.polygon = sg.Polygon(self.points)

    def get_area(self):
        self.area = self.polygon.area
        return self.area

    def get_center(self):
        x_sum = 0
        y_sum =0
        for i in self.points:
            x_sum += i[0]
            y_sum += i[1]
        x_c = x_sum/len(self.points)
        y_c = y_sum/len(self.points)
        return (x_c, y_c)

    def split(self, maxdim):
        splits = []
        length = 0
        pieces = [[]]
        prev = self.points[0]
        for j in self.points:
            length = length + math.sqrt((prev[0]-j[0])**2+(prev[1]-j[1])**2)
            if length >= maxdim:
                pieces[-1].append(j)
                pieces.append([])
                length = 0
            pieces[-1].append(j)
            prev = j
        for j in pieces:
            j.insert(0, [0,0])
            piece = solid.linear_extrude(height=10)(solid.polygon(j))
            splits.append(piece)
        return splits
    def refine_points(self):
        i=0
        while i <= len(self.points)+1:
            while math.sqrt((self.points[0][0]-self.points[1][0])**2+(self.points[0][1]-self.points[1][1])**2) > 0.1:
                self.points.insert(1, [(self.points[0][0]+self.points[1][0])/2, (self.points[0][1]+self.points[1][1])/2])
                i = i-1
            self.points.append(self.points.pop(0))
            i+=1


if __name__== "__main__":
    test = DXF("C:/Users/Daniel/Documents/repos/Shell_Maker/output/0top_slice.dxf")
    test.refine_points()
    k = test.split(48)
    for i in range(len(k)):
        solid.scad_render_to_file(k[i], str(i) + ".scad")


 
 
************************************************/
