// Generated by SolidPython 1.1.3 on 2024-05-26 01:59:02


intersection() {
	difference() {
		intersection() {
			translate(v = [0, 0, 0]) {
				import(file = "CE3E3V2_Bottom_shell.stl", origin = [0, 0]);
			}
			translate(v = [-90.04029846191406, -32.690147399902344, 4]) {
				cube(size = [180.0806, 65.380295, 2]);
			}
		}
		linear_extrude(height = 999) {
			offset(r = -1) {
				import(file = "C:/Users/Daniel/Documents/repos/Shell_Maker/output/2top_slice.dxf", origin = [0, 0]);
			}
		}
	}
	translate(v = [0, 0, 4]) {
		linear_extrude(height = 10) {
			polygon(points = [[0, 0], [-84.8854000000, -1.3426350000], [-84.7947812500, -1.3843534375], [-84.7041625000, -1.4260718750], [-84.6135437500, -1.4677903125], [-84.5229250000, -1.5095087500], [-84.4323062500, -1.5512271875], [-84.3416875000, -1.5929456250], [-84.2510687500, -1.6346640625], [-84.1604500000, -1.6763825000], [-84.0698312500, -1.7181009375], [-83.9792125000, -1.7598193750], [-83.8885937500, -1.8015378125], [-83.7979750000, -1.8432562500], [-83.7073562500, -1.8849746875], [-83.6167375000, -1.9266931250], [-83.5261187500, -1.9684115625], [-83.4355000000, -2.0101300000], [-83.3779500000, -2.0357425000], [-83.3204000000, -2.0613550000], [-83.2628500000, -2.0869675000], [-83.2053000000, -2.1125800000], [-83.1314500000, -2.1433950000], [-83.0576000000, -2.1742100000], [-82.9837500000, -2.2050250000], [-82.9099000000, -2.2358400000], [-82.8360500000, -2.2666550000], [-82.7622000000, -2.2974700000], [-82.6883500000, -2.3282850000], [-82.6145000000, -2.3591000000], [-82.5406500000, -2.3899150000], [-82.4668000000, -2.4207300000], [-82.3929500000, -2.4515450000], [-82.3191000000, -2.4823600000], [-82.2452500000, -2.5131750000], [-82.1714000000, -2.5439900000], [-82.0975500000, -2.5748050000], [-82.0237000000, -2.6056200000], [-81.9498500000, -2.6364350000], [-81.8760000000, -2.6672500000], [-81.8021500000, -2.6980650000], [-81.7283000000, -2.7288800000], [-81.6544500000, -2.7596950000], [-81.5806000000, -2.7905100000], [-81.5067500000, -2.8213250000], [-81.4329000000, -2.8521400000], [-81.3590500000, -2.8829550000], [-81.2852000000, -2.9137700000], [-81.2113500000, -2.9445850000], [-81.1375000000, -2.9754000000], [-81.0636500000, -3.0062150000], [-80.9898000000, -3.0370300000], [-80.9159500000, -3.0678450000], [-80.8421000000, -3.0986600000], [-80.7922796875, -3.1199572656], [-80.7424593750, -3.1412545313], [-80.6926390625, -3.1625517969], [-80.6428187500, -3.1838490625], [-80.5929984375, -3.2051463281], [-80.5431781250, -3.2264435938], [-80.4933578125, -3.2477408594], [-80.4435375000, -3.2690381250], [-80.3937171875, -3.2903353906], [-80.3438968750, -3.3116326562], [-80.2940765625, -3.3329299219], [-80.2442562500, -3.3542271875], [-80.1944359375, -3.3755244531], [-80.1446156250, -3.3968217188], [-80.0947953125, -3.4181189844], [-80.0449750000, -3.4394162500], [-79.9951546875, -3.4607135156], [-79.9453343750, -3.4820107812], [-79.8955140625, -3.5033080469], [-79.8456937500, -3.5246053125], [-79.7958734375, -3.5459025781], [-79.7460531250, -3.5671998438], [-79.6962328125, -3.5884971094], [-79.6464125000, -3.6097943750], [-79.5965921875, -3.6310916406], [-79.5467718750, -3.6523889062], [-79.4969515625, -3.6736861719], [-79.4471312500, -3.6949834375], [-79.3973109375, -3.7162807031], [-79.3474906250, -3.7375779688], [-79.2976703125, -3.7588752344], [-79.2478500000, -3.7801725000], [-79.1980296875, -3.8014697656], [-79.1482093750, -3.8227670312], [-79.0983890625, -3.8440642969], [-79.0485687500, -3.8653615625], [-78.9987484375, -3.8866588281], [-78.9489281250, -3.9079560938], [-78.8991078125, -3.9292533594], [-78.8492875000, -3.9505506250], [-78.7994671875, -3.9718478906], [-78.7496468750, -3.9931451562], [-78.6998265625, -4.0144424219], [-78.6500062500, -4.0357396875], [-78.6001859375, -4.0570369531], [-78.5503656250, -4.0783342187], [-78.5005453125, -4.0996314844], [-78.4507250000, -4.1209287500], [-78.4009046875, -4.1422260156], [-78.3510843750, -4.1635232813], [-78.3012640625, -4.1848205469], [-78.2514437500, -4.2061178125], [-78.2016234375, -4.2274150781], [-78.1518031250, -4.2487123438], [-78.1019828125, -4.2700096094], [-78.0521625000, -4.2913068750], [-78.0023421875, -4.3126041406], [-77.9525218750, -4.3339014062], [-77.9027015625, -4.3551986719], [-77.8528812500, -4.3764959375], [-77.8030609375, -4.3977932031], [-77.7532406250, -4.4190904687], [-77.7034203125, -4.4403877344], [-77.6536000000, -4.4616850000], [-77.6037796875, -4.4829822656], [-77.5539593750, -4.5042795313], [-77.5041390625, -4.5255767969], [-77.4543187500, -4.5468740625], [-77.4044984375, -4.5681713281], [-77.3546781250, -4.5894685938], [-77.3048578125, -4.6107658594], [-77.2550375000, -4.6320631250], [-77.2052171875, -4.6533603906], [-77.1553968750, -4.6746576562], [-77.1055765625, -4.6959549219], [-77.0557562500, -4.7172521875], [-77.0059359375, -4.7385494531], [-76.9561156250, -4.7598467187], [-76.9062953125, -4.7811439844], [-76.8564750000, -4.8024412500], [-76.8066546875, -4.8237385156], [-76.7568343750, -4.8450357812], [-76.7070140625, -4.8663330469], [-76.6571937500, -4.8876303125], [-76.6073734375, -4.9089275781], [-76.5575531250, -4.9302248437], [-76.5077328125, -4.9515221094], [-76.4579125000, -4.9728193750], [-76.4080921875, -4.9941166406], [-76.3582718750, -5.0154139063], [-76.3084515625, -5.0367111719], [-76.2586312500, -5.0580084375], [-76.2088109375, -5.0793057031], [-76.1589906250, -5.1006029687], [-76.1091703125, -5.1219002344], [-76.0593500000, -5.1431975000], [-76.0095296875, -5.1644947656], [-75.9597093750, -5.1857920312], [-75.9098890625, -5.2070892969], [-75.8600687500, -5.2283865625], [-75.8102484375, -5.2496838281], [-75.7604281250, -5.2709810937], [-75.7106078125, -5.2922783594], [-75.6607875000, -5.3135756250], [-75.6109671875, -5.3348728906], [-75.5611468750, -5.3561701563], [-75.5113265625, -5.3774674219], [-75.4615062500, -5.3987646875], [-75.4116859375, -5.4200619531], [-75.3618656250, -5.4413592187], [-75.3120453125, -5.4626564844], [-75.2622250000, -5.4839537500], [-75.2124046875, -5.5052510156], [-75.1625843750, -5.5265482812], [-75.1127640625, -5.5478455469], [-75.0629437500, -5.5691428125], [-75.0131234375, -5.5904400781], [-74.9633031250, -5.6117373437], [-74.9134828125, -5.6330346094], [-74.8636625000, -5.6543318750], [-74.8138421875, -5.6756291406], [-74.7640218750, -5.6969264063], [-74.7142015625, -5.7182236719], [-74.6643812500, -5.7395209375], [-74.6145609375, -5.7608182031], [-74.5647406250, -5.7821154687], [-74.5149203125, -5.8034127344], [-74.4651000000, -5.8247100000], [-74.3950250000, -5.8527900000], [-74.3249500000, -5.8808700000], [-74.2548750000, -5.9089500000], [-74.1848000000, -5.9370300000], [-74.1376250000, -5.9556400000], [-74.0904500000, -5.9742500000], [-74.0432750000, -5.9928600000], [-73.9961000000, -6.0114700000], [-73.9354718750, -6.0356871875], [-73.8748437500, -6.0599043750], [-73.8142156250, -6.0841215625], [-73.7535875000, -6.1083387500], [-73.6929593750, -6.1325559375], [-73.6323312500, -6.1567731250], [-73.5717031250, -6.1809903125], [-73.5110750000, -6.2052075000], [-73.4504468750, -6.2294246875], [-73.3898187500, -6.2536418750], [-73.3291906250, -6.2778590625], [-73.2685625000, -6.3020762500], [-73.2079343750, -6.3262934375], [-73.1473062500, -6.3505106250], [-73.0866781250, -6.3747278125], [-73.0260500000, -6.3989450000], [-72.9654218750, -6.4231621875], [-72.9047937500, -6.4473793750], [-72.8441656250, -6.4715965625], [-72.7835375000, -6.4958137500], [-72.7229093750, -6.5200309375], [-72.6622812500, -6.5442481250], [-72.6016531250, -6.5684653125], [-72.5410250000, -6.5926825000], [-72.4803968750, -6.6168996875], [-72.4197687500, -6.6411168750], [-72.3591406250, -6.6653340625], [-72.2985125000, -6.6895512500], [-72.2378843750, -6.7137684375], [-72.1772562500, -6.7379856250], [-72.1166281250, -6.7622028125], [-72.0560000000, -6.7864200000], [-71.9995468750, -6.8079303125], [-71.9430937500, -6.8294406250], [-71.8866406250, -6.8509509375], [-71.8301875000, -6.8724612500], [-71.7737343750, -6.8939715625], [-71.7172812500, -6.9154818750], [-71.6608281250, -6.9369921875], [-71.6043750000, -6.9585025000], [-71.5479218750, -6.9800128125], [-71.4914687500, -7.0015231250], [-71.4350156250, -7.0230334375], [-71.3785625000, -7.0445437500], [-71.3221093750, -7.0660540625], [-71.2656562500, -7.0875643750], [-71.2092031250, -7.1090746875], [-71.1527500000, -7.1305850000], [-71.0962968750, -7.1520953125], [-71.0398437500, -7.1736056250], [-70.9833906250, -7.1951159375], [-70.9269375000, -7.2166262500], [-70.8704843750, -7.2381365625], [-70.8140312500, -7.2596468750], [-70.7575781250, -7.2811571875], [-70.7011250000, -7.3026675000], [-70.6446718750, -7.3241778125], [-70.5882187500, -7.3456881250], [-70.5317656250, -7.3671984375], [-70.4753125000, -7.3887087500], [-70.4188593750, -7.4102190625], [-70.3624062500, -7.4317293750], [-70.3059531250, -7.4532396875], [-70.2495000000, -7.4747500000], [-70.1815750000, -7.5005348437], [-70.1136500000, -7.5263196875], [-70.0457250000, -7.5521045313], [-69.9778000000, -7.5778893750], [-69.9098750000, -7.6036742188], [-69.8419500000, -7.6294590625], [-69.7740250000, -7.6552439062], [-69.7061000000, -7.6810287500], [-69.6381750000, -7.7068135938], [-69.5702500000, -7.7325984375], [-69.5023250000, -7.7583832813], [-69.4344000000, -7.7841681250], [-69.3664750000, -7.8099529688], [-69.2985500000, -7.8357378125], [-69.2306250000, -7.8615226563], [-69.1627000000, -7.8873075000], [-69.0947750000, -7.9130923438], [-69.0268500000, -7.9388771875], [-68.9589250000, -7.9646620313], [-68.8910000000, -7.9904468750], [-68.8230750000, -8.0162317188], [-68.7551500000, -8.0420165625], [-68.6872250000, -8.0678014063], [-68.6193000000, -8.0935862500], [-68.5513750000, -8.1193710938], [-68.4834500000, -8.1451559375], [-68.4155250000, -8.1709407812], [-68.3476000000, -8.1967256250], [-68.2796750000, -8.2225104688], [-68.2117500000, -8.2482953125], [-68.1438250000, -8.2740801563], [-68.0759000000, -8.2998650000], [-68.0079750000, -8.3256498437], [-67.9400500000, -8.3514346875], [-67.8721250000, -8.3772195312], [-67.8042000000, -8.4030043750], [-67.7362750000, -8.4287892188], [-67.6683500000, -8.4545740625], [-67.6004250000, -8.4803589063], [-67.5325000000, -8.5061437500], [-67.4645750000, -8.5319285937], [-67.3966500000, -8.5577134375], [-67.3287250000, -8.5834982813], [-67.2608000000, -8.6092831250], [-67.1928750000, -8.6350679688], [-67.1249500000, -8.6608528125], [-67.0570250000, -8.6866376562], [-66.9891000000, -8.7124225000], [-66.9211750000, -8.7382073438], [-66.8532500000, -8.7639921875], [-66.7853250000, -8.7897770313], [-66.7174000000, -8.8155618750], [-66.6494750000, -8.8413467187], [-66.5815500000, -8.8671315625], [-66.5136250000, -8.8929164063], [-66.4457000000, -8.9187012500], [-66.3777750000, -8.9444860938], [-66.3098500000, -8.9702709375], [-66.2419250000, -8.9960557812], [-66.1740000000, -9.0218406250], [-66.1060750000, -9.0476254688], [-66.0381500000, -9.0734103125], [-65.9702250000, -9.0991951563], [-65.9023000000, -9.1249800000], [-65.8173000000, -9.1562700000], [-65.7593906250, -9.1765281250], [-65.7014812500, -9.1967862500], [-65.6435718750, -9.2170443750], [-65.5856625000, -9.2373025000], [-65.5277531250, -9.2575606250], [-65.4698437500, -9.2778187500], [-65.4119343750, -9.2980768750], [-65.3540250000, -9.3183350000], [-65.2961156250, -9.3385931250], [-65.2382062500, -9.3588512500], [-65.1802968750, -9.3791093750], [-65.1223875000, -9.3993675000], [-65.0644781250, -9.4196256250], [-65.0065687500, -9.4398837500], [-64.9486593750, -9.4601418750], [-64.8907500000, -9.4804000000], [-64.8328406250, -9.5006581250], [-64.7749312500, -9.5209162500], [-64.7170218750, -9.5411743750], [-64.6591125000, -9.5614325000], [-64.6012031250, -9.5816906250], [-64.5432937500, -9.6019487500], [-64.4853843750, -9.6222068750], [-64.4274750000, -9.6424650000], [-64.3695656250, -9.6627231250], [-64.3116562500, -9.6829812500], [-64.2537468750, -9.7032393750], [-64.1958375000, -9.7234975000], [-64.1379281250, -9.7437556250], [-64.0800187500, -9.7640137500], [-64.0221093750, -9.7842718750], [-63.9642000000, -9.8045300000], [-63.8905562500, -9.8301968750], [-63.8169125000, -9.8558637500], [-63.7432687500, -9.8815306250], [-63.6696250000, -9.9071975000], [-63.5959812500, -9.9328643750], [-63.5223375000, -9.9585312500], [-63.4486937500, -9.9841981250], [-63.3750500000, -10.0098650000], [-63.3014062500, -10.0355318750], [-63.2277625000, -10.0611987500], [-63.1541187500, -10.0868656250], [-63.0804750000, -10.1125325000], [-63.0068312500, -10.1381993750], [-62.9331875000, -10.1638662500], [-62.8595437500, -10.1895331250], [-62.7859000000, -10.2152000000], [-62.7346312500, -10.2330578125], [-62.6833625000, -10.2509156250], [-62.6320937500, -10.2687734375], [-62.5808250000, -10.2866312500], [-62.5295562500, -10.3044890625], [-62.4782875000, -10.3223468750], [-62.4270187500, -10.3402046875], [-62.3757500000, -10.3580625000], [-62.3244812500, -10.3759203125], [-62.2732125000, -10.3937781250], [-62.2219437500, -10.4116359375], [-62.1706750000, -10.4294937500], [-62.1194062500, -10.4473515625], [-62.0681375000, -10.4652093750], [-62.0168687500, -10.4830671875], [-61.9656000000, -10.5009250000], [-61.9143312500, -10.5187828125], [-61.8630625000, -10.5366406250], [-61.8117937500, -10.5544984375], [-61.7605250000, -10.5723562500], [-61.7092562500, -10.5902140625], [-61.6579875000, -10.6080718750], [-61.6067187500, -10.6259296875], [-61.5554500000, -10.6437875000], [-61.5041812500, -10.6616453125], [-61.4529125000, -10.6795031250], [-61.4016437500, -10.6973609375], [-61.3503750000, -10.7152187500], [-61.2991062500, -10.7330765625], [-61.2478375000, -10.7509343750], [-61.1965687500, -10.7687921875], [-61.1453000000, -10.7866500000], [-61.0940312500, -10.8045078125], [-61.0427625000, -10.8223656250], [-60.9914937500, -10.8402234375], [-60.9402250000, -10.8580812500], [-60.8889562500, -10.8759390625], [-60.8376875000, -10.8937968750], [-60.7864187500, -10.9116546875], [-60.7351500000, -10.9295125000], [-60.6838812500, -10.9473703125], [-60.6326125000, -10.9652281250], [-60.5813437500, -10.9830859375], [-60.5300750000, -11.0009437500], [-60.4788062500, -11.0188015625], [-60.4275375000, -11.0366593750], [-60.3762687500, -11.0545171875], [-60.3250000000, -11.0723750000], [-60.2737312500, -11.0902328125], [-60.2224625000, -11.1080906250], [-60.1711937500, -11.1259484375], [-60.1199250000, -11.1438062500], [-60.0686562500, -11.1616640625], [-60.0173875000, -11.1795218750], [-59.9661187500, -11.1973796875], [-59.9148500000, -11.2152375000], [-59.8635812500, -11.2330953125], [-59.8123125000, -11.2509531250], [-59.7610437500, -11.2688109375], [-59.7097750000, -11.2866687500], [-59.6585062500, -11.3045265625], [-59.6072375000, -11.3223843750], [-59.5559687500, -11.3402421875], [-59.5047000000, -11.3581000000], [-59.4534312500, -11.3759578125], [-59.4021625000, -11.3938156250], [-59.3508937500, -11.4116734375], [-59.2996250000, -11.4295312500], [-59.2483562500, -11.4473890625], [-59.1970875000, -11.4652468750], [-59.1458187500, -11.4831046875], [-59.0945500000, -11.5009625000], [-59.0432812500, -11.5188203125], [-58.9920125000, -11.5366781250], [-58.9407437500, -11.5545359375], [-58.8894750000, -11.5723937500], [-58.8382062500, -11.5902515625], [-58.7869375000, -11.6081093750], [-58.7356687500, -11.6259671875], [-58.6844000000, -11.6438250000], [-58.6331312500, -11.6616828125], [-58.5818625000, -11.6795406250], [-58.5305937500, -11.6973984375], [-58.4793250000, -11.7152562500], [-58.4280562500, -11.7331140625], [-58.3767875000, -11.7509718750], [-58.3255187500, -11.7688296875], [-58.2742500000, -11.7866875000], [-58.2229812500, -11.8045453125], [-58.1717125000, -11.8224031250], [-58.1204437500, -11.8402609375], [-58.0691750000, -11.8581187500], [-58.0179062500, -11.8759765625], [-57.9666375000, -11.8938343750], [-57.9153687500, -11.9116921875], [-57.8641000000, -11.9295500000], [-57.8128312500, -11.9474078125], [-57.7615625000, -11.9652656250], [-57.7102937500, -11.9831234375], [-57.6590250000, -12.0009812500], [-57.6077562500, -12.0188390625], [-57.5564875000, -12.0366968750], [-57.5052187500, -12.0545546875], [-57.4539500000, -12.0724125000], [-57.4026812500, -12.0902703125], [-57.3514125000, -12.1081281250], [-57.3001437500, -12.1259859375], [-57.2488750000, -12.1438437500], [-57.1976062500, -12.1617015625], [-57.1463375000, -12.1795593750], [-57.0950687500, -12.1974171875], [-57.0438000000, -12.2152750000], [-56.9925312500, -12.2331328125], [-56.9412625000, -12.2509906250], [-56.8899937500, -12.2688484375], [-56.8387250000, -12.2867062500], [-56.7874562500, -12.3045640625], [-56.7361875000, -12.3224218750], [-56.6849187500, -12.3402796875], [-56.6336500000, -12.3581375000], [-56.5823812500, -12.3759953125], [-56.5311125000, -12.3938531250], [-56.4798437500, -12.4117109375], [-56.4285750000, -12.4295687500], [-56.3773062500, -12.4474265625], [-56.3260375000, -12.4652843750], [-56.2747687500, -12.4831421875], [-56.2235000000, -12.5010000000], [-56.2086000000, -12.5059000000], [-56.1455250000, -12.5265875000], [-56.0824500000, -12.5472750000], [-56.0193750000, -12.5679625000], [-55.9563000000, -12.5886500000], [-55.8932250000, -12.6093375000], [-55.8301500000, -12.6300250000], [-55.7670750000, -12.6507125000], [-55.7040000000, -12.6714000000], [-55.6326000000, -12.6948125000], [-55.5612000000, -12.7182250000], [-55.4898000000, -12.7416375000], [-55.4184000000, -12.7650500000], [-55.3470000000, -12.7884625000], [-55.2756000000, -12.8118750000], [-55.2042000000, -12.8352875000], [-55.1328000000, -12.8587000000], [-55.0614000000, -12.8821125000], [-54.9900000000, -12.9055250000], [-54.9186000000, -12.9289375000], [-54.8472000000, -12.9523500000], [-54.7758000000, -12.9757625000], [-54.7044000000, -12.9991750000], [-54.6330000000, -13.0225875000], [-54.5616000000, -13.0460000000], [-54.4715625000, -13.0739437500], [-54.3815250000, -13.1018875000], [-54.2914875000, -13.1298312500], [-54.2014500000, -13.1577750000], [-54.1114125000, -13.1857187500], [-54.0213750000, -13.2136625000], [-53.9313375000, -13.2416062500], [-53.8413000000, -13.2695500000], [-53.7512625000, -13.2974937500], [-53.6612250000, -13.3254375000], [-53.5711875000, -13.3533812500], [-53.4811500000, -13.3813250000], [-53.3911125000, -13.4092687500], [-53.3010750000, -13.4372125000], [-53.2110375000, -13.4651562500], [-53.1210000000, -13.4931000000], [-53.0668609375, -13.5099273438], [-53.0127218750, -13.5267546875], [-52.9585828125, -13.5435820312], [-52.9044437500, -13.5604093750], [-52.8503046875, -13.5772367187], [-52.7961656250, -13.5940640625], [-52.7420265625, -13.6108914062], [-52.6878875000, -13.6277187500], [-52.6337484375, -13.6445460937], [-52.5796093750, -13.6613734375], [-52.5254703125, -13.6782007813], [-52.4713312500, -13.6950281250], [-52.4171921875, -13.7118554688], [-52.3630531250, -13.7286828125], [-52.3089140625, -13.7455101563], [-52.2547750000, -13.7623375000], [-52.2006359375, -13.7791648438], [-52.1464968750, -13.7959921875], [-52.0923578125, -13.8128195313], [-52.0382187500, -13.8296468750], [-51.9840796875, -13.8464742188], [-51.9299406250, -13.8633015625], [-51.8758015625, -13.8801289063], [-51.8216625000, -13.8969562500], [-51.7675234375, -13.9137835938], [-51.7133843750, -13.9306109375], [-51.6592453125, -13.9474382812], [-51.6051062500, -13.9642656250], [-51.5509671875, -13.9810929687], [-51.4968281250, -13.9979203125], [-51.4426890625, -14.0147476562], [-51.3885500000, -14.0315750000], [-51.3344109375, -14.0484023438], [-51.2802718750, -14.0652296875], [-51.2261328125, -14.0820570313], [-51.1719937500, -14.0988843750], [-51.1178546875, -14.1157117188], [-51.0637156250, -14.1325390625], [-51.0095765625, -14.1493664062], [-50.9554375000, -14.1661937500], [-50.9012984375, -14.1830210937], [-50.8471593750, -14.1998484375], [-50.7930203125, -14.2166757812], [-50.7388812500, -14.2335031250], [-50.6847421875, -14.2503304687], [-50.6306031250, -14.2671578125], [-50.5764640625, -14.2839851562], [-50.5223250000, -14.3008125000], [-50.4681859375, -14.3176398437], [-50.4140468750, -14.3344671875], [-50.3599078125, -14.3512945312], [-50.3057687500, -14.3681218750], [-50.2516296875, -14.3849492188], [-50.1974906250, -14.4017765625], [-50.1433515625, -14.4186039063], [-50.0892125000, -14.4354312500], [-50.0350734375, -14.4522585938], [-49.9809343750, -14.4690859375], [-49.9267953125, -14.4859132813], [-49.8726562500, -14.5027406250], [-49.8185171875, -14.5195679688], [-49.7643781250, -14.5363953125], [-49.7102390625, -14.5532226562], [-49.6561000000, -14.5700500000], [-49.6019609375, -14.5868773438], [-49.5478218750, -14.6037046875], [-49.4936828125, -14.6205320312], [-49.4395437500, -14.6373593750], [-49.3854046875, -14.6541867187], [-49.3312656250, -14.6710140625], [-49.2771265625, -14.6878414062], [-49.2229875000, -14.7046687500], [-49.1688484375, -14.7214960937], [-49.1147093750, -14.7383234375], [-49.0605703125, -14.7551507813], [-49.0064312500, -14.7719781250], [-48.9522921875, -14.7888054688], [-48.8981531250, -14.8056328125], [-48.8440140625, -14.8224601563], [-48.7898750000, -14.8392875000], [-48.7357359375, -14.8561148438], [-48.6815968750, -14.8729421875], [-48.6274578125, -14.8897695313], [-48.5733187500, -14.9065968750], [-48.5191796875, -14.9234242188], [-48.4650406250, -14.9402515625], [-48.4109015625, -14.9570789063], [-48.3567625000, -14.9739062500], [-48.3026234375, -14.9907335938], [-48.2484843750, -15.0075609375], [-48.1943453125, -15.0243882812], [-48.1402062500, -15.0412156250], [-48.0860671875, -15.0580429687], [-48.0319281250, -15.0748703125], [-47.9777890625, -15.0916976563], [-47.9236500000, -15.1085250000], [-47.8695109375, -15.1253523438], [-47.8153718750, -15.1421796875], [-47.7612328125, -15.1590070313], [-47.7070937500, -15.1758343750], [-47.6529546875, -15.1926617188], [-47.5988156250, -15.2094890625], [-47.5446765625, -15.2263164062], [-47.4905375000, -15.2431437500], [-47.4363984375, -15.2599710937], [-47.3822593750, -15.2767984375], [-47.3281203125, -15.2936257812], [-47.2739812500, -15.3104531250], [-47.2198421875, -15.3272804687], [-47.1657031250, -15.3441078125], [-47.1115640625, -15.3609351562], [-47.0574250000, -15.3777625000], [-47.0032859375, -15.3945898437], [-46.9491468750, -15.4114171875], [-46.8950078125, -15.4282445312], [-46.8408687500, -15.4450718750], [-46.7867296875, -15.4618992188], [-46.7325906250, -15.4787265625], [-46.6784515625, -15.4955539063], [-46.6243125000, -15.5123812500], [-46.5701734375, -15.5292085938], [-46.5160343750, -15.5460359375], [-46.4618953125, -15.5628632813], [-46.4077562500, -15.5796906250], [-46.3536171875, -15.5965179688], [-46.2994781250, -15.6133453125], [-46.2453390625, -15.6301726563], [-46.1912000000, -15.6470000000], [-46.1591000000, -15.6565000000], [-46.0785750000, -15.6797687500], [-45.9980500000, -15.7030375000], [-45.9175250000, -15.7263062500], [-45.8370000000, -15.7495750000], [-45.7564750000, -15.7728437500], [-45.6759500000, -15.7961125000], [-45.5954250000, -15.8193812500], [-45.5149000000, -15.8426500000], [-45.4343750000, -15.8659187500], [-45.3538500000, -15.8891875000], [-45.2733250000, -15.9124562500], [-45.1928000000, -15.9357250000], [-45.1122750000, -15.9589937500], [-45.0317500000, -15.9822625000], [-44.9512250000, -16.0055312500], [-44.8707000000, -16.0288000000], [-44.8087023437, -16.0461257812], [-44.7467046875, -16.0634515625], [-44.6847070312, -16.0807773438], [-44.6227093750, -16.0981031250], [-44.5607117187, -16.1154289063], [-44.4987140625, -16.1327546875], [-44.4367164062, -16.1500804687], [-44.3747187500, -16.1674062500], [-44.3127210937, -16.1847320313], [-44.2507234375, -16.2020578125], [-44.1887257812, -16.2193835938], [-44.1267281250, -16.2367093750], [-44.0647304687, -16.2540351562], [-44.0027328125, -16.2713609375], [-43.9407351562, -16.2886867188], [-43.8787375000, -16.3060125000], [-43.8167398437, -16.3233382813], [-43.7547421875, -16.3406640625], [-43.6927445312, -16.3579898437], [-43.6307468750, -16.3753156250], [-43.5687492187, -16.3926414063], [-43.5067515625, -16.4099671875], [-43.4447539062, -16.4272929688], [-43.3827562500, -16.4446187500], [-43.3207585937, -16.4619445312], [-43.2587609375, -16.4792703125], [-43.1967632812, -16.4965960938], [-43.1347656250, -16.5139218750], [-43.0727679688, -16.5312476563], [-43.0107703125, -16.5485734375], [-42.9487726563, -16.5658992187], [-42.8867750000, -16.5832250000], [-42.8247773438, -16.6005507812], [-42.7627796875, -16.6178765625], [-42.7007820313, -16.6352023438], [-42.6387843750, -16.6525281250], [-42.5767867188, -16.6698539062], [-42.5147890625, -16.6871796875], [-42.4527914063, -16.7045054687], [-42.3907937500, -16.7218312500], [-42.3287960938, -16.7391570313], [-42.2667984375, -16.7564828125], [-42.2048007813, -16.7738085937], [-42.1428031250, -16.7911343750], [-42.0808054688, -16.8084601562], [-42.0188078125, -16.8257859375], [-41.9568101563, -16.8431117188], [-41.8948125000, -16.8604375000], [-41.8328148438, -16.8777632812], [-41.7708171875, -16.8950890625], [-41.7088195313, -16.9124148437], [-41.6468218750, -16.9297406250], [-41.5848242188, -16.9470664063], [-41.5228265625, -16.9643921875], [-41.4608289063, -16.9817179687], [-41.3988312500, -16.9990437500], [-41.3368335938, -17.0163695312], [-41.2748359375, -17.0336953125], [-41.2128382813, -17.0510210938], [-41.1508406250, -17.0683468750], [-41.0888429688, -17.0856726562], [-41.0268453125, -17.1029984375], [-40.9648476563, -17.1203242187], [-40.9028500000, -17.1376500000], [-40.8408523438, -17.1549757813], [-40.7788546875, -17.1723015625], [-40.7168570313, -17.1896273438], [-40.6548593750, -17.2069531250], [-40.5928617188, -17.2242789062], [-40.5308640625, -17.2416046875], [-40.4688664063, -17.2589304688], [-40.4068687500, -17.2762562500], [-40.3448710938, -17.2935820313], [-40.2828734375, -17.3109078125], [-40.2208757813, -17.3282335937], [-40.1588781250, -17.3455593750], [-40.0968804688, -17.3628851563], [-40.0348828125, -17.3802109375], [-39.9728851563, -17.3975367188], [-39.9108875000, -17.4148625000], [-39.8488898438, -17.4321882812], [-39.7868921875, -17.4495140625], [-39.7248945313, -17.4668398438]]);
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
import math
import time

from stl import mesh, Dimension

from tkinter import Tk     # from tkinter import Tk for Python 3.x
from tkinter.filedialog import askopenfilename
from mpl_toolkits.mplot3d import art3d
from matplotlib import pyplot as plt
import solid
import os
import ezdxf
import shapely.geometry as sg
import subprocess
from GUI import getSCADPath



def outputSTL(From, To, PATH=getSCADPath()):
    subprocess.Popen(PATH + " -o " + To + " " + From)
    while not os.path.exists(To):
        time.sleep(1)

class Model:
    def __init__(self, model, fileName, location, layer, thickness):
        self.location = location
        self.code = None
        self.fileName = fileName
        self.stl = fileName + ".stl"
        self.layer = layer
        self.thickness = thickness
        self.maxz = (layer+1)*thickness
        self.dxf = fileName + ".dxf"
        self.scad = fileName + ".scad"
        self.model = model
        self.center = None
        self.width = 10
        self.mesh = None
        self.useable_area = None


    def get_code(self):
        max_dim = 0.05
        max_array = 6

        num = int(self.fileName)
        nums = [int(a) for a in str(num)]
        nums.reverse()
        indices = nums
        length = len(nums)

        print(indices)
        t = 0
        i = 0
        cubes = []
        x = 0
        y = 0
        width = 0.01
        while x <= max_dim:
            while y <= max_dim:
                print(indices)
                if nums == []:
                    break
                if indices[0] != 0:
                    cubes.append(solid.translate([x, y, 0])(solid.cube(size=t / 1000 + 0.001)))
                    y += max_dim / (max_array - 1)
                    nums[0] = nums[0] - 1
                else:
                    indices.pop(0)
                    t += 1
                i += 1
            x += max_dim / (max_array - 1)
            y = 0

        outside = solid.translate([-width / 2, -width / 2])(solid.cube(max_dim + (length - 1) / 1000 + 0.001 + width))
        self.code = solid.difference()(outside, cubes)
        self.code = solid.projection(cut=True)(self.code)
        solid.scad_render_to_file(self.code, self.location + "/code.scad")
        outputSTL(From=self.location+"/code.scad", To=self.location+"code.dxf", PATH=getSCADPath())
        # os.system("toSTL.sh renders/code.scad renders/code.dxf")
        return self.location+"/code.dxf"

    def download(self, type):
        if type =="stl":
            print("generating:" + self.location+"/"+ self.fileName+".stl")
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".stl")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".stl")
        elif type == "dxf":
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".dxf")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".dxf")

    def render(self):
        solid.scad_render_to_file(self.model, self.location+"/"+ self.fileName+'.scad')
        while not os.path.exists(self.location+"/"+self.fileName+".scad"):
            time.sleep(1)
        # outputSTL(From= self.location+"/"+ self.fileName+'.scad', To=self.location+"/"+ self.fileName+'.stl')

    def get_points(self):
        doc = ezdxf.readfile(filename=self.location+"/"+ self.fileName+".dxf")
        msp = doc.modelspace()
        i=0
        lists = []
        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return [start, end]

        for e in msp.query("LINE"):
            line = helper(e)
            if not lists:
                lists.append([line])
            else:
                if lists[i][len(lists)-1][1] != line[0]:
                    lists.append([line])
                    i+=1
                else:
                    lists[i].append(line)

    def get_points2(self, FILE):
        doc = ezdxf.readfile(filename=FILE)
        msp = doc.modelspace()
        i = 0
        lists = []

        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return (start, end)

        for e in msp.query("LINE"):
            line = helper(e)
            if lists==[]:
                lists.append([line])
            else:
                if lists[i][len(lists[i]) - 1][1] != line[0]:
                    lists.append([line])
                    i += 1
                else:
                    lists[i].append(line)
        return lists

    def add_code(self):
        dxf = solid.projection(cut=False)(self.model)
        offset = solid.offset(r=-0.1)(dxf)
        solid.scad_render_to_file(offset, self.location+'/offset.scad')
        os.system("toSTL.sh renders/offset.scad renders/offset.dxf")
        lines = self.get_points2("renders/offset.dxf")
        x = lines[0][0][0][0]
        y = lines[0][0][0][1]
        print(x)
        print(y)
        code = solid.translate([x,y,0])(self.code)
        code = solid.linear_extrude(height=999)(code)
        save = self.model
        self.model = solid.projection()(solid.difference()(self.model, code))
        self.render()
        self.download("dxf")
        self.model = save

    def add_label(self, pos):
        # num = 12
        # minx, maxx, miny, maxy, minz, maxz = self.find_minmax()
        maxz = self.maxz
        # label = solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.5, halign="center"))
        # i=minx
        # print("x-len: " + str(maxx-minx))
        # print(i)
        # inc = (maxx-minx)/num
        # while minx <= i <= maxx:
        #     label = solid.union()(solid.translate([i, 0, maxz - 0.2])(solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.25, halign="center"))), label)
        #     i += inc
        #
        # l = label
        #
        # i =miny
        # while miny<= i <= maxy:
        #     print("y inc")
        #     l = solid.union()(solid.translate([0, i, 0])(label), l)
        #     i += 0.5
        for i in str(self.fileName):
            cur = pos[0]
            label = solid.translate([pos[0][0], pos[0][1], self.maxz-0.2])(solid.linear_extrude(height=(self.thickness)/3)(solid.text(str(i), size=0.5, halign="center", valign="center")))
            self.model = solid.difference()(self.model, label)
            pos.append(pos.pop(0))
            while abs(cur[0]-pos[0][0])<0.5 and abs(cur[1]-pos[0][1])<0.5:
                pos.append(pos.pop(0))



    def Center(self):

        volume, cog, inertia = self.mesh.get_mass_properties()
        print("Volume                                  = {0}".format(volume))
        print("Position of the center of gravity (COG) = {0}".format(cog))
        m_centered = solid.translate([-cog[0], -cog[1], 0])(
            self.model
        )
        return m_centered

    def find_minmax(self):
        minx = maxx = miny = maxy = minz = maxz = None
        for p in self.mesh.points:
            # p contains (x, y, z)
            if minx is None:
                minx = p[Dimension.X]
                maxx = p[Dimension.X]
                miny = p[Dimension.Y]
                maxy = p[Dimension.Y]
                minz = p[Dimension.Z]
                maxz = p[Dimension.Z]
            else:
                maxx = max(p[Dimension.X], maxx)
                minx = min(p[Dimension.X], minx)
                maxy = max(p[Dimension.Y], maxy)
                miny = min(p[Dimension.Y], miny)
                maxz = max(p[Dimension.Z], maxz)
                minz = min(p[Dimension.Z], minz)
        lenx = maxx - minx
        leny = maxy - miny
        lenz = maxz - minz
        return minx, maxx, miny, maxy, minz, maxz

    # def generate_Mesh(self):
    #     self.mesh = mesh.Mesh.from_file(self.location + "/" + str(int(self.fileName)//8)+ "b.stl")

    def get_top(self):
        top = solid.projection(cut=True)(solid.translate([0,0,-1*self.thickness*(self.layer+1)])(self.model))
        useable_area = solid.offset(r=-0.45)(top)
        self.useable_area = useable_area
        solid.scad_render_to_file(self.useable_area, self.location+'/' + 'toptemp.scad')
        outputSTL(From=self.location+'/' + 'toptemp.scad', To=self.location+"/top"+ self.dxf)

        # os.system("toSTL.sh out/toptemp.scad renders/" + self.fileName + ".dxf")
        dxf = DXF(self.location+"/top"+ self.dxf)
        min_p=dxf.points[0][0]
        points_ordered = dxf.points
        i=0
        while i <= len(dxf.points)+1:
            while math.sqrt((dxf.points[0][0]-dxf.points[1][0])**2+(dxf.points[0][1]-dxf.points[1][1])**2) > 0.1:
                dxf.points.insert(1, [(dxf.points[0][0]+dxf.points[1][0])/2, (dxf.points[0][1]+dxf.points[1][1])/2])
                i = i-1
            dxf.points.append(dxf.points.pop(0))
            i+=1
        for i in range(len(dxf.points)):
            dxf.points.append(dxf.points.pop(0))
            if dxf.points[0][0] < min_p:
                min_p = dxf.points[0][0]
                points_ordered = dxf.points.copy()
        dxf.points = points_ordered.copy()

        print(dxf.points)
        self.add_label(dxf.points)

class DXF:
    def __init__(self, file):
        self.file = file
        self.Lines = []
        self.points = []
        doc = ezdxf.readfile(self.file)
        msp = doc.modelspace()
        for e in msp:
            if e.dxftype() == "LINE":
                self.Lines.append(e)
                self.points.append([e.dxf.start[0], e.dxf.start[1]])
        # self.points.append([self.Lines[-1].dxf.end[0], self.Lines[-1].dxf.end[1]])
        self.area = None
        self.center = None
        self.polygon = sg.Polygon(self.points)

    def get_area(self):
        self.area = self.polygon.area
        return self.area

    def get_center(self):
        x_sum = 0
        y_sum =0
        for i in self.points:
            x_sum += i[0]
            y_sum += i[1]
        x_c = x_sum/len(self.points)
        y_c = y_sum/len(self.points)
        return (x_c, y_c)

    def split(self, maxdim):
        splits = []
        length = 0
        pieces = [[]]
        prev = self.points[-1]
        pieces[-1].append(prev)
        for j in self.points:
            length = length + math.sqrt((prev[0]-j[0])**2+(prev[1]-j[1])**2)
            if length >= maxdim:
                pieces[-1].append(j)
                pieces.append([])
                length = 0
            pieces[-1].append(j)
            prev = j
        for j in pieces:
            j.insert(0, [0,0])
            piece = solid.linear_extrude(height=10)(solid.polygon(j))
            splits.append(piece)
        return splits
    def refine_points(self):
        i=0
        while i <= len(self.points)+1:
            while math.sqrt((self.points[0][0]-self.points[1][0])**2+(self.points[0][1]-self.points[1][1])**2) > 0.1:
                self.points.insert(1, [(self.points[0][0]+self.points[1][0])/2, (self.points[0][1]+self.points[1][1])/2])
                i = i-1
            self.points.append(self.points.pop(0))
            i+=1


if __name__== "__main__":
    test = DXF("C:/Users/Daniel/Documents/repos/Shell_Maker/output/0top_slice.dxf")
    test.refine_points()
    k = test.split(48)
    for i in range(len(k)):
        solid.scad_render_to_file(k[i], str(i) + ".scad")


 
 
************************************************/
