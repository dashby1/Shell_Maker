// Generated by SolidPython 1.1.3 on 2024-05-19 23:42:09


intersection() {
	intersection() {
		translate(v = [0, 0, 0]) {
			import(file = "CE3E3V2_Bottom_shell.stl", origin = [0, 0]);
		}
		translate(v = [-90.04029846191406, -32.690147399902344, 18]) {
			cube(size = [180.0806, 65.380295, 2]);
		}
	}
	translate(v = [0, 0, 18]) {
		linear_extrude(height = 10) {
			polygon(points = [[0, 0], [54.6258796875, -15.0888500000], [54.6668531250, -15.0524000000], [54.7078265625, -15.0159500000], [54.7488000000, -14.9795000000], [54.7896250000, -14.9427750000], [54.8304500000, -14.9060500000], [54.8712750000, -14.8693250000], [54.9121000000, -14.8326000000], [54.9581500000, -14.7868750000], [55.0042000000, -14.7411500000], [55.0502500000, -14.6954250000], [55.0963000000, -14.6497000000], [55.1423500000, -14.6039750000], [55.1884000000, -14.5582500000], [55.2344500000, -14.5125250000], [55.2805000000, -14.4668000000], [55.3376250000, -14.4071000000], [55.3947500000, -14.3474000000], [55.4518750000, -14.2877000000], [55.5090000000, -14.2280000000], [55.5661250000, -14.1683000000], [55.6232500000, -14.1086000000], [55.6803750000, -14.0489000000], [55.7375000000, -13.9892000000], [55.7946250000, -13.9295000000], [55.8517500000, -13.8698000000], [55.9088750000, -13.8101000000], [55.9660000000, -13.7504000000], [56.0231250000, -13.6907000000], [56.0802500000, -13.6310000000], [56.1373750000, -13.5713000000], [56.1945000000, -13.5116000000], [56.2339000000, -13.4665000000], [56.2733000000, -13.4214000000], [56.3321687500, -13.3508406250], [56.3910375000, -13.2802812500], [56.4499062500, -13.2097218750], [56.5087750000, -13.1391625000], [56.5676437500, -13.0686031250], [56.6265125000, -12.9980437500], [56.6853812500, -12.9274843750], [56.7442500000, -12.8569250000], [56.8031187500, -12.7863656250], [56.8619875000, -12.7158062500], [56.9208562500, -12.6452468750], [56.9797250000, -12.5746875000], [57.0385937500, -12.5041281250], [57.0974625000, -12.4335687500], [57.1563312500, -12.3630093750], [57.2152000000, -12.2924500000], [57.2740687500, -12.2218906250], [57.3329375000, -12.1513312500], [57.3918062500, -12.0807718750], [57.4506750000, -12.0102125000], [57.5095437500, -11.9396531250], [57.5684125000, -11.8690937500], [57.6272812500, -11.7985343750], [57.6861500000, -11.7279750000], [57.7450187500, -11.6574156250], [57.8038875000, -11.5868562500], [57.8627562500, -11.5162968750], [57.9216250000, -11.4457375000], [57.9804937500, -11.3751781250], [58.0393625000, -11.3046187500], [58.0982312500, -11.2340593750], [58.1571000000, -11.1635000000], [58.2160000000, -11.0888000000], [58.2462593750, -11.0457665625], [58.2765187500, -11.0027331250], [58.3067781250, -10.9596996875], [58.3370375000, -10.9166662500], [58.3672968750, -10.8736328125], [58.3975562500, -10.8305993750], [58.4278156250, -10.7875659375], [58.4580750000, -10.7445325000], [58.4883343750, -10.7014990625], [58.5185937500, -10.6584656250], [58.5488531250, -10.6154321875], [58.5791125000, -10.5723987500], [58.6093718750, -10.5293653125], [58.6396312500, -10.4863318750], [58.6698906250, -10.4432984375], [58.7001500000, -10.4002650000], [58.7304093750, -10.3572315625], [58.7606687500, -10.3141981250], [58.7909281250, -10.2711646875], [58.8211875000, -10.2281312500], [58.8514468750, -10.1850978125], [58.8817062500, -10.1420643750], [58.9119656250, -10.0990309375], [58.9422250000, -10.0559975000], [58.9724843750, -10.0129640625], [59.0027437500, -9.9699306250], [59.0330031250, -9.9268971875], [59.0632625000, -9.8838637500], [59.0935218750, -9.8408303125], [59.1237812500, -9.7977968750], [59.1540406250, -9.7547634375], [59.1843000000, -9.7117300000], [59.1973000000, -9.6916500000], [59.2402312500, -9.6221081250], [59.2831625000, -9.5525662500], [59.3260937500, -9.4830243750], [59.3690250000, -9.4134825000], [59.4119562500, -9.3439406250], [59.4548875000, -9.2743987500], [59.4978187500, -9.2048568750], [59.5407500000, -9.1353150000], [59.5836812500, -9.0657731250], [59.6266125000, -8.9962312500], [59.6695437500, -8.9266893750], [59.7124750000, -8.8571475000], [59.7554062500, -8.7876056250], [59.7983375000, -8.7180637500], [59.8412687500, -8.6485218750], [59.8842000000, -8.5789800000], [59.9162000000, -8.5267500000], [59.9212000000, -8.5181300000], [59.9478000000, -8.4711062500], [59.9744000000, -8.4240825000], [60.0010000000, -8.3770587500], [60.0276000000, -8.3300350000], [60.0542000000, -8.2830112500], [60.0808000000, -8.2359875000], [60.1074000000, -8.1889637500], [60.1340000000, -8.1419400000], [60.1675250000, -8.0717050000], [60.2010500000, -8.0014700000], [60.2345750000, -7.9312350000], [60.2681000000, -7.8610000000], [60.3016250000, -7.7907650000], [60.3351500000, -7.7205300000], [60.3686750000, -7.6502950000], [60.4022000000, -7.5800600000], [60.4357250000, -7.5098250000], [60.4692500000, -7.4395900000], [60.5027750000, -7.3693550000], [60.5363000000, -7.2991200000], [60.5698250000, -7.2288850000], [60.6033500000, -7.1586500000], [60.6368750000, -7.0884150000], [60.6704000000, -7.0181800000], [60.7039250000, -6.9479450000], [60.7374500000, -6.8777100000], [60.7709750000, -6.8074750000], [60.8045000000, -6.7372400000], [60.8380250000, -6.6670050000], [60.8715500000, -6.5967700000], [60.9050750000, -6.5265350000], [60.9386000000, -6.4563000000], [60.9721250000, -6.3860650000], [61.0056500000, -6.3158300000], [61.0391750000, -6.2455950000], [61.0727000000, -6.1753600000], [61.1062250000, -6.1051250000], [61.1397500000, -6.0348900000], [61.1732750000, -5.9646550000], [61.2068000000, -5.8944200000], [61.2316000000, -5.8452000000], [61.2394000000, -5.8261600000], [61.2750750000, -5.7345600000], [61.3107500000, -5.6429600000], [61.3464250000, -5.5513600000], [61.3821000000, -5.4597600000], [61.4005406250, -5.4002465625], [61.4189812500, -5.3407331250], [61.4374218750, -5.2812196875], [61.4558625000, -5.2217062500], [61.4743031250, -5.1621928125], [61.4927437500, -5.1026793750], [61.5111843750, -5.0431659375], [61.5296250000, -4.9836525000], [61.5480656250, -4.9241390625], [61.5665062500, -4.8646256250], [61.5849468750, -4.8051121875], [61.6033875000, -4.7455987500], [61.6218281250, -4.6860853125], [61.6402687500, -4.6265718750], [61.6587093750, -4.5670584375], [61.6771500000, -4.5075450000], [61.6955906250, -4.4480315625], [61.7140312500, -4.3885181250], [61.7324718750, -4.3290046875], [61.7509125000, -4.2694912500], [61.7693531250, -4.2099778125], [61.7877937500, -4.1504643750], [61.8062343750, -4.0909509375], [61.8246750000, -4.0314375000], [61.8431156250, -3.9719240625], [61.8615562500, -3.9124106250], [61.8799968750, -3.8528971875], [61.8984375000, -3.7933837500], [61.9168781250, -3.7338703125], [61.9353187500, -3.6743568750], [61.9537593750, -3.6148434375], [61.9722000000, -3.5553300000], [61.9923500000, -3.4913400000], [62.0125000000, -3.4273500000], [62.0149000000, -3.4175100000], [62.0256437500, -3.3674700000], [62.0363875000, -3.3174300000], [62.0471312500, -3.2673900000], [62.0578750000, -3.2173500000], [62.0686187500, -3.1673100000], [62.0793625000, -3.1172700000], [62.0901062500, -3.0672300000], [62.1008500000, -3.0171900000], [62.1115937500, -2.9671500000], [62.1223375000, -2.9171100000], [62.1330812500, -2.8670700000], [62.1438250000, -2.8170300000], [62.1545687500, -2.7669900000], [62.1653125000, -2.7169500000], [62.1760562500, -2.6669100000], [62.1868000000, -2.6168700000], [62.1872000000, -2.6145500000], [62.1984312500, -2.5345012500], [62.2096625000, -2.4544525000], [62.2208937500, -2.3744037500], [62.2321250000, -2.2943550000], [62.2433562500, -2.2143062500], [62.2545875000, -2.1342575000], [62.2658187500, -2.0542087500], [62.2770500000, -1.9741600000], [62.2882812500, -1.8941112500], [62.2995125000, -1.8140625000], [62.3107437500, -1.7340137500], [62.3219750000, -1.6539650000], [62.3332062500, -1.5739162500], [62.3444375000, -1.4938675000], [62.3556687500, -1.4138187500], [62.3669000000, -1.3337700000], [62.3795000000, -1.2436100000], [62.3830500000, -1.1821588125], [62.3866000000, -1.1207076250], [62.3901500000, -1.0592564375], [62.3937000000, -0.9978052500], [62.3972500000, -0.9363540625], [62.4008000000, -0.8749028750], [62.4043500000, -0.8134516875], [62.4079000000, -0.7520005000], [62.4114500000, -0.6905493125], [62.4150000000, -0.6290981250], [62.4185500000, -0.5676469375], [62.4221000000, -0.5061957500], [62.4256500000, -0.4447445625], [62.4292000000, -0.3832933750], [62.4327500000, -0.3218421875], [62.4363000000, -0.2603910000], [62.4363000000, -0.2592770000], [62.4322375000, -0.1917564687], [62.4281750000, -0.1242359375], [62.4241125000, -0.0567154062], [62.4200500000, 0.0108051250], [62.4159875000, 0.0783256563], [62.4119250000, 0.1458461875], [62.4078625000, 0.2133667188], [62.4038000000, 0.2808872500], [62.3997375000, 0.3484077813], [62.3956750000, 0.4159283125], [62.3916125000, 0.4834488437], [62.3875500000, 0.5509693750], [62.3834875000, 0.6184899062], [62.3794250000, 0.6860104375], [62.3753625000, 0.7535309688], [62.3713000000, 0.8210515000], [62.3672375000, 0.8885720313], [62.3631750000, 0.9560925625], [62.3591125000, 1.0236130937], [62.3550500000, 1.0911336250], [62.3509875000, 1.1586541562], [62.3469250000, 1.2261746875], [62.3428625000, 1.2936952187], [62.3388000000, 1.3612157500], [62.3347375000, 1.4287362812], [62.3306750000, 1.4962568125], [62.3266125000, 1.5637773437], [62.3225500000, 1.6312978750], [62.3184875000, 1.6988184063], [62.3144250000, 1.7663389375], [62.3103625000, 1.8338594688], [62.3063000000, 1.9013800000], [62.3016000000, 1.9787750000], [62.2969000000, 2.0561700000], [62.2964000000, 2.0597100000], [62.2862000000, 2.1270625000], [62.2760000000, 2.1944150000], [62.2658000000, 2.2617675000], [62.2556000000, 2.3291200000], [62.2503000000, 2.3590200000], [62.2356750000, 2.4385212500], [62.2210500000, 2.5180225000], [62.2064250000, 2.5975237500], [62.1918000000, 2.6770250000], [62.1771750000, 2.7565262500], [62.1625500000, 2.8360275000], [62.1479250000, 2.9155287500], [62.1333000000, 2.9950300000], [62.1301000000, 3.0110500000], [62.1151875000, 3.0668106250], [62.1002750000, 3.1225712500], [62.0853625000, 3.1783318750], [62.0704500000, 3.2340925000], [62.0555375000, 3.2898531250], [62.0406250000, 3.3456137500], [62.0257125000, 3.4013743750], [62.0108000000, 3.4571350000], [61.9958875000, 3.5128956250], [61.9809750000, 3.5686562500], [61.9660625000, 3.6244168750], [61.9511500000, 3.6801775000], [61.9362375000, 3.7359381250], [61.9213250000, 3.7916987500], [61.9064125000, 3.8474593750], [61.8915000000, 3.9032200000], [61.8765875000, 3.9589806250], [61.8616750000, 4.0147412500], [61.8467625000, 4.0705018750], [61.8318500000, 4.1262625000], [61.8169375000, 4.1820231250], [61.8020250000, 4.2377837500], [61.7871125000, 4.2935443750], [61.7722000000, 4.3493050000], [61.7572875000, 4.4050656250], [61.7423750000, 4.4608262500], [61.7274625000, 4.5165868750], [61.7125500000, 4.5723475000], [61.6976375000, 4.6281081250], [61.6827250000, 4.6838687500], [61.6678125000, 4.7396293750], [61.6529000000, 4.7953900000], [61.6450000000, 4.8186200000], [61.6163343750, 4.8890615625], [61.5876687500, 4.9595031250], [61.5590031250, 5.0299446875], [61.5303375000, 5.1003862500], [61.5016718750, 5.1708278125], [61.4730062500, 5.2412693750], [61.4443406250, 5.3117109375], [61.4156750000, 5.3821525000], [61.3870093750, 5.4525940625], [61.3583437500, 5.5230356250], [61.3296781250, 5.5934771875], [61.3010125000, 5.6639187500], [61.2723468750, 5.7343603125], [61.2436812500, 5.8048018750], [61.2150156250, 5.8752434375], [61.1863500000, 5.9456850000], [61.1576843750, 6.0161265625], [61.1290187500, 6.0865681250], [61.1003531250, 6.1570096875], [61.0716875000, 6.2274512500], [61.0430218750, 6.2978928125], [61.0143562500, 6.3683343750], [60.9856906250, 6.4387759375], [60.9570250000, 6.5092175000], [60.9283593750, 6.5796590625], [60.8996937500, 6.6501006250], [60.8710281250, 6.7205421875], [60.8423625000, 6.7909837500], [60.8136968750, 6.8614253125], [60.7850312500, 6.9318668750], [60.7563656250, 7.0023084375], [60.7277000000, 7.0727500000], [60.6984500000, 7.1426600000], [60.6692000000, 7.2125700000], [60.6598000000, 7.2320600000], [60.6520000000, 7.2477400000], [60.6189000000, 7.3131262500], [60.5858000000, 7.3785125000], [60.5527000000, 7.4438987500], [60.5196000000, 7.5092850000], [60.4865000000, 7.5746712500], [60.4534000000, 7.6400575000], [60.4203000000, 7.7054437500], [60.3872000000, 7.7708300000], [60.3758000000, 7.7930800000], [60.3541000000, 7.8330200000], [60.3057687500, 7.9117412500], [60.2574375000, 7.9904625000], [60.2091062500, 8.0691837500], [60.1607750000, 8.1479050000], [60.1124437500, 8.2266262500], [60.0641125000, 8.3053475000], [60.0157812500, 8.3840687500], [59.9674500000, 8.4627900000], [59.9191187500, 8.5415112500], [59.8707875000, 8.6202325000], [59.8224562500, 8.6989537500], [59.7741250000, 8.7776750000], [59.7257937500, 8.8563962500], [59.6774625000, 8.9351175000], [59.6291312500, 9.0138387500], [59.5808000000, 9.0925600000], [59.5324687500, 9.1712812500], [59.4841375000, 9.2500025000], [59.4358062500, 9.3287237500], [59.3874750000, 9.4074450000], [59.3391437500, 9.4861662500], [59.2908125000, 9.5648875000], [59.2424812500, 9.6436087500], [59.1941500000, 9.7223300000], [59.1458187500, 9.8010512500], [59.0974875000, 9.8797725000], [59.0491562500, 9.9584937500], [59.0008250000, 10.0372150000], [58.9524937500, 10.1159362500], [58.9041625000, 10.1946575000], [58.8558312500, 10.2733787500], [58.8075000000, 10.3521000000], [58.7622000000, 10.4236000000], [58.7169000000, 10.4951000000], [58.6978000000, 10.5218000000], [58.6482500000, 10.5884625000], [58.5987000000, 10.6551250000], [58.5491500000, 10.7217875000], [58.4996000000, 10.7884500000], [58.4500500000, 10.8551125000], [58.4005000000, 10.9217750000], [58.3509500000, 10.9884375000], [58.3014000000, 11.0551000000], [58.2518500000, 11.1217625000], [58.2023000000, 11.1884250000], [58.1527500000, 11.2550875000], [58.1032000000, 11.3217500000], [58.0536500000, 11.3884125000], [58.0041000000, 11.4550750000], [57.9545500000, 11.5217375000], [57.9050000000, 11.5884000000], [57.8663000000, 11.6395000000], [57.8278406250, 11.6855906250], [57.7893812500, 11.7316812500], [57.7509218750, 11.7777718750], [57.7124625000, 11.8238625000], [57.6740031250, 11.8699531250], [57.6355437500, 11.9160437500], [57.5970843750, 11.9621343750], [57.5586250000, 12.0082250000], [57.5201656250, 12.0543156250], [57.4817062500, 12.1004062500], [57.4432468750, 12.1464968750], [57.4047875000, 12.1925875000], [57.3663281250, 12.2386781250], [57.3278687500, 12.2847687500], [57.2894093750, 12.3308593750], [57.2509500000, 12.3769500000], [57.2124906250, 12.4230406250], [57.1740312500, 12.4691312500], [57.1355718750, 12.5152218750], [57.0971125000, 12.5613125000], [57.0586531250, 12.6074031250], [57.0201937500, 12.6534937500], [56.9817343750, 12.6995843750], [56.9432750000, 12.7456750000], [56.9048156250, 12.7917656250], [56.8663562500, 12.8378562500], [56.8278968750, 12.8839468750], [56.7894375000, 12.9300375000], [56.7509781250, 12.9761281250], [56.7125187500, 13.0222187500], [56.6740593750, 13.0683093750], [56.6356000000, 13.1144000000], [56.6253000000, 13.1259000000], [56.5785406250, 13.1753000000], [56.5317812500, 13.2247000000], [56.4850218750, 13.2741000000], [56.4382625000, 13.3235000000], [56.3915031250, 13.3729000000], [56.3447437500, 13.4223000000], [56.2979843750, 13.4717000000], [56.2512250000, 13.5211000000], [56.2044656250, 13.5705000000], [56.1577062500, 13.6199000000], [56.1109468750, 13.6693000000], [56.0641875000, 13.7187000000], [56.0174281250, 13.7681000000], [55.9706687500, 13.8175000000], [55.9239093750, 13.8669000000], [55.8771500000, 13.9163000000], [55.8303906250, 13.9657000000], [55.7836312500, 14.0151000000], [55.7368718750, 14.0645000000], [55.6901125000, 14.1139000000], [55.6433531250, 14.1633000000], [55.5965937500, 14.2127000000], [55.5498343750, 14.2621000000], [55.5030750000, 14.3115000000], [55.4563156250, 14.3609000000], [55.4095562500, 14.4103000000], [55.3627968750, 14.4597000000], [55.3160375000, 14.5091000000], [55.2692781250, 14.5585000000], [55.2225187500, 14.6079000000], [55.1757593750, 14.6573000000], [55.1290000000, 14.7067000000], [55.1173000000, 14.7185000000], [55.0564812500, 14.7748250000], [54.9956625000, 14.8311500000], [54.9348437500, 14.8874750000], [54.8740250000, 14.9438000000], [54.8132062500, 15.0001250000], [54.7523875000, 15.0564500000], [54.6915687500, 15.1127750000], [54.6307500000, 15.1691000000], [54.5699312500, 15.2254250000], [54.5091125000, 15.2817500000], [54.4482937500, 15.3380750000], [54.3874750000, 15.3944000000], [54.3266562500, 15.4507250000], [54.2658375000, 15.5070500000], [54.2050187500, 15.5633750000], [54.1442000000, 15.6197000000], [54.0833812500, 15.6760250000], [54.0225625000, 15.7323500000], [53.9617437500, 15.7886750000], [53.9009250000, 15.8450000000], [53.8401062500, 15.9013250000], [53.7792875000, 15.9576500000], [53.7184687500, 16.0139750000], [53.6576500000, 16.0703000000], [53.5968312500, 16.1266250000], [53.5360125000, 16.1829500000], [53.4751937500, 16.2392750000], [53.4143750000, 16.2956000000], [53.3535562500, 16.3519250000], [53.2927375000, 16.4082500000], [53.2319187500, 16.4645750000], [53.1711000000, 16.5209000000], [53.1279000000, 16.5576000000], [53.0635187500, 16.6114375000], [52.9991375000, 16.6652750000], [52.9347562500, 16.7191125000], [52.8703750000, 16.7729500000], [52.8059937500, 16.8267875000], [52.7416125000, 16.8806250000], [52.6772312500, 16.9344625000], [52.6128500000, 16.9883000000], [52.5484687500, 17.0421375000], [52.4840875000, 17.0959750000], [52.4197062500, 17.1498125000], [52.3553250000, 17.2036500000], [52.2909437500, 17.2574875000], [52.2265625000, 17.3113250000], [52.1621812500, 17.3651625000], [52.0978000000, 17.4190000000], [52.0650000000, 17.4459000000], [52.0208250000, 17.4790500000], [51.9766500000, 17.5122000000], [51.9324750000, 17.5453500000], [51.8883000000, 17.5785000000], [51.8385906250, 17.6149562500], [51.7888812500, 17.6514125000], [51.7391718750, 17.6878687500], [51.6894625000, 17.7243250000], [51.6397531250, 17.7607812500], [51.5900437500, 17.7972375000], [51.5403343750, 17.8336937500], [51.4906250000, 17.8701500000], [51.4409156250, 17.9066062500], [51.3912062500, 17.9430625000], [51.3414968750, 17.9795187500], [51.2917875000, 18.0159750000], [51.2420781250, 18.0524312500], [51.1923687500, 18.0888875000], [51.1426593750, 18.1253437500], [51.0929500000, 18.1618000000], [51.0432406250, 18.1982562500], [50.9935312500, 18.2347125000], [50.9438218750, 18.2711687500], [50.8941125000, 18.3076250000], [50.8444031250, 18.3440812500], [50.7946937500, 18.3805375000], [50.7449843750, 18.4169937500], [50.6952750000, 18.4534500000], [50.6455656250, 18.4899062500], [50.5958562500, 18.5263625000], [50.5461468750, 18.5628187500], [50.4964375000, 18.5992750000], [50.4467281250, 18.6357312500], [50.3970187500, 18.6721875000], [50.3473093750, 18.7086437500], [50.2976000000, 18.7451000000], [50.2478906250, 18.7815562500], [50.1981812500, 18.8180125000], [50.1484718750, 18.8544687500], [50.0987625000, 18.8909250000], [50.0490531250, 18.9273812500], [49.9993437500, 18.9638375000], [49.9496343750, 19.0002937500], [49.8999250000, 19.0367500000], [49.8502156250, 19.0732062500], [49.8005062500, 19.1096625000], [49.7507968750, 19.1461187500], [49.7010875000, 19.1825750000], [49.6513781250, 19.2190312500], [49.6016687500, 19.2554875000], [49.5519593750, 19.2919437500], [49.5022500000, 19.3284000000], [49.4525406250, 19.3648562500], [49.4028312500, 19.4013125000], [49.3531218750, 19.4377687500], [49.3034125000, 19.4742250000], [49.2537031250, 19.5106812500], [49.2039937500, 19.5471375000], [49.1542843750, 19.5835937500], [49.1045750000, 19.6200500000], [49.0548656250, 19.6565062500], [49.0051562500, 19.6929625000], [48.9554468750, 19.7294187500], [48.9057375000, 19.7658750000], [48.8560281250, 19.8023312500], [48.8063187500, 19.8387875000], [48.7566093750, 19.8752437500], [48.7069000000, 19.9117000000], [48.6479000000, 19.9520000000], [48.5891031250, 19.9893000000], [48.5303062500, 20.0266000000], [48.4715093750, 20.0639000000], [48.4127125000, 20.1012000000], [48.3539156250, 20.1385000000], [48.2951187500, 20.1758000000], [48.2363218750, 20.2131000000], [48.1775250000, 20.2504000000], [48.1187281250, 20.2877000000], [48.0599312500, 20.3250000000], [48.0011343750, 20.3623000000], [47.9423375000, 20.3996000000], [47.8835406250, 20.4369000000], [47.8247437500, 20.4742000000], [47.7659468750, 20.5115000000], [47.7071500000, 20.5488000000], [47.6483531250, 20.5861000000], [47.5895562500, 20.6234000000], [47.5307593750, 20.6607000000], [47.4719625000, 20.6980000000], [47.4131656250, 20.7353000000], [47.3543687500, 20.7726000000], [47.2955718750, 20.8099000000], [47.2367750000, 20.8472000000], [47.1779781250, 20.8845000000], [47.1191812500, 20.9218000000], [47.0603843750, 20.9591000000], [47.0015875000, 20.9964000000], [46.9427906250, 21.0337000000], [46.8839937500, 21.0710000000], [46.8251968750, 21.1083000000], [46.7664000000, 21.1456000000], [46.7267000000, 21.1692000000], [46.6726156250, 21.2003250000], [46.6185312500, 21.2314500000], [46.5644468750, 21.2625750000], [46.5103625000, 21.2937000000], [46.4562781250, 21.3248250000], [46.4021937500, 21.3559500000], [46.3481093750, 21.3870750000], [46.2940250000, 21.4182000000], [46.2399406250, 21.4493250000], [46.1858562500, 21.4804500000], [46.1317718750, 21.5115750000], [46.0776875000, 21.5427000000], [46.0236031250, 21.5738250000], [45.9695187500, 21.6049500000], [45.9154343750, 21.6360750000], [45.8613500000, 21.6672000000], [45.8072656250, 21.6983250000], [45.7531812500, 21.7294500000], [45.6990968750, 21.7605750000], [45.6450125000, 21.7917000000], [45.5909281250, 21.8228250000], [45.5368437500, 21.8539500000], [45.4827593750, 21.8850750000], [45.4286750000, 21.9162000000], [45.3745906250, 21.9473250000], [45.3205062500, 21.9784500000], [45.2664218750, 22.0095750000], [45.2123375000, 22.0407000000], [45.1582531250, 22.0718250000], [45.1041687500, 22.1029500000], [45.0500843750, 22.1340750000], [44.9960000000, 22.1652000000], [44.9514500000, 22.1904500000], [44.9069000000, 22.2157000000], [44.8551187500, 22.2428937500], [44.8033375000, 22.2700875000], [44.7515562500, 22.2972812500], [44.6997750000, 22.3244750000], [44.6479937500, 22.3516687500], [44.5962125000, 22.3788625000], [44.5444312500, 22.4060562500], [44.4926500000, 22.4332500000], [44.4408687500, 22.4604437500], [44.3890875000, 22.4876375000], [44.3373062500, 22.5148312500], [44.2855250000, 22.5420250000], [44.2337437500, 22.5692187500], [44.1819625000, 22.5964125000], [44.1301812500, 22.6236062500], [44.0784000000, 22.6508000000], [44.0266187500, 22.6779937500]]);
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
import math
import time

from stl import mesh, Dimension

from tkinter import Tk     # from tkinter import Tk for Python 3.x
from tkinter.filedialog import askopenfilename
from mpl_toolkits.mplot3d import art3d
from matplotlib import pyplot as plt
import solid
import os
import ezdxf
import shapely.geometry as sg
import subprocess
from GUI import getSCADPath



def outputSTL(From, To, PATH=getSCADPath()):
    subprocess.Popen(PATH + " -o " + To + " " + From)
    while not os.path.exists(To):
        time.sleep(1)


def get_size(i):
    x_list = [int(a) for a in str(i)]
    return len(x_list)



class Model:
    def __init__(self, model, fileName, location, layer, thickness):
        self.location = location
        self.code = None
        self.fileName = fileName
        self.stl = fileName + ".stl"
        self.layer = layer
        self.thickness = thickness
        self.maxz = (layer+1)*thickness
        self.dxf = fileName + ".dxf"
        self.scad = fileName + ".scad"
        self.model = model
        self.center = None
        self.width = 10
        self.mesh = None
        self.useable_area = None


    def get_code(self):
        max_dim = 0.05
        max_array = 6

        num = int(self.fileName)
        nums = [int(a) for a in str(num)]
        nums.reverse()
        indices = nums
        length = len(nums)

        print(indices)
        t = 0
        i = 0
        cubes = []
        x = 0
        y = 0
        width = 0.01
        while x <= max_dim:
            while y <= max_dim:
                print(indices)
                if nums == []:
                    break
                if indices[0] != 0:
                    cubes.append(solid.translate([x, y, 0])(solid.cube(size=t / 1000 + 0.001)))
                    y += max_dim / (max_array - 1)
                    nums[0] = nums[0] - 1
                else:
                    indices.pop(0)
                    t += 1
                i += 1
            x += max_dim / (max_array - 1)
            y = 0

        outside = solid.translate([-width / 2, -width / 2])(solid.cube(max_dim + (length - 1) / 1000 + 0.001 + width))
        self.code = solid.difference()(outside, cubes)
        self.code = solid.projection(cut=True)(self.code)
        solid.scad_render_to_file(self.code, self.location + "/code.scad")
        outputSTL(From=self.location+"/code.scad", To=self.location+"code.dxf", PATH=getSCADPath())
        # os.system("toSTL.sh renders/code.scad renders/code.dxf")
        return self.location+"/code.dxf"

    def download(self, type):
        if type =="stl":
            print("generating:" + self.location+"/"+ self.fileName+".stl")
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".stl")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".stl")
        elif type == "dxf":
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".dxf")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".dxf")

    def render(self):
        solid.scad_render_to_file(self.model, self.location+"/"+ self.fileName+'.scad')
        while not os.path.exists(self.location+"/"+self.fileName+".scad"):
            time.sleep(1)

    def get_points(self):
        doc = ezdxf.readfile(filename=self.location+"/"+ self.fileName+".dxf")
        msp = doc.modelspace()
        i=0
        lists = []
        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return [start, end]

        for e in msp.query("LINE"):
            line = helper(e)
            if not lists:
                lists.append([line])
            else:
                if lists[i][len(lists)-1][1] != line[0]:
                    lists.append([line])
                    i+=1
                else:
                    lists[i].append(line)

    def get_points2(self, FILE):
        doc = ezdxf.readfile(filename=FILE)
        msp = doc.modelspace()
        i = 0
        lists = []

        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return (start, end)

        for e in msp.query("LINE"):
            line = helper(e)
            if lists==[]:
                lists.append([line])
            else:
                if lists[i][len(lists[i]) - 1][1] != line[0]:
                    lists.append([line])
                    i += 1
                else:
                    lists[i].append(line)
        return lists

    def add_code(self):
        dxf = solid.projection(cut=False)(self.model)
        offset = solid.offset(r=-0.1)(dxf)
        solid.scad_render_to_file(offset, self.location+'/offset.scad')
        os.system("toSTL.sh renders/offset.scad renders/offset.dxf")
        lines = self.get_points2("renders/offset.dxf")
        x = lines[0][0][0][0]
        y = lines[0][0][0][1]
        print(x)
        print(y)
        code = solid.translate([x,y,0])(self.code)
        code = solid.linear_extrude(height=999)(code)
        save = self.model
        self.model = solid.projection()(solid.difference()(self.model, code))
        self.render()
        self.download("dxf")
        self.model = save

    def add_label(self, pos):
        # num = 12
        # minx, maxx, miny, maxy, minz, maxz = self.find_minmax()
        maxz = self.maxz
        # label = solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.5, halign="center"))
        # i=minx
        # print("x-len: " + str(maxx-minx))
        # print(i)
        # inc = (maxx-minx)/num
        # while minx <= i <= maxx:
        #     label = solid.union()(solid.translate([i, 0, maxz - 0.2])(solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.25, halign="center"))), label)
        #     i += inc
        #
        # l = label
        #
        # i =miny
        # while miny<= i <= maxy:
        #     print("y inc")
        #     l = solid.union()(solid.translate([0, i, 0])(label), l)
        #     i += 0.5
        for i in str(self.fileName):
            cur = pos[0]
            label = solid.translate([pos[0][0], pos[0][1], self.maxz-0.2])(solid.linear_extrude(height=(self.thickness)/3)(solid.text(str(i), size=0.5, halign="center", valign="center")))
            self.model = solid.difference()(self.model, label)
            pos.append(pos.pop(0))
            while abs(cur[0]-pos[0][0])<0.5 and abs(cur[1]-pos[0][1])<0.5:
                pos.append(pos.pop(0))



    def Center(self):

        volume, cog, inertia = self.mesh.get_mass_properties()
        print("Volume                                  = {0}".format(volume))
        print("Position of the center of gravity (COG) = {0}".format(cog))
        m_centered = solid.translate([-cog[0], -cog[1], 0])(
            self.model
        )
        return m_centered

    def find_minmax(self):
        minx = maxx = miny = maxy = minz = maxz = None
        for p in self.mesh.points:
            # p contains (x, y, z)
            if minx is None:
                minx = p[Dimension.X]
                maxx = p[Dimension.X]
                miny = p[Dimension.Y]
                maxy = p[Dimension.Y]
                minz = p[Dimension.Z]
                maxz = p[Dimension.Z]
            else:
                maxx = max(p[Dimension.X], maxx)
                minx = min(p[Dimension.X], minx)
                maxy = max(p[Dimension.Y], maxy)
                miny = min(p[Dimension.Y], miny)
                maxz = max(p[Dimension.Z], maxz)
                minz = min(p[Dimension.Z], minz)
        lenx = maxx - minx
        leny = maxy - miny
        lenz = maxz - minz
        return minx, maxx, miny, maxy, minz, maxz

    # def generate_Mesh(self):
    #     self.mesh = mesh.Mesh.from_file(self.location + "/" + str(int(self.fileName)//8)+ "b.stl")

    def get_top(self):
        top = solid.projection(cut=True)(solid.translate([0,0,-1*self.thickness*(self.layer+1)])(self.model))
        useable_area = solid.offset(r=-0.45)(top)
        self.useable_area = useable_area
        solid.scad_render_to_file(self.useable_area, self.location+'/' + 'toptemp.scad')
        outputSTL(From=self.location+'/' + 'toptemp.scad', To=self.location+"/top"+ self.dxf)

        # os.system("toSTL.sh out/toptemp.scad renders/" + self.fileName + ".dxf")
        dxf = DXF(self.location+"/top"+ self.dxf)
        min_p=dxf.points[0][0]
        points_ordered = dxf.points
        i=0
        while i <= len(dxf.points)+1:
            while math.sqrt((dxf.points[0][0]-dxf.points[1][0])**2+(dxf.points[0][1]-dxf.points[1][1])**2) > 0.1:
                dxf.points.insert(1, [(dxf.points[0][0]+dxf.points[1][0])/2, (dxf.points[0][1]+dxf.points[1][1])/2])
                i = i-1
            dxf.points.append(dxf.points.pop(0))
            i+=1
        for i in range(len(dxf.points)):
            dxf.points.append(dxf.points.pop(0))
            if dxf.points[0][0] < min_p:
                min_p = dxf.points[0][0]
                points_ordered = dxf.points.copy()
        dxf.points = points_ordered.copy()

        print(dxf.points)
        self.add_label(dxf.points)

class DXF:
    def __init__(self, file):
        self.file = file
        self.Lines = []
        self.points = []
        doc = ezdxf.readfile(self.file)
        msp = doc.modelspace()
        for e in msp:
            if e.dxftype() == "LINE":
                self.Lines.append(e)
                self.points.append([e.dxf.start[0], e.dxf.start[1]])
        # self.points.append([self.Lines[-1].dxf.end[0], self.Lines[-1].dxf.end[1]])
        self.area = None
        self.center = None
        self.polygon = sg.Polygon(self.points)

    def get_area(self):
        self.area = self.polygon.area
        return self.area

    def get_center(self):
        x_sum = 0
        y_sum =0
        for i in self.points:
            x_sum += i[0]
            y_sum += i[1]
        x_c = x_sum/len(self.points)
        y_c = y_sum/len(self.points)
        return (x_c, y_c)

    def split(self, maxdim):
        splits = []
        length = 0
        pieces = [[]]
        prev = self.points[0]
        for j in self.points:
            length = length + math.sqrt((prev[0]-j[0])**2+(prev[1]-j[1])**2)
            if length >= maxdim:
                pieces[-1].append(j)
                pieces.append([])
                length = 0
            pieces[-1].append(j)
            prev = j
        for j in pieces:
            j.insert(0, [0,0])
            piece = solid.linear_extrude(height=10)(solid.polygon(j))
            splits.append(piece)
        return splits
    def refine_points(self):
        i=0
        while i <= len(self.points)+1:
            while math.sqrt((self.points[0][0]-self.points[1][0])**2+(self.points[0][1]-self.points[1][1])**2) > 0.1:
                self.points.insert(1, [(self.points[0][0]+self.points[1][0])/2, (self.points[0][1]+self.points[1][1])/2])
                i = i-1
            self.points.append(self.points.pop(0))
            i+=1


if __name__== "__main__":
    test = DXF("C:/Users/Daniel/Documents/repos/Shell_Maker/output/0top_slice.dxf")
    test.refine_points()
    k = test.split(48)
    for i in range(len(k)):
        solid.scad_render_to_file(k[i], str(i) + ".scad")


 
 
************************************************/
