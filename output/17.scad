// Generated by SolidPython 1.1.3 on 2024-05-26 01:58:55


intersection() {
	difference() {
		intersection() {
			translate(v = [0, 0, 0]) {
				import(file = "CE3E3V2_Bottom_shell.stl", origin = [0, 0]);
			}
			translate(v = [-90.04029846191406, -32.690147399902344, 2]) {
				cube(size = [180.0806, 65.380295, 2]);
			}
		}
		linear_extrude(height = 999) {
			offset(r = -1) {
				import(file = "C:/Users/Daniel/Documents/repos/Shell_Maker/output/1top_slice.dxf", origin = [0, 0]);
			}
		}
	}
	translate(v = [0, 0, 2]) {
		linear_extrude(height = 10) {
			polygon(points = [[0, 0], [-18.9100156250, -30.8829687500], [-18.8550671875, -30.8852156250], [-18.8001187500, -30.8874625000], [-18.7451703125, -30.8897093750], [-18.6902218750, -30.8919562500], [-18.6352734375, -30.8942031250], [-18.5803250000, -30.8964500000], [-18.5253765625, -30.8986968750], [-18.4704281250, -30.9009437500], [-18.4154796875, -30.9031906250], [-18.3605312500, -30.9054375000], [-18.3055828125, -30.9076843750], [-18.2506343750, -30.9099312500], [-18.1956859375, -30.9121781250], [-18.1407375000, -30.9144250000], [-18.0857890625, -30.9166718750], [-18.0308406250, -30.9189187500], [-17.9758921875, -30.9211656250], [-17.9209437500, -30.9234125000], [-17.8659953125, -30.9256593750], [-17.8110468750, -30.9279062500], [-17.7560984375, -30.9301531250], [-17.7011500000, -30.9324000000], [-17.6462015625, -30.9346468750], [-17.5912531250, -30.9368937500], [-17.5363046875, -30.9391406250], [-17.4813562500, -30.9413875000], [-17.4264078125, -30.9436343750], [-17.3714593750, -30.9458812500], [-17.3165109375, -30.9481281250], [-17.2615625000, -30.9503750000], [-17.2066140625, -30.9526218750], [-17.1516656250, -30.9548687500], [-17.0967171875, -30.9571156250], [-17.0417687500, -30.9593625000], [-16.9868203125, -30.9616093750], [-16.9318718750, -30.9638562500], [-16.8769234375, -30.9661031250], [-16.8219750000, -30.9683500000], [-16.7670265625, -30.9705968750], [-16.7120781250, -30.9728437500], [-16.6571296875, -30.9750906250], [-16.6021812500, -30.9773375000], [-16.5472328125, -30.9795843750], [-16.4922843750, -30.9818312500], [-16.4373359375, -30.9840781250], [-16.3823875000, -30.9863250000], [-16.3274390625, -30.9885718750], [-16.2724906250, -30.9908187500], [-16.2175421875, -30.9930656250], [-16.1625937500, -30.9953125000], [-16.1076453125, -30.9975593750], [-16.0526968750, -30.9998062500], [-15.9977484375, -31.0020531250], [-15.9428000000, -31.0043000000], [-15.8701220703, -31.0056972656], [-15.7974441406, -31.0070945313], [-15.7247662109, -31.0084917969], [-15.6520882812, -31.0098890625], [-15.5794103516, -31.0112863281], [-15.5067324219, -31.0126835938], [-15.4340544922, -31.0140808594], [-15.3613765625, -31.0154781250], [-15.2886986328, -31.0168753906], [-15.2160207031, -31.0182726563], [-15.1433427734, -31.0196699219], [-15.0706648437, -31.0210671875], [-14.9979869141, -31.0224644531], [-14.9253089844, -31.0238617188], [-14.8526310547, -31.0252589844], [-14.7799531250, -31.0266562500], [-14.7072751953, -31.0280535156], [-14.6345972656, -31.0294507813], [-14.5619193359, -31.0308480469], [-14.4892414062, -31.0322453125], [-14.4165634766, -31.0336425781], [-14.3438855469, -31.0350398438], [-14.2712076172, -31.0364371094], [-14.1985296875, -31.0378343750], [-14.1258517578, -31.0392316406], [-14.0531738281, -31.0406289063], [-13.9804958984, -31.0420261719], [-13.9078179687, -31.0434234375], [-13.8351400391, -31.0448207031], [-13.7624621094, -31.0462179687], [-13.6897841797, -31.0476152344], [-13.6171062500, -31.0490125000], [-13.5444283203, -31.0504097656], [-13.4717503906, -31.0518070313], [-13.3990724609, -31.0532042969], [-13.3263945312, -31.0546015625], [-13.2537166016, -31.0559988281], [-13.1810386719, -31.0573960937], [-13.1083607422, -31.0587933594], [-13.0356828125, -31.0601906250], [-12.9630048828, -31.0615878906], [-12.8903269531, -31.0629851562], [-12.8176490234, -31.0643824219], [-12.7449710937, -31.0657796875], [-12.6722931641, -31.0671769531], [-12.5996152344, -31.0685742187], [-12.5269373047, -31.0699714844], [-12.4542593750, -31.0713687500], [-12.3815814453, -31.0727660156], [-12.3089035156, -31.0741632812], [-12.2362255859, -31.0755605469], [-12.1635476562, -31.0769578125], [-12.0908697266, -31.0783550781], [-12.0181917969, -31.0797523437], [-11.9455138672, -31.0811496094], [-11.8728359375, -31.0825468750], [-11.8001580078, -31.0839441406], [-11.7274800781, -31.0853414062], [-11.6548021484, -31.0867386719], [-11.5821242187, -31.0881359375], [-11.5094462891, -31.0895332031], [-11.4367683594, -31.0909304687], [-11.3640904297, -31.0923277344], [-11.2914125000, -31.0937250000], [-11.2187345703, -31.0951222656], [-11.1460566406, -31.0965195312], [-11.0733787109, -31.0979167969], [-11.0007007812, -31.0993140625], [-10.9280228516, -31.1007113281], [-10.8553449219, -31.1021085937], [-10.7826669922, -31.1035058594], [-10.7099890625, -31.1049031250], [-10.6373111328, -31.1063003906], [-10.5646332031, -31.1076976563], [-10.4919552734, -31.1090949219], [-10.4192773438, -31.1104921875], [-10.3465994141, -31.1118894531], [-10.2739214844, -31.1132867188], [-10.2012435547, -31.1146839844], [-10.1285656250, -31.1160812500], [-10.0558876953, -31.1174785156], [-9.9832097656, -31.1188757813], [-9.9105318359, -31.1202730469], [-9.8378539063, -31.1216703125], [-9.7651759766, -31.1230675781], [-9.6924980469, -31.1244648438], [-9.6198201172, -31.1258621094], [-9.5471421875, -31.1272593750], [-9.4744642578, -31.1286566406], [-9.4017863281, -31.1300539063], [-9.3291083984, -31.1314511719], [-9.2564304688, -31.1328484375], [-9.1837525391, -31.1342457031], [-9.1110746094, -31.1356429688], [-9.0383966797, -31.1370402344], [-8.9657187500, -31.1384375000], [-8.8930408203, -31.1398347656], [-8.8203628906, -31.1412320313], [-8.7476849609, -31.1426292969], [-8.6750070313, -31.1440265625], [-8.6023291016, -31.1454238281], [-8.5296511719, -31.1468210938], [-8.4569732422, -31.1482183594], [-8.3842953125, -31.1496156250], [-8.3116173828, -31.1510128906], [-8.2389394531, -31.1524101563], [-8.1662615234, -31.1538074219], [-8.0935835938, -31.1552046875], [-8.0209056641, -31.1566019531], [-7.9482277344, -31.1579992188], [-7.8755498047, -31.1593964844], [-7.8028718750, -31.1607937500], [-7.7301939453, -31.1621910156], [-7.6575160156, -31.1635882813], [-7.5848380859, -31.1649855469], [-7.5121601562, -31.1663828125], [-7.4394822266, -31.1677800781], [-7.3668042969, -31.1691773438], [-7.2941263672, -31.1705746094], [-7.2214484375, -31.1719718750], [-7.1487705078, -31.1733691406], [-7.0760925781, -31.1747664063], [-7.0034146484, -31.1761636719], [-6.9307367187, -31.1775609375], [-6.8580587891, -31.1789582031], [-6.7853808594, -31.1803554688], [-6.7127029297, -31.1817527344], [-6.6400250000, -31.1831500000], [-6.5673470703, -31.1845472656], [-6.4946691406, -31.1859445313], [-6.4219912109, -31.1873417969], [-6.3493132812, -31.1887390625], [-6.2766353516, -31.1901363281], [-6.2039574219, -31.1915335937], [-6.1312794922, -31.1929308594], [-6.0586015625, -31.1943281250], [-5.9859236328, -31.1957253906], [-5.9132457031, -31.1971226562], [-5.8405677734, -31.1985199219], [-5.7678898437, -31.1999171875], [-5.6952119141, -31.2013144531], [-5.6225339844, -31.2027117187], [-5.5498560547, -31.2041089844], [-5.4771781250, -31.2055062500], [-5.4045001953, -31.2069035156], [-5.3318222656, -31.2083007812], [-5.2591443359, -31.2096980469], [-5.1864664063, -31.2110953125], [-5.1137884766, -31.2124925781], [-5.0411105469, -31.2138898437], [-4.9684326172, -31.2152871094], [-4.8957546875, -31.2166843750], [-4.8230767578, -31.2180816406], [-4.7503988281, -31.2194789062], [-4.6777208984, -31.2208761719], [-4.6050429688, -31.2222734375], [-4.5323650391, -31.2236707031], [-4.4596871094, -31.2250679688], [-4.3870091797, -31.2264652344], [-4.3143312500, -31.2278625000], [-4.2416533203, -31.2292597656], [-4.1689753906, -31.2306570313], [-4.0962974609, -31.2320542969], [-4.0236195312, -31.2334515625], [-3.9509416016, -31.2348488281], [-3.8782636719, -31.2362460938], [-3.8055857422, -31.2376433594], [-3.7329078125, -31.2390406250], [-3.6602298828, -31.2404378906], [-3.5875519531, -31.2418351563], [-3.5148740234, -31.2432324219], [-3.4421960937, -31.2446296875], [-3.3695181641, -31.2460269531], [-3.2968402344, -31.2474242188], [-3.2241623047, -31.2488214844], [-3.1514843750, -31.2502187500], [-3.0788064453, -31.2516160156], [-3.0061285156, -31.2530132813], [-2.9334505859, -31.2544105469], [-2.8607726562, -31.2558078125], [-2.7880947266, -31.2572050781], [-2.7154167969, -31.2586023438], [-2.6427388672, -31.2599996094], [-2.5700609375, -31.2613968750], [-2.4973830078, -31.2627941406], [-2.4247050781, -31.2641914063], [-2.3520271484, -31.2655886719], [-2.2793492188, -31.2669859375], [-2.2066712891, -31.2683832031], [-2.1339933594, -31.2697804688], [-2.0613154297, -31.2711777344], [-1.9886375000, -31.2725750000], [-1.9159595703, -31.2739722656], [-1.8432816406, -31.2753695313], [-1.7706037109, -31.2767667969], [-1.6979257812, -31.2781640625], [-1.6252478516, -31.2795613281], [-1.5525699219, -31.2809585938], [-1.4798919922, -31.2823558594], [-1.4072140625, -31.2837531250], [-1.3345361328, -31.2851503906], [-1.2618582031, -31.2865476563], [-1.1891802734, -31.2879449219], [-1.1165023437, -31.2893421875], [-1.0438244141, -31.2907394531], [-0.9711464844, -31.2921367188], [-0.8984685547, -31.2935339844], [-0.8257906250, -31.2949312500], [-0.7531126953, -31.2963285156], [-0.6804347656, -31.2977257813], [-0.6077568359, -31.2991230469], [-0.5350789062, -31.3005203125], [-0.4624009766, -31.3019175781], [-0.3897230469, -31.3033148438], [-0.3170451172, -31.3047121094], [-0.2443671875, -31.3061093750], [-0.1716892578, -31.3075066406], [-0.0990113281, -31.3089039063], [-0.0263333984, -31.3103011719], [0.0463445313, -31.3116984375], [0.1190224609, -31.3130957031], [0.1917003906, -31.3144929688], [0.2643783203, -31.3158902344], [0.3370562500, -31.3172875000], [0.4097341797, -31.3186847656], [0.4824121094, -31.3200820313], [0.5550900391, -31.3214792969], [0.6277679687, -31.3228765625], [0.7004458984, -31.3242738281], [0.7731238281, -31.3256710937], [0.8458017578, -31.3270683594], [0.9184796875, -31.3284656250], [0.9911576172, -31.3298628906], [1.0638355469, -31.3312601562], [1.1365134766, -31.3326574219], [1.2091914062, -31.3340546875], [1.2818693359, -31.3354519531], [1.3545472656, -31.3368492188], [1.4272251953, -31.3382464844], [1.4999031250, -31.3396437500], [1.5725810547, -31.3410410156], [1.6452589844, -31.3424382813], [1.7179369141, -31.3438355469], [1.7906148438, -31.3452328125], [1.8632927734, -31.3466300781], [1.9359707031, -31.3480273438], [2.0086486328, -31.3494246094], [2.0813265625, -31.3508218750], [2.1540044922, -31.3522191406], [2.2266824219, -31.3536164063], [2.2993603516, -31.3550136719], [2.3720382813, -31.3564109375], [2.4447162109, -31.3578082031], [2.5173941406, -31.3592054688], [2.5900720703, -31.3606027344], [2.6627500000, -31.3620000000], [2.7354279297, -31.3633972656], [2.8081058594, -31.3647945313], [2.8807837891, -31.3661917969], [2.9534617187, -31.3675890625], [3.0261396484, -31.3689863281], [3.0988175781, -31.3703835938], [3.1714955078, -31.3717808594], [3.2441734375, -31.3731781250], [3.3168513672, -31.3745753906], [3.3895292969, -31.3759726563], [3.4622072266, -31.3773699219], [3.5348851562, -31.3787671875], [3.6075630859, -31.3801644531], [3.6802410156, -31.3815617188], [3.7529189453, -31.3829589844], [3.8255968750, -31.3843562500], [3.8982748047, -31.3857535156], [3.9709527344, -31.3871507813], [4.0436306641, -31.3885480469], [4.1163085938, -31.3899453125], [4.1889865234, -31.3913425781], [4.2616644531, -31.3927398438], [4.3343423828, -31.3941371094], [4.4070203125, -31.3955343750], [4.4796982422, -31.3969316406], [4.5523761719, -31.3983289063], [4.6250541016, -31.3997261719], [4.6977320313, -31.4011234375], [4.7704099609, -31.4025207031], [4.8430878906, -31.4039179688], [4.9157658203, -31.4053152344], [4.9884437500, -31.4067125000], [5.0611216797, -31.4081097656], [5.1337996094, -31.4095070313], [5.2064775391, -31.4109042969], [5.2791554687, -31.4123015625], [5.3518333984, -31.4136988281], [5.4245113281, -31.4150960937], [5.4971892578, -31.4164933594], [5.5698671875, -31.4178906250], [5.6425451172, -31.4192878906], [5.7152230469, -31.4206851562], [5.7879009766, -31.4220824219], [5.8605789062, -31.4234796875], [5.9332568359, -31.4248769531], [6.0059347656, -31.4262742187], [6.0786126953, -31.4276714844], [6.1512906250, -31.4290687500], [6.2239685547, -31.4304660156], [6.2966464844, -31.4318632812], [6.3693244141, -31.4332605469], [6.4420023437, -31.4346578125], [6.5146802734, -31.4360550781], [6.5873582031, -31.4374523437], [6.6600361328, -31.4388496094], [6.7327140625, -31.4402468750], [6.8053919922, -31.4416441406], [6.8780699219, -31.4430414062], [6.9507478516, -31.4444386719], [7.0234257812, -31.4458359375], [7.0961037109, -31.4472332031], [7.1687816406, -31.4486304688], [7.2414595703, -31.4500277344], [7.3141375000, -31.4514250000], [7.3868154297, -31.4528222656], [7.4594933594, -31.4542195313], [7.5321712891, -31.4556167969], [7.6048492187, -31.4570140625], [7.6775271484, -31.4584113281], [7.7502050781, -31.4598085938], [7.8228830078, -31.4612058594], [7.8955609375, -31.4626031250], [7.9682388672, -31.4640003906], [8.0409167969, -31.4653976563], [8.1135947266, -31.4667949219], [8.1862726563, -31.4681921875], [8.2589505859, -31.4695894531], [8.3316285156, -31.4709867188], [8.4043064453, -31.4723839844], [8.4769843750, -31.4737812500], [8.5496623047, -31.4751785156], [8.6223402344, -31.4765757813], [8.6950181641, -31.4779730469], [8.7676960938, -31.4793703125], [8.8403740234, -31.4807675781], [8.9130519531, -31.4821648438], [8.9857298828, -31.4835621094], [9.0584078125, -31.4849593750], [9.1310857422, -31.4863566406], [9.2037636719, -31.4877539063], [9.2764416016, -31.4891511719], [9.3491195313, -31.4905484375], [9.4217974609, -31.4919457031], [9.4944753906, -31.4933429687], [9.5671533203, -31.4947402344], [9.6398312500, -31.4961375000], [9.7125091797, -31.4975347656], [9.7851871094, -31.4989320312], [9.8578650391, -31.5003292969], [9.9305429688, -31.5017265625], [10.0032208984, -31.5031238281], [10.0758988281, -31.5045210937], [10.1485767578, -31.5059183594], [10.2212546875, -31.5073156250], [10.2939326172, -31.5087128906], [10.3666105469, -31.5101101562], [10.4392884766, -31.5115074219], [10.5119664063, -31.5129046875], [10.5846443359, -31.5143019531], [10.6573222656, -31.5156992187], [10.7300001953, -31.5170964844], [10.8026781250, -31.5184937500], [10.8753560547, -31.5198910156], [10.9480339844, -31.5212882812], [11.0207119141, -31.5226855469], [11.0933898437, -31.5240828125], [11.1660677734, -31.5254800781], [11.2387457031, -31.5268773437], [11.3114236328, -31.5282746094], [11.3841015625, -31.5296718750], [11.4567794922, -31.5310691406], [11.5294574219, -31.5324664062], [11.6021353516, -31.5338636719], [11.6748132812, -31.5352609375], [11.7474912109, -31.5366582031], [11.8201691406, -31.5380554687], [11.8928470703, -31.5394527344], [11.9655250000, -31.5408500000], [12.0382029297, -31.5422472656], [12.1108808594, -31.5436445312], [12.1835587891, -31.5450417969], [12.2562367187, -31.5464390625], [12.3289146484, -31.5478363281], [12.4015925781, -31.5492335937], [12.4742705078, -31.5506308594], [12.5469484375, -31.5520281250], [12.6196263672, -31.5534253906], [12.6923042969, -31.5548226562], [12.7649822266, -31.5562199219], [12.8376601562, -31.5576171875], [12.9103380859, -31.5590144531], [12.9830160156, -31.5604117188], [13.0556939453, -31.5618089844], [13.1283718750, -31.5632062500], [13.2010498047, -31.5646035156], [13.2737277344, -31.5660007813], [13.3464056641, -31.5673980469], [13.4190835937, -31.5687953125], [13.4917615234, -31.5701925781], [13.5644394531, -31.5715898438], [13.6371173828, -31.5729871094], [13.7097953125, -31.5743843750], [13.7824732422, -31.5757816406], [13.8551511719, -31.5771789063], [13.9278291016, -31.5785761719], [14.0005070312, -31.5799734375], [14.0731849609, -31.5813707031], [14.1458628906, -31.5827679687], [14.2185408203, -31.5841652344], [14.2912187500, -31.5855625000], [14.3638966797, -31.5869597656], [14.4365746094, -31.5883570312], [14.5092525391, -31.5897542969], [14.5819304687, -31.5911515625], [14.6546083984, -31.5925488281], [14.7272863281, -31.5939460937], [14.7999642578, -31.5953433594], [14.8726421875, -31.5967406250], [14.9453201172, -31.5981378906], [15.0179980469, -31.5995351562], [15.0906759766, -31.6009324219], [15.1633539062, -31.6023296875], [15.2360318359, -31.6037269531], [15.3087097656, -31.6051242187], [15.3813876953, -31.6065214844], [15.4540656250, -31.6079187500], [15.5267435547, -31.6093160156], [15.5994214844, -31.6107132812], [15.6720994141, -31.6121105469], [15.7447773437, -31.6135078125], [15.8174552734, -31.6149050781], [15.8901332031, -31.6163023437], [15.9628111328, -31.6176996094], [16.0354890625, -31.6190968750], [16.1081669922, -31.6204941406], [16.1808449219, -31.6218914062], [16.2535228516, -31.6232886719], [16.3262007812, -31.6246859375], [16.3988787109, -31.6260832031], [16.4715566406, -31.6274804687], [16.5442345703, -31.6288777344], [16.6169125000, -31.6302750000], [16.6895904297, -31.6316722656], [16.7622683594, -31.6330695312], [16.8349462891, -31.6344667969], [16.9076242187, -31.6358640625], [16.9803021484, -31.6372613281], [17.0529800781, -31.6386585937], [17.1256580078, -31.6400558594], [17.1983359375, -31.6414531250], [17.2710138672, -31.6428503906], [17.3436917969, -31.6442476562], [17.4163697266, -31.6456449219], [17.4890476562, -31.6470421875], [17.5617255859, -31.6484394531], [17.6344035156, -31.6498367187], [17.7070814453, -31.6512339844], [17.7797593750, -31.6526312500], [17.8524373047, -31.6540285156], [17.9251152344, -31.6554257812], [17.9977931641, -31.6568230469], [18.0704710937, -31.6582203125], [18.1431490234, -31.6596175781], [18.2158269531, -31.6610148437], [18.2885048828, -31.6624121094], [18.3611828125, -31.6638093750], [18.4338607422, -31.6652066406], [18.5065386719, -31.6666039062], [18.5792166016, -31.6680011719], [18.6518945312, -31.6693984375], [18.7245724609, -31.6707957031], [18.7972503906, -31.6721929688], [18.8699283203, -31.6735902344], [18.9426062500, -31.6749875000], [19.0152841797, -31.6763847656], [19.0879621094, -31.6777820313], [19.1606400391, -31.6791792969], [19.2333179687, -31.6805765625], [19.3059958984, -31.6819738281], [19.3786738281, -31.6833710938], [19.4513517578, -31.6847683594], [19.5240296875, -31.6861656250], [19.5967076172, -31.6875628906], [19.6693855469, -31.6889601563], [19.7420634766, -31.6903574219], [19.8147414062, -31.6917546875], [19.8874193359, -31.6931519531], [19.9600972656, -31.6945492188], [20.0327751953, -31.6959464844], [20.1054531250, -31.6973437500], [20.1781310547, -31.6987410156], [20.2508089844, -31.7001382813], [20.3234869141, -31.7015355469], [20.3961648437, -31.7029328125], [20.4688427734, -31.7043300781], [20.5415207031, -31.7057273438], [20.6141986328, -31.7071246094], [20.6868765625, -31.7085218750], [20.7595544922, -31.7099191406], [20.8322324219, -31.7113164063], [20.9049103516, -31.7127136719], [20.9775882813, -31.7141109375], [21.0502662109, -31.7155082031], [21.1229441406, -31.7169054687], [21.1956220703, -31.7183027344], [21.2683000000, -31.7197000000], [21.3405296875, -31.7189191406], [21.4127593750, -31.7181382812], [21.4849890625, -31.7173574219], [21.5572187500, -31.7165765625], [21.6294484375, -31.7157957031], [21.7016781250, -31.7150148438], [21.7739078125, -31.7142339844], [21.8461375000, -31.7134531250], [21.9183671875, -31.7126722656], [21.9905968750, -31.7118914063], [22.0628265625, -31.7111105469], [22.1350562500, -31.7103296875], [22.2072859375, -31.7095488281], [22.2795156250, -31.7087679687], [22.3517453125, -31.7079871094], [22.4239750000, -31.7072062500], [22.4962046875, -31.7064253906], [22.5684343750, -31.7056445312], [22.6406640625, -31.7048636719], [22.7128937500, -31.7040828125], [22.7851234375, -31.7033019531], [22.8573531250, -31.7025210938], [22.9295828125, -31.7017402344], [23.0018125000, -31.7009593750], [23.0740421875, -31.7001785156], [23.1462718750, -31.6993976562], [23.2185015625, -31.6986167969], [23.2907312500, -31.6978359375], [23.3629609375, -31.6970550781], [23.4351906250, -31.6962742188], [23.5074203125, -31.6954933594], [23.5796500000, -31.6947125000], [23.6518796875, -31.6939316406], [23.7241093750, -31.6931507813], [23.7963390625, -31.6923699219], [23.8685687500, -31.6915890625], [23.9407984375, -31.6908082031], [24.0130281250, -31.6900273437], [24.0852578125, -31.6892464844], [24.1574875000, -31.6884656250], [24.2297171875, -31.6876847656], [24.3019468750, -31.6869039062], [24.3741765625, -31.6861230469], [24.4464062500, -31.6853421875], [24.5186359375, -31.6845613281], [24.5908656250, -31.6837804688], [24.6630953125, -31.6829996094], [24.7353250000, -31.6822187500], [24.8075546875, -31.6814378906], [24.8797843750, -31.6806570312], [24.9520140625, -31.6798761719], [25.0242437500, -31.6790953125], [25.0964734375, -31.6783144531], [25.1687031250, -31.6775335938], [25.2409328125, -31.6767527344], [25.3131625000, -31.6759718750], [25.3853921875, -31.6751910156], [25.4576218750, -31.6744101563], [25.5298515625, -31.6736292969], [25.6020812500, -31.6728484375], [25.6743109375, -31.6720675781], [25.7465406250, -31.6712867188], [25.8187703125, -31.6705058594], [25.8910000000, -31.6697250000], [25.9632296875, -31.6689441406], [26.0354593750, -31.6681632812], [26.1076890625, -31.6673824219], [26.1799187500, -31.6666015625], [26.2521484375, -31.6658207031], [26.3243781250, -31.6650398437], [26.3966078125, -31.6642589844], [26.4688375000, -31.6634781250], [26.5410671875, -31.6626972656], [26.6132968750, -31.6619164062], [26.6855265625, -31.6611355469], [26.7577562500, -31.6603546875], [26.8299859375, -31.6595738281], [26.9022156250, -31.6587929687], [26.9744453125, -31.6580121094], [27.0466750000, -31.6572312500], [27.1189046875, -31.6564503906], [27.1911343750, -31.6556695312], [27.2633640625, -31.6548886719], [27.3355937500, -31.6541078125], [27.4078234375, -31.6533269531], [27.4800531250, -31.6525460938], [27.5522828125, -31.6517652344], [27.6245125000, -31.6509843750], [27.6967421875, -31.6502035156], [27.7689718750, -31.6494226562], [27.8412015625, -31.6486417969], [27.9134312500, -31.6478609375], [27.9856609375, -31.6470800781], [28.0578906250, -31.6462992187], [28.1301203125, -31.6455183594], [28.2023500000, -31.6447375000], [28.2745796875, -31.6439566406], [28.3468093750, -31.6431757812], [28.4190390625, -31.6423949219], [28.4912687500, -31.6416140625], [28.5634984375, -31.6408332031], [28.6357281250, -31.6400523437], [28.7079578125, -31.6392714844], [28.7801875000, -31.6384906250], [28.8524171875, -31.6377097656], [28.9246468750, -31.6369289062], [28.9968765625, -31.6361480469], [29.0691062500, -31.6353671875], [29.1413359375, -31.6345863281]]);
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
import math
import time

from stl import mesh, Dimension

from tkinter import Tk     # from tkinter import Tk for Python 3.x
from tkinter.filedialog import askopenfilename
from mpl_toolkits.mplot3d import art3d
from matplotlib import pyplot as plt
import solid
import os
import ezdxf
import shapely.geometry as sg
import subprocess
from GUI import getSCADPath



def outputSTL(From, To, PATH=getSCADPath()):
    subprocess.Popen(PATH + " -o " + To + " " + From)
    while not os.path.exists(To):
        time.sleep(1)

class Model:
    def __init__(self, model, fileName, location, layer, thickness):
        self.location = location
        self.code = None
        self.fileName = fileName
        self.stl = fileName + ".stl"
        self.layer = layer
        self.thickness = thickness
        self.maxz = (layer+1)*thickness
        self.dxf = fileName + ".dxf"
        self.scad = fileName + ".scad"
        self.model = model
        self.center = None
        self.width = 10
        self.mesh = None
        self.useable_area = None


    def get_code(self):
        max_dim = 0.05
        max_array = 6

        num = int(self.fileName)
        nums = [int(a) for a in str(num)]
        nums.reverse()
        indices = nums
        length = len(nums)

        print(indices)
        t = 0
        i = 0
        cubes = []
        x = 0
        y = 0
        width = 0.01
        while x <= max_dim:
            while y <= max_dim:
                print(indices)
                if nums == []:
                    break
                if indices[0] != 0:
                    cubes.append(solid.translate([x, y, 0])(solid.cube(size=t / 1000 + 0.001)))
                    y += max_dim / (max_array - 1)
                    nums[0] = nums[0] - 1
                else:
                    indices.pop(0)
                    t += 1
                i += 1
            x += max_dim / (max_array - 1)
            y = 0

        outside = solid.translate([-width / 2, -width / 2])(solid.cube(max_dim + (length - 1) / 1000 + 0.001 + width))
        self.code = solid.difference()(outside, cubes)
        self.code = solid.projection(cut=True)(self.code)
        solid.scad_render_to_file(self.code, self.location + "/code.scad")
        outputSTL(From=self.location+"/code.scad", To=self.location+"code.dxf", PATH=getSCADPath())
        # os.system("toSTL.sh renders/code.scad renders/code.dxf")
        return self.location+"/code.dxf"

    def download(self, type):
        if type =="stl":
            print("generating:" + self.location+"/"+ self.fileName+".stl")
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".stl")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".stl")
        elif type == "dxf":
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".dxf")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".dxf")

    def render(self):
        solid.scad_render_to_file(self.model, self.location+"/"+ self.fileName+'.scad')
        while not os.path.exists(self.location+"/"+self.fileName+".scad"):
            time.sleep(1)
        # outputSTL(From= self.location+"/"+ self.fileName+'.scad', To=self.location+"/"+ self.fileName+'.stl')

    def get_points(self):
        doc = ezdxf.readfile(filename=self.location+"/"+ self.fileName+".dxf")
        msp = doc.modelspace()
        i=0
        lists = []
        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return [start, end]

        for e in msp.query("LINE"):
            line = helper(e)
            if not lists:
                lists.append([line])
            else:
                if lists[i][len(lists)-1][1] != line[0]:
                    lists.append([line])
                    i+=1
                else:
                    lists[i].append(line)

    def get_points2(self, FILE):
        doc = ezdxf.readfile(filename=FILE)
        msp = doc.modelspace()
        i = 0
        lists = []

        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return (start, end)

        for e in msp.query("LINE"):
            line = helper(e)
            if lists==[]:
                lists.append([line])
            else:
                if lists[i][len(lists[i]) - 1][1] != line[0]:
                    lists.append([line])
                    i += 1
                else:
                    lists[i].append(line)
        return lists

    def add_code(self):
        dxf = solid.projection(cut=False)(self.model)
        offset = solid.offset(r=-0.1)(dxf)
        solid.scad_render_to_file(offset, self.location+'/offset.scad')
        os.system("toSTL.sh renders/offset.scad renders/offset.dxf")
        lines = self.get_points2("renders/offset.dxf")
        x = lines[0][0][0][0]
        y = lines[0][0][0][1]
        print(x)
        print(y)
        code = solid.translate([x,y,0])(self.code)
        code = solid.linear_extrude(height=999)(code)
        save = self.model
        self.model = solid.projection()(solid.difference()(self.model, code))
        self.render()
        self.download("dxf")
        self.model = save

    def add_label(self, pos):
        # num = 12
        # minx, maxx, miny, maxy, minz, maxz = self.find_minmax()
        maxz = self.maxz
        # label = solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.5, halign="center"))
        # i=minx
        # print("x-len: " + str(maxx-minx))
        # print(i)
        # inc = (maxx-minx)/num
        # while minx <= i <= maxx:
        #     label = solid.union()(solid.translate([i, 0, maxz - 0.2])(solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.25, halign="center"))), label)
        #     i += inc
        #
        # l = label
        #
        # i =miny
        # while miny<= i <= maxy:
        #     print("y inc")
        #     l = solid.union()(solid.translate([0, i, 0])(label), l)
        #     i += 0.5
        for i in str(self.fileName):
            cur = pos[0]
            label = solid.translate([pos[0][0], pos[0][1], self.maxz-0.2])(solid.linear_extrude(height=(self.thickness)/3)(solid.text(str(i), size=0.5, halign="center", valign="center")))
            self.model = solid.difference()(self.model, label)
            pos.append(pos.pop(0))
            while abs(cur[0]-pos[0][0])<0.5 and abs(cur[1]-pos[0][1])<0.5:
                pos.append(pos.pop(0))



    def Center(self):

        volume, cog, inertia = self.mesh.get_mass_properties()
        print("Volume                                  = {0}".format(volume))
        print("Position of the center of gravity (COG) = {0}".format(cog))
        m_centered = solid.translate([-cog[0], -cog[1], 0])(
            self.model
        )
        return m_centered

    def find_minmax(self):
        minx = maxx = miny = maxy = minz = maxz = None
        for p in self.mesh.points:
            # p contains (x, y, z)
            if minx is None:
                minx = p[Dimension.X]
                maxx = p[Dimension.X]
                miny = p[Dimension.Y]
                maxy = p[Dimension.Y]
                minz = p[Dimension.Z]
                maxz = p[Dimension.Z]
            else:
                maxx = max(p[Dimension.X], maxx)
                minx = min(p[Dimension.X], minx)
                maxy = max(p[Dimension.Y], maxy)
                miny = min(p[Dimension.Y], miny)
                maxz = max(p[Dimension.Z], maxz)
                minz = min(p[Dimension.Z], minz)
        lenx = maxx - minx
        leny = maxy - miny
        lenz = maxz - minz
        return minx, maxx, miny, maxy, minz, maxz

    # def generate_Mesh(self):
    #     self.mesh = mesh.Mesh.from_file(self.location + "/" + str(int(self.fileName)//8)+ "b.stl")

    def get_top(self):
        top = solid.projection(cut=True)(solid.translate([0,0,-1*self.thickness*(self.layer+1)])(self.model))
        useable_area = solid.offset(r=-0.45)(top)
        self.useable_area = useable_area
        solid.scad_render_to_file(self.useable_area, self.location+'/' + 'toptemp.scad')
        outputSTL(From=self.location+'/' + 'toptemp.scad', To=self.location+"/top"+ self.dxf)

        # os.system("toSTL.sh out/toptemp.scad renders/" + self.fileName + ".dxf")
        dxf = DXF(self.location+"/top"+ self.dxf)
        min_p=dxf.points[0][0]
        points_ordered = dxf.points
        i=0
        while i <= len(dxf.points)+1:
            while math.sqrt((dxf.points[0][0]-dxf.points[1][0])**2+(dxf.points[0][1]-dxf.points[1][1])**2) > 0.1:
                dxf.points.insert(1, [(dxf.points[0][0]+dxf.points[1][0])/2, (dxf.points[0][1]+dxf.points[1][1])/2])
                i = i-1
            dxf.points.append(dxf.points.pop(0))
            i+=1
        for i in range(len(dxf.points)):
            dxf.points.append(dxf.points.pop(0))
            if dxf.points[0][0] < min_p:
                min_p = dxf.points[0][0]
                points_ordered = dxf.points.copy()
        dxf.points = points_ordered.copy()

        print(dxf.points)
        self.add_label(dxf.points)

class DXF:
    def __init__(self, file):
        self.file = file
        self.Lines = []
        self.points = []
        doc = ezdxf.readfile(self.file)
        msp = doc.modelspace()
        for e in msp:
            if e.dxftype() == "LINE":
                self.Lines.append(e)
                self.points.append([e.dxf.start[0], e.dxf.start[1]])
        # self.points.append([self.Lines[-1].dxf.end[0], self.Lines[-1].dxf.end[1]])
        self.area = None
        self.center = None
        self.polygon = sg.Polygon(self.points)

    def get_area(self):
        self.area = self.polygon.area
        return self.area

    def get_center(self):
        x_sum = 0
        y_sum =0
        for i in self.points:
            x_sum += i[0]
            y_sum += i[1]
        x_c = x_sum/len(self.points)
        y_c = y_sum/len(self.points)
        return (x_c, y_c)

    def split(self, maxdim):
        splits = []
        length = 0
        pieces = [[]]
        prev = self.points[-1]
        pieces[-1].append(prev)
        for j in self.points:
            length = length + math.sqrt((prev[0]-j[0])**2+(prev[1]-j[1])**2)
            if length >= maxdim:
                pieces[-1].append(j)
                pieces.append([])
                length = 0
            pieces[-1].append(j)
            prev = j
        for j in pieces:
            j.insert(0, [0,0])
            piece = solid.linear_extrude(height=10)(solid.polygon(j))
            splits.append(piece)
        return splits
    def refine_points(self):
        i=0
        while i <= len(self.points)+1:
            while math.sqrt((self.points[0][0]-self.points[1][0])**2+(self.points[0][1]-self.points[1][1])**2) > 0.1:
                self.points.insert(1, [(self.points[0][0]+self.points[1][0])/2, (self.points[0][1]+self.points[1][1])/2])
                i = i-1
            self.points.append(self.points.pop(0))
            i+=1


if __name__== "__main__":
    test = DXF("C:/Users/Daniel/Documents/repos/Shell_Maker/output/0top_slice.dxf")
    test.refine_points()
    k = test.split(48)
    for i in range(len(k)):
        solid.scad_render_to_file(k[i], str(i) + ".scad")


 
 
************************************************/
