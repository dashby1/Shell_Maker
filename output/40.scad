// Generated by SolidPython 1.1.3 on 2024-05-19 23:41:48


intersection() {
	difference() {
		intersection() {
			translate(v = [0, 0, 0]) {
				import(file = "CE3E3V2_Bottom_shell.stl", origin = [0, 0]);
			}
			translate(v = [-90.04029846191406, -32.690147399902344, 10]) {
				cube(size = [180.0806, 65.380295, 2]);
			}
		}
		linear_extrude(height = 999) {
			offset(r = -1) {
				import(file = "C:/Users/Daniel/Documents/repos/Shell_Maker/output/5top_slice.dxf", origin = [0, 0]);
			}
		}
	}
	translate(v = [0, 0, 10]) {
		linear_extrude(height = 10) {
			polygon(points = [[0, 0], [5.0689581250, -26.8895750000], [5.1589145312, -26.9031687500], [5.2488709375, -26.9167625000], [5.3388273437, -26.9303562500], [5.4287837500, -26.9439500000], [5.5187401562, -26.9575437500], [5.6086965625, -26.9711375000], [5.6986529687, -26.9847312500], [5.7886093750, -26.9983250000], [5.8785657812, -27.0119187500], [5.9685221875, -27.0255125000], [6.0584785937, -27.0391062500], [6.1484350000, -27.0527000000], [6.2383914062, -27.0662937500], [6.3283478125, -27.0798875000], [6.4183042187, -27.0934812500], [6.5082606250, -27.1070750000], [6.5982170312, -27.1206687500], [6.6881734375, -27.1342625000], [6.7781298437, -27.1478562500], [6.8680862500, -27.1614500000], [6.9580426562, -27.1750437500], [7.0479990625, -27.1886375000], [7.1379554687, -27.2022312500], [7.2279118750, -27.2158250000], [7.3178682812, -27.2294187500], [7.4078246875, -27.2430125000], [7.4977810937, -27.2566062500], [7.5877375000, -27.2702000000], [7.6776939062, -27.2837937500], [7.7676503125, -27.2973875000], [7.8576067187, -27.3109812500], [7.9475631250, -27.3245750000], [8.0375195313, -27.3381687500], [8.1274759375, -27.3517625000], [8.2174323437, -27.3653562500], [8.3073887500, -27.3789500000], [8.3973451563, -27.3925437500], [8.4873015625, -27.4061375000], [8.5772579688, -27.4197312500], [8.6672143750, -27.4333250000], [8.7571707813, -27.4469187500], [8.8471271875, -27.4605125000], [8.9370835937, -27.4741062500], [9.0270400000, -27.4877000000], [9.0837981250, -27.4949437500], [9.1405562500, -27.5021875000], [9.1973143750, -27.5094312500], [9.2540725000, -27.5166750000], [9.3108306250, -27.5239187500], [9.3675887500, -27.5311625000], [9.4243468750, -27.5384062500], [9.4811050000, -27.5456500000], [9.5378631250, -27.5528937500], [9.5946212500, -27.5601375000], [9.6513793750, -27.5673812500], [9.7081375000, -27.5746250000], [9.7648956250, -27.5818687500], [9.8216537500, -27.5891125000], [9.8784118750, -27.5963562500], [9.9351700000, -27.6036000000], [10.0092740625, -27.6121531250], [10.0833781250, -27.6207062500], [10.1574821875, -27.6292593750], [10.2315862500, -27.6378125000], [10.3056903125, -27.6463656250], [10.3797943750, -27.6549187500], [10.4538984375, -27.6634718750], [10.5280025000, -27.6720250000], [10.6021065625, -27.6805781250], [10.6762106250, -27.6891312500], [10.7503146875, -27.6976843750], [10.8244187500, -27.7062375000], [10.8985228125, -27.7147906250], [10.9726268750, -27.7233437500], [11.0467309375, -27.7318968750], [11.1208350000, -27.7404500000], [11.1949390625, -27.7490031250], [11.2690431250, -27.7575562500], [11.3431471875, -27.7661093750], [11.4172512500, -27.7746625000], [11.4913553125, -27.7832156250], [11.5654593750, -27.7917687500], [11.6395634375, -27.8003218750], [11.7136675000, -27.8088750000], [11.7877715625, -27.8174281250], [11.8618756250, -27.8259812500], [11.9359796875, -27.8345343750], [12.0100837500, -27.8430875000], [12.0841878125, -27.8516406250], [12.1582918750, -27.8601937500], [12.2323959375, -27.8687468750], [12.3065000000, -27.8773000000], [12.4023500000, -27.8875750000], [12.4982000000, -27.8978500000], [12.5940500000, -27.9081250000], [12.6899000000, -27.9184000000], [12.7529125000, -27.9240812500], [12.8159250000, -27.9297625000], [12.8789375000, -27.9354437500], [12.9419500000, -27.9411250000], [13.0049625000, -27.9468062500], [13.0679750000, -27.9524875000], [13.1309875000, -27.9581687500], [13.1940000000, -27.9638500000], [13.2570125000, -27.9695312500], [13.3200250000, -27.9752125000], [13.3830375000, -27.9808937500], [13.4460500000, -27.9865750000], [13.5090625000, -27.9922562500], [13.5720750000, -27.9979375000], [13.6350875000, -28.0036187500], [13.6981000000, -28.0093000000], [13.7611125000, -28.0149812500], [13.8241250000, -28.0206625000], [13.8871375000, -28.0263437500], [13.9501500000, -28.0320250000], [14.0131625000, -28.0377062500], [14.0761750000, -28.0433875000], [14.1391875000, -28.0490687500], [14.2022000000, -28.0547500000], [14.2652125000, -28.0604312500], [14.3282250000, -28.0661125000], [14.3912375000, -28.0717937500], [14.4542500000, -28.0774750000], [14.5172625000, -28.0831562500], [14.5802750000, -28.0888375000], [14.6432875000, -28.0945187500], [14.7063000000, -28.1002000000], [14.7592250000, -28.1041625000], [14.8121500000, -28.1081250000], [14.8650750000, -28.1120875000], [14.9180000000, -28.1160500000], [14.9709250000, -28.1200125000], [15.0238500000, -28.1239750000], [15.0767750000, -28.1279375000], [15.1297000000, -28.1319000000], [15.2017500000, -28.1366000000], [15.2738000000, -28.1413000000], [15.3458500000, -28.1460000000], [15.4179000000, -28.1507000000], [15.4899500000, -28.1554000000], [15.5620000000, -28.1601000000], [15.6340500000, -28.1648000000], [15.7061000000, -28.1695000000], [15.7781500000, -28.1742000000], [15.8502000000, -28.1789000000], [15.9222500000, -28.1836000000], [15.9943000000, -28.1883000000], [16.0663500000, -28.1930000000], [16.1384000000, -28.1977000000], [16.2104500000, -28.2024000000], [16.2825000000, -28.2071000000], [16.3545500000, -28.2118000000], [16.4266000000, -28.2165000000], [16.4986500000, -28.2212000000], [16.5707000000, -28.2259000000], [16.6427500000, -28.2306000000], [16.7148000000, -28.2353000000], [16.7868500000, -28.2400000000], [16.8589000000, -28.2447000000], [16.9309500000, -28.2494000000], [17.0030000000, -28.2541000000], [17.0750500000, -28.2588000000], [17.1471000000, -28.2635000000], [17.2191500000, -28.2682000000], [17.2912000000, -28.2729000000], [17.3632500000, -28.2776000000], [17.4353000000, -28.2823000000], [17.4866500000, -28.2846500000], [17.5380000000, -28.2870000000], [17.5893500000, -28.2893500000], [17.6407000000, -28.2917000000], [17.6926562500, -28.2928156250], [17.7446125000, -28.2939312500], [17.7965687500, -28.2950468750], [17.8485250000, -28.2961625000], [17.9004812500, -28.2972781250], [17.9524375000, -28.2983937500], [18.0043937500, -28.2995093750], [18.0563500000, -28.3006250000], [18.1083062500, -28.3017406250], [18.1602625000, -28.3028562500], [18.2122187500, -28.3039718750], [18.2641750000, -28.3050875000], [18.3161312500, -28.3062031250], [18.3680875000, -28.3073187500], [18.4200437500, -28.3084343750], [18.4720000000, -28.3095500000], [18.5239562500, -28.3106656250], [18.5759125000, -28.3117812500], [18.6278687500, -28.3128968750], [18.6798250000, -28.3140125000], [18.7317812500, -28.3151281250], [18.7837375000, -28.3162437500], [18.8356937500, -28.3173593750], [18.8876500000, -28.3184750000], [18.9396062500, -28.3195906250], [18.9915625000, -28.3207062500], [19.0435187500, -28.3218218750], [19.0954750000, -28.3229375000], [19.1474312500, -28.3240531250], [19.1993875000, -28.3251687500], [19.2513437500, -28.3262843750], [19.3033000000, -28.3274000000], [19.3701968750, -28.3281125000], [19.4370937500, -28.3288250000], [19.5039906250, -28.3295375000], [19.5708875000, -28.3302500000], [19.6377843750, -28.3309625000], [19.7046812500, -28.3316750000], [19.7715781250, -28.3323875000], [19.8384750000, -28.3331000000], [19.9053718750, -28.3338125000], [19.9722687500, -28.3345250000], [20.0391656250, -28.3352375000], [20.1060625000, -28.3359500000], [20.1729593750, -28.3366625000], [20.2398562500, -28.3373750000], [20.3067531250, -28.3380875000], [20.3736500000, -28.3388000000], [20.4405468750, -28.3395125000], [20.5074437500, -28.3402250000], [20.5743406250, -28.3409375000], [20.6412375000, -28.3416500000], [20.7081343750, -28.3423625000], [20.7750312500, -28.3430750000], [20.8419281250, -28.3437875000], [20.9088250000, -28.3445000000], [20.9757218750, -28.3452125000], [21.0426187500, -28.3459250000], [21.1095156250, -28.3466375000], [21.1764125000, -28.3473500000], [21.2433093750, -28.3480625000], [21.3102062500, -28.3487750000], [21.3771031250, -28.3494875000], [21.4440000000, -28.3502000000], [21.5056000000, -28.3490000000], [21.5672000000, -28.3478000000], [21.6288000000, -28.3466000000], [21.6904000000, -28.3454000000], [21.7602000000, -28.3437000000], [21.8300000000, -28.3420000000], [21.8998000000, -28.3403000000], [21.9696000000, -28.3386000000], [22.0394000000, -28.3369000000], [22.1092000000, -28.3352000000], [22.1790000000, -28.3335000000], [22.2488000000, -28.3318000000], [22.3312000000, -28.3295000000], [22.4092625000, -28.3252000000], [22.4873250000, -28.3209000000], [22.5653875000, -28.3166000000], [22.6434500000, -28.3123000000], [22.7215125000, -28.3080000000], [22.7995750000, -28.3037000000], [22.8776375000, -28.2994000000], [22.9557000000, -28.2951000000], [23.0337625000, -28.2908000000], [23.1118250000, -28.2865000000], [23.1898875000, -28.2822000000], [23.2679500000, -28.2779000000], [23.3460125000, -28.2736000000], [23.4240750000, -28.2693000000], [23.5021375000, -28.2650000000], [23.5802000000, -28.2607000000], [23.6323625000, -28.2575500000], [23.6845250000, -28.2544000000], [23.7366875000, -28.2512500000], [23.7888500000, -28.2481000000], [23.8410125000, -28.2449500000], [23.8931750000, -28.2418000000], [23.9453375000, -28.2386500000], [23.9975000000, -28.2355000000], [24.0656250000, -28.2305593750], [24.1337500000, -28.2256187500], [24.2018750000, -28.2206781250], [24.2700000000, -28.2157375000], [24.3381250000, -28.2107968750], [24.4062500000, -28.2058562500], [24.4743750000, -28.2009156250], [24.5425000000, -28.1959750000], [24.6106250000, -28.1910343750], [24.6787500000, -28.1860937500], [24.7468750000, -28.1811531250], [24.8150000000, -28.1762125000], [24.8831250000, -28.1712718750], [24.9512500000, -28.1663312500], [25.0193750000, -28.1613906250], [25.0875000000, -28.1564500000], [25.1556250000, -28.1515093750], [25.2237500000, -28.1465687500], [25.2918750000, -28.1416281250], [25.3600000000, -28.1366875000], [25.4281250000, -28.1317468750], [25.4962500000, -28.1268062500], [25.5643750000, -28.1218656250], [25.6325000000, -28.1169250000], [25.7006250000, -28.1119843750], [25.7687500000, -28.1070437500], [25.8368750000, -28.1021031250], [25.9050000000, -28.0971625000], [25.9731250000, -28.0922218750], [26.0412500000, -28.0872812500], [26.1093750000, -28.0823406250], [26.1775000000, -28.0774000000], [26.2679000000, -28.0691000000], [26.3583000000, -28.0608000000], [26.4224000000, -28.0540500000], [26.4865000000, -28.0473000000], [26.5661312500, -28.0365750000], [26.6457625000, -28.0258500000], [26.7253937500, -28.0151250000], [26.8050250000, -28.0044000000], [26.8846562500, -27.9936750000], [26.9642875000, -27.9829500000], [27.0439187500, -27.9722250000], [27.1235500000, -27.9615000000], [27.2031812500, -27.9507750000], [27.2828125000, -27.9400500000], [27.3624437500, -27.9293250000], [27.4420750000, -27.9186000000], [27.5217062500, -27.9078750000], [27.6013375000, -27.8971500000], [27.6809687500, -27.8864250000], [27.7606000000, -27.8757000000], [27.8234750000, -27.8678312500], [27.8863500000, -27.8599625000], [27.9492250000, -27.8520937500], [28.0121000000, -27.8442250000], [28.0749750000, -27.8363562500], [28.1378500000, -27.8284875000], [28.2007250000, -27.8206187500], [28.2636000000, -27.8127500000], [28.3264750000, -27.8048812500], [28.3893500000, -27.7970125000], [28.4522250000, -27.7891437500], [28.5151000000, -27.7812750000], [28.5779750000, -27.7734062500], [28.6408500000, -27.7655375000], [28.7037250000, -27.7576687500], [28.7666000000, -27.7498000000], [28.8193000000, -27.7407875000], [28.8720000000, -27.7317750000], [28.9247000000, -27.7227625000], [28.9774000000, -27.7137500000], [29.0301000000, -27.7047375000], [29.0828000000, -27.6957250000], [29.1355000000, -27.6867125000], [29.1882000000, -27.6777000000], [29.2409000000, -27.6686875000], [29.2936000000, -27.6596750000], [29.3463000000, -27.6506625000], [29.3990000000, -27.6416500000], [29.4517000000, -27.6326375000], [29.5044000000, -27.6236250000], [29.5571000000, -27.6146125000], [29.6098000000, -27.6056000000], [29.6696000000, -27.5953250000], [29.7294000000, -27.5850500000], [29.7892000000, -27.5747750000], [29.8490000000, -27.5645000000], [29.9088000000, -27.5542250000], [29.9686000000, -27.5439500000], [30.0284000000, -27.5336750000], [30.0882000000, -27.5234000000], [30.0982000000, -27.5215000000], [30.1657125000, -27.5055281250], [30.2332250000, -27.4895562500], [30.3007375000, -27.4735843750], [30.3682500000, -27.4576125000], [30.4357625000, -27.4416406250], [30.5032750000, -27.4256687500], [30.5707875000, -27.4096968750], [30.6383000000, -27.3937250000], [30.7058125000, -27.3777531250], [30.7733250000, -27.3617812500], [30.8408375000, -27.3458093750], [30.9083500000, -27.3298375000], [30.9758625000, -27.3138656250], [31.0433750000, -27.2978937500], [31.1108875000, -27.2819218750], [31.1784000000, -27.2659500000], [31.2459125000, -27.2499781250], [31.3134250000, -27.2340062500], [31.3809375000, -27.2180343750], [31.4484500000, -27.2020625000], [31.5159625000, -27.1860906250], [31.5834750000, -27.1701187500], [31.6509875000, -27.1541468750], [31.7185000000, -27.1381750000], [31.7860125000, -27.1222031250], [31.8535250000, -27.1062312500], [31.9210375000, -27.0902593750], [31.9885500000, -27.0742875000], [32.0560625000, -27.0583156250], [32.1235750000, -27.0423437500], [32.1910875000, -27.0263718750], [32.2586000000, -27.0104000000], [32.3216437500, -26.9954593750], [32.3846875000, -26.9805187500], [32.4477312500, -26.9655781250], [32.5107750000, -26.9506375000], [32.5738187500, -26.9356968750], [32.6368625000, -26.9207562500], [32.6999062500, -26.9058156250], [32.7629500000, -26.8908750000], [32.8259937500, -26.8759343750], [32.8890375000, -26.8609937500], [32.9520812500, -26.8460531250], [33.0151250000, -26.8311125000], [33.0781687500, -26.8161718750], [33.1412125000, -26.8012312500], [33.2042562500, -26.7862906250], [33.2673000000, -26.7713500000], [33.3303437500, -26.7564093750], [33.3933875000, -26.7414687500], [33.4564312500, -26.7265281250], [33.5194750000, -26.7115875000], [33.5825187500, -26.6966468750], [33.6455625000, -26.6817062500], [33.7086062500, -26.6667656250], [33.7716500000, -26.6518250000], [33.8346937500, -26.6368843750], [33.8977375000, -26.6219437500], [33.9607812500, -26.6070031250], [34.0238250000, -26.5920625000], [34.0868687500, -26.5771218750], [34.1499125000, -26.5621812500], [34.2129562500, -26.5472406250], [34.2760000000, -26.5323000000], [34.2812000000, -26.5308000000], [34.3701812500, -26.5030125000], [34.4591625000, -26.4752250000], [34.5481437500, -26.4474375000], [34.6371250000, -26.4196500000], [34.7261062500, -26.3918625000], [34.8150875000, -26.3640750000], [34.9040687500, -26.3362875000], [34.9930500000, -26.3085000000], [35.0820312500, -26.2807125000], [35.1710125000, -26.2529250000], [35.2599937500, -26.2251375000], [35.3489750000, -26.1973500000], [35.4379562500, -26.1695625000], [35.5269375000, -26.1417750000], [35.6159187500, -26.1139875000], [35.7049000000, -26.0862000000], [35.7559750000, -26.0702687500], [35.8070500000, -26.0543375000], [35.8581250000, -26.0384062500], [35.9092000000, -26.0224750000], [35.9602750000, -26.0065437500], [36.0113500000, -25.9906125000], [36.0624250000, -25.9746812500], [36.1135000000, -25.9587500000], [36.1645750000, -25.9428187500], [36.2156500000, -25.9268875000], [36.2667250000, -25.9109562500], [36.3178000000, -25.8950250000], [36.3688750000, -25.8790937500], [36.4199500000, -25.8631625000], [36.4710250000, -25.8472312500], [36.5221000000, -25.8313000000], [36.5844500000, -25.8087875000], [36.6468000000, -25.7862750000], [36.7091500000, -25.7637625000], [36.7715000000, -25.7412500000], [36.8338500000, -25.7187375000], [36.8962000000, -25.6962250000], [36.9585500000, -25.6737125000], [37.0209000000, -25.6512000000], [37.0832500000, -25.6286875000], [37.1456000000, -25.6061750000], [37.2079500000, -25.5836625000], [37.2703000000, -25.5611500000], [37.3326500000, -25.5386375000], [37.3950000000, -25.5161250000], [37.4573500000, -25.4936125000], [37.5197000000, -25.4711000000], [37.5759500000, -25.4508500000], [37.6322000000, -25.4306000000], [37.6884500000, -25.4103500000], [37.7447000000, -25.3901000000], [37.8009500000, -25.3698500000], [37.8572000000, -25.3496000000], [37.9134500000, -25.3293500000], [37.9697000000, -25.3091000000], [38.0259500000, -25.2888500000], [38.0822000000, -25.2686000000], [38.1384500000, -25.2483500000], [38.1947000000, -25.2281000000], [38.2509500000, -25.2078500000], [38.3072000000, -25.1876000000], [38.3634500000, -25.1673500000], [38.4197000000, -25.1471000000], [38.4334000000, -25.1419000000], [38.4996875000, -25.1131468750], [38.5659750000, -25.0843937500], [38.6322625000, -25.0556406250], [38.6985500000, -25.0268875000], [38.7648375000, -24.9981343750], [38.8311250000, -24.9693812500], [38.8974125000, -24.9406281250], [38.9637000000, -24.9118750000], [39.0299875000, -24.8831218750], [39.0962750000, -24.8543687500], [39.1625625000, -24.8256156250], [39.2288500000, -24.7968625000], [39.2951375000, -24.7681093750], [39.3614250000, -24.7393562500], [39.4277125000, -24.7106031250], [39.4940000000, -24.6818500000], [39.5602875000, -24.6530968750], [39.6265750000, -24.6243437500], [39.6928625000, -24.5955906250], [39.7591500000, -24.5668375000], [39.8254375000, -24.5380843750], [39.8917250000, -24.5093312500], [39.9580125000, -24.4805781250], [40.0243000000, -24.4518250000], [40.0905875000, -24.4230718750], [40.1568750000, -24.3943187500], [40.2231625000, -24.3655656250], [40.2894500000, -24.3368125000], [40.3557375000, -24.3080593750], [40.4220250000, -24.2793062500], [40.4883125000, -24.2505531250], [40.5546000000, -24.2218000000], [40.6419375000, -24.1853500000], [40.7292750000, -24.1489000000], [40.8166125000, -24.1124500000], [40.9039500000, -24.0760000000], [40.9912875000, -24.0395500000], [41.0786250000, -24.0031000000], [41.1659625000, -23.9666500000], [41.2533000000, -23.9302000000], [41.3406375000, -23.8937500000], [41.4279750000, -23.8573000000], [41.5153125000, -23.8208500000], [41.6026500000, -23.7844000000], [41.6899875000, -23.7479500000], [41.7773250000, -23.7115000000], [41.8646625000, -23.6750500000], [41.9520000000, -23.6386000000], [42.0381500000, -23.5982000000], [42.1243000000, -23.5578000000], [42.1707250000, -23.5345812500], [42.2171500000, -23.5113625000], [42.2635750000, -23.4881437500], [42.3100000000, -23.4649250000], [42.3564250000, -23.4417062500], [42.4028500000, -23.4184875000], [42.4492750000, -23.3952687500], [42.4957000000, -23.3720500000], [42.5421250000, -23.3488312500], [42.5885500000, -23.3256125000], [42.6349750000, -23.3023937500], [42.6814000000, -23.2791750000], [42.7278250000, -23.2559562500], [42.7742500000, -23.2327375000], [42.8206750000, -23.2095187500], [42.8671000000, -23.1863000000], [42.9187812500, -23.1612875000], [42.9704625000, -23.1362750000], [43.0221437500, -23.1112625000], [43.0738250000, -23.0862500000], [43.1255062500, -23.0612375000], [43.1771875000, -23.0362250000], [43.2288687500, -23.0112125000], [43.2805500000, -22.9862000000], [43.3322312500, -22.9611875000], [43.3839125000, -22.9361750000], [43.4355937500, -22.9111625000], [43.4872750000, -22.8861500000], [43.5389562500, -22.8611375000], [43.5906375000, -22.8361250000], [43.6423187500, -22.8111125000], [43.6940000000, -22.7861000000], [43.7572062500, -22.7517937500], [43.8204125000, -22.7174875000], [43.8836187500, -22.6831812500], [43.9468250000, -22.6488750000], [44.0100312500, -22.6145687500], [44.0732375000, -22.5802625000], [44.1364437500, -22.5459562500], [44.1996500000, -22.5116500000], [44.2628562500, -22.4773437500], [44.3260625000, -22.4430375000], [44.3892687500, -22.4087312500], [44.4524750000, -22.3744250000], [44.5156812500, -22.3401187500], [44.5788875000, -22.3058125000], [44.6420937500, -22.2715062500], [44.7053000000, -22.2372000000], [44.7541125000, -22.2109562500], [44.8029250000, -22.1847125000], [44.8517375000, -22.1584687500], [44.9005500000, -22.1322250000], [44.9493625000, -22.1059812500], [44.9981750000, -22.0797375000], [45.0469875000, -22.0534937500], [45.0958000000, -22.0272500000], [45.1446125000, -22.0010062500], [45.1934250000, -21.9747625000], [45.2422375000, -21.9485187500], [45.2910500000, -21.9222750000], [45.3398625000, -21.8960312500], [45.3886750000, -21.8697875000], [45.4374875000, -21.8435437500], [45.4863000000, -21.8173000000], [45.5367000000, -21.7888000000], [45.6050062500, -21.7461843750], [45.6733125000, -21.7035687500], [45.7416187500, -21.6609531250], [45.8099250000, -21.6183375000], [45.8782312500, -21.5757218750], [45.9465375000, -21.5331062500], [46.0148437500, -21.4904906250], [46.0831500000, -21.4478750000], [46.1514562500, -21.4052593750], [46.2197625000, -21.3626437500], [46.2880687500, -21.3200281250], [46.3563750000, -21.2774125000], [46.4246812500, -21.2347968750], [46.4929875000, -21.1921812500], [46.5612937500, -21.1495656250], [46.6296000000, -21.1069500000], [46.6979062500, -21.0643343750], [46.7662125000, -21.0217187500], [46.8345187500, -20.9791031250], [46.9028250000, -20.9364875000], [46.9711312500, -20.8938718750], [47.0394375000, -20.8512562500], [47.1077437500, -20.8086406250], [47.1760500000, -20.7660250000], [47.2443562500, -20.7234093750], [47.3126625000, -20.6807937500], [47.3809687500, -20.6381781250], [47.4492750000, -20.5955625000], [47.5175812500, -20.5529468750], [47.5858875000, -20.5103312500], [47.6541937500, -20.4677156250], [47.7225000000, -20.4251000000], [47.8037875000, -20.3747937500], [47.8850750000, -20.3244875000], [47.9663625000, -20.2741812500], [48.0476500000, -20.2238750000], [48.1289375000, -20.1735687500], [48.2102250000, -20.1232625000], [48.2915125000, -20.0729562500], [48.3728000000, -20.0226500000], [48.4540875000, -19.9723437500], [48.5353750000, -19.9220375000], [48.6166625000, -19.8717312500], [48.6979500000, -19.8214250000], [48.7792375000, -19.7711187500], [48.8605250000, -19.7208125000], [48.9418125000, -19.6705062500], [49.0231000000, -19.6202000000], [49.0288000000, -19.6163000000], [49.1046750000, -19.5629750000], [49.1805500000, -19.5096500000], [49.2564250000, -19.4563250000], [49.3323000000, -19.4030000000], [49.4081750000, -19.3496750000], [49.4840500000, -19.2963500000], [49.5599250000, -19.2430250000], [49.6358000000, -19.1897000000], [49.7043375000, -19.1414750000], [49.7728750000, -19.0932500000], [49.8414125000, -19.0450250000], [49.9099500000, -18.9968000000], [49.9784875000, -18.9485750000], [50.0470250000, -18.9003500000], [50.1155625000, -18.8521250000], [50.1841000000, -18.8039000000], [50.2624937500, -18.7437625000], [50.3408875000, -18.6836250000], [50.4192812500, -18.6234875000], [50.4976750000, -18.5633500000], [50.5760687500, -18.5032125000], [50.6544625000, -18.4430750000], [50.7328562500, -18.3829375000], [50.8112500000, -18.3228000000]]);
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
import math
import time

from stl import mesh, Dimension

from tkinter import Tk     # from tkinter import Tk for Python 3.x
from tkinter.filedialog import askopenfilename
from mpl_toolkits.mplot3d import art3d
from matplotlib import pyplot as plt
import solid
import os
import ezdxf
import shapely.geometry as sg
import subprocess
from GUI import getSCADPath



def outputSTL(From, To, PATH=getSCADPath()):
    subprocess.Popen(PATH + " -o " + To + " " + From)
    while not os.path.exists(To):
        time.sleep(1)


def get_size(i):
    x_list = [int(a) for a in str(i)]
    return len(x_list)



class Model:
    def __init__(self, model, fileName, location, layer, thickness):
        self.location = location
        self.code = None
        self.fileName = fileName
        self.stl = fileName + ".stl"
        self.layer = layer
        self.thickness = thickness
        self.maxz = (layer+1)*thickness
        self.dxf = fileName + ".dxf"
        self.scad = fileName + ".scad"
        self.model = model
        self.center = None
        self.width = 10
        self.mesh = None
        self.useable_area = None


    def get_code(self):
        max_dim = 0.05
        max_array = 6

        num = int(self.fileName)
        nums = [int(a) for a in str(num)]
        nums.reverse()
        indices = nums
        length = len(nums)

        print(indices)
        t = 0
        i = 0
        cubes = []
        x = 0
        y = 0
        width = 0.01
        while x <= max_dim:
            while y <= max_dim:
                print(indices)
                if nums == []:
                    break
                if indices[0] != 0:
                    cubes.append(solid.translate([x, y, 0])(solid.cube(size=t / 1000 + 0.001)))
                    y += max_dim / (max_array - 1)
                    nums[0] = nums[0] - 1
                else:
                    indices.pop(0)
                    t += 1
                i += 1
            x += max_dim / (max_array - 1)
            y = 0

        outside = solid.translate([-width / 2, -width / 2])(solid.cube(max_dim + (length - 1) / 1000 + 0.001 + width))
        self.code = solid.difference()(outside, cubes)
        self.code = solid.projection(cut=True)(self.code)
        solid.scad_render_to_file(self.code, self.location + "/code.scad")
        outputSTL(From=self.location+"/code.scad", To=self.location+"code.dxf", PATH=getSCADPath())
        # os.system("toSTL.sh renders/code.scad renders/code.dxf")
        return self.location+"/code.dxf"

    def download(self, type):
        if type =="stl":
            print("generating:" + self.location+"/"+ self.fileName+".stl")
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".stl")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".stl")
        elif type == "dxf":
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".dxf")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".dxf")

    def render(self):
        solid.scad_render_to_file(self.model, self.location+"/"+ self.fileName+'.scad')
        while not os.path.exists(self.location+"/"+self.fileName+".scad"):
            time.sleep(1)

    def get_points(self):
        doc = ezdxf.readfile(filename=self.location+"/"+ self.fileName+".dxf")
        msp = doc.modelspace()
        i=0
        lists = []
        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return [start, end]

        for e in msp.query("LINE"):
            line = helper(e)
            if not lists:
                lists.append([line])
            else:
                if lists[i][len(lists)-1][1] != line[0]:
                    lists.append([line])
                    i+=1
                else:
                    lists[i].append(line)

    def get_points2(self, FILE):
        doc = ezdxf.readfile(filename=FILE)
        msp = doc.modelspace()
        i = 0
        lists = []

        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return (start, end)

        for e in msp.query("LINE"):
            line = helper(e)
            if lists==[]:
                lists.append([line])
            else:
                if lists[i][len(lists[i]) - 1][1] != line[0]:
                    lists.append([line])
                    i += 1
                else:
                    lists[i].append(line)
        return lists

    def add_code(self):
        dxf = solid.projection(cut=False)(self.model)
        offset = solid.offset(r=-0.1)(dxf)
        solid.scad_render_to_file(offset, self.location+'/offset.scad')
        os.system("toSTL.sh renders/offset.scad renders/offset.dxf")
        lines = self.get_points2("renders/offset.dxf")
        x = lines[0][0][0][0]
        y = lines[0][0][0][1]
        print(x)
        print(y)
        code = solid.translate([x,y,0])(self.code)
        code = solid.linear_extrude(height=999)(code)
        save = self.model
        self.model = solid.projection()(solid.difference()(self.model, code))
        self.render()
        self.download("dxf")
        self.model = save

    def add_label(self, pos):
        # num = 12
        # minx, maxx, miny, maxy, minz, maxz = self.find_minmax()
        maxz = self.maxz
        # label = solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.5, halign="center"))
        # i=minx
        # print("x-len: " + str(maxx-minx))
        # print(i)
        # inc = (maxx-minx)/num
        # while minx <= i <= maxx:
        #     label = solid.union()(solid.translate([i, 0, maxz - 0.2])(solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.25, halign="center"))), label)
        #     i += inc
        #
        # l = label
        #
        # i =miny
        # while miny<= i <= maxy:
        #     print("y inc")
        #     l = solid.union()(solid.translate([0, i, 0])(label), l)
        #     i += 0.5
        for i in str(self.fileName):
            cur = pos[0]
            label = solid.translate([pos[0][0], pos[0][1], self.maxz-0.2])(solid.linear_extrude(height=(self.thickness)/3)(solid.text(str(i), size=0.5, halign="center", valign="center")))
            self.model = solid.difference()(self.model, label)
            pos.append(pos.pop(0))
            while abs(cur[0]-pos[0][0])<0.5 and abs(cur[1]-pos[0][1])<0.5:
                pos.append(pos.pop(0))



    def Center(self):

        volume, cog, inertia = self.mesh.get_mass_properties()
        print("Volume                                  = {0}".format(volume))
        print("Position of the center of gravity (COG) = {0}".format(cog))
        m_centered = solid.translate([-cog[0], -cog[1], 0])(
            self.model
        )
        return m_centered

    def find_minmax(self):
        minx = maxx = miny = maxy = minz = maxz = None
        for p in self.mesh.points:
            # p contains (x, y, z)
            if minx is None:
                minx = p[Dimension.X]
                maxx = p[Dimension.X]
                miny = p[Dimension.Y]
                maxy = p[Dimension.Y]
                minz = p[Dimension.Z]
                maxz = p[Dimension.Z]
            else:
                maxx = max(p[Dimension.X], maxx)
                minx = min(p[Dimension.X], minx)
                maxy = max(p[Dimension.Y], maxy)
                miny = min(p[Dimension.Y], miny)
                maxz = max(p[Dimension.Z], maxz)
                minz = min(p[Dimension.Z], minz)
        lenx = maxx - minx
        leny = maxy - miny
        lenz = maxz - minz
        return minx, maxx, miny, maxy, minz, maxz

    # def generate_Mesh(self):
    #     self.mesh = mesh.Mesh.from_file(self.location + "/" + str(int(self.fileName)//8)+ "b.stl")

    def get_top(self):
        top = solid.projection(cut=True)(solid.translate([0,0,-1*self.thickness*(self.layer+1)])(self.model))
        useable_area = solid.offset(r=-0.45)(top)
        self.useable_area = useable_area
        solid.scad_render_to_file(self.useable_area, self.location+'/' + 'toptemp.scad')
        outputSTL(From=self.location+'/' + 'toptemp.scad', To=self.location+"/top"+ self.dxf)

        # os.system("toSTL.sh out/toptemp.scad renders/" + self.fileName + ".dxf")
        dxf = DXF(self.location+"/top"+ self.dxf)
        min_p=dxf.points[0][0]
        points_ordered = dxf.points
        i=0
        while i <= len(dxf.points)+1:
            while math.sqrt((dxf.points[0][0]-dxf.points[1][0])**2+(dxf.points[0][1]-dxf.points[1][1])**2) > 0.1:
                dxf.points.insert(1, [(dxf.points[0][0]+dxf.points[1][0])/2, (dxf.points[0][1]+dxf.points[1][1])/2])
                i = i-1
            dxf.points.append(dxf.points.pop(0))
            i+=1
        for i in range(len(dxf.points)):
            dxf.points.append(dxf.points.pop(0))
            if dxf.points[0][0] < min_p:
                min_p = dxf.points[0][0]
                points_ordered = dxf.points.copy()
        dxf.points = points_ordered.copy()

        print(dxf.points)
        self.add_label(dxf.points)

class DXF:
    def __init__(self, file):
        self.file = file
        self.Lines = []
        self.points = []
        doc = ezdxf.readfile(self.file)
        msp = doc.modelspace()
        for e in msp:
            if e.dxftype() == "LINE":
                self.Lines.append(e)
                self.points.append([e.dxf.start[0], e.dxf.start[1]])
        # self.points.append([self.Lines[-1].dxf.end[0], self.Lines[-1].dxf.end[1]])
        self.area = None
        self.center = None
        self.polygon = sg.Polygon(self.points)

    def get_area(self):
        self.area = self.polygon.area
        return self.area

    def get_center(self):
        x_sum = 0
        y_sum =0
        for i in self.points:
            x_sum += i[0]
            y_sum += i[1]
        x_c = x_sum/len(self.points)
        y_c = y_sum/len(self.points)
        return (x_c, y_c)

    def split(self, maxdim):
        splits = []
        length = 0
        pieces = [[]]
        prev = self.points[0]
        for j in self.points:
            length = length + math.sqrt((prev[0]-j[0])**2+(prev[1]-j[1])**2)
            if length >= maxdim:
                pieces[-1].append(j)
                pieces.append([])
                length = 0
            pieces[-1].append(j)
            prev = j
        for j in pieces:
            j.insert(0, [0,0])
            piece = solid.linear_extrude(height=10)(solid.polygon(j))
            splits.append(piece)
        return splits
    def refine_points(self):
        i=0
        while i <= len(self.points)+1:
            while math.sqrt((self.points[0][0]-self.points[1][0])**2+(self.points[0][1]-self.points[1][1])**2) > 0.1:
                self.points.insert(1, [(self.points[0][0]+self.points[1][0])/2, (self.points[0][1]+self.points[1][1])/2])
                i = i-1
            self.points.append(self.points.pop(0))
            i+=1


if __name__== "__main__":
    test = DXF("C:/Users/Daniel/Documents/repos/Shell_Maker/output/0top_slice.dxf")
    test.refine_points()
    k = test.split(48)
    for i in range(len(k)):
        solid.scad_render_to_file(k[i], str(i) + ".scad")


 
 
************************************************/
