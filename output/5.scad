// Generated by SolidPython 1.1.3 on 2024-05-19 23:41:19


intersection() {
	difference() {
		intersection() {
			translate(v = [0, 0, 0]) {
				import(file = "CE3E3V2_Bottom_shell.stl", origin = [0, 0]);
			}
			translate(v = [-90.04029846191406, -32.690147399902344, 0]) {
				cube(size = [180.0806, 65.380295, 2]);
			}
		}
		linear_extrude(height = 999) {
			offset(r = -1) {
				import(file = "C:/Users/Daniel/Documents/repos/Shell_Maker/output/0top_slice.dxf", origin = [0, 0]);
			}
		}
	}
	translate(v = [0, 0, 0]) {
		linear_extrude(height = 10) {
			polygon(points = [[0, 0], [-58.6183941406, 31.1832578125], [-58.6839296875, 31.1813937500], [-58.7494652344, 31.1795296875], [-58.8150007813, 31.1776656250], [-58.8805363281, 31.1758015625], [-58.9460718750, 31.1739375000], [-59.0116074219, 31.1720734375], [-59.0771429688, 31.1702093750], [-59.1426785156, 31.1683453125], [-59.2082140625, 31.1664812500], [-59.2737496094, 31.1646171875], [-59.3392851563, 31.1627531250], [-59.4048207031, 31.1608890625], [-59.4703562500, 31.1590250000], [-59.5358917969, 31.1571609375], [-59.6014273438, 31.1552968750], [-59.6669628906, 31.1534328125], [-59.7324984375, 31.1515687500], [-59.7980339844, 31.1497046875], [-59.8635695313, 31.1478406250], [-59.9291050781, 31.1459765625], [-59.9946406250, 31.1441125000], [-60.0601761719, 31.1422484375], [-60.1257117188, 31.1403843750], [-60.1912472656, 31.1385203125], [-60.2567828125, 31.1366562500], [-60.3223183594, 31.1347921875], [-60.3878539063, 31.1329281250], [-60.4533894531, 31.1310640625], [-60.5189250000, 31.1292000000], [-60.5844605469, 31.1273359375], [-60.6499960938, 31.1254718750], [-60.7155316406, 31.1236078125], [-60.7810671875, 31.1217437500], [-60.8466027344, 31.1198796875], [-60.9121382813, 31.1180156250], [-60.9776738281, 31.1161515625], [-61.0432093750, 31.1142875000], [-61.1087449219, 31.1124234375], [-61.1742804687, 31.1105593750], [-61.2398160156, 31.1086953125], [-61.3053515625, 31.1068312500], [-61.3708871094, 31.1049671875], [-61.4364226563, 31.1031031250], [-61.5019582031, 31.1012390625], [-61.5674937500, 31.0993750000], [-61.6330292969, 31.0975109375], [-61.6985648437, 31.0956468750], [-61.7641003906, 31.0937828125], [-61.8296359375, 31.0919187500], [-61.8951714844, 31.0900546875], [-61.9607070312, 31.0881906250], [-62.0262425781, 31.0863265625], [-62.0917781250, 31.0844625000], [-62.1573136719, 31.0825984375], [-62.2228492187, 31.0807343750], [-62.2883847656, 31.0788703125], [-62.3539203125, 31.0770062500], [-62.4194558594, 31.0751421875], [-62.4849914062, 31.0732781250], [-62.5505269531, 31.0714140625], [-62.6160625000, 31.0695500000], [-62.6815980469, 31.0676859375], [-62.7471335938, 31.0658218750], [-62.8126691406, 31.0639578125], [-62.8782046875, 31.0620937500], [-62.9437402344, 31.0602296875], [-63.0092757812, 31.0583656250], [-63.0748113281, 31.0565015625], [-63.1403468750, 31.0546375000], [-63.2058824219, 31.0527734375], [-63.2714179688, 31.0509093750], [-63.3369535156, 31.0490453125], [-63.4024890625, 31.0471812500], [-63.4680246094, 31.0453171875], [-63.5335601562, 31.0434531250], [-63.5990957031, 31.0415890625], [-63.6646312500, 31.0397250000], [-63.7301667969, 31.0378609375], [-63.7957023437, 31.0359968750], [-63.8612378906, 31.0341328125], [-63.9267734375, 31.0322687500], [-63.9923089844, 31.0304046875], [-64.0578445312, 31.0285406250], [-64.1233800781, 31.0266765625], [-64.1889156250, 31.0248125000], [-64.2544511719, 31.0229484375], [-64.3199867187, 31.0210843750], [-64.3855222656, 31.0192203125], [-64.4510578125, 31.0173562500], [-64.5165933594, 31.0154921875], [-64.5821289063, 31.0136281250], [-64.6476644531, 31.0117640625], [-64.7132000000, 31.0099000000], [-64.8008734375, 31.0071609375], [-64.8885468750, 31.0044218750], [-64.9762203125, 31.0016828125], [-65.0638937500, 30.9989437500], [-65.1515671875, 30.9962046875], [-65.2392406250, 30.9934656250], [-65.3269140625, 30.9907265625], [-65.4145875000, 30.9879875000], [-65.5022609375, 30.9852484375], [-65.5899343750, 30.9825093750], [-65.6776078125, 30.9797703125], [-65.7652812500, 30.9770312500], [-65.8529546875, 30.9742921875], [-65.9406281250, 30.9715531250], [-66.0283015625, 30.9688140625], [-66.1159750000, 30.9660750000], [-66.2036484375, 30.9633359375], [-66.2913218750, 30.9605968750], [-66.3789953125, 30.9578578125], [-66.4666687500, 30.9551187500], [-66.5543421875, 30.9523796875], [-66.6420156250, 30.9496406250], [-66.7296890625, 30.9469015625], [-66.8173625000, 30.9441625000], [-66.9050359375, 30.9414234375], [-66.9927093750, 30.9386843750], [-67.0803828125, 30.9359453125], [-67.1680562500, 30.9332062500], [-67.2557296875, 30.9304671875], [-67.3434031250, 30.9277281250], [-67.4310765625, 30.9249890625], [-67.5187500000, 30.9222500000], [-67.6064234375, 30.9195109375], [-67.6940968750, 30.9167718750], [-67.7817703125, 30.9140328125], [-67.8694437500, 30.9112937500], [-67.9571171875, 30.9085546875], [-68.0447906250, 30.9058156250], [-68.1324640625, 30.9030765625], [-68.2201375000, 30.9003375000], [-68.3078109375, 30.8975984375], [-68.3954843750, 30.8948593750], [-68.4831578125, 30.8921203125], [-68.5708312500, 30.8893812500], [-68.6585046875, 30.8866421875], [-68.7461781250, 30.8839031250], [-68.8338515625, 30.8811640625], [-68.9215250000, 30.8784250000], [-69.0091984375, 30.8756859375], [-69.0968718750, 30.8729468750], [-69.1845453125, 30.8702078125], [-69.2722187500, 30.8674687500], [-69.3598921875, 30.8647296875], [-69.4475656250, 30.8619906250], [-69.5352390625, 30.8592515625], [-69.6229125000, 30.8565125000], [-69.7105859375, 30.8537734375], [-69.7982593750, 30.8510343750], [-69.8859328125, 30.8482953125], [-69.9736062500, 30.8455562500], [-70.0612796875, 30.8428171875], [-70.1489531250, 30.8400781250], [-70.2366265625, 30.8373390625], [-70.3243000000, 30.8346000000], [-70.4119734375, 30.8318609375], [-70.4996468750, 30.8291218750], [-70.5873203125, 30.8263828125], [-70.6749937500, 30.8236437500], [-70.7626671875, 30.8209046875], [-70.8503406250, 30.8181656250], [-70.9380140625, 30.8154265625], [-71.0256875000, 30.8126875000], [-71.1133609375, 30.8099484375], [-71.2010343750, 30.8072093750], [-71.2887078125, 30.8044703125], [-71.3763812500, 30.8017312500], [-71.4640546875, 30.7989921875], [-71.5517281250, 30.7962531250], [-71.6394015625, 30.7935140625], [-71.7270750000, 30.7907750000], [-71.8147484375, 30.7880359375], [-71.9024218750, 30.7852968750], [-71.9900953125, 30.7825578125], [-72.0777687500, 30.7798187500], [-72.1654421875, 30.7770796875], [-72.2531156250, 30.7743406250], [-72.3407890625, 30.7716015625], [-72.4284625000, 30.7688625000], [-72.5161359375, 30.7661234375], [-72.6038093750, 30.7633843750], [-72.6914828125, 30.7606453125], [-72.7791562500, 30.7579062500], [-72.8668296875, 30.7551671875], [-72.9545031250, 30.7524281250], [-73.0421765625, 30.7496890625], [-73.1298500000, 30.7469500000], [-73.2175234375, 30.7442109375], [-73.3051968750, 30.7414718750], [-73.3928703125, 30.7387328125], [-73.4805437500, 30.7359937500], [-73.5682171875, 30.7332546875], [-73.6558906250, 30.7305156250], [-73.7435640625, 30.7277765625], [-73.8312375000, 30.7250375000], [-73.9189109375, 30.7222984375], [-74.0065843750, 30.7195593750], [-74.0942578125, 30.7168203125], [-74.1819312500, 30.7140812500], [-74.2696046875, 30.7113421875], [-74.3572781250, 30.7086031250], [-74.4449515625, 30.7058640625], [-74.5326250000, 30.7031250000], [-74.6202984375, 30.7003859375], [-74.7079718750, 30.6976468750], [-74.7956453125, 30.6949078125], [-74.8833187500, 30.6921687500], [-74.9709921875, 30.6894296875], [-75.0586656250, 30.6866906250], [-75.1463390625, 30.6839515625], [-75.2340125000, 30.6812125000], [-75.3216859375, 30.6784734375], [-75.4093593750, 30.6757343750], [-75.4970328125, 30.6729953125], [-75.5847062500, 30.6702562500], [-75.6723796875, 30.6675171875], [-75.7600531250, 30.6647781250], [-75.8477265625, 30.6620390625], [-75.9354000000, 30.6593000000], [-75.9940429687, 30.6573523438], [-76.0526859375, 30.6554046875], [-76.1113289062, 30.6534570313], [-76.1699718750, 30.6515093750], [-76.2286148437, 30.6495617188], [-76.2872578125, 30.6476140625], [-76.3459007812, 30.6456664063], [-76.4045437500, 30.6437187500], [-76.4631867187, 30.6417710938], [-76.5218296875, 30.6398234375], [-76.5804726562, 30.6378757812], [-76.6391156250, 30.6359281250], [-76.6977585937, 30.6339804687], [-76.7564015625, 30.6320328125], [-76.8150445312, 30.6300851563], [-76.8736875000, 30.6281375000], [-76.9323304687, 30.6261898438], [-76.9909734375, 30.6242421875], [-77.0496164062, 30.6222945313], [-77.1082593750, 30.6203468750], [-77.1669023437, 30.6183992188], [-77.2255453125, 30.6164515625], [-77.2841882812, 30.6145039063], [-77.3428312500, 30.6125562500], [-77.4014742187, 30.6106085938], [-77.4601171875, 30.6086609375], [-77.5187601562, 30.6067132812], [-77.5774031250, 30.6047656250], [-77.6360460937, 30.6028179687], [-77.6946890625, 30.6008703125], [-77.7533320312, 30.5989226563], [-77.8119750000, 30.5969750000], [-77.8706179687, 30.5950273438], [-77.9292609375, 30.5930796875], [-77.9879039062, 30.5911320313], [-78.0465468750, 30.5891843750], [-78.1051898437, 30.5872367188], [-78.1638328125, 30.5852890625], [-78.2224757812, 30.5833414062], [-78.2811187500, 30.5813937500], [-78.3397617187, 30.5794460938], [-78.3984046875, 30.5774984375], [-78.4570476562, 30.5755507812], [-78.5156906250, 30.5736031250], [-78.5743335937, 30.5716554687], [-78.6329765625, 30.5697078125], [-78.6916195312, 30.5677601562], [-78.7502625000, 30.5658125000], [-78.8089054687, 30.5638648438], [-78.8675484375, 30.5619171875], [-78.9261914062, 30.5599695313], [-78.9848343750, 30.5580218750], [-79.0434773437, 30.5560742188], [-79.1021203125, 30.5541265625], [-79.1607632812, 30.5521789062], [-79.2194062500, 30.5502312500], [-79.2780492187, 30.5482835937], [-79.3366921875, 30.5463359375], [-79.3953351562, 30.5443882812], [-79.4539781250, 30.5424406250], [-79.5126210937, 30.5404929687], [-79.5712640625, 30.5385453125], [-79.6299070312, 30.5365976562], [-79.6885500000, 30.5346500000], [-79.7471929687, 30.5327023437], [-79.8058359375, 30.5307546875], [-79.8644789062, 30.5288070313], [-79.9231218750, 30.5268593750], [-79.9817648437, 30.5249117188], [-80.0404078125, 30.5229640625], [-80.0990507812, 30.5210164062], [-80.1576937500, 30.5190687500], [-80.2163367188, 30.5171210937], [-80.2749796875, 30.5151734375], [-80.3336226562, 30.5132257812], [-80.3922656250, 30.5112781250], [-80.4509085938, 30.5093304687], [-80.5095515625, 30.5073828125], [-80.5681945312, 30.5054351562], [-80.6268375000, 30.5034875000], [-80.6854804688, 30.5015398437], [-80.7441234375, 30.4995921875], [-80.8027664062, 30.4976445312], [-80.8614093750, 30.4956968750], [-80.9200523438, 30.4937492188], [-80.9786953125, 30.4918015625], [-81.0373382812, 30.4898539062], [-81.0959812500, 30.4879062500], [-81.1546242188, 30.4859585937], [-81.2132671875, 30.4840109375], [-81.2719101562, 30.4820632812], [-81.3305531250, 30.4801156250], [-81.3891960938, 30.4781679687], [-81.4478390625, 30.4762203125], [-81.5064820312, 30.4742726562], [-81.5651250000, 30.4723250000], [-81.6237679688, 30.4703773437], [-81.6824109375, 30.4684296875], [-81.7410539062, 30.4664820312], [-81.7996968750, 30.4645343750], [-81.8583398438, 30.4625867187], [-81.9169828125, 30.4606390625], [-81.9756257812, 30.4586914062], [-82.0342687500, 30.4567437500], [-82.0929117188, 30.4547960937], [-82.1515546875, 30.4528484375], [-82.2101976562, 30.4509007812], [-82.2688406250, 30.4489531250], [-82.3274835938, 30.4470054687], [-82.3861265625, 30.4450578125], [-82.4447695312, 30.4431101562], [-82.5034125000, 30.4411625000], [-82.5620554688, 30.4392148437], [-82.6206984375, 30.4372671875], [-82.6793414062, 30.4353195312], [-82.7379843750, 30.4333718750], [-82.7966273438, 30.4314242187], [-82.8552703125, 30.4294765625], [-82.9139132812, 30.4275289063], [-82.9725562500, 30.4255812500], [-83.0311992188, 30.4236335938], [-83.0898421875, 30.4216859375], [-83.1484851562, 30.4197382813], [-83.2071281250, 30.4177906250], [-83.2657710938, 30.4158429688], [-83.3244140625, 30.4138953125], [-83.3830570312, 30.4119476562], [-83.4417000000, 30.4100000000], [-83.5201437500, 30.4072875000], [-83.5985875000, 30.4045750000], [-83.6770312500, 30.4018625000], [-83.7554750000, 30.3991500000], [-83.8339187500, 30.3964375000], [-83.9123625000, 30.3937250000], [-83.9908062500, 30.3910125000], [-84.0692500000, 30.3883000000], [-84.1476937500, 30.3855875000], [-84.2261375000, 30.3828750000], [-84.3045812500, 30.3801625000], [-84.3830250000, 30.3774500000], [-84.4614687500, 30.3747375000], [-84.5399125000, 30.3720250000], [-84.6183562500, 30.3693125000], [-84.6968000000, 30.3666000000], [-84.7752437500, 30.3638875000], [-84.8536875000, 30.3611750000], [-84.9321312500, 30.3584625000], [-85.0105750000, 30.3557500000], [-85.0890187500, 30.3530375000], [-85.1674625000, 30.3503250000], [-85.2459062500, 30.3476125000], [-85.3243500000, 30.3449000000], [-85.4027937500, 30.3421875000], [-85.4812375000, 30.3394750000], [-85.5596812500, 30.3367625000], [-85.6381250000, 30.3340500000], [-85.7165687500, 30.3313375000], [-85.7950125000, 30.3286250000], [-85.8734562500, 30.3259125000], [-85.9519000000, 30.3232000000], [-86.0303437500, 30.3204875000], [-86.1087875000, 30.3177750000], [-86.1872312500, 30.3150625000], [-86.2656750000, 30.3123500000], [-86.3441187500, 30.3096375000], [-86.4225625000, 30.3069250000], [-86.5010062500, 30.3042125000], [-86.5794500000, 30.3015000000], [-86.6578937500, 30.2987875000], [-86.7363375000, 30.2960750000], [-86.8147812500, 30.2933625000], [-86.8932250000, 30.2906500000], [-86.9716687500, 30.2879375000], [-87.0501125000, 30.2852250000], [-87.1285562500, 30.2825125000], [-87.2070000000, 30.2798000000], [-87.2854437500, 30.2770875000], [-87.3638875000, 30.2743750000], [-87.4423312500, 30.2716625000], [-87.5207750000, 30.2689500000], [-87.5992187500, 30.2662375000], [-87.6776625000, 30.2635250000], [-87.7561062500, 30.2608125000], [-87.8345500000, 30.2581000000], [-87.9129937500, 30.2553875000], [-87.9914375000, 30.2526750000], [-88.0698812500, 30.2499625000], [-88.1483250000, 30.2472500000], [-88.2267687500, 30.2445375000], [-88.3052125000, 30.2418250000], [-88.3836562500, 30.2391125000], [-88.4621000000, 30.2364000000], [-88.5607375000, 30.2328875000], [-88.6593750000, 30.2293750000], [-88.7580125000, 30.2258625000], [-88.8566500000, 30.2223500000], [-88.9552875000, 30.2188375000], [-89.0539250000, 30.2153250000], [-89.1525625000, 30.2118125000], [-89.2512000000, 30.2083000000], [-89.3498375000, 30.2047875000], [-89.4484750000, 30.2012750000], [-89.5471125000, 30.1977625000], [-89.6457500000, 30.1942500000], [-89.7443875000, 30.1907375000], [-89.8430250000, 30.1872250000], [-89.9416625000, 30.1837125000], [-90.0403000000, 30.1802000000], [-90.0403000000, 30.1210232422], [-90.0403000000, 30.0618464844], [-90.0403000000, 30.0026697266], [-90.0403000000, 29.9434929688], [-90.0403000000, 29.8843162109], [-90.0403000000, 29.8251394531], [-90.0403000000, 29.7659626953], [-90.0403000000, 29.7067859375], [-90.0403000000, 29.6476091797], [-90.0403000000, 29.5884324219], [-90.0403000000, 29.5292556641], [-90.0403000000, 29.4700789063], [-90.0403000000, 29.4109021484], [-90.0403000000, 29.3517253906], [-90.0403000000, 29.2925486328], [-90.0403000000, 29.2333718750], [-90.0403000000, 29.1741951172], [-90.0403000000, 29.1150183594], [-90.0403000000, 29.0558416016], [-90.0403000000, 28.9966648437], [-90.0403000000, 28.9374880859], [-90.0403000000, 28.8783113281], [-90.0403000000, 28.8191345703], [-90.0403000000, 28.7599578125], [-90.0403000000, 28.7007810547], [-90.0403000000, 28.6416042969], [-90.0403000000, 28.5824275391], [-90.0403000000, 28.5232507812], [-90.0403000000, 28.4640740234], [-90.0403000000, 28.4048972656], [-90.0403000000, 28.3457205078], [-90.0403000000, 28.2865437500], [-90.0403000000, 28.2273669922], [-90.0403000000, 28.1681902344], [-90.0403000000, 28.1090134766], [-90.0403000000, 28.0498367188], [-90.0403000000, 27.9906599609], [-90.0403000000, 27.9314832031], [-90.0403000000, 27.8723064453], [-90.0403000000, 27.8131296875], [-90.0403000000, 27.7539529297], [-90.0403000000, 27.6947761719], [-90.0403000000, 27.6355994141], [-90.0403000000, 27.5764226563], [-90.0403000000, 27.5172458984], [-90.0403000000, 27.4580691406], [-90.0403000000, 27.3988923828], [-90.0403000000, 27.3397156250], [-90.0403000000, 27.2805388672], [-90.0403000000, 27.2213621094], [-90.0403000000, 27.1621853516], [-90.0403000000, 27.1030085937], [-90.0403000000, 27.0438318359], [-90.0403000000, 26.9846550781], [-90.0403000000, 26.9254783203], [-90.0403000000, 26.8663015625], [-90.0403000000, 26.8071248047], [-90.0403000000, 26.7479480469], [-90.0403000000, 26.6887712891], [-90.0403000000, 26.6295945312], [-90.0403000000, 26.5704177734], [-90.0403000000, 26.5112410156], [-90.0403000000, 26.4520642578], [-90.0403000000, 26.3928875000], [-90.0403000000, 26.3337107422], [-90.0403000000, 26.2745339844], [-90.0403000000, 26.2153572266], [-90.0403000000, 26.1561804688], [-90.0403000000, 26.0970037109], [-90.0403000000, 26.0378269531], [-90.0403000000, 25.9786501953], [-90.0403000000, 25.9194734375], [-90.0403000000, 25.8602966797], [-90.0403000000, 25.8011199219], [-90.0403000000, 25.7419431641], [-90.0403000000, 25.6827664063], [-90.0403000000, 25.6235896484], [-90.0403000000, 25.5644128906], [-90.0403000000, 25.5052361328], [-90.0403000000, 25.4460593750], [-90.0403000000, 25.3868826172], [-90.0403000000, 25.3277058594], [-90.0403000000, 25.2685291016], [-90.0403000000, 25.2093523437], [-90.0403000000, 25.1501755859], [-90.0403000000, 25.0909988281], [-90.0403000000, 25.0318220703], [-90.0403000000, 24.9726453125], [-90.0403000000, 24.9134685547], [-90.0403000000, 24.8542917969], [-90.0403000000, 24.7951150391], [-90.0403000000, 24.7359382813], [-90.0403000000, 24.6767615234], [-90.0403000000, 24.6175847656], [-90.0403000000, 24.5584080078], [-90.0403000000, 24.4992312500], [-90.0403000000, 24.4400544922], [-90.0403000000, 24.3808777344], [-90.0403000000, 24.3217009766], [-90.0403000000, 24.2625242188], [-90.0403000000, 24.2033474609], [-90.0403000000, 24.1441707031], [-90.0403000000, 24.0849939453], [-90.0403000000, 24.0258171875], [-90.0403000000, 23.9666404297], [-90.0403000000, 23.9074636719], [-90.0403000000, 23.8482869141], [-90.0403000000, 23.7891101563], [-90.0403000000, 23.7299333984], [-90.0403000000, 23.6707566406], [-90.0403000000, 23.6115798828], [-90.0403000000, 23.5524031250], [-90.0403000000, 23.4932263672], [-90.0403000000, 23.4340496094], [-90.0403000000, 23.3748728516], [-90.0403000000, 23.3156960937], [-90.0403000000, 23.2565193359], [-90.0403000000, 23.1973425781], [-90.0403000000, 23.1381658203], [-90.0403000000, 23.0789890625], [-90.0403000000, 23.0198123047], [-90.0403000000, 22.9606355469], [-90.0403000000, 22.9014587891], [-90.0403000000, 22.8422820313], [-90.0403000000, 22.7831052734], [-90.0403000000, 22.7239285156], [-90.0403000000, 22.6647517578], [-90.0403000000, 22.6055750000], [-90.0403000000, 22.5463982422], [-90.0403000000, 22.4872214844], [-90.0403000000, 22.4280447266], [-90.0403000000, 22.3688679688], [-90.0403000000, 22.3096912109], [-90.0403000000, 22.2505144531], [-90.0403000000, 22.1913376953], [-90.0403000000, 22.1321609375], [-90.0403000000, 22.0729841797], [-90.0403000000, 22.0138074219], [-90.0403000000, 21.9546306641], [-90.0403000000, 21.8954539063], [-90.0403000000, 21.8362771484], [-90.0403000000, 21.7771003906], [-90.0403000000, 21.7179236328], [-90.0403000000, 21.6587468750], [-90.0403000000, 21.5995701172], [-90.0403000000, 21.5403933594], [-90.0403000000, 21.4812166016], [-90.0403000000, 21.4220398437], [-90.0403000000, 21.3628630859], [-90.0403000000, 21.3036863281], [-90.0403000000, 21.2445095703], [-90.0403000000, 21.1853328125], [-90.0403000000, 21.1261560547], [-90.0403000000, 21.0669792969], [-90.0403000000, 21.0078025391], [-90.0403000000, 20.9486257813], [-90.0403000000, 20.8894490234], [-90.0403000000, 20.8302722656], [-90.0403000000, 20.7710955078], [-90.0403000000, 20.7119187500], [-90.0403000000, 20.6527419922], [-90.0403000000, 20.5935652344], [-90.0403000000, 20.5343884766], [-90.0403000000, 20.4752117188], [-90.0403000000, 20.4160349609], [-90.0403000000, 20.3568582031], [-90.0403000000, 20.2976814453], [-90.0403000000, 20.2385046875], [-90.0403000000, 20.1793279297], [-90.0403000000, 20.1201511719], [-90.0403000000, 20.0609744141], [-90.0403000000, 20.0017976563], [-90.0403000000, 19.9426208984], [-90.0403000000, 19.8834441406], [-90.0403000000, 19.8242673828], [-90.0403000000, 19.7650906250], [-90.0403000000, 19.7059138672], [-90.0403000000, 19.6467371094], [-90.0403000000, 19.5875603516], [-90.0403000000, 19.5283835938], [-90.0403000000, 19.4692068359], [-90.0403000000, 19.4100300781], [-90.0403000000, 19.3508533203], [-90.0403000000, 19.2916765625], [-90.0403000000, 19.2324998047], [-90.0403000000, 19.1733230469], [-90.0403000000, 19.1141462891], [-90.0403000000, 19.0549695313], [-90.0403000000, 18.9957927734], [-90.0403000000, 18.9366160156], [-90.0403000000, 18.8774392578], [-90.0403000000, 18.8182625000], [-90.0403000000, 18.7590857422], [-90.0403000000, 18.6999089844], [-90.0403000000, 18.6407322266], [-90.0403000000, 18.5815554688], [-90.0403000000, 18.5223787109], [-90.0403000000, 18.4632019531], [-90.0403000000, 18.4040251953], [-90.0403000000, 18.3448484375], [-90.0403000000, 18.2856716797], [-90.0403000000, 18.2264949219], [-90.0403000000, 18.1673181641], [-90.0403000000, 18.1081414063], [-90.0403000000, 18.0489646484], [-90.0403000000, 17.9897878906], [-90.0403000000, 17.9306111328], [-90.0403000000, 17.8714343750], [-90.0403000000, 17.8122576172], [-90.0403000000, 17.7530808594], [-90.0403000000, 17.6939041016], [-90.0403000000, 17.6347273438], [-90.0403000000, 17.5755505859], [-90.0403000000, 17.5163738281], [-90.0403000000, 17.4571970703], [-90.0403000000, 17.3980203125], [-90.0403000000, 17.3388435547], [-90.0403000000, 17.2796667969], [-90.0403000000, 17.2204900391], [-90.0403000000, 17.1613132813], [-90.0403000000, 17.1021365234], [-90.0403000000, 17.0429597656], [-90.0403000000, 16.9837830078], [-90.0403000000, 16.9246062500], [-90.0403000000, 16.8654294922], [-90.0403000000, 16.8062527344], [-90.0403000000, 16.7470759766], [-90.0403000000, 16.6878992188], [-90.0403000000, 16.6287224609], [-90.0403000000, 16.5695457031], [-90.0403000000, 16.5103689453], [-90.0403000000, 16.4511921875], [-90.0403000000, 16.3920154297], [-90.0403000000, 16.3328386719], [-90.0403000000, 16.2736619141], [-90.0403000000, 16.2144851563], [-90.0403000000, 16.1553083984], [-90.0403000000, 16.0961316406], [-90.0403000000, 16.0369548828], [-90.0403000000, 15.9777781250], [-90.0403000000, 15.9186013672], [-90.0403000000, 15.8594246094], [-90.0403000000, 15.8002478516], [-90.0403000000, 15.7410710938], [-90.0403000000, 15.6818943359], [-90.0403000000, 15.6227175781], [-90.0403000000, 15.5635408203], [-90.0403000000, 15.5043640625], [-90.0403000000, 15.4451873047], [-90.0403000000, 15.3860105469], [-90.0403000000, 15.3268337891], [-90.0403000000, 15.2676570313], [-90.0403000000, 15.2084802734], [-90.0403000000, 15.1493035156], [-90.0403000000, 15.0901267578], [-90.0403000000, 15.0309500000], [-90.0403000000, 14.9717732422], [-90.0403000000, 14.9125964844], [-90.0403000000, 14.8534197266], [-90.0403000000, 14.7942429688], [-90.0403000000, 14.7350662109], [-90.0403000000, 14.6758894531], [-90.0403000000, 14.6167126953], [-90.0403000000, 14.5575359375], [-90.0403000000, 14.4983591797], [-90.0403000000, 14.4391824219], [-90.0403000000, 14.3800056641], [-90.0403000000, 14.3208289063], [-90.0403000000, 14.2616521484], [-90.0403000000, 14.2024753906], [-90.0403000000, 14.1432986328], [-90.0403000000, 14.0841218750], [-90.0403000000, 14.0249451172], [-90.0403000000, 13.9657683594], [-90.0403000000, 13.9065916016], [-90.0403000000, 13.8474148438], [-90.0403000000, 13.7882380859], [-90.0403000000, 13.7290613281], [-90.0403000000, 13.6698845703], [-90.0403000000, 13.6107078125]]);
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
import math
import time

from stl import mesh, Dimension

from tkinter import Tk     # from tkinter import Tk for Python 3.x
from tkinter.filedialog import askopenfilename
from mpl_toolkits.mplot3d import art3d
from matplotlib import pyplot as plt
import solid
import os
import ezdxf
import shapely.geometry as sg
import subprocess
from GUI import getSCADPath



def outputSTL(From, To, PATH=getSCADPath()):
    subprocess.Popen(PATH + " -o " + To + " " + From)
    while not os.path.exists(To):
        time.sleep(1)


def get_size(i):
    x_list = [int(a) for a in str(i)]
    return len(x_list)



class Model:
    def __init__(self, model, fileName, location, layer, thickness):
        self.location = location
        self.code = None
        self.fileName = fileName
        self.stl = fileName + ".stl"
        self.layer = layer
        self.thickness = thickness
        self.maxz = (layer+1)*thickness
        self.dxf = fileName + ".dxf"
        self.scad = fileName + ".scad"
        self.model = model
        self.center = None
        self.width = 10
        self.mesh = None
        self.useable_area = None


    def get_code(self):
        max_dim = 0.05
        max_array = 6

        num = int(self.fileName)
        nums = [int(a) for a in str(num)]
        nums.reverse()
        indices = nums
        length = len(nums)

        print(indices)
        t = 0
        i = 0
        cubes = []
        x = 0
        y = 0
        width = 0.01
        while x <= max_dim:
            while y <= max_dim:
                print(indices)
                if nums == []:
                    break
                if indices[0] != 0:
                    cubes.append(solid.translate([x, y, 0])(solid.cube(size=t / 1000 + 0.001)))
                    y += max_dim / (max_array - 1)
                    nums[0] = nums[0] - 1
                else:
                    indices.pop(0)
                    t += 1
                i += 1
            x += max_dim / (max_array - 1)
            y = 0

        outside = solid.translate([-width / 2, -width / 2])(solid.cube(max_dim + (length - 1) / 1000 + 0.001 + width))
        self.code = solid.difference()(outside, cubes)
        self.code = solid.projection(cut=True)(self.code)
        solid.scad_render_to_file(self.code, self.location + "/code.scad")
        outputSTL(From=self.location+"/code.scad", To=self.location+"code.dxf", PATH=getSCADPath())
        # os.system("toSTL.sh renders/code.scad renders/code.dxf")
        return self.location+"/code.dxf"

    def download(self, type):
        if type =="stl":
            print("generating:" + self.location+"/"+ self.fileName+".stl")
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".stl")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".stl")
        elif type == "dxf":
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".dxf")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".dxf")

    def render(self):
        solid.scad_render_to_file(self.model, self.location+"/"+ self.fileName+'.scad')
        while not os.path.exists(self.location+"/"+self.fileName+".scad"):
            time.sleep(1)

    def get_points(self):
        doc = ezdxf.readfile(filename=self.location+"/"+ self.fileName+".dxf")
        msp = doc.modelspace()
        i=0
        lists = []
        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return [start, end]

        for e in msp.query("LINE"):
            line = helper(e)
            if not lists:
                lists.append([line])
            else:
                if lists[i][len(lists)-1][1] != line[0]:
                    lists.append([line])
                    i+=1
                else:
                    lists[i].append(line)

    def get_points2(self, FILE):
        doc = ezdxf.readfile(filename=FILE)
        msp = doc.modelspace()
        i = 0
        lists = []

        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return (start, end)

        for e in msp.query("LINE"):
            line = helper(e)
            if lists==[]:
                lists.append([line])
            else:
                if lists[i][len(lists[i]) - 1][1] != line[0]:
                    lists.append([line])
                    i += 1
                else:
                    lists[i].append(line)
        return lists

    def add_code(self):
        dxf = solid.projection(cut=False)(self.model)
        offset = solid.offset(r=-0.1)(dxf)
        solid.scad_render_to_file(offset, self.location+'/offset.scad')
        os.system("toSTL.sh renders/offset.scad renders/offset.dxf")
        lines = self.get_points2("renders/offset.dxf")
        x = lines[0][0][0][0]
        y = lines[0][0][0][1]
        print(x)
        print(y)
        code = solid.translate([x,y,0])(self.code)
        code = solid.linear_extrude(height=999)(code)
        save = self.model
        self.model = solid.projection()(solid.difference()(self.model, code))
        self.render()
        self.download("dxf")
        self.model = save

    def add_label(self, pos):
        # num = 12
        # minx, maxx, miny, maxy, minz, maxz = self.find_minmax()
        maxz = self.maxz
        # label = solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.5, halign="center"))
        # i=minx
        # print("x-len: " + str(maxx-minx))
        # print(i)
        # inc = (maxx-minx)/num
        # while minx <= i <= maxx:
        #     label = solid.union()(solid.translate([i, 0, maxz - 0.2])(solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.25, halign="center"))), label)
        #     i += inc
        #
        # l = label
        #
        # i =miny
        # while miny<= i <= maxy:
        #     print("y inc")
        #     l = solid.union()(solid.translate([0, i, 0])(label), l)
        #     i += 0.5
        for i in str(self.fileName):
            cur = pos[0]
            label = solid.translate([pos[0][0], pos[0][1], self.maxz-0.2])(solid.linear_extrude(height=(self.thickness)/3)(solid.text(str(i), size=0.5, halign="center", valign="center")))
            self.model = solid.difference()(self.model, label)
            pos.append(pos.pop(0))
            while abs(cur[0]-pos[0][0])<0.5 and abs(cur[1]-pos[0][1])<0.5:
                pos.append(pos.pop(0))



    def Center(self):

        volume, cog, inertia = self.mesh.get_mass_properties()
        print("Volume                                  = {0}".format(volume))
        print("Position of the center of gravity (COG) = {0}".format(cog))
        m_centered = solid.translate([-cog[0], -cog[1], 0])(
            self.model
        )
        return m_centered

    def find_minmax(self):
        minx = maxx = miny = maxy = minz = maxz = None
        for p in self.mesh.points:
            # p contains (x, y, z)
            if minx is None:
                minx = p[Dimension.X]
                maxx = p[Dimension.X]
                miny = p[Dimension.Y]
                maxy = p[Dimension.Y]
                minz = p[Dimension.Z]
                maxz = p[Dimension.Z]
            else:
                maxx = max(p[Dimension.X], maxx)
                minx = min(p[Dimension.X], minx)
                maxy = max(p[Dimension.Y], maxy)
                miny = min(p[Dimension.Y], miny)
                maxz = max(p[Dimension.Z], maxz)
                minz = min(p[Dimension.Z], minz)
        lenx = maxx - minx
        leny = maxy - miny
        lenz = maxz - minz
        return minx, maxx, miny, maxy, minz, maxz

    # def generate_Mesh(self):
    #     self.mesh = mesh.Mesh.from_file(self.location + "/" + str(int(self.fileName)//8)+ "b.stl")

    def get_top(self):
        top = solid.projection(cut=True)(solid.translate([0,0,-1*self.thickness*(self.layer+1)])(self.model))
        useable_area = solid.offset(r=-0.45)(top)
        self.useable_area = useable_area
        solid.scad_render_to_file(self.useable_area, self.location+'/' + 'toptemp.scad')
        outputSTL(From=self.location+'/' + 'toptemp.scad', To=self.location+"/top"+ self.dxf)

        # os.system("toSTL.sh out/toptemp.scad renders/" + self.fileName + ".dxf")
        dxf = DXF(self.location+"/top"+ self.dxf)
        min_p=dxf.points[0][0]
        points_ordered = dxf.points
        i=0
        while i <= len(dxf.points)+1:
            while math.sqrt((dxf.points[0][0]-dxf.points[1][0])**2+(dxf.points[0][1]-dxf.points[1][1])**2) > 0.1:
                dxf.points.insert(1, [(dxf.points[0][0]+dxf.points[1][0])/2, (dxf.points[0][1]+dxf.points[1][1])/2])
                i = i-1
            dxf.points.append(dxf.points.pop(0))
            i+=1
        for i in range(len(dxf.points)):
            dxf.points.append(dxf.points.pop(0))
            if dxf.points[0][0] < min_p:
                min_p = dxf.points[0][0]
                points_ordered = dxf.points.copy()
        dxf.points = points_ordered.copy()

        print(dxf.points)
        self.add_label(dxf.points)

class DXF:
    def __init__(self, file):
        self.file = file
        self.Lines = []
        self.points = []
        doc = ezdxf.readfile(self.file)
        msp = doc.modelspace()
        for e in msp:
            if e.dxftype() == "LINE":
                self.Lines.append(e)
                self.points.append([e.dxf.start[0], e.dxf.start[1]])
        # self.points.append([self.Lines[-1].dxf.end[0], self.Lines[-1].dxf.end[1]])
        self.area = None
        self.center = None
        self.polygon = sg.Polygon(self.points)

    def get_area(self):
        self.area = self.polygon.area
        return self.area

    def get_center(self):
        x_sum = 0
        y_sum =0
        for i in self.points:
            x_sum += i[0]
            y_sum += i[1]
        x_c = x_sum/len(self.points)
        y_c = y_sum/len(self.points)
        return (x_c, y_c)

    def split(self, maxdim):
        splits = []
        length = 0
        pieces = [[]]
        prev = self.points[0]
        for j in self.points:
            length = length + math.sqrt((prev[0]-j[0])**2+(prev[1]-j[1])**2)
            if length >= maxdim:
                pieces[-1].append(j)
                pieces.append([])
                length = 0
            pieces[-1].append(j)
            prev = j
        for j in pieces:
            j.insert(0, [0,0])
            piece = solid.linear_extrude(height=10)(solid.polygon(j))
            splits.append(piece)
        return splits
    def refine_points(self):
        i=0
        while i <= len(self.points)+1:
            while math.sqrt((self.points[0][0]-self.points[1][0])**2+(self.points[0][1]-self.points[1][1])**2) > 0.1:
                self.points.insert(1, [(self.points[0][0]+self.points[1][0])/2, (self.points[0][1]+self.points[1][1])/2])
                i = i-1
            self.points.append(self.points.pop(0))
            i+=1


if __name__== "__main__":
    test = DXF("C:/Users/Daniel/Documents/repos/Shell_Maker/output/0top_slice.dxf")
    test.refine_points()
    k = test.split(48)
    for i in range(len(k)):
        solid.scad_render_to_file(k[i], str(i) + ".scad")


 
 
************************************************/
