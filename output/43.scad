// Generated by SolidPython 1.1.3 on 2024-05-19 23:41:48


intersection() {
	difference() {
		intersection() {
			translate(v = [0, 0, 0]) {
				import(file = "CE3E3V2_Bottom_shell.stl", origin = [0, 0]);
			}
			translate(v = [-90.04029846191406, -32.690147399902344, 10]) {
				cube(size = [180.0806, 65.380295, 2]);
			}
		}
		linear_extrude(height = 999) {
			offset(r = -1) {
				import(file = "C:/Users/Daniel/Documents/repos/Shell_Maker/output/5top_slice.dxf", origin = [0, 0]);
			}
		}
	}
	translate(v = [0, 0, 10]) {
		linear_extrude(height = 10) {
			polygon(points = [[0, 0], [2.0274090000, 26.4700250000], [1.9346810625, 26.4557546875], [1.8419531250, 26.4414843750], [1.7492251875, 26.4272140625], [1.6564972500, 26.4129437500], [1.5637693125, 26.3986734375], [1.4710413750, 26.3844031250], [1.3783134375, 26.3701328125], [1.2855855000, 26.3558625000], [1.1928575625, 26.3415921875], [1.1001296250, 26.3273218750], [1.0074016875, 26.3130515625], [0.9146737500, 26.2987812500], [0.8219458125, 26.2845109375], [0.7292178750, 26.2702406250], [0.6364899375, 26.2559703125], [0.5437620000, 26.2417000000], [0.4883716250, 26.2327625000], [0.4329812500, 26.2238250000], [0.3775908750, 26.2148875000], [0.3222005000, 26.2059500000], [0.2668101250, 26.1970125000], [0.2114197500, 26.1880750000], [0.1560293750, 26.1791375000], [0.1006390000, 26.1702000000], [0.0452486250, 26.1612625000], [-0.0101417500, 26.1523250000], [-0.0655321250, 26.1433875000], [-0.1209225000, 26.1344500000], [-0.1763128750, 26.1255125000], [-0.2317032500, 26.1165750000], [-0.2870936250, 26.1076375000], [-0.3424840000, 26.0987000000], [-0.4034805000, 26.0884187500], [-0.4644770000, 26.0781375000], [-0.5254735000, 26.0678562500], [-0.5864700000, 26.0575750000], [-0.6474665000, 26.0472937500], [-0.7084630000, 26.0370125000], [-0.7694595000, 26.0267312500], [-0.8304560000, 26.0164500000], [-0.8914525000, 26.0061687500], [-0.9524490000, 25.9958875000], [-1.0134455000, 25.9856062500], [-1.0744420000, 25.9753250000], [-1.1354385000, 25.9650437500], [-1.1964350000, 25.9547625000], [-1.2574315000, 25.9444812500], [-1.3184280000, 25.9342000000], [-1.3794245000, 25.9239187500], [-1.4404210000, 25.9136375000], [-1.5014175000, 25.9033562500], [-1.5624140000, 25.8930750000], [-1.6234105000, 25.8827937500], [-1.6844070000, 25.8725125000], [-1.7454035000, 25.8622312500], [-1.8064000000, 25.8519500000], [-1.8673965000, 25.8416687500], [-1.9283930000, 25.8313875000], [-1.9893895000, 25.8211062500], [-2.0503860000, 25.8108250000], [-2.1113825000, 25.8005437500], [-2.1723790000, 25.7902625000], [-2.2333755000, 25.7799812500], [-2.2943720000, 25.7697000000], [-2.3553685000, 25.7594187500], [-2.4163650000, 25.7491375000], [-2.4773615000, 25.7388562500], [-2.5383580000, 25.7285750000], [-2.5993545000, 25.7182937500], [-2.6603510000, 25.7080125000], [-2.7213475000, 25.6977312500], [-2.7823440000, 25.6874500000], [-2.8433405000, 25.6771687500], [-2.9043370000, 25.6668875000], [-2.9653335000, 25.6566062500], [-3.0263300000, 25.6463250000], [-3.0873265000, 25.6360437500], [-3.1483230000, 25.6257625000], [-3.2093195000, 25.6154812500], [-3.2703160000, 25.6052000000], [-3.3313125000, 25.5949187500], [-3.3923090000, 25.5846375000], [-3.4533055000, 25.5743562500], [-3.5143020000, 25.5640750000], [-3.5752985000, 25.5537937500], [-3.6362950000, 25.5435125000], [-3.6972915000, 25.5332312500], [-3.7582880000, 25.5229500000], [-3.8192845000, 25.5126687500], [-3.8802810000, 25.5023875000], [-3.9412775000, 25.4921062500], [-4.0022740000, 25.4818250000], [-4.0632705000, 25.4715437500], [-4.1242670000, 25.4612625000], [-4.1852635000, 25.4509812500], [-4.2462600000, 25.4407000000], [-4.3306912500, 25.4256875000], [-4.4151225000, 25.4106750000], [-4.4995537500, 25.3956625000], [-4.5839850000, 25.3806500000], [-4.6684162500, 25.3656375000], [-4.7528475000, 25.3506250000], [-4.8372787500, 25.3356125000], [-4.9217100000, 25.3206000000], [-5.0155098437, 25.3030296875], [-5.1093096875, 25.2854593750], [-5.2031095312, 25.2678890625], [-5.2969093750, 25.2503187500], [-5.3907092188, 25.2327484375], [-5.4845090625, 25.2151781250], [-5.5783089062, 25.1976078125], [-5.6721087500, 25.1800375000], [-5.7659085937, 25.1624671875], [-5.8597084375, 25.1448968750], [-5.9535082813, 25.1273265625], [-6.0473081250, 25.1097562500], [-6.1411079687, 25.0921859375], [-6.2349078125, 25.0746156250], [-6.3287076562, 25.0570453125], [-6.4225075000, 25.0394750000], [-6.5163073438, 25.0219046875], [-6.6101071875, 25.0043343750], [-6.7039070312, 24.9867640625], [-6.7977068750, 24.9691937500], [-6.8915067187, 24.9516234375], [-6.9853065625, 24.9340531250], [-7.0791064063, 24.9164828125], [-7.1729062500, 24.8989125000], [-7.2667060937, 24.8813421875], [-7.3605059375, 24.8637718750], [-7.4543057812, 24.8462015625], [-7.5481056250, 24.8286312500], [-7.6419054688, 24.8110609375], [-7.7357053125, 24.7934906250], [-7.8295051562, 24.7759203125], [-7.9233050000, 24.7583500000], [-8.0171048437, 24.7407796875], [-8.1109046875, 24.7232093750], [-8.2047045312, 24.7056390625], [-8.2985043750, 24.6880687500], [-8.3923042188, 24.6704984375], [-8.4861040625, 24.6529281250], [-8.5799039062, 24.6353578125], [-8.6737037500, 24.6177875000], [-8.7675035937, 24.6002171875], [-8.8613034375, 24.5826468750], [-8.9551032812, 24.5650765625], [-9.0489031250, 24.5475062500], [-9.1427029687, 24.5299359375], [-9.2365028125, 24.5123656250], [-9.3303026562, 24.4947953125], [-9.4241025000, 24.4772250000], [-9.5179023438, 24.4596546875], [-9.6117021875, 24.4420843750], [-9.7055020312, 24.4245140625], [-9.7993018750, 24.4069437500], [-9.8931017187, 24.3893734375], [-9.9869015625, 24.3718031250], [-10.0807014062, 24.3542328125], [-10.1745012500, 24.3366625000], [-10.2683010937, 24.3190921875], [-10.3621009375, 24.3015218750], [-10.4559007812, 24.2839515625], [-10.5497006250, 24.2663812500], [-10.6435004688, 24.2488109375], [-10.7373003125, 24.2312406250], [-10.8311001562, 24.2136703125], [-10.9249000000, 24.1961000000], [-10.9743015625, 24.1864984375], [-11.0237031250, 24.1768968750], [-11.0731046875, 24.1672953125], [-11.1225062500, 24.1576937500], [-11.1719078125, 24.1480921875], [-11.2213093750, 24.1384906250], [-11.2707109375, 24.1288890625], [-11.3201125000, 24.1192875000], [-11.3695140625, 24.1096859375], [-11.4189156250, 24.1000843750], [-11.4683171875, 24.0904828125], [-11.5177187500, 24.0808812500], [-11.5671203125, 24.0712796875], [-11.6165218750, 24.0616781250], [-11.6659234375, 24.0520765625], [-11.7153250000, 24.0424750000], [-11.7647265625, 24.0328734375], [-11.8141281250, 24.0232718750], [-11.8635296875, 24.0136703125], [-11.9129312500, 24.0040687500], [-11.9623328125, 23.9944671875], [-12.0117343750, 23.9848656250], [-12.0611359375, 23.9752640625], [-12.1105375000, 23.9656625000], [-12.1599390625, 23.9560609375], [-12.2093406250, 23.9464593750], [-12.2587421875, 23.9368578125], [-12.3081437500, 23.9272562500], [-12.3575453125, 23.9176546875], [-12.4069468750, 23.9080531250], [-12.4563484375, 23.8984515625], [-12.5057500000, 23.8888500000], [-12.5551515625, 23.8792484375], [-12.6045531250, 23.8696468750], [-12.6539546875, 23.8600453125], [-12.7033562500, 23.8504437500], [-12.7527578125, 23.8408421875], [-12.8021593750, 23.8312406250], [-12.8515609375, 23.8216390625], [-12.9009625000, 23.8120375000], [-12.9503640625, 23.8024359375], [-12.9997656250, 23.7928343750], [-13.0491671875, 23.7832328125], [-13.0985687500, 23.7736312500], [-13.1479703125, 23.7640296875], [-13.1973718750, 23.7544281250], [-13.2467734375, 23.7448265625], [-13.2961750000, 23.7352250000], [-13.3455765625, 23.7256234375], [-13.3949781250, 23.7160218750], [-13.4443796875, 23.7064203125], [-13.4937812500, 23.6968187500], [-13.5431828125, 23.6872171875], [-13.5925843750, 23.6776156250], [-13.6419859375, 23.6680140625], [-13.6913875000, 23.6584125000], [-13.7407890625, 23.6488109375], [-13.7901906250, 23.6392093750], [-13.8395921875, 23.6296078125], [-13.8889937500, 23.6200062500], [-13.9383953125, 23.6104046875], [-13.9877968750, 23.6008031250], [-14.0371984375, 23.5912015625], [-14.0866000000, 23.5816000000], [-14.1597000000, 23.5666000000], [-14.2321765625, 23.5513375000], [-14.3046531250, 23.5360750000], [-14.3771296875, 23.5208125000], [-14.4496062500, 23.5055500000], [-14.5220828125, 23.4902875000], [-14.5945593750, 23.4750250000], [-14.6670359375, 23.4597625000], [-14.7395125000, 23.4445000000], [-14.8119890625, 23.4292375000], [-14.8844656250, 23.4139750000], [-14.9569421875, 23.3987125000], [-15.0294187500, 23.3834500000], [-15.1018953125, 23.3681875000], [-15.1743718750, 23.3529250000], [-15.2468484375, 23.3376625000], [-15.3193250000, 23.3224000000], [-15.3918015625, 23.3071375000], [-15.4642781250, 23.2918750000], [-15.5367546875, 23.2766125000], [-15.6092312500, 23.2613500000], [-15.6817078125, 23.2460875000], [-15.7541843750, 23.2308250000], [-15.8266609375, 23.2155625000], [-15.8991375000, 23.2003000000], [-15.9716140625, 23.1850375000], [-16.0440906250, 23.1697750000], [-16.1165671875, 23.1545125000], [-16.1890437500, 23.1392500000], [-16.2615203125, 23.1239875000], [-16.3339968750, 23.1087250000], [-16.4064734375, 23.0934625000], [-16.4789500000, 23.0782000000], [-16.5514265625, 23.0629375000], [-16.6239031250, 23.0476750000], [-16.6963796875, 23.0324125000], [-16.7688562500, 23.0171500000], [-16.8413328125, 23.0018875000], [-16.9138093750, 22.9866250000], [-16.9862859375, 22.9713625000], [-17.0587625000, 22.9561000000], [-17.1312390625, 22.9408375000], [-17.2037156250, 22.9255750000], [-17.2761921875, 22.9103125000], [-17.3486687500, 22.8950500000], [-17.4211453125, 22.8797875000], [-17.4936218750, 22.8645250000], [-17.5660984375, 22.8492625000], [-17.6385750000, 22.8340000000], [-17.7110515625, 22.8187375000], [-17.7835281250, 22.8034750000], [-17.8560046875, 22.7882125000], [-17.9284812500, 22.7729500000], [-18.0009578125, 22.7576875000], [-18.0734343750, 22.7424250000], [-18.1459109375, 22.7271625000], [-18.2183875000, 22.7119000000], [-18.2908640625, 22.6966375000], [-18.3633406250, 22.6813750000], [-18.4358171875, 22.6661125000], [-18.5082937500, 22.6508500000], [-18.5807703125, 22.6355875000], [-18.6532468750, 22.6203250000], [-18.7257234375, 22.6050625000], [-18.7982000000, 22.5898000000], [-18.8110000000, 22.5870000000], [-18.9053734375, 22.5649500000], [-18.9997468750, 22.5429000000], [-19.0941203125, 22.5208500000], [-19.1884937500, 22.4988000000], [-19.2828671875, 22.4767500000], [-19.3772406250, 22.4547000000], [-19.4716140625, 22.4326500000], [-19.5659875000, 22.4106000000], [-19.6603609375, 22.3885500000], [-19.7547343750, 22.3665000000], [-19.8491078125, 22.3444500000], [-19.9434812500, 22.3224000000], [-20.0378546875, 22.3003500000], [-20.1322281250, 22.2783000000], [-20.2266015625, 22.2562500000], [-20.3209750000, 22.2342000000], [-20.4153484375, 22.2121500000], [-20.5097218750, 22.1901000000], [-20.6040953125, 22.1680500000], [-20.6984687500, 22.1460000000], [-20.7928421875, 22.1239500000], [-20.8872156250, 22.1019000000], [-20.9815890625, 22.0798500000], [-21.0759625000, 22.0578000000], [-21.1703359375, 22.0357500000], [-21.2647093750, 22.0137000000], [-21.3590828125, 21.9916500000], [-21.4534562500, 21.9696000000], [-21.5478296875, 21.9475500000], [-21.6422031250, 21.9255000000], [-21.7365765625, 21.9034500000], [-21.8309500000, 21.8814000000], [-21.9253234375, 21.8593500000], [-22.0196968750, 21.8373000000], [-22.1140703125, 21.8152500000], [-22.2084437500, 21.7932000000], [-22.3028171875, 21.7711500000], [-22.3971906250, 21.7491000000], [-22.4915640625, 21.7270500000], [-22.5859375000, 21.7050000000], [-22.6803109375, 21.6829500000], [-22.7746843750, 21.6609000000], [-22.8690578125, 21.6388500000], [-22.9634312500, 21.6168000000], [-23.0578046875, 21.5947500000], [-23.1521781250, 21.5727000000], [-23.2465515625, 21.5506500000], [-23.3409250000, 21.5286000000], [-23.4352984375, 21.5065500000], [-23.5296718750, 21.4845000000], [-23.6240453125, 21.4624500000], [-23.7184187500, 21.4404000000], [-23.8127921875, 21.4183500000], [-23.9071656250, 21.3963000000], [-24.0015390625, 21.3742500000], [-24.0959125000, 21.3522000000], [-24.1902859375, 21.3301500000], [-24.2846593750, 21.3081000000], [-24.3790328125, 21.2860500000], [-24.4734062500, 21.2640000000], [-24.5677796875, 21.2419500000], [-24.6621531250, 21.2199000000], [-24.7565265625, 21.1978500000], [-24.8509000000, 21.1758000000], [-24.9468812500, 21.1533562500], [-25.0428625000, 21.1309125000], [-25.1388437500, 21.1084687500], [-25.2348250000, 21.0860250000], [-25.3308062500, 21.0635812500], [-25.4267875000, 21.0411375000], [-25.5227687500, 21.0186937500], [-25.6187500000, 20.9962500000], [-25.7147312500, 20.9738062500], [-25.8107125000, 20.9513625000], [-25.9066937500, 20.9289187500], [-26.0026750000, 20.9064750000], [-26.0986562500, 20.8840312500], [-26.1946375000, 20.8615875000], [-26.2906187500, 20.8391437500], [-26.3866000000, 20.8167000000], [-26.4466281250, 20.8026656250], [-26.5066562500, 20.7886312500], [-26.5666843750, 20.7745968750], [-26.6267125000, 20.7605625000], [-26.6867406250, 20.7465281250], [-26.7467687500, 20.7324937500], [-26.8067968750, 20.7184593750], [-26.8668250000, 20.7044250000], [-26.9268531250, 20.6903906250], [-26.9868812500, 20.6763562500], [-27.0469093750, 20.6623218750], [-27.1069375000, 20.6482875000], [-27.1669656250, 20.6342531250], [-27.2269937500, 20.6202187500], [-27.2870218750, 20.6061843750], [-27.3470500000, 20.5921500000], [-27.4070781250, 20.5781156250], [-27.4671062500, 20.5640812500], [-27.5271343750, 20.5500468750], [-27.5871625000, 20.5360125000], [-27.6471906250, 20.5219781250], [-27.7072187500, 20.5079437500], [-27.7672468750, 20.4939093750], [-27.8272750000, 20.4798750000], [-27.8873031250, 20.4658406250], [-27.9473312500, 20.4518062500], [-28.0073593750, 20.4377718750], [-28.0673875000, 20.4237375000], [-28.1274156250, 20.4097031250], [-28.1874437500, 20.3956687500], [-28.2474718750, 20.3816343750], [-28.3075000000, 20.3676000000], [-28.3675281250, 20.3535656250], [-28.4275562500, 20.3395312500], [-28.4875843750, 20.3254968750], [-28.5476125000, 20.3114625000], [-28.6076406250, 20.2974281250], [-28.6676687500, 20.2833937500], [-28.7276968750, 20.2693593750], [-28.7877250000, 20.2553250000], [-28.8477531250, 20.2412906250], [-28.9077812500, 20.2272562500], [-28.9678093750, 20.2132218750], [-29.0278375000, 20.1991875000], [-29.0878656250, 20.1851531250], [-29.1478937500, 20.1711187500], [-29.2079218750, 20.1570843750], [-29.2679500000, 20.1430500000], [-29.3279781250, 20.1290156250], [-29.3880062500, 20.1149812500], [-29.4480343750, 20.1009468750], [-29.5080625000, 20.0869125000], [-29.5680906250, 20.0728781250], [-29.6281187500, 20.0588437500], [-29.6881468750, 20.0448093750], [-29.7481750000, 20.0307750000], [-29.8082031250, 20.0167406250], [-29.8682312500, 20.0027062500], [-29.9282593750, 19.9886718750], [-29.9882875000, 19.9746375000], [-30.0483156250, 19.9606031250], [-30.1083437500, 19.9465687500], [-30.1683718750, 19.9325343750], [-30.2284000000, 19.9185000000], [-30.2943500000, 19.9015750000], [-30.3603000000, 19.8846500000], [-30.4262500000, 19.8677250000], [-30.4922000000, 19.8508000000], [-30.5581500000, 19.8338750000], [-30.6241000000, 19.8169500000], [-30.6900500000, 19.8000250000], [-30.7560000000, 19.7831000000], [-30.8219500000, 19.7661750000], [-30.8879000000, 19.7492500000], [-30.9538500000, 19.7323250000], [-31.0198000000, 19.7154000000], [-31.0857500000, 19.6984750000], [-31.1517000000, 19.6815500000], [-31.2176500000, 19.6646250000], [-31.2836000000, 19.6477000000], [-31.3495500000, 19.6307750000], [-31.4155000000, 19.6138500000], [-31.4814500000, 19.5969250000], [-31.5474000000, 19.5800000000], [-31.6133500000, 19.5630750000], [-31.6793000000, 19.5461500000], [-31.7452500000, 19.5292250000], [-31.8112000000, 19.5123000000], [-31.8771500000, 19.4953750000], [-31.9431000000, 19.4784500000], [-32.0090500000, 19.4615250000], [-32.0750000000, 19.4446000000], [-32.1409500000, 19.4276750000], [-32.2069000000, 19.4107500000], [-32.2728500000, 19.3938250000], [-32.3388000000, 19.3769000000], [-32.4047500000, 19.3599750000], [-32.4707000000, 19.3430500000], [-32.5366500000, 19.3261250000], [-32.6026000000, 19.3092000000], [-32.6685500000, 19.2922750000], [-32.7345000000, 19.2753500000], [-32.8004500000, 19.2584250000], [-32.8664000000, 19.2415000000], [-32.9323500000, 19.2245750000], [-32.9983000000, 19.2076500000], [-33.0642500000, 19.1907250000], [-33.1302000000, 19.1738000000], [-33.1961500000, 19.1568750000], [-33.2621000000, 19.1399500000], [-33.3280500000, 19.1230250000], [-33.3940000000, 19.1061000000], [-33.4599500000, 19.0891750000], [-33.5259000000, 19.0722500000], [-33.5918500000, 19.0553250000], [-33.6578000000, 19.0384000000], [-33.7237500000, 19.0214750000], [-33.7897000000, 19.0045500000], [-33.8556500000, 18.9876250000], [-33.9216000000, 18.9707000000], [-33.9875500000, 18.9537750000], [-34.0535000000, 18.9368500000], [-34.1194500000, 18.9199250000], [-34.1854000000, 18.9030000000], [-34.2513500000, 18.8860750000], [-34.3173000000, 18.8691500000], [-34.3832500000, 18.8522250000], [-34.4492000000, 18.8353000000], [-34.5358500000, 18.8124250000], [-34.6225000000, 18.7895500000], [-34.7091500000, 18.7666750000], [-34.7958000000, 18.7438000000], [-34.8552531250, 18.7275250000], [-34.9147062500, 18.7112500000], [-34.9741593750, 18.6949750000], [-35.0336125000, 18.6787000000], [-35.0930656250, 18.6624250000], [-35.1525187500, 18.6461500000], [-35.2119718750, 18.6298750000], [-35.2714250000, 18.6136000000], [-35.3308781250, 18.5973250000], [-35.3903312500, 18.5810500000], [-35.4497843750, 18.5647750000], [-35.5092375000, 18.5485000000], [-35.5686906250, 18.5322250000], [-35.6281437500, 18.5159500000], [-35.6875968750, 18.4996750000], [-35.7470500000, 18.4834000000], [-35.8065031250, 18.4671250000], [-35.8659562500, 18.4508500000], [-35.9254093750, 18.4345750000], [-35.9848625000, 18.4183000000], [-36.0443156250, 18.4020250000], [-36.1037687500, 18.3857500000], [-36.1632218750, 18.3694750000], [-36.2226750000, 18.3532000000], [-36.2821281250, 18.3369250000], [-36.3415812500, 18.3206500000], [-36.4010343750, 18.3043750000], [-36.4604875000, 18.2881000000], [-36.5199406250, 18.2718250000], [-36.5793937500, 18.2555500000], [-36.6388468750, 18.2392750000], [-36.6983000000, 18.2230000000], [-36.7577531250, 18.2067250000], [-36.8172062500, 18.1904500000], [-36.8766593750, 18.1741750000], [-36.9361125000, 18.1579000000], [-36.9955656250, 18.1416250000], [-37.0550187500, 18.1253500000], [-37.1144718750, 18.1090750000], [-37.1739250000, 18.0928000000], [-37.2333781250, 18.0765250000], [-37.2928312500, 18.0602500000], [-37.3522843750, 18.0439750000], [-37.4117375000, 18.0277000000], [-37.4711906250, 18.0114250000], [-37.5306437500, 17.9951500000], [-37.5900968750, 17.9788750000], [-37.6495500000, 17.9626000000], [-37.7090031250, 17.9463250000], [-37.7684562500, 17.9300500000], [-37.8279093750, 17.9137750000], [-37.8873625000, 17.8975000000], [-37.9468156250, 17.8812250000], [-38.0062687500, 17.8649500000], [-38.0657218750, 17.8486750000], [-38.1251750000, 17.8324000000], [-38.1846281250, 17.8161250000], [-38.2440812500, 17.7998500000], [-38.3035343750, 17.7835750000], [-38.3629875000, 17.7673000000], [-38.4224406250, 17.7510250000], [-38.4818937500, 17.7347500000], [-38.5413468750, 17.7184750000], [-38.6008000000, 17.7022000000], [-38.6530250000, 17.6878437500], [-38.7052500000, 17.6734875000], [-38.7574750000, 17.6591312500], [-38.8097000000, 17.6447750000], [-38.8619250000, 17.6304187500], [-38.9141500000, 17.6160625000], [-38.9663750000, 17.6017062500], [-39.0186000000, 17.5873500000], [-39.0708250000, 17.5729937500], [-39.1230500000, 17.5586375000], [-39.1752750000, 17.5442812500], [-39.2275000000, 17.5299250000], [-39.2797250000, 17.5155687500], [-39.3319500000, 17.5012125000], [-39.3841750000, 17.4868562500], [-39.4364000000, 17.4725000000], [-39.4939250000, 17.4562484375], [-39.5514500000, 17.4399968750], [-39.6089750000, 17.4237453125], [-39.6665000000, 17.4074937500], [-39.7240250000, 17.3912421875], [-39.7815500000, 17.3749906250], [-39.8390750000, 17.3587390625], [-39.8966000000, 17.3424875000], [-39.9541250000, 17.3262359375], [-40.0116500000, 17.3099843750], [-40.0691750000, 17.2937328125], [-40.1267000000, 17.2774812500], [-40.1842250000, 17.2612296875], [-40.2417500000, 17.2449781250], [-40.2992750000, 17.2287265625], [-40.3568000000, 17.2124750000], [-40.4143250000, 17.1962234375], [-40.4718500000, 17.1799718750], [-40.5293750000, 17.1637203125], [-40.5869000000, 17.1474687500], [-40.6444250000, 17.1312171875], [-40.7019500000, 17.1149656250], [-40.7594750000, 17.0987140625], [-40.8170000000, 17.0824625000], [-40.8745250000, 17.0662109375], [-40.9320500000, 17.0499593750], [-40.9895750000, 17.0337078125], [-41.0471000000, 17.0174562500], [-41.1046250000, 17.0012046875], [-41.1621500000, 16.9849531250], [-41.2196750000, 16.9687015625], [-41.2772000000, 16.9524500000], [-41.3347250000, 16.9361984375], [-41.3922500000, 16.9199468750], [-41.4497750000, 16.9036953125], [-41.5073000000, 16.8874437500], [-41.5648250000, 16.8711921875], [-41.6223500000, 16.8549406250], [-41.6798750000, 16.8386890625], [-41.7374000000, 16.8224375000], [-41.7949250000, 16.8061859375], [-41.8524500000, 16.7899343750], [-41.9099750000, 16.7736828125], [-41.9675000000, 16.7574312500], [-42.0250250000, 16.7411796875], [-42.0825500000, 16.7249281250], [-42.1400750000, 16.7086765625], [-42.1976000000, 16.6924250000], [-42.2551250000, 16.6761734375], [-42.3126500000, 16.6599218750], [-42.3701750000, 16.6436703125], [-42.4277000000, 16.6274187500], [-42.4852250000, 16.6111671875], [-42.5427500000, 16.5949156250], [-42.6002750000, 16.5786640625], [-42.6578000000, 16.5624125000], [-42.7153250000, 16.5461609375], [-42.7728500000, 16.5299093750], [-42.8303750000, 16.5136578125], [-42.8879000000, 16.4974062500], [-42.9454250000, 16.4811546875], [-43.0029500000, 16.4649031250], [-43.0604750000, 16.4486515625], [-43.1180000000, 16.4324000000], [-43.2130125000, 16.4046718750], [-43.3080250000, 16.3769437500], [-43.4030375000, 16.3492156250], [-43.4980500000, 16.3214875000], [-43.5930625000, 16.2937593750], [-43.6880750000, 16.2660312500], [-43.7830875000, 16.2383031250], [-43.8781000000, 16.2105750000], [-43.9731125000, 16.1828468750], [-44.0681250000, 16.1551187500], [-44.1631375000, 16.1273906250], [-44.2581500000, 16.0996625000], [-44.3531625000, 16.0719343750], [-44.4481750000, 16.0442062500], [-44.5431875000, 16.0164781250], [-44.6382000000, 15.9887500000], [-44.7332125000, 15.9610218750], [-44.8282250000, 15.9332937500]]);
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
import math
import time

from stl import mesh, Dimension

from tkinter import Tk     # from tkinter import Tk for Python 3.x
from tkinter.filedialog import askopenfilename
from mpl_toolkits.mplot3d import art3d
from matplotlib import pyplot as plt
import solid
import os
import ezdxf
import shapely.geometry as sg
import subprocess
from GUI import getSCADPath



def outputSTL(From, To, PATH=getSCADPath()):
    subprocess.Popen(PATH + " -o " + To + " " + From)
    while not os.path.exists(To):
        time.sleep(1)


def get_size(i):
    x_list = [int(a) for a in str(i)]
    return len(x_list)



class Model:
    def __init__(self, model, fileName, location, layer, thickness):
        self.location = location
        self.code = None
        self.fileName = fileName
        self.stl = fileName + ".stl"
        self.layer = layer
        self.thickness = thickness
        self.maxz = (layer+1)*thickness
        self.dxf = fileName + ".dxf"
        self.scad = fileName + ".scad"
        self.model = model
        self.center = None
        self.width = 10
        self.mesh = None
        self.useable_area = None


    def get_code(self):
        max_dim = 0.05
        max_array = 6

        num = int(self.fileName)
        nums = [int(a) for a in str(num)]
        nums.reverse()
        indices = nums
        length = len(nums)

        print(indices)
        t = 0
        i = 0
        cubes = []
        x = 0
        y = 0
        width = 0.01
        while x <= max_dim:
            while y <= max_dim:
                print(indices)
                if nums == []:
                    break
                if indices[0] != 0:
                    cubes.append(solid.translate([x, y, 0])(solid.cube(size=t / 1000 + 0.001)))
                    y += max_dim / (max_array - 1)
                    nums[0] = nums[0] - 1
                else:
                    indices.pop(0)
                    t += 1
                i += 1
            x += max_dim / (max_array - 1)
            y = 0

        outside = solid.translate([-width / 2, -width / 2])(solid.cube(max_dim + (length - 1) / 1000 + 0.001 + width))
        self.code = solid.difference()(outside, cubes)
        self.code = solid.projection(cut=True)(self.code)
        solid.scad_render_to_file(self.code, self.location + "/code.scad")
        outputSTL(From=self.location+"/code.scad", To=self.location+"code.dxf", PATH=getSCADPath())
        # os.system("toSTL.sh renders/code.scad renders/code.dxf")
        return self.location+"/code.dxf"

    def download(self, type):
        if type =="stl":
            print("generating:" + self.location+"/"+ self.fileName+".stl")
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".stl")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".stl")
        elif type == "dxf":
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".dxf")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".dxf")

    def render(self):
        solid.scad_render_to_file(self.model, self.location+"/"+ self.fileName+'.scad')
        while not os.path.exists(self.location+"/"+self.fileName+".scad"):
            time.sleep(1)

    def get_points(self):
        doc = ezdxf.readfile(filename=self.location+"/"+ self.fileName+".dxf")
        msp = doc.modelspace()
        i=0
        lists = []
        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return [start, end]

        for e in msp.query("LINE"):
            line = helper(e)
            if not lists:
                lists.append([line])
            else:
                if lists[i][len(lists)-1][1] != line[0]:
                    lists.append([line])
                    i+=1
                else:
                    lists[i].append(line)

    def get_points2(self, FILE):
        doc = ezdxf.readfile(filename=FILE)
        msp = doc.modelspace()
        i = 0
        lists = []

        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return (start, end)

        for e in msp.query("LINE"):
            line = helper(e)
            if lists==[]:
                lists.append([line])
            else:
                if lists[i][len(lists[i]) - 1][1] != line[0]:
                    lists.append([line])
                    i += 1
                else:
                    lists[i].append(line)
        return lists

    def add_code(self):
        dxf = solid.projection(cut=False)(self.model)
        offset = solid.offset(r=-0.1)(dxf)
        solid.scad_render_to_file(offset, self.location+'/offset.scad')
        os.system("toSTL.sh renders/offset.scad renders/offset.dxf")
        lines = self.get_points2("renders/offset.dxf")
        x = lines[0][0][0][0]
        y = lines[0][0][0][1]
        print(x)
        print(y)
        code = solid.translate([x,y,0])(self.code)
        code = solid.linear_extrude(height=999)(code)
        save = self.model
        self.model = solid.projection()(solid.difference()(self.model, code))
        self.render()
        self.download("dxf")
        self.model = save

    def add_label(self, pos):
        # num = 12
        # minx, maxx, miny, maxy, minz, maxz = self.find_minmax()
        maxz = self.maxz
        # label = solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.5, halign="center"))
        # i=minx
        # print("x-len: " + str(maxx-minx))
        # print(i)
        # inc = (maxx-minx)/num
        # while minx <= i <= maxx:
        #     label = solid.union()(solid.translate([i, 0, maxz - 0.2])(solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.25, halign="center"))), label)
        #     i += inc
        #
        # l = label
        #
        # i =miny
        # while miny<= i <= maxy:
        #     print("y inc")
        #     l = solid.union()(solid.translate([0, i, 0])(label), l)
        #     i += 0.5
        for i in str(self.fileName):
            cur = pos[0]
            label = solid.translate([pos[0][0], pos[0][1], self.maxz-0.2])(solid.linear_extrude(height=(self.thickness)/3)(solid.text(str(i), size=0.5, halign="center", valign="center")))
            self.model = solid.difference()(self.model, label)
            pos.append(pos.pop(0))
            while abs(cur[0]-pos[0][0])<0.5 and abs(cur[1]-pos[0][1])<0.5:
                pos.append(pos.pop(0))



    def Center(self):

        volume, cog, inertia = self.mesh.get_mass_properties()
        print("Volume                                  = {0}".format(volume))
        print("Position of the center of gravity (COG) = {0}".format(cog))
        m_centered = solid.translate([-cog[0], -cog[1], 0])(
            self.model
        )
        return m_centered

    def find_minmax(self):
        minx = maxx = miny = maxy = minz = maxz = None
        for p in self.mesh.points:
            # p contains (x, y, z)
            if minx is None:
                minx = p[Dimension.X]
                maxx = p[Dimension.X]
                miny = p[Dimension.Y]
                maxy = p[Dimension.Y]
                minz = p[Dimension.Z]
                maxz = p[Dimension.Z]
            else:
                maxx = max(p[Dimension.X], maxx)
                minx = min(p[Dimension.X], minx)
                maxy = max(p[Dimension.Y], maxy)
                miny = min(p[Dimension.Y], miny)
                maxz = max(p[Dimension.Z], maxz)
                minz = min(p[Dimension.Z], minz)
        lenx = maxx - minx
        leny = maxy - miny
        lenz = maxz - minz
        return minx, maxx, miny, maxy, minz, maxz

    # def generate_Mesh(self):
    #     self.mesh = mesh.Mesh.from_file(self.location + "/" + str(int(self.fileName)//8)+ "b.stl")

    def get_top(self):
        top = solid.projection(cut=True)(solid.translate([0,0,-1*self.thickness*(self.layer+1)])(self.model))
        useable_area = solid.offset(r=-0.45)(top)
        self.useable_area = useable_area
        solid.scad_render_to_file(self.useable_area, self.location+'/' + 'toptemp.scad')
        outputSTL(From=self.location+'/' + 'toptemp.scad', To=self.location+"/top"+ self.dxf)

        # os.system("toSTL.sh out/toptemp.scad renders/" + self.fileName + ".dxf")
        dxf = DXF(self.location+"/top"+ self.dxf)
        min_p=dxf.points[0][0]
        points_ordered = dxf.points
        i=0
        while i <= len(dxf.points)+1:
            while math.sqrt((dxf.points[0][0]-dxf.points[1][0])**2+(dxf.points[0][1]-dxf.points[1][1])**2) > 0.1:
                dxf.points.insert(1, [(dxf.points[0][0]+dxf.points[1][0])/2, (dxf.points[0][1]+dxf.points[1][1])/2])
                i = i-1
            dxf.points.append(dxf.points.pop(0))
            i+=1
        for i in range(len(dxf.points)):
            dxf.points.append(dxf.points.pop(0))
            if dxf.points[0][0] < min_p:
                min_p = dxf.points[0][0]
                points_ordered = dxf.points.copy()
        dxf.points = points_ordered.copy()

        print(dxf.points)
        self.add_label(dxf.points)

class DXF:
    def __init__(self, file):
        self.file = file
        self.Lines = []
        self.points = []
        doc = ezdxf.readfile(self.file)
        msp = doc.modelspace()
        for e in msp:
            if e.dxftype() == "LINE":
                self.Lines.append(e)
                self.points.append([e.dxf.start[0], e.dxf.start[1]])
        # self.points.append([self.Lines[-1].dxf.end[0], self.Lines[-1].dxf.end[1]])
        self.area = None
        self.center = None
        self.polygon = sg.Polygon(self.points)

    def get_area(self):
        self.area = self.polygon.area
        return self.area

    def get_center(self):
        x_sum = 0
        y_sum =0
        for i in self.points:
            x_sum += i[0]
            y_sum += i[1]
        x_c = x_sum/len(self.points)
        y_c = y_sum/len(self.points)
        return (x_c, y_c)

    def split(self, maxdim):
        splits = []
        length = 0
        pieces = [[]]
        prev = self.points[0]
        for j in self.points:
            length = length + math.sqrt((prev[0]-j[0])**2+(prev[1]-j[1])**2)
            if length >= maxdim:
                pieces[-1].append(j)
                pieces.append([])
                length = 0
            pieces[-1].append(j)
            prev = j
        for j in pieces:
            j.insert(0, [0,0])
            piece = solid.linear_extrude(height=10)(solid.polygon(j))
            splits.append(piece)
        return splits
    def refine_points(self):
        i=0
        while i <= len(self.points)+1:
            while math.sqrt((self.points[0][0]-self.points[1][0])**2+(self.points[0][1]-self.points[1][1])**2) > 0.1:
                self.points.insert(1, [(self.points[0][0]+self.points[1][0])/2, (self.points[0][1]+self.points[1][1])/2])
                i = i-1
            self.points.append(self.points.pop(0))
            i+=1


if __name__== "__main__":
    test = DXF("C:/Users/Daniel/Documents/repos/Shell_Maker/output/0top_slice.dxf")
    test.refine_points()
    k = test.split(48)
    for i in range(len(k)):
        solid.scad_render_to_file(k[i], str(i) + ".scad")


 
 
************************************************/
