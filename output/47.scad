// Generated by SolidPython 1.1.3 on 2024-05-26 01:59:36


intersection() {
	difference() {
		intersection() {
			translate(v = [0, 0, 0]) {
				import(file = "CE3E3V2_Bottom_shell.stl", origin = [0, 0]);
			}
			translate(v = [-90.04029846191406, -32.690147399902344, 12]) {
				cube(size = [180.0806, 65.380295, 2]);
			}
		}
		linear_extrude(height = 999) {
			offset(r = -1) {
				import(file = "C:/Users/Daniel/Documents/repos/Shell_Maker/output/6top_slice.dxf", origin = [0, 0]);
			}
		}
	}
	translate(v = [0, 0, 12]) {
		linear_extrude(height = 10) {
			polygon(points = [[0, 0], [1.4707018750, -26.3458250000], [1.5606582813, -26.3594187500], [1.6506146875, -26.3730125000], [1.7405710937, -26.3866062500], [1.8305275000, -26.4002000000], [1.9204839062, -26.4137937500], [2.0104403125, -26.4273875000], [2.1003967187, -26.4409812500], [2.1903531250, -26.4545750000], [2.2803095312, -26.4681687500], [2.3702659375, -26.4817625000], [2.4602223437, -26.4953562500], [2.5501787500, -26.5089500000], [2.6401351562, -26.5225437500], [2.7300915625, -26.5361375000], [2.8200479687, -26.5497312500], [2.9100043750, -26.5633250000], [2.9999607812, -26.5769187500], [3.0899171875, -26.5905125000], [3.1798735938, -26.6041062500], [3.2698300000, -26.6177000000], [3.3597864062, -26.6312937500], [3.4497428125, -26.6448875000], [3.5396992188, -26.6584812500], [3.6296556250, -26.6720750000], [3.7196120312, -26.6856687500], [3.8095684375, -26.6992625000], [3.8995248437, -26.7128562500], [3.9894812500, -26.7264500000], [4.0794376562, -26.7400437500], [4.1693940625, -26.7536375000], [4.2593504687, -26.7672312500], [4.3493068750, -26.7808250000], [4.4392632812, -26.7944187500], [4.5292196875, -26.8080125000], [4.6191760937, -26.8216062500], [4.7091325000, -26.8352000000], [4.7990889062, -26.8487937500], [4.8890453125, -26.8623875000], [4.9790017187, -26.8759812500], [5.0689581250, -26.8895750000], [5.1589145312, -26.9031687500], [5.2488709375, -26.9167625000], [5.3388273437, -26.9303562500], [5.4287837500, -26.9439500000], [5.5187401562, -26.9575437500], [5.6086965625, -26.9711375000], [5.6986529687, -26.9847312500], [5.7886093750, -26.9983250000], [5.8785657812, -27.0119187500], [5.9685221875, -27.0255125000], [6.0584785937, -27.0391062500], [6.1484350000, -27.0527000000], [6.2383914062, -27.0662937500], [6.3283478125, -27.0798875000], [6.4183042187, -27.0934812500], [6.5082606250, -27.1070750000], [6.5982170312, -27.1206687500], [6.6881734375, -27.1342625000], [6.7781298437, -27.1478562500], [6.8680862500, -27.1614500000], [6.9580426562, -27.1750437500], [7.0479990625, -27.1886375000], [7.1379554687, -27.2022312500], [7.2279118750, -27.2158250000], [7.3178682812, -27.2294187500], [7.4078246875, -27.2430125000], [7.4977810937, -27.2566062500], [7.5877375000, -27.2702000000], [7.6776939062, -27.2837937500], [7.7676503125, -27.2973875000], [7.8576067187, -27.3109812500], [7.9475631250, -27.3245750000], [8.0375195313, -27.3381687500], [8.1274759375, -27.3517625000], [8.2174323437, -27.3653562500], [8.3073887500, -27.3789500000], [8.3973451563, -27.3925437500], [8.4873015625, -27.4061375000], [8.5772579688, -27.4197312500], [8.6672143750, -27.4333250000], [8.7571707813, -27.4469187500], [8.8471271875, -27.4605125000], [8.9370835937, -27.4741062500], [9.0270400000, -27.4877000000], [9.1081187500, -27.4980375000], [9.1891975000, -27.5083750000], [9.2702762500, -27.5187125000], [9.3513550000, -27.5290500000], [9.4324337500, -27.5393875000], [9.5135125000, -27.5497250000], [9.5945912500, -27.5600625000], [9.6756700000, -27.5704000000], [9.7698646875, -27.5812750000], [9.8640593750, -27.5921500000], [9.9582540625, -27.6030250000], [10.0524487500, -27.6139000000], [10.1466434375, -27.6247750000], [10.2408381250, -27.6356500000], [10.3350328125, -27.6465250000], [10.4292275000, -27.6574000000], [10.5234221875, -27.6682750000], [10.6176168750, -27.6791500000], [10.7118115625, -27.6900250000], [10.8060062500, -27.7009000000], [10.9002009375, -27.7117750000], [10.9943956250, -27.7226500000], [11.0885903125, -27.7335250000], [11.1827850000, -27.7444000000], [11.2769796875, -27.7552750000], [11.3711743750, -27.7661500000], [11.4653690625, -27.7770250000], [11.5595637500, -27.7879000000], [11.6537584375, -27.7987750000], [11.7479531250, -27.8096500000], [11.8421478125, -27.8205250000], [11.9363425000, -27.8314000000], [12.0305371875, -27.8422750000], [12.1247318750, -27.8531500000], [12.2189265625, -27.8640250000], [12.3131212500, -27.8749000000], [12.4073159375, -27.8857750000], [12.5015106250, -27.8966500000], [12.5957053125, -27.9075250000], [12.6899000000, -27.9184000000], [12.7857250000, -27.9286750000], [12.8815500000, -27.9389500000], [12.9773750000, -27.9492250000], [13.0732000000, -27.9595000000], [13.1488125000, -27.9663187500], [13.2244250000, -27.9731375000], [13.3000375000, -27.9799562500], [13.3756500000, -27.9867750000], [13.4512625000, -27.9935937500], [13.5268750000, -28.0004125000], [13.6024875000, -28.0072312500], [13.6781000000, -28.0140500000], [13.7537125000, -28.0208687500], [13.8293250000, -28.0276875000], [13.9049375000, -28.0345062500], [13.9805500000, -28.0413250000], [14.0561625000, -28.0481437500], [14.1317750000, -28.0549625000], [14.2073875000, -28.0617812500], [14.2830000000, -28.0686000000], [14.3359125000, -28.0725500000], [14.3888250000, -28.0765000000], [14.4417375000, -28.0804500000], [14.4946500000, -28.0844000000], [14.5475625000, -28.0883500000], [14.6004750000, -28.0923000000], [14.6533875000, -28.0962500000], [14.7063000000, -28.1002000000], [14.7980000000, -28.1061843750], [14.8897000000, -28.1121687500], [14.9814000000, -28.1181531250], [15.0731000000, -28.1241375000], [15.1648000000, -28.1301218750], [15.2565000000, -28.1361062500], [15.3482000000, -28.1420906250], [15.4399000000, -28.1480750000], [15.5316000000, -28.1540593750], [15.6233000000, -28.1600437500], [15.7150000000, -28.1660281250], [15.8067000000, -28.1720125000], [15.8984000000, -28.1779968750], [15.9901000000, -28.1839812500], [16.0818000000, -28.1899656250], [16.1735000000, -28.1959500000], [16.2652000000, -28.2019343750], [16.3569000000, -28.2079187500], [16.4486000000, -28.2139031250], [16.5403000000, -28.2198875000], [16.6320000000, -28.2258718750], [16.7237000000, -28.2318562500], [16.8154000000, -28.2378406250], [16.9071000000, -28.2438250000], [16.9988000000, -28.2498093750], [17.0905000000, -28.2557937500], [17.1822000000, -28.2617781250], [17.2739000000, -28.2677625000], [17.3656000000, -28.2737468750], [17.4573000000, -28.2797312500], [17.5490000000, -28.2857156250], [17.6407000000, -28.2917000000], [17.6920250000, -28.2940500000], [17.7433500000, -28.2964000000], [17.7946750000, -28.2987500000], [17.8460000000, -28.3011000000], [17.9083437500, -28.3024312500], [17.9706875000, -28.3037625000], [18.0330312500, -28.3050937500], [18.0953750000, -28.3064250000], [18.1577187500, -28.3077562500], [18.2200625000, -28.3090875000], [18.2824062500, -28.3104187500], [18.3447500000, -28.3117500000], [18.4070937500, -28.3130812500], [18.4694375000, -28.3144125000], [18.5317812500, -28.3157437500], [18.5941250000, -28.3170750000], [18.6564687500, -28.3184062500], [18.7188125000, -28.3197375000], [18.7811562500, -28.3210687500], [18.8435000000, -28.3224000000], [18.9247656250, -28.3232687500], [19.0060312500, -28.3241375000], [19.0872968750, -28.3250062500], [19.1685625000, -28.3258750000], [19.2498281250, -28.3267437500], [19.3310937500, -28.3276125000], [19.4123593750, -28.3284812500], [19.4936250000, -28.3293500000], [19.5748906250, -28.3302187500], [19.6561562500, -28.3310875000], [19.7374218750, -28.3319562500], [19.8186875000, -28.3328250000], [19.8999531250, -28.3336937500], [19.9812187500, -28.3345625000], [20.0624843750, -28.3354312500], [20.1437500000, -28.3363000000], [20.2250156250, -28.3371687500], [20.3062812500, -28.3380375000], [20.3875468750, -28.3389062500], [20.4688125000, -28.3397750000], [20.5500781250, -28.3406437500], [20.6313437500, -28.3415125000], [20.7126093750, -28.3423812500], [20.7938750000, -28.3432500000], [20.8751406250, -28.3441187500], [20.9564062500, -28.3449875000], [21.0376718750, -28.3458562500], [21.1189375000, -28.3467250000], [21.2002031250, -28.3475937500], [21.2814687500, -28.3484625000], [21.3627343750, -28.3493312500], [21.4440000000, -28.3502000000], [21.5320000000, -28.3485000000], [21.6200000000, -28.3468000000], [21.7089000000, -28.3446375000], [21.7978000000, -28.3424750000], [21.8867000000, -28.3403125000], [21.9756000000, -28.3381500000], [22.0645000000, -28.3359875000], [22.1534000000, -28.3338250000], [22.2423000000, -28.3316625000], [22.3312000000, -28.3295000000], [22.4136000000, -28.3271000000], [22.5072750000, -28.3219500000], [22.6009500000, -28.3168000000], [22.6946250000, -28.3116500000], [22.7883000000, -28.3065000000], [22.8819750000, -28.3013500000], [22.9756500000, -28.2962000000], [23.0693250000, -28.2910500000], [23.1630000000, -28.2859000000], [23.2151500000, -28.2827500000], [23.2673000000, -28.2796000000], [23.3194500000, -28.2764500000], [23.3716000000, -28.2733000000], [23.4237500000, -28.2701500000], [23.4759000000, -28.2670000000], [23.5280500000, -28.2638500000], [23.5802000000, -28.2607000000], [23.6669875000, -28.2544031250], [23.7537750000, -28.2481062500], [23.8405625000, -28.2418093750], [23.9273500000, -28.2355125000], [24.0141375000, -28.2292156250], [24.1009250000, -28.2229187500], [24.1877125000, -28.2166218750], [24.2745000000, -28.2103250000], [24.3612875000, -28.2040281250], [24.4480750000, -28.1977312500], [24.5348625000, -28.1914343750], [24.6216500000, -28.1851375000], [24.7084375000, -28.1788406250], [24.7952250000, -28.1725437500], [24.8820125000, -28.1662468750], [24.9688000000, -28.1599500000], [25.0555875000, -28.1536531250], [25.1423750000, -28.1473562500], [25.2291625000, -28.1410593750], [25.3159500000, -28.1347625000], [25.4027375000, -28.1284656250], [25.4895250000, -28.1221687500], [25.5763125000, -28.1158718750], [25.6631000000, -28.1095750000], [25.7498875000, -28.1032781250], [25.8366750000, -28.0969812500], [25.9234625000, -28.0906843750], [26.0102500000, -28.0843875000], [26.0970375000, -28.0780906250], [26.1838250000, -28.0717937500], [26.2706125000, -28.0654968750], [26.3574000000, -28.0592000000], [26.4219500000, -28.0532500000], [26.4865000000, -28.0473000000], [26.5506500000, -28.0406000000], [26.6148000000, -28.0339000000], [26.7115812500, -28.0208625000], [26.8083625000, -28.0078250000], [26.9051437500, -27.9947875000], [27.0019250000, -27.9817500000], [27.0987062500, -27.9687125000], [27.1954875000, -27.9556750000], [27.2922687500, -27.9426375000], [27.3890500000, -27.9296000000], [27.4858312500, -27.9165625000], [27.5826125000, -27.9035250000], [27.6793937500, -27.8904875000], [27.7761750000, -27.8774500000], [27.8729562500, -27.8644125000], [27.9697375000, -27.8513750000], [28.0665187500, -27.8383375000], [28.1633000000, -27.8253000000], [28.2387125000, -27.8158625000], [28.3141250000, -27.8064250000], [28.3895375000, -27.7969875000], [28.4649500000, -27.7875500000], [28.5403625000, -27.7781125000], [28.6157750000, -27.7686750000], [28.6911875000, -27.7592375000], [28.7666000000, -27.7498000000], [28.8306375000, -27.7388500000], [28.8946750000, -27.7279000000], [28.9587125000, -27.7169500000], [29.0227500000, -27.7060000000], [29.0867875000, -27.6950500000], [29.1508250000, -27.6841000000], [29.2148625000, -27.6731500000], [29.2789000000, -27.6622000000], [29.3429375000, -27.6512500000], [29.4069750000, -27.6403000000], [29.4710125000, -27.6293500000], [29.5350500000, -27.6184000000], [29.5990875000, -27.6074500000], [29.6631250000, -27.5965000000], [29.7271625000, -27.5855500000], [29.7912000000, -27.5746000000], [29.8629500000, -27.5622750000], [29.9347000000, -27.5499500000], [30.0064500000, -27.5376250000], [30.0782000000, -27.5253000000], [30.0882000000, -27.5234000000], [30.1742000000, -27.5030531250], [30.2602000000, -27.4827062500], [30.3462000000, -27.4623593750], [30.4322000000, -27.4420125000], [30.5182000000, -27.4216656250], [30.6042000000, -27.4013187500], [30.6902000000, -27.3809718750], [30.7762000000, -27.3606250000], [30.8622000000, -27.3402781250], [30.9482000000, -27.3199312500], [31.0342000000, -27.2995843750], [31.1202000000, -27.2792375000], [31.2062000000, -27.2588906250], [31.2922000000, -27.2385437500], [31.3782000000, -27.2181968750], [31.4642000000, -27.1978500000], [31.5502000000, -27.1775031250], [31.6362000000, -27.1571562500], [31.7222000000, -27.1368093750], [31.8082000000, -27.1164625000], [31.8942000000, -27.0961156250], [31.9802000000, -27.0757687500], [32.0662000000, -27.0554218750], [32.1522000000, -27.0350750000], [32.2382000000, -27.0147281250], [32.3242000000, -26.9943812500], [32.4102000000, -26.9740343750], [32.4962000000, -26.9536875000], [32.5822000000, -26.9333406250], [32.6682000000, -26.9129937500], [32.7542000000, -26.8926468750], [32.8402000000, -26.8723000000], [32.9302625000, -26.8509562500], [33.0203250000, -26.8296125000], [33.1103875000, -26.8082687500], [33.2004500000, -26.7869250000], [33.2905125000, -26.7655812500], [33.3805750000, -26.7442375000], [33.4706375000, -26.7228937500], [33.5607000000, -26.7015500000], [33.6507625000, -26.6802062500], [33.7408250000, -26.6588625000], [33.8308875000, -26.6375187500], [33.9209500000, -26.6161750000], [34.0110125000, -26.5948312500], [34.1010750000, -26.5734875000], [34.1911375000, -26.5521437500], [34.2812000000, -26.5308000000], [34.2864000000, -26.5293000000], [34.3410843750, -26.5122218750], [34.3957687500, -26.4951437500], [34.4504531250, -26.4780656250], [34.5051375000, -26.4609875000], [34.5598218750, -26.4439093750], [34.6145062500, -26.4268312500], [34.6691906250, -26.4097531250], [34.7238750000, -26.3926750000], [34.7785593750, -26.3755968750], [34.8332437500, -26.3585187500], [34.8879281250, -26.3414406250], [34.9426125000, -26.3243625000], [34.9972968750, -26.3072843750], [35.0519812500, -26.2902062500], [35.1066656250, -26.2731281250], [35.1613500000, -26.2560500000], [35.2160343750, -26.2389718750], [35.2707187500, -26.2218937500], [35.3254031250, -26.2048156250], [35.3800875000, -26.1877375000], [35.4347718750, -26.1706593750], [35.4894562500, -26.1535812500], [35.5441406250, -26.1365031250], [35.5988250000, -26.1194250000], [35.6535093750, -26.1023468750], [35.7081937500, -26.0852687500], [35.7628781250, -26.0681906250], [35.8175625000, -26.0511125000], [35.8722468750, -26.0340343750], [35.9269312500, -26.0169562500], [35.9816156250, -25.9998781250], [36.0363000000, -25.9828000000], [36.0970250000, -25.9638625000], [36.1577500000, -25.9449250000], [36.2184750000, -25.9259875000], [36.2792000000, -25.9070500000], [36.3399250000, -25.8881125000], [36.4006500000, -25.8691750000], [36.4613750000, -25.8502375000], [36.5221000000, -25.8313000000], [36.6012625000, -25.8027187500], [36.6804250000, -25.7741375000], [36.7595875000, -25.7455562500], [36.8387500000, -25.7169750000], [36.9179125000, -25.6883937500], [36.9970750000, -25.6598125000], [37.0762375000, -25.6312312500], [37.1554000000, -25.6026500000], [37.2345625000, -25.5740687500], [37.3137250000, -25.5454875000], [37.3928875000, -25.5169062500], [37.4720500000, -25.4883250000], [37.5512125000, -25.4597437500], [37.6303750000, -25.4311625000], [37.7095375000, -25.4025812500], [37.7887000000, -25.3740000000], [37.8692875000, -25.3449875000], [37.9498750000, -25.3159750000], [38.0304625000, -25.2869625000], [38.1110500000, -25.2579500000], [38.1916375000, -25.2289375000], [38.2722250000, -25.1999250000], [38.3528125000, -25.1709125000], [38.4334000000, -25.1419000000], [38.4470000000, -25.1367000000], [38.5311031250, -25.1002187500], [38.6152062500, -25.0637375000], [38.6993093750, -25.0272562500], [38.7834125000, -24.9907750000], [38.8675156250, -24.9542937500], [38.9516187500, -24.9178125000], [39.0357218750, -24.8813312500], [39.1198250000, -24.8448500000], [39.2039281250, -24.8083687500], [39.2880312500, -24.7718875000], [39.3721343750, -24.7354062500], [39.4562375000, -24.6989250000], [39.5403406250, -24.6624437500], [39.6244437500, -24.6259625000], [39.7085468750, -24.5894812500], [39.7926500000, -24.5530000000], [39.8767531250, -24.5165187500], [39.9608562500, -24.4800375000], [40.0449593750, -24.4435562500], [40.1290625000, -24.4070750000], [40.2131656250, -24.3705937500], [40.2972687500, -24.3341125000], [40.3813718750, -24.2976312500], [40.4654750000, -24.2611500000], [40.5495781250, -24.2246687500], [40.6336812500, -24.1881875000], [40.7177843750, -24.1517062500], [40.8018875000, -24.1152250000], [40.8859906250, -24.0787437500], [40.9700937500, -24.0422625000], [41.0541968750, -24.0057812500], [41.1383000000, -23.9693000000], [41.1999250000, -23.9435812500], [41.2615500000, -23.9178625000], [41.3231750000, -23.8921437500], [41.3848000000, -23.8664250000], [41.4464250000, -23.8407062500], [41.5080500000, -23.8149875000], [41.5696750000, -23.7892687500], [41.6313000000, -23.7635500000], [41.6929250000, -23.7378312500], [41.7545500000, -23.7121125000], [41.8161750000, -23.6863937500], [41.8778000000, -23.6606750000], [41.9394250000, -23.6349562500], [42.0010500000, -23.6092375000], [42.0626750000, -23.5835187500], [42.1243000000, -23.5578000000], [42.2104000000, -23.5174500000], [42.2965000000, -23.4771000000], [42.3528062500, -23.4489312500], [42.4091125000, -23.4207625000], [42.4654187500, -23.3925937500], [42.5217250000, -23.3644250000], [42.5780312500, -23.3362562500], [42.6343375000, -23.3080875000], [42.6906437500, -23.2799187500], [42.7469500000, -23.2517500000], [42.8032562500, -23.2235812500], [42.8595625000, -23.1954125000], [42.9158687500, -23.1672437500], [42.9721750000, -23.1390750000], [43.0284812500, -23.1109062500], [43.0847875000, -23.0827375000], [43.1410937500, -23.0545687500], [43.1974000000, -23.0264000000], [43.2594750000, -22.9963625000], [43.3215500000, -22.9663250000], [43.3836250000, -22.9362875000], [43.4457000000, -22.9062500000], [43.5077750000, -22.8762125000], [43.5698500000, -22.8461750000], [43.6319250000, -22.8161375000], [43.6940000000, -22.7861000000], [43.7743062500, -22.7425125000], [43.8546125000, -22.6989250000], [43.9349187500, -22.6553375000], [44.0152250000, -22.6117500000], [44.0955312500, -22.5681625000], [44.1758375000, -22.5245750000], [44.2561437500, -22.4809875000], [44.3364500000, -22.4374000000], [44.4167562500, -22.3938125000], [44.4970625000, -22.3502250000], [44.5773687500, -22.3066375000], [44.6576750000, -22.2630500000], [44.7379812500, -22.2194625000], [44.8182875000, -22.1758750000], [44.8985937500, -22.1322875000], [44.9789000000, -22.0887000000], [45.0486250000, -22.0512125000], [45.1183500000, -22.0137250000], [45.1880750000, -21.9762375000], [45.2578000000, -21.9387500000], [45.3275250000, -21.9012625000], [45.3972500000, -21.8637750000], [45.4669750000, -21.8262875000], [45.5367000000, -21.7888000000], [45.5871000000, -21.7603000000], [45.6699125000, -21.7086343750], [45.7527250000, -21.6569687500], [45.8355375000, -21.6053031250], [45.9183500000, -21.5536375000], [46.0011625000, -21.5019718750], [46.0839750000, -21.4503062500], [46.1667875000, -21.3986406250], [46.2496000000, -21.3469750000], [46.3324125000, -21.2953093750], [46.4152250000, -21.2436437500], [46.4980375000, -21.1919781250], [46.5808500000, -21.1403125000], [46.6636625000, -21.0886468750], [46.7464750000, -21.0369812500], [46.8292875000, -20.9853156250], [46.9121000000, -20.9336500000], [46.9949125000, -20.8819843750], [47.0777250000, -20.8303187500], [47.1605375000, -20.7786531250], [47.2433500000, -20.7269875000], [47.3261625000, -20.6753218750], [47.4089750000, -20.6236562500], [47.4917875000, -20.5719906250], [47.5746000000, -20.5203250000], [47.6574125000, -20.4686593750], [47.7402250000, -20.4169937500], [47.8230375000, -20.3653281250]]);
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
import math
import time

from stl import mesh, Dimension

from tkinter import Tk     # from tkinter import Tk for Python 3.x
from tkinter.filedialog import askopenfilename
from mpl_toolkits.mplot3d import art3d
from matplotlib import pyplot as plt
import solid
import os
import ezdxf
import shapely.geometry as sg
import subprocess
from GUI import getSCADPath



def outputSTL(From, To, PATH=getSCADPath()):
    subprocess.Popen(PATH + " -o " + To + " " + From)
    while not os.path.exists(To):
        time.sleep(1)

class Model:
    def __init__(self, model, fileName, location, layer, thickness):
        self.location = location
        self.code = None
        self.fileName = fileName
        self.stl = fileName + ".stl"
        self.layer = layer
        self.thickness = thickness
        self.maxz = (layer+1)*thickness
        self.dxf = fileName + ".dxf"
        self.scad = fileName + ".scad"
        self.model = model
        self.center = None
        self.width = 10
        self.mesh = None
        self.useable_area = None


    def get_code(self):
        max_dim = 0.05
        max_array = 6

        num = int(self.fileName)
        nums = [int(a) for a in str(num)]
        nums.reverse()
        indices = nums
        length = len(nums)

        print(indices)
        t = 0
        i = 0
        cubes = []
        x = 0
        y = 0
        width = 0.01
        while x <= max_dim:
            while y <= max_dim:
                print(indices)
                if nums == []:
                    break
                if indices[0] != 0:
                    cubes.append(solid.translate([x, y, 0])(solid.cube(size=t / 1000 + 0.001)))
                    y += max_dim / (max_array - 1)
                    nums[0] = nums[0] - 1
                else:
                    indices.pop(0)
                    t += 1
                i += 1
            x += max_dim / (max_array - 1)
            y = 0

        outside = solid.translate([-width / 2, -width / 2])(solid.cube(max_dim + (length - 1) / 1000 + 0.001 + width))
        self.code = solid.difference()(outside, cubes)
        self.code = solid.projection(cut=True)(self.code)
        solid.scad_render_to_file(self.code, self.location + "/code.scad")
        outputSTL(From=self.location+"/code.scad", To=self.location+"code.dxf", PATH=getSCADPath())
        # os.system("toSTL.sh renders/code.scad renders/code.dxf")
        return self.location+"/code.dxf"

    def download(self, type):
        if type =="stl":
            print("generating:" + self.location+"/"+ self.fileName+".stl")
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".stl")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".stl")
        elif type == "dxf":
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".dxf")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".dxf")

    def render(self):
        solid.scad_render_to_file(self.model, self.location+"/"+ self.fileName+'.scad')
        while not os.path.exists(self.location+"/"+self.fileName+".scad"):
            time.sleep(1)
        # outputSTL(From= self.location+"/"+ self.fileName+'.scad', To=self.location+"/"+ self.fileName+'.stl')

    def get_points(self):
        doc = ezdxf.readfile(filename=self.location+"/"+ self.fileName+".dxf")
        msp = doc.modelspace()
        i=0
        lists = []
        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return [start, end]

        for e in msp.query("LINE"):
            line = helper(e)
            if not lists:
                lists.append([line])
            else:
                if lists[i][len(lists)-1][1] != line[0]:
                    lists.append([line])
                    i+=1
                else:
                    lists[i].append(line)

    def get_points2(self, FILE):
        doc = ezdxf.readfile(filename=FILE)
        msp = doc.modelspace()
        i = 0
        lists = []

        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return (start, end)

        for e in msp.query("LINE"):
            line = helper(e)
            if lists==[]:
                lists.append([line])
            else:
                if lists[i][len(lists[i]) - 1][1] != line[0]:
                    lists.append([line])
                    i += 1
                else:
                    lists[i].append(line)
        return lists

    def add_code(self):
        dxf = solid.projection(cut=False)(self.model)
        offset = solid.offset(r=-0.1)(dxf)
        solid.scad_render_to_file(offset, self.location+'/offset.scad')
        os.system("toSTL.sh renders/offset.scad renders/offset.dxf")
        lines = self.get_points2("renders/offset.dxf")
        x = lines[0][0][0][0]
        y = lines[0][0][0][1]
        print(x)
        print(y)
        code = solid.translate([x,y,0])(self.code)
        code = solid.linear_extrude(height=999)(code)
        save = self.model
        self.model = solid.projection()(solid.difference()(self.model, code))
        self.render()
        self.download("dxf")
        self.model = save

    def add_label(self, pos):
        # num = 12
        # minx, maxx, miny, maxy, minz, maxz = self.find_minmax()
        maxz = self.maxz
        # label = solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.5, halign="center"))
        # i=minx
        # print("x-len: " + str(maxx-minx))
        # print(i)
        # inc = (maxx-minx)/num
        # while minx <= i <= maxx:
        #     label = solid.union()(solid.translate([i, 0, maxz - 0.2])(solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.25, halign="center"))), label)
        #     i += inc
        #
        # l = label
        #
        # i =miny
        # while miny<= i <= maxy:
        #     print("y inc")
        #     l = solid.union()(solid.translate([0, i, 0])(label), l)
        #     i += 0.5
        for i in str(self.fileName):
            cur = pos[0]
            label = solid.translate([pos[0][0], pos[0][1], self.maxz-0.2])(solid.linear_extrude(height=(self.thickness)/3)(solid.text(str(i), size=0.5, halign="center", valign="center")))
            self.model = solid.difference()(self.model, label)
            pos.append(pos.pop(0))
            while abs(cur[0]-pos[0][0])<0.5 and abs(cur[1]-pos[0][1])<0.5:
                pos.append(pos.pop(0))



    def Center(self):

        volume, cog, inertia = self.mesh.get_mass_properties()
        print("Volume                                  = {0}".format(volume))
        print("Position of the center of gravity (COG) = {0}".format(cog))
        m_centered = solid.translate([-cog[0], -cog[1], 0])(
            self.model
        )
        return m_centered

    def find_minmax(self):
        minx = maxx = miny = maxy = minz = maxz = None
        for p in self.mesh.points:
            # p contains (x, y, z)
            if minx is None:
                minx = p[Dimension.X]
                maxx = p[Dimension.X]
                miny = p[Dimension.Y]
                maxy = p[Dimension.Y]
                minz = p[Dimension.Z]
                maxz = p[Dimension.Z]
            else:
                maxx = max(p[Dimension.X], maxx)
                minx = min(p[Dimension.X], minx)
                maxy = max(p[Dimension.Y], maxy)
                miny = min(p[Dimension.Y], miny)
                maxz = max(p[Dimension.Z], maxz)
                minz = min(p[Dimension.Z], minz)
        lenx = maxx - minx
        leny = maxy - miny
        lenz = maxz - minz
        return minx, maxx, miny, maxy, minz, maxz

    # def generate_Mesh(self):
    #     self.mesh = mesh.Mesh.from_file(self.location + "/" + str(int(self.fileName)//8)+ "b.stl")

    def get_top(self):
        top = solid.projection(cut=True)(solid.translate([0,0,-1*self.thickness*(self.layer+1)])(self.model))
        useable_area = solid.offset(r=-0.45)(top)
        self.useable_area = useable_area
        solid.scad_render_to_file(self.useable_area, self.location+'/' + 'toptemp.scad')
        outputSTL(From=self.location+'/' + 'toptemp.scad', To=self.location+"/top"+ self.dxf)

        # os.system("toSTL.sh out/toptemp.scad renders/" + self.fileName + ".dxf")
        dxf = DXF(self.location+"/top"+ self.dxf)
        min_p=dxf.points[0][0]
        points_ordered = dxf.points
        i=0
        while i <= len(dxf.points)+1:
            while math.sqrt((dxf.points[0][0]-dxf.points[1][0])**2+(dxf.points[0][1]-dxf.points[1][1])**2) > 0.1:
                dxf.points.insert(1, [(dxf.points[0][0]+dxf.points[1][0])/2, (dxf.points[0][1]+dxf.points[1][1])/2])
                i = i-1
            dxf.points.append(dxf.points.pop(0))
            i+=1
        for i in range(len(dxf.points)):
            dxf.points.append(dxf.points.pop(0))
            if dxf.points[0][0] < min_p:
                min_p = dxf.points[0][0]
                points_ordered = dxf.points.copy()
        dxf.points = points_ordered.copy()

        print(dxf.points)
        self.add_label(dxf.points)

class DXF:
    def __init__(self, file):
        self.file = file
        self.Lines = []
        self.points = []
        doc = ezdxf.readfile(self.file)
        msp = doc.modelspace()
        for e in msp:
            if e.dxftype() == "LINE":
                self.Lines.append(e)
                self.points.append([e.dxf.start[0], e.dxf.start[1]])
        # self.points.append([self.Lines[-1].dxf.end[0], self.Lines[-1].dxf.end[1]])
        self.area = None
        self.center = None
        self.polygon = sg.Polygon(self.points)

    def get_area(self):
        self.area = self.polygon.area
        return self.area

    def get_center(self):
        x_sum = 0
        y_sum =0
        for i in self.points:
            x_sum += i[0]
            y_sum += i[1]
        x_c = x_sum/len(self.points)
        y_c = y_sum/len(self.points)
        return (x_c, y_c)

    def split(self, maxdim):
        splits = []
        length = 0
        pieces = [[]]
        prev = self.points[-1]
        pieces[-1].append(prev)
        for j in self.points:
            length = length + math.sqrt((prev[0]-j[0])**2+(prev[1]-j[1])**2)
            if length >= maxdim:
                pieces[-1].append(j)
                pieces.append([])
                length = 0
            pieces[-1].append(j)
            prev = j
        for j in pieces:
            j.insert(0, [0,0])
            piece = solid.linear_extrude(height=10)(solid.polygon(j))
            splits.append(piece)
        return splits
    def refine_points(self):
        i=0
        while i <= len(self.points)+1:
            while math.sqrt((self.points[0][0]-self.points[1][0])**2+(self.points[0][1]-self.points[1][1])**2) > 0.1:
                self.points.insert(1, [(self.points[0][0]+self.points[1][0])/2, (self.points[0][1]+self.points[1][1])/2])
                i = i-1
            self.points.append(self.points.pop(0))
            i+=1


if __name__== "__main__":
    test = DXF("C:/Users/Daniel/Documents/repos/Shell_Maker/output/0top_slice.dxf")
    test.refine_points()
    k = test.split(48)
    for i in range(len(k)):
        solid.scad_render_to_file(k[i], str(i) + ".scad")


 
 
************************************************/
