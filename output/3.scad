// Generated by SolidPython 1.1.3 on 2024-05-26 01:58:49


intersection() {
	difference() {
		intersection() {
			translate(v = [0, 0, 0]) {
				import(file = "CE3E3V2_Bottom_shell.stl", origin = [0, 0]);
			}
			translate(v = [-90.04029846191406, -32.690147399902344, 0]) {
				cube(size = [180.0806, 65.380295, 2]);
			}
		}
		linear_extrude(height = 999) {
			offset(r = -1) {
				import(file = "C:/Users/Daniel/Documents/repos/Shell_Maker/output/0top_slice.dxf", origin = [0, 0]);
			}
		}
	}
	translate(v = [0, 0, 0]) {
		linear_extrude(height = 10) {
			polygon(points = [[0, 0], [37.3979734375, 32.6901000000], [37.3107492187, 32.6901000000], [37.2235250000, 32.6901000000], [37.1363007812, 32.6901000000], [37.0490765625, 32.6901000000], [36.9618523437, 32.6901000000], [36.8746281250, 32.6901000000], [36.7874039062, 32.6901000000], [36.7001796875, 32.6901000000], [36.6129554687, 32.6901000000], [36.5257312500, 32.6901000000], [36.4385070312, 32.6901000000], [36.3512828125, 32.6901000000], [36.2640585937, 32.6901000000], [36.1768343750, 32.6901000000], [36.0896101562, 32.6901000000], [36.0023859375, 32.6901000000], [35.9151617187, 32.6901000000], [35.8279375000, 32.6901000000], [35.7407132812, 32.6901000000], [35.6534890625, 32.6901000000], [35.5662648437, 32.6901000000], [35.4790406250, 32.6901000000], [35.3918164063, 32.6901000000], [35.3045921875, 32.6901000000], [35.2173679687, 32.6901000000], [35.1301437500, 32.6901000000], [35.0429195312, 32.6901000000], [34.9556953125, 32.6901000000], [34.8684710938, 32.6901000000], [34.7812468750, 32.6901000000], [34.6940226562, 32.6901000000], [34.6067984375, 32.6901000000], [34.5195742188, 32.6901000000], [34.4323500000, 32.6901000000], [34.3451257812, 32.6901000000], [34.2579015625, 32.6901000000], [34.1706773438, 32.6901000000], [34.0834531250, 32.6901000000], [33.9962289062, 32.6901000000], [33.9090046875, 32.6901000000], [33.8217804687, 32.6901000000], [33.7345562500, 32.6901000000], [33.6473320313, 32.6901000000], [33.5601078125, 32.6901000000], [33.4728835937, 32.6901000000], [33.3856593750, 32.6901000000], [33.2984351563, 32.6901000000], [33.2112109375, 32.6901000000], [33.1239867188, 32.6901000000], [33.0367625000, 32.6901000000], [32.9495382812, 32.6901000000], [32.8623140625, 32.6901000000], [32.7750898438, 32.6901000000], [32.6878656250, 32.6901000000], [32.6006414062, 32.6901000000], [32.5134171875, 32.6901000000], [32.4261929688, 32.6901000000], [32.3389687500, 32.6901000000], [32.2517445312, 32.6901000000], [32.1645203125, 32.6901000000], [32.0772960938, 32.6901000000], [31.9900718750, 32.6901000000], [31.9028476562, 32.6901000000], [31.8156234375, 32.6901000000], [31.7283992187, 32.6901000000], [31.6411750000, 32.6901000000], [31.5539507813, 32.6901000000], [31.4667265625, 32.6901000000], [31.3795023438, 32.6901000000], [31.2922781250, 32.6901000000], [31.2050539063, 32.6901000000], [31.1178296875, 32.6901000000], [31.0306054688, 32.6901000000], [30.9433812500, 32.6901000000], [30.8561570312, 32.6901000000], [30.7689328125, 32.6901000000], [30.6817085938, 32.6901000000], [30.5944843750, 32.6901000000], [30.5072601562, 32.6901000000], [30.4200359375, 32.6901000000], [30.3328117188, 32.6901000000], [30.2455875000, 32.6901000000], [30.1583632812, 32.6901000000], [30.0711390625, 32.6901000000], [29.9839148438, 32.6901000000], [29.8966906250, 32.6901000000], [29.8094664062, 32.6901000000], [29.7222421875, 32.6901000000], [29.6350179687, 32.6901000000], [29.5477937500, 32.6901000000], [29.4605695313, 32.6901000000], [29.3733453125, 32.6901000000], [29.2861210938, 32.6901000000], [29.1988968750, 32.6901000000], [29.1116726563, 32.6901000000], [29.0244484375, 32.6901000000], [28.9372242188, 32.6901000000], [28.8500000000, 32.6901000000], [28.7627757812, 32.6901000000], [28.6755515625, 32.6901000000], [28.5883273438, 32.6901000000], [28.5011031250, 32.6901000000], [28.4138789063, 32.6901000000], [28.3266546875, 32.6901000000], [28.2394304688, 32.6901000000], [28.1522062500, 32.6901000000], [28.0649820313, 32.6901000000], [27.9777578125, 32.6901000000], [27.8905335938, 32.6901000000], [27.8033093750, 32.6901000000], [27.7160851563, 32.6901000000], [27.6288609375, 32.6901000000], [27.5416367188, 32.6901000000], [27.4544125000, 32.6901000000], [27.3671882813, 32.6901000000], [27.2799640625, 32.6901000000], [27.1927398438, 32.6901000000], [27.1055156250, 32.6901000000], [27.0182914063, 32.6901000000], [26.9310671875, 32.6901000000], [26.8438429688, 32.6901000000], [26.7566187500, 32.6901000000], [26.6693945312, 32.6901000000], [26.5821703125, 32.6901000000], [26.4949460938, 32.6901000000], [26.4077218750, 32.6901000000], [26.3204976563, 32.6901000000], [26.2332734375, 32.6901000000], [26.1460492188, 32.6901000000], [26.0588250000, 32.6901000000], [25.9716007813, 32.6901000000], [25.8843765625, 32.6901000000], [25.7971523438, 32.6901000000], [25.7099281250, 32.6901000000], [25.6227039063, 32.6901000000], [25.5354796875, 32.6901000000], [25.4482554688, 32.6901000000], [25.3610312500, 32.6901000000], [25.2738070313, 32.6901000000], [25.1865828125, 32.6901000000], [25.0993585938, 32.6901000000], [25.0121343750, 32.6901000000], [24.9249101563, 32.6901000000], [24.8376859375, 32.6901000000], [24.7504617188, 32.6901000000], [24.6632375000, 32.6901000000], [24.5760132812, 32.6901000000], [24.4887890625, 32.6901000000], [24.4015648438, 32.6901000000], [24.3143406250, 32.6901000000], [24.2271164063, 32.6901000000], [24.1398921875, 32.6901000000], [24.0526679688, 32.6901000000], [23.9654437500, 32.6901000000], [23.8782195313, 32.6901000000], [23.7909953125, 32.6901000000], [23.7037710938, 32.6901000000], [23.6165468750, 32.6901000000], [23.5293226563, 32.6901000000], [23.4420984375, 32.6901000000], [23.3548742188, 32.6901000000], [23.2676500000, 32.6901000000], [23.1804257813, 32.6901000000], [23.0932015625, 32.6901000000], [23.0059773438, 32.6901000000], [22.9187531250, 32.6901000000], [22.8315289062, 32.6901000000], [22.7443046875, 32.6901000000], [22.6570804688, 32.6901000000], [22.5698562500, 32.6901000000], [22.4826320312, 32.6901000000], [22.3954078125, 32.6901000000], [22.3081835938, 32.6901000000], [22.2209593750, 32.6901000000], [22.1337351563, 32.6901000000], [22.0465109375, 32.6901000000], [21.9592867188, 32.6901000000], [21.8720625000, 32.6901000000], [21.7848382813, 32.6901000000], [21.6976140625, 32.6901000000], [21.6103898438, 32.6901000000], [21.5231656250, 32.6901000000], [21.4359414063, 32.6901000000], [21.3487171875, 32.6901000000], [21.2614929688, 32.6901000000], [21.1742687500, 32.6901000000], [21.0870445313, 32.6901000000], [20.9998203125, 32.6901000000], [20.9125960938, 32.6901000000], [20.8253718750, 32.6901000000], [20.7381476562, 32.6901000000], [20.6509234375, 32.6901000000], [20.5636992188, 32.6901000000], [20.4764750000, 32.6901000000], [20.3892507812, 32.6901000000], [20.3020265625, 32.6901000000], [20.2148023438, 32.6901000000], [20.1275781250, 32.6901000000], [20.0403539063, 32.6901000000], [19.9531296875, 32.6901000000], [19.8659054688, 32.6901000000], [19.7786812500, 32.6901000000], [19.6914570313, 32.6901000000], [19.6042328125, 32.6901000000], [19.5170085938, 32.6901000000], [19.4297843750, 32.6901000000], [19.3425601563, 32.6901000000], [19.2553359375, 32.6901000000], [19.1681117188, 32.6901000000], [19.0808875000, 32.6901000000], [18.9936632813, 32.6901000000], [18.9064390625, 32.6901000000], [18.8192148438, 32.6901000000], [18.7319906250, 32.6901000000], [18.6447664062, 32.6901000000], [18.5575421875, 32.6901000000], [18.4703179688, 32.6901000000], [18.3830937500, 32.6901000000], [18.2958695312, 32.6901000000], [18.2086453125, 32.6901000000], [18.1214210938, 32.6901000000], [18.0341968750, 32.6901000000], [17.9469726563, 32.6901000000], [17.8597484375, 32.6901000000], [17.7725242188, 32.6901000000], [17.6853000000, 32.6901000000], [17.6307296875, 32.6896796875], [17.5761593750, 32.6892593750], [17.5215890625, 32.6888390625], [17.4670187500, 32.6884187500], [17.4124484375, 32.6879984375], [17.3578781250, 32.6875781250], [17.3033078125, 32.6871578125], [17.2487375000, 32.6867375000], [17.1941671875, 32.6863171875], [17.1395968750, 32.6858968750], [17.0850265625, 32.6854765625], [17.0304562500, 32.6850562500], [16.9758859375, 32.6846359375], [16.9213156250, 32.6842156250], [16.8667453125, 32.6837953125], [16.8121750000, 32.6833750000], [16.7576046875, 32.6829546875], [16.7030343750, 32.6825343750], [16.6484640625, 32.6821140625], [16.5938937500, 32.6816937500], [16.5393234375, 32.6812734375], [16.4847531250, 32.6808531250], [16.4301828125, 32.6804328125], [16.3756125000, 32.6800125000], [16.3210421875, 32.6795921875], [16.2664718750, 32.6791718750], [16.2119015625, 32.6787515625], [16.1573312500, 32.6783312500], [16.1027609375, 32.6779109375], [16.0481906250, 32.6774906250], [15.9936203125, 32.6770703125], [15.9390500000, 32.6766500000], [15.8844796875, 32.6762296875], [15.8299093750, 32.6758093750], [15.7753390625, 32.6753890625], [15.7207687500, 32.6749687500], [15.6661984375, 32.6745484375], [15.6116281250, 32.6741281250], [15.5570578125, 32.6737078125], [15.5024875000, 32.6732875000], [15.4479171875, 32.6728671875], [15.3933468750, 32.6724468750], [15.3387765625, 32.6720265625], [15.2842062500, 32.6716062500], [15.2296359375, 32.6711859375], [15.1750656250, 32.6707656250], [15.1204953125, 32.6703453125], [15.0659250000, 32.6699250000], [15.0113546875, 32.6695046875], [14.9567843750, 32.6690843750], [14.9022140625, 32.6686640625], [14.8476437500, 32.6682437500], [14.7930734375, 32.6678234375], [14.7385031250, 32.6674031250], [14.6839328125, 32.6669828125], [14.6293625000, 32.6665625000], [14.5747921875, 32.6661421875], [14.5202218750, 32.6657218750], [14.4656515625, 32.6653015625], [14.4110812500, 32.6648812500], [14.3565109375, 32.6644609375], [14.3019406250, 32.6640406250], [14.2473703125, 32.6636203125], [14.1928000000, 32.6632000000], [14.1382296875, 32.6627796875], [14.0836593750, 32.6623593750], [14.0290890625, 32.6619390625], [13.9745187500, 32.6615187500], [13.9199484375, 32.6610984375], [13.8653781250, 32.6606781250], [13.8108078125, 32.6602578125], [13.7562375000, 32.6598375000], [13.7016671875, 32.6594171875], [13.6470968750, 32.6589968750], [13.5925265625, 32.6585765625], [13.5379562500, 32.6581562500], [13.4833859375, 32.6577359375], [13.4288156250, 32.6573156250], [13.3742453125, 32.6568953125], [13.3196750000, 32.6564750000], [13.2651046875, 32.6560546875], [13.2105343750, 32.6556343750], [13.1559640625, 32.6552140625], [13.1013937500, 32.6547937500], [13.0468234375, 32.6543734375], [12.9922531250, 32.6539531250], [12.9376828125, 32.6535328125], [12.8831125000, 32.6531125000], [12.8285421875, 32.6526921875], [12.7739718750, 32.6522718750], [12.7194015625, 32.6518515625], [12.6648312500, 32.6514312500], [12.6102609375, 32.6510109375], [12.5556906250, 32.6505906250], [12.5011203125, 32.6501703125], [12.4465500000, 32.6497500000], [12.3919796875, 32.6493296875], [12.3374093750, 32.6489093750], [12.2828390625, 32.6484890625], [12.2282687500, 32.6480687500], [12.1736984375, 32.6476484375], [12.1191281250, 32.6472281250], [12.0645578125, 32.6468078125], [12.0099875000, 32.6463875000], [11.9554171875, 32.6459671875], [11.9008468750, 32.6455468750], [11.8462765625, 32.6451265625], [11.7917062500, 32.6447062500], [11.7371359375, 32.6442859375], [11.6825656250, 32.6438656250], [11.6279953125, 32.6434453125], [11.5734250000, 32.6430250000], [11.5188546875, 32.6426046875], [11.4642843750, 32.6421843750], [11.4097140625, 32.6417640625], [11.3551437500, 32.6413437500], [11.3005734375, 32.6409234375], [11.2460031250, 32.6405031250], [11.1914328125, 32.6400828125], [11.1368625000, 32.6396625000], [11.0822921875, 32.6392421875], [11.0277218750, 32.6388218750], [10.9731515625, 32.6384015625], [10.9185812500, 32.6379812500], [10.8640109375, 32.6375609375], [10.8094406250, 32.6371406250], [10.7548703125, 32.6367203125], [10.7003000000, 32.6363000000], [10.6347583984, 32.6352365234], [10.5692167969, 32.6341730469], [10.5036751953, 32.6331095703], [10.4381335937, 32.6320460937], [10.3725919922, 32.6309826172], [10.3070503906, 32.6299191406], [10.2415087891, 32.6288556641], [10.1759671875, 32.6277921875], [10.1104255859, 32.6267287109], [10.0448839844, 32.6256652344], [9.9793423828, 32.6246017578], [9.9138007812, 32.6235382812], [9.8482591797, 32.6224748047], [9.7827175781, 32.6214113281], [9.7171759766, 32.6203478516], [9.6516343750, 32.6192843750], [9.5860927734, 32.6182208984], [9.5205511719, 32.6171574219], [9.4550095703, 32.6160939453], [9.3894679688, 32.6150304687], [9.3239263672, 32.6139669922], [9.2583847656, 32.6129035156], [9.1928431641, 32.6118400391], [9.1273015625, 32.6107765625], [9.0617599609, 32.6097130859], [8.9962183594, 32.6086496094], [8.9306767578, 32.6075861328], [8.8651351563, 32.6065226562], [8.7995935547, 32.6054591797], [8.7340519531, 32.6043957031], [8.6685103516, 32.6033322266], [8.6029687500, 32.6022687500], [8.5374271484, 32.6012052734], [8.4718855469, 32.6001417969], [8.4063439453, 32.5990783203], [8.3408023437, 32.5980148437], [8.2752607422, 32.5969513672], [8.2097191406, 32.5958878906], [8.1441775391, 32.5948244141], [8.0786359375, 32.5937609375], [8.0130943359, 32.5926974609], [7.9475527344, 32.5916339844], [7.8820111328, 32.5905705078], [7.8164695313, 32.5895070312], [7.7509279297, 32.5884435547], [7.6853863281, 32.5873800781], [7.6198447266, 32.5863166016], [7.5543031250, 32.5852531250], [7.4887615234, 32.5841896484], [7.4232199219, 32.5831261719], [7.3576783203, 32.5820626953], [7.2921367188, 32.5809992187], [7.2265951172, 32.5799357422], [7.1610535156, 32.5788722656], [7.0955119141, 32.5778087891], [7.0299703125, 32.5767453125], [6.9644287109, 32.5756818359], [6.8988871094, 32.5746183594], [6.8333455078, 32.5735548828], [6.7678039063, 32.5724914062], [6.7022623047, 32.5714279297], [6.6367207031, 32.5703644531], [6.5711791016, 32.5693009766], [6.5056375000, 32.5682375000], [6.4400958984, 32.5671740234], [6.3745542969, 32.5661105469], [6.3090126953, 32.5650470703], [6.2434710938, 32.5639835937], [6.1779294922, 32.5629201172], [6.1123878906, 32.5618566406], [6.0468462891, 32.5607931641], [5.9813046875, 32.5597296875], [5.9157630859, 32.5586662109], [5.8502214844, 32.5576027344], [5.7846798828, 32.5565392578], [5.7191382813, 32.5554757812], [5.6535966797, 32.5544123047], [5.5880550781, 32.5533488281], [5.5225134766, 32.5522853516], [5.4569718750, 32.5512218750], [5.3914302734, 32.5501583984], [5.3258886719, 32.5490949219], [5.2603470703, 32.5480314453], [5.1948054688, 32.5469679687], [5.1292638672, 32.5459044922], [5.0637222656, 32.5448410156], [4.9981806641, 32.5437775391], [4.9326390625, 32.5427140625], [4.8670974609, 32.5416505859], [4.8015558594, 32.5405871094], [4.7360142578, 32.5395236328], [4.6704726563, 32.5384601562], [4.6049310547, 32.5373966797], [4.5393894531, 32.5363332031], [4.4738478516, 32.5352697266], [4.4083062500, 32.5342062500], [4.3427646484, 32.5331427734], [4.2772230469, 32.5320792969], [4.2116814453, 32.5310158203], [4.1461398438, 32.5299523437], [4.0805982422, 32.5288888672], [4.0150566406, 32.5278253906], [3.9495150391, 32.5267619141], [3.8839734375, 32.5256984375], [3.8184318359, 32.5246349609], [3.7528902344, 32.5235714844], [3.6873486328, 32.5225080078], [3.6218070313, 32.5214445312], [3.5562654297, 32.5203810547], [3.4907238281, 32.5193175781], [3.4251822266, 32.5182541016], [3.3596406250, 32.5171906250], [3.2940990234, 32.5161271484], [3.2285574219, 32.5150636719], [3.1630158203, 32.5140001953], [3.0974742188, 32.5129367187], [3.0319326172, 32.5118732422], [2.9663910156, 32.5108097656], [2.9008494141, 32.5097462891], [2.8353078125, 32.5086828125], [2.7697662109, 32.5076193359], [2.7042246094, 32.5065558594], [2.6386830078, 32.5054923828], [2.5731414063, 32.5044289062], [2.5075998047, 32.5033654297], [2.4420582031, 32.5023019531], [2.3765166016, 32.5012384766], [2.3109750000, 32.5001750000], [2.2454333984, 32.4991115234], [2.1798917969, 32.4980480469], [2.1143501953, 32.4969845703], [2.0488085938, 32.4959210937], [1.9832669922, 32.4948576172], [1.9177253906, 32.4937941406], [1.8521837891, 32.4927306641], [1.7866421875, 32.4916671875], [1.7211005859, 32.4906037109], [1.6555589844, 32.4895402344], [1.5900173828, 32.4884767578], [1.5244757813, 32.4874132812], [1.4589341797, 32.4863498047], [1.3933925781, 32.4852863281], [1.3278509766, 32.4842228516], [1.2623093750, 32.4831593750], [1.1967677734, 32.4820958984], [1.1312261719, 32.4810324219], [1.0656845703, 32.4799689453], [1.0001429688, 32.4789054687], [0.9346013672, 32.4778419922], [0.8690597656, 32.4767785156], [0.8035181641, 32.4757150391], [0.7379765625, 32.4746515625], [0.6724349609, 32.4735880859], [0.6068933594, 32.4725246094], [0.5413517578, 32.4714611328], [0.4758101563, 32.4703976563], [0.4102685547, 32.4693341797], [0.3447269531, 32.4682707031], [0.2791853516, 32.4672072266], [0.2136437500, 32.4661437500], [0.1481021484, 32.4650802734], [0.0825605469, 32.4640167969], [0.0170189453, 32.4629533203], [-0.0485226562, 32.4618898438], [-0.1140642578, 32.4608263672], [-0.1796058594, 32.4597628906], [-0.2451474609, 32.4586994141], [-0.3106890625, 32.4576359375], [-0.3762306641, 32.4565724609], [-0.4417722656, 32.4555089844], [-0.5073138672, 32.4544455078], [-0.5728554687, 32.4533820313], [-0.6383970703, 32.4523185547], [-0.7039386719, 32.4512550781], [-0.7694802734, 32.4501916016], [-0.8350218750, 32.4491281250], [-0.9005634766, 32.4480646484], [-0.9661050781, 32.4470011719], [-1.0316466797, 32.4459376953], [-1.0971882812, 32.4448742188], [-1.1627298828, 32.4438107422], [-1.2282714844, 32.4427472656], [-1.2938130859, 32.4416837891], [-1.3593546875, 32.4406203125], [-1.4248962891, 32.4395568359], [-1.4904378906, 32.4384933594], [-1.5559794922, 32.4374298828], [-1.6215210937, 32.4363664063], [-1.6870626953, 32.4353029297], [-1.7526042969, 32.4342394531], [-1.8181458984, 32.4331759766], [-1.8836875000, 32.4321125000], [-1.9492291016, 32.4310490234], [-2.0147707031, 32.4299855469], [-2.0803123047, 32.4289220703], [-2.1458539062, 32.4278585938], [-2.2113955078, 32.4267951172], [-2.2769371094, 32.4257316406], [-2.3424787109, 32.4246681641], [-2.4080203125, 32.4236046875], [-2.4735619141, 32.4225412109], [-2.5391035156, 32.4214777344], [-2.6046451172, 32.4204142578], [-2.6701867187, 32.4193507813], [-2.7357283203, 32.4182873047], [-2.8012699219, 32.4172238281], [-2.8668115234, 32.4161603516], [-2.9323531250, 32.4150968750], [-2.9978947266, 32.4140333984], [-3.0634363281, 32.4129699219], [-3.1289779297, 32.4119064453], [-3.1945195312, 32.4108429688], [-3.2600611328, 32.4097794922], [-3.3256027344, 32.4087160156], [-3.3911443359, 32.4076525391], [-3.4566859375, 32.4065890625], [-3.5222275391, 32.4055255859], [-3.5877691406, 32.4044621094], [-3.6533107422, 32.4033986328], [-3.7188523437, 32.4023351563], [-3.7843939453, 32.4012716797], [-3.8499355469, 32.4002082031], [-3.9154771484, 32.3991447266], [-3.9810187500, 32.3980812500], [-4.0465603516, 32.3970177734], [-4.1121019531, 32.3959542969], [-4.1776435547, 32.3948908203], [-4.2431851563, 32.3938273438], [-4.3087267578, 32.3927638672], [-4.3742683594, 32.3917003906], [-4.4398099609, 32.3906369141], [-4.5053515625, 32.3895734375], [-4.5708931641, 32.3885099609], [-4.6364347656, 32.3874464844], [-4.7019763672, 32.3863830078], [-4.7675179687, 32.3853195313], [-4.8330595703, 32.3842560547], [-4.8986011719, 32.3831925781], [-4.9641427734, 32.3821291016], [-5.0296843750, 32.3810656250], [-5.0952259766, 32.3800021484], [-5.1607675781, 32.3789386719], [-5.2263091797, 32.3778751953], [-5.2918507812, 32.3768117188], [-5.3573923828, 32.3757482422], [-5.4229339844, 32.3746847656], [-5.4884755859, 32.3736212891], [-5.5540171875, 32.3725578125], [-5.6195587891, 32.3714943359], [-5.6851003906, 32.3704308594], [-5.7506419922, 32.3693673828], [-5.8161835937, 32.3683039063], [-5.8817251953, 32.3672404297], [-5.9472667969, 32.3661769531], [-6.0128083984, 32.3651134766], [-6.0783500000, 32.3640500000], [-6.1438916016, 32.3629865234], [-6.2094332031, 32.3619230469], [-6.2749748047, 32.3608595703], [-6.3405164062, 32.3597960937], [-6.4060580078, 32.3587326172], [-6.4715996094, 32.3576691406], [-6.5371412109, 32.3566056641], [-6.6026828125, 32.3555421875], [-6.6682244141, 32.3544787109], [-6.7337660156, 32.3534152344], [-6.7993076172, 32.3523517578], [-6.8648492187, 32.3512882812], [-6.9303908203, 32.3502248047], [-6.9959324219, 32.3491613281], [-7.0614740234, 32.3480978516], [-7.1270156250, 32.3470343750], [-7.1925572266, 32.3459708984], [-7.2580988281, 32.3449074219], [-7.3236404297, 32.3438439453], [-7.3891820312, 32.3427804687], [-7.4547236328, 32.3417169922], [-7.5202652344, 32.3406535156], [-7.5858068359, 32.3395900391], [-7.6513484375, 32.3385265625], [-7.7168900391, 32.3374630859], [-7.7824316406, 32.3363996094], [-7.8479732422, 32.3353361328], [-7.9135148438, 32.3342726562], [-7.9790564453, 32.3332091797], [-8.0445980469, 32.3321457031], [-8.1101396484, 32.3310822266], [-8.1756812500, 32.3300187500], [-8.2412228516, 32.3289552734], [-8.3067644531, 32.3278917969], [-8.3723060547, 32.3268283203], [-8.4378476562, 32.3257648437], [-8.5033892578, 32.3247013672], [-8.5689308594, 32.3236378906], [-8.6344724609, 32.3225744141], [-8.7000140625, 32.3215109375], [-8.7655556641, 32.3204474609], [-8.8310972656, 32.3193839844], [-8.8966388672, 32.3183205078], [-8.9621804687, 32.3172570312], [-9.0277220703, 32.3161935547], [-9.0932636719, 32.3151300781], [-9.1588052734, 32.3140666016], [-9.2243468750, 32.3130031250], [-9.2898884766, 32.3119396484], [-9.3554300781, 32.3108761719], [-9.4209716797, 32.3098126953], [-9.4865132813, 32.3087492187], [-9.5520548828, 32.3076857422], [-9.6175964844, 32.3066222656], [-9.6831380859, 32.3055587891], [-9.7486796875, 32.3044953125], [-9.8142212891, 32.3034318359], [-9.8797628906, 32.3023683594], [-9.9453044922, 32.3013048828], [-10.0108460938, 32.3002414062], [-10.0763876953, 32.2991779297], [-10.1419292969, 32.2981144531], [-10.2074708984, 32.2970509766], [-10.2730125000, 32.2959875000], [-10.3385541016, 32.2949240234], [-10.4040957031, 32.2938605469], [-10.4696373047, 32.2927970703], [-10.5351789062, 32.2917335937], [-10.6007205078, 32.2906701172]]);
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
import math
import time

from stl import mesh, Dimension

from tkinter import Tk     # from tkinter import Tk for Python 3.x
from tkinter.filedialog import askopenfilename
from mpl_toolkits.mplot3d import art3d
from matplotlib import pyplot as plt
import solid
import os
import ezdxf
import shapely.geometry as sg
import subprocess
from GUI import getSCADPath



def outputSTL(From, To, PATH=getSCADPath()):
    subprocess.Popen(PATH + " -o " + To + " " + From)
    while not os.path.exists(To):
        time.sleep(1)

class Model:
    def __init__(self, model, fileName, location, layer, thickness):
        self.location = location
        self.code = None
        self.fileName = fileName
        self.stl = fileName + ".stl"
        self.layer = layer
        self.thickness = thickness
        self.maxz = (layer+1)*thickness
        self.dxf = fileName + ".dxf"
        self.scad = fileName + ".scad"
        self.model = model
        self.center = None
        self.width = 10
        self.mesh = None
        self.useable_area = None


    def get_code(self):
        max_dim = 0.05
        max_array = 6

        num = int(self.fileName)
        nums = [int(a) for a in str(num)]
        nums.reverse()
        indices = nums
        length = len(nums)

        print(indices)
        t = 0
        i = 0
        cubes = []
        x = 0
        y = 0
        width = 0.01
        while x <= max_dim:
            while y <= max_dim:
                print(indices)
                if nums == []:
                    break
                if indices[0] != 0:
                    cubes.append(solid.translate([x, y, 0])(solid.cube(size=t / 1000 + 0.001)))
                    y += max_dim / (max_array - 1)
                    nums[0] = nums[0] - 1
                else:
                    indices.pop(0)
                    t += 1
                i += 1
            x += max_dim / (max_array - 1)
            y = 0

        outside = solid.translate([-width / 2, -width / 2])(solid.cube(max_dim + (length - 1) / 1000 + 0.001 + width))
        self.code = solid.difference()(outside, cubes)
        self.code = solid.projection(cut=True)(self.code)
        solid.scad_render_to_file(self.code, self.location + "/code.scad")
        outputSTL(From=self.location+"/code.scad", To=self.location+"code.dxf", PATH=getSCADPath())
        # os.system("toSTL.sh renders/code.scad renders/code.dxf")
        return self.location+"/code.dxf"

    def download(self, type):
        if type =="stl":
            print("generating:" + self.location+"/"+ self.fileName+".stl")
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".stl")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".stl")
        elif type == "dxf":
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".dxf")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".dxf")

    def render(self):
        solid.scad_render_to_file(self.model, self.location+"/"+ self.fileName+'.scad')
        while not os.path.exists(self.location+"/"+self.fileName+".scad"):
            time.sleep(1)
        # outputSTL(From= self.location+"/"+ self.fileName+'.scad', To=self.location+"/"+ self.fileName+'.stl')

    def get_points(self):
        doc = ezdxf.readfile(filename=self.location+"/"+ self.fileName+".dxf")
        msp = doc.modelspace()
        i=0
        lists = []
        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return [start, end]

        for e in msp.query("LINE"):
            line = helper(e)
            if not lists:
                lists.append([line])
            else:
                if lists[i][len(lists)-1][1] != line[0]:
                    lists.append([line])
                    i+=1
                else:
                    lists[i].append(line)

    def get_points2(self, FILE):
        doc = ezdxf.readfile(filename=FILE)
        msp = doc.modelspace()
        i = 0
        lists = []

        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return (start, end)

        for e in msp.query("LINE"):
            line = helper(e)
            if lists==[]:
                lists.append([line])
            else:
                if lists[i][len(lists[i]) - 1][1] != line[0]:
                    lists.append([line])
                    i += 1
                else:
                    lists[i].append(line)
        return lists

    def add_code(self):
        dxf = solid.projection(cut=False)(self.model)
        offset = solid.offset(r=-0.1)(dxf)
        solid.scad_render_to_file(offset, self.location+'/offset.scad')
        os.system("toSTL.sh renders/offset.scad renders/offset.dxf")
        lines = self.get_points2("renders/offset.dxf")
        x = lines[0][0][0][0]
        y = lines[0][0][0][1]
        print(x)
        print(y)
        code = solid.translate([x,y,0])(self.code)
        code = solid.linear_extrude(height=999)(code)
        save = self.model
        self.model = solid.projection()(solid.difference()(self.model, code))
        self.render()
        self.download("dxf")
        self.model = save

    def add_label(self, pos):
        # num = 12
        # minx, maxx, miny, maxy, minz, maxz = self.find_minmax()
        maxz = self.maxz
        # label = solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.5, halign="center"))
        # i=minx
        # print("x-len: " + str(maxx-minx))
        # print(i)
        # inc = (maxx-minx)/num
        # while minx <= i <= maxx:
        #     label = solid.union()(solid.translate([i, 0, maxz - 0.2])(solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.25, halign="center"))), label)
        #     i += inc
        #
        # l = label
        #
        # i =miny
        # while miny<= i <= maxy:
        #     print("y inc")
        #     l = solid.union()(solid.translate([0, i, 0])(label), l)
        #     i += 0.5
        for i in str(self.fileName):
            cur = pos[0]
            label = solid.translate([pos[0][0], pos[0][1], self.maxz-0.2])(solid.linear_extrude(height=(self.thickness)/3)(solid.text(str(i), size=0.5, halign="center", valign="center")))
            self.model = solid.difference()(self.model, label)
            pos.append(pos.pop(0))
            while abs(cur[0]-pos[0][0])<0.5 and abs(cur[1]-pos[0][1])<0.5:
                pos.append(pos.pop(0))



    def Center(self):

        volume, cog, inertia = self.mesh.get_mass_properties()
        print("Volume                                  = {0}".format(volume))
        print("Position of the center of gravity (COG) = {0}".format(cog))
        m_centered = solid.translate([-cog[0], -cog[1], 0])(
            self.model
        )
        return m_centered

    def find_minmax(self):
        minx = maxx = miny = maxy = minz = maxz = None
        for p in self.mesh.points:
            # p contains (x, y, z)
            if minx is None:
                minx = p[Dimension.X]
                maxx = p[Dimension.X]
                miny = p[Dimension.Y]
                maxy = p[Dimension.Y]
                minz = p[Dimension.Z]
                maxz = p[Dimension.Z]
            else:
                maxx = max(p[Dimension.X], maxx)
                minx = min(p[Dimension.X], minx)
                maxy = max(p[Dimension.Y], maxy)
                miny = min(p[Dimension.Y], miny)
                maxz = max(p[Dimension.Z], maxz)
                minz = min(p[Dimension.Z], minz)
        lenx = maxx - minx
        leny = maxy - miny
        lenz = maxz - minz
        return minx, maxx, miny, maxy, minz, maxz

    # def generate_Mesh(self):
    #     self.mesh = mesh.Mesh.from_file(self.location + "/" + str(int(self.fileName)//8)+ "b.stl")

    def get_top(self):
        top = solid.projection(cut=True)(solid.translate([0,0,-1*self.thickness*(self.layer+1)])(self.model))
        useable_area = solid.offset(r=-0.45)(top)
        self.useable_area = useable_area
        solid.scad_render_to_file(self.useable_area, self.location+'/' + 'toptemp.scad')
        outputSTL(From=self.location+'/' + 'toptemp.scad', To=self.location+"/top"+ self.dxf)

        # os.system("toSTL.sh out/toptemp.scad renders/" + self.fileName + ".dxf")
        dxf = DXF(self.location+"/top"+ self.dxf)
        min_p=dxf.points[0][0]
        points_ordered = dxf.points
        i=0
        while i <= len(dxf.points)+1:
            while math.sqrt((dxf.points[0][0]-dxf.points[1][0])**2+(dxf.points[0][1]-dxf.points[1][1])**2) > 0.1:
                dxf.points.insert(1, [(dxf.points[0][0]+dxf.points[1][0])/2, (dxf.points[0][1]+dxf.points[1][1])/2])
                i = i-1
            dxf.points.append(dxf.points.pop(0))
            i+=1
        for i in range(len(dxf.points)):
            dxf.points.append(dxf.points.pop(0))
            if dxf.points[0][0] < min_p:
                min_p = dxf.points[0][0]
                points_ordered = dxf.points.copy()
        dxf.points = points_ordered.copy()

        print(dxf.points)
        self.add_label(dxf.points)

class DXF:
    def __init__(self, file):
        self.file = file
        self.Lines = []
        self.points = []
        doc = ezdxf.readfile(self.file)
        msp = doc.modelspace()
        for e in msp:
            if e.dxftype() == "LINE":
                self.Lines.append(e)
                self.points.append([e.dxf.start[0], e.dxf.start[1]])
        # self.points.append([self.Lines[-1].dxf.end[0], self.Lines[-1].dxf.end[1]])
        self.area = None
        self.center = None
        self.polygon = sg.Polygon(self.points)

    def get_area(self):
        self.area = self.polygon.area
        return self.area

    def get_center(self):
        x_sum = 0
        y_sum =0
        for i in self.points:
            x_sum += i[0]
            y_sum += i[1]
        x_c = x_sum/len(self.points)
        y_c = y_sum/len(self.points)
        return (x_c, y_c)

    def split(self, maxdim):
        splits = []
        length = 0
        pieces = [[]]
        prev = self.points[-1]
        pieces[-1].append(prev)
        for j in self.points:
            length = length + math.sqrt((prev[0]-j[0])**2+(prev[1]-j[1])**2)
            if length >= maxdim:
                pieces[-1].append(j)
                pieces.append([])
                length = 0
            pieces[-1].append(j)
            prev = j
        for j in pieces:
            j.insert(0, [0,0])
            piece = solid.linear_extrude(height=10)(solid.polygon(j))
            splits.append(piece)
        return splits
    def refine_points(self):
        i=0
        while i <= len(self.points)+1:
            while math.sqrt((self.points[0][0]-self.points[1][0])**2+(self.points[0][1]-self.points[1][1])**2) > 0.1:
                self.points.insert(1, [(self.points[0][0]+self.points[1][0])/2, (self.points[0][1]+self.points[1][1])/2])
                i = i-1
            self.points.append(self.points.pop(0))
            i+=1


if __name__== "__main__":
    test = DXF("C:/Users/Daniel/Documents/repos/Shell_Maker/output/0top_slice.dxf")
    test.refine_points()
    k = test.split(48)
    for i in range(len(k)):
        solid.scad_render_to_file(k[i], str(i) + ".scad")


 
 
************************************************/
