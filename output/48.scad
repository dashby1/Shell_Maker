// Generated by SolidPython 1.1.3 on 2024-05-19 23:41:54


intersection() {
	difference() {
		intersection() {
			translate(v = [0, 0, 0]) {
				import(file = "CE3E3V2_Bottom_shell.stl", origin = [0, 0]);
			}
			translate(v = [-90.04029846191406, -32.690147399902344, 12]) {
				cube(size = [180.0806, 65.380295, 2]);
			}
		}
		linear_extrude(height = 999) {
			offset(r = -1) {
				import(file = "C:/Users/Daniel/Documents/repos/Shell_Maker/output/6top_slice.dxf", origin = [0, 0]);
			}
		}
	}
	translate(v = [0, 0, 12]) {
		linear_extrude(height = 10) {
			polygon(points = [[0, 0], [47.9058500000, -20.3136625000], [47.9886625000, -20.2619968750], [48.0714750000, -20.2103312500], [48.1542875000, -20.1586656250], [48.2371000000, -20.1070000000], [48.2858687500, -20.0768187500], [48.3346375000, -20.0466375000], [48.3834062500, -20.0164562500], [48.4321750000, -19.9862750000], [48.4809437500, -19.9560937500], [48.5297125000, -19.9259125000], [48.5784812500, -19.8957312500], [48.6272500000, -19.8655500000], [48.6760187500, -19.8353687500], [48.7247875000, -19.8051875000], [48.7735562500, -19.7750062500], [48.8223250000, -19.7448250000], [48.8710937500, -19.7146437500], [48.9198625000, -19.6844625000], [48.9686312500, -19.6542812500], [49.0174000000, -19.6241000000], [49.0231000000, -19.6202000000], [49.0711812500, -19.5864062500], [49.1192625000, -19.5526125000], [49.1673437500, -19.5188187500], [49.2154250000, -19.4850250000], [49.2635062500, -19.4512312500], [49.3115875000, -19.4174375000], [49.3596687500, -19.3836437500], [49.4077500000, -19.3498500000], [49.4558312500, -19.3160562500], [49.5039125000, -19.2822625000], [49.5519937500, -19.2484687500], [49.6000750000, -19.2146750000], [49.6481562500, -19.1808812500], [49.6962375000, -19.1470875000], [49.7443187500, -19.1132937500], [49.7924000000, -19.0795000000], [49.8413625000, -19.0450500000], [49.8903250000, -19.0106000000], [49.9392875000, -18.9761500000], [49.9882500000, -18.9417000000], [50.0372125000, -18.9072500000], [50.0861750000, -18.8728000000], [50.1351375000, -18.8383500000], [50.1841000000, -18.8039000000], [50.2315500000, -18.7675000000], [50.2790000000, -18.7311000000], [50.3264500000, -18.6947000000], [50.3739000000, -18.6583000000], [50.4213500000, -18.6219000000], [50.4688000000, -18.5855000000], [50.5162500000, -18.5491000000], [50.5637000000, -18.5127000000], [50.6111500000, -18.4763000000], [50.6586000000, -18.4399000000], [50.7060500000, -18.4035000000], [50.7535000000, -18.3671000000], [50.8009500000, -18.3307000000], [50.8484000000, -18.2943000000], [50.8958500000, -18.2579000000], [50.9433000000, -18.2215000000], [50.9907500000, -18.1851000000], [51.0382000000, -18.1487000000], [51.0856500000, -18.1123000000], [51.1331000000, -18.0759000000], [51.1805500000, -18.0395000000], [51.2280000000, -18.0031000000], [51.2754500000, -17.9667000000], [51.3229000000, -17.9303000000], [51.3703500000, -17.8939000000], [51.4178000000, -17.8575000000], [51.4652500000, -17.8211000000], [51.5127000000, -17.7847000000], [51.5601500000, -17.7483000000], [51.6076000000, -17.7119000000], [51.6550500000, -17.6755000000], [51.7025000000, -17.6391000000], [51.7625000000, -17.5925125000], [51.8225000000, -17.5459250000], [51.8825000000, -17.4993375000], [51.9425000000, -17.4527500000], [52.0025000000, -17.4061625000], [52.0625000000, -17.3595750000], [52.1225000000, -17.3129875000], [52.1825000000, -17.2664000000], [52.2384000000, -17.2205000000], [52.2961531250, -17.1691218750], [52.3539062500, -17.1177437500], [52.4116593750, -17.0663656250], [52.4694125000, -17.0149875000], [52.5271656250, -16.9636093750], [52.5849187500, -16.9122312500], [52.6426718750, -16.8608531250], [52.7004250000, -16.8094750000], [52.7581781250, -16.7580968750], [52.8159312500, -16.7067187500], [52.8736843750, -16.6553406250], [52.9314375000, -16.6039625000], [52.9891906250, -16.5525843750], [53.0469437500, -16.5012062500], [53.1046968750, -16.4498281250], [53.1624500000, -16.3984500000], [53.2202031250, -16.3470718750], [53.2779562500, -16.2956937500], [53.3357093750, -16.2443156250], [53.3934625000, -16.1929375000], [53.4512156250, -16.1415593750], [53.5089687500, -16.0901812500], [53.5667218750, -16.0388031250], [53.6244750000, -15.9874250000], [53.6822281250, -15.9360468750], [53.7399812500, -15.8846687500], [53.7977343750, -15.8332906250], [53.8554875000, -15.7819125000], [53.9132406250, -15.7305343750], [53.9709937500, -15.6791562500], [54.0287468750, -15.6277781250], [54.0865000000, -15.5764000000], [54.1375500000, -15.5304500000], [54.1886000000, -15.4845000000], [54.2396500000, -15.4385500000], [54.2907000000, -15.3926000000], [54.3417500000, -15.3466500000], [54.3928000000, -15.3007000000], [54.4438500000, -15.2547500000], [54.4949000000, -15.2088000000], [54.5459500000, -15.1628500000], [54.5970000000, -15.1169000000], [54.6480500000, -15.0709500000], [54.6991000000, -15.0250000000], [54.7501500000, -14.9790500000], [54.8012000000, -14.9331000000], [54.8522500000, -14.8871500000], [54.9033000000, -14.8412000000], [54.9077000000, -14.8369000000], [54.9440750000, -14.8007750000], [54.9804500000, -14.7646500000], [55.0168250000, -14.7285250000], [55.0532000000, -14.6924000000], [55.0895750000, -14.6562750000], [55.1259500000, -14.6201500000], [55.1623250000, -14.5840250000], [55.1987000000, -14.5479000000], [55.2396000000, -14.5073500000], [55.2805000000, -14.4668000000], [55.3259000000, -14.4193500000], [55.3713000000, -14.3719000000], [55.4167000000, -14.3244500000], [55.4621000000, -14.2770000000], [55.5075000000, -14.2295500000], [55.5529000000, -14.1821000000], [55.5983000000, -14.1346500000], [55.6437000000, -14.0872000000], [55.6891000000, -14.0397500000], [55.7345000000, -13.9923000000], [55.7799000000, -13.9448500000], [55.8253000000, -13.8974000000], [55.8707000000, -13.8499500000], [55.9161000000, -13.8025000000], [55.9615000000, -13.7550500000], [56.0069000000, -13.7076000000], [56.0599125000, -13.6492500000], [56.1129250000, -13.5909000000], [56.1659375000, -13.5325500000], [56.2189500000, -13.4742000000], [56.2719625000, -13.4158500000], [56.3249750000, -13.3575000000], [56.3779875000, -13.2991500000], [56.4310000000, -13.2408000000], [56.4704000000, -13.1956500000], [56.5098000000, -13.1505000000], [56.5492000000, -13.1053500000], [56.5886000000, -13.0602000000], [56.6302500000, -13.0102812500], [56.6719000000, -12.9603625000], [56.7135500000, -12.9104437500], [56.7552000000, -12.8605250000], [56.7968500000, -12.8106062500], [56.8385000000, -12.7606875000], [56.8801500000, -12.7107687500], [56.9218000000, -12.6608500000], [56.9634500000, -12.6109312500], [57.0051000000, -12.5610125000], [57.0467500000, -12.5110937500], [57.0884000000, -12.4611750000], [57.1300500000, -12.4112562500], [57.1717000000, -12.3613375000], [57.2133500000, -12.3114187500], [57.2550000000, -12.2615000000], [57.2966500000, -12.2115812500], [57.3383000000, -12.1616625000], [57.3799500000, -12.1117437500], [57.4216000000, -12.0618250000], [57.4632500000, -12.0119062500], [57.5049000000, -11.9619875000], [57.5465500000, -11.9120687500], [57.5882000000, -11.8621500000], [57.6298500000, -11.8122312500], [57.6715000000, -11.7623125000], [57.7131500000, -11.7123937500], [57.7548000000, -11.6624750000], [57.7964500000, -11.6125562500], [57.8381000000, -11.5626375000], [57.8797500000, -11.5127187500], [57.9214000000, -11.4628000000], [57.9803500000, -11.3880000000], [58.0393000000, -11.3132000000], [58.0874500000, -11.2447250000], [58.1356000000, -11.1762500000], [58.1837500000, -11.1077750000], [58.2319000000, -11.0393000000], [58.2800500000, -10.9708250000], [58.3282000000, -10.9023500000], [58.3763500000, -10.8338750000], [58.4245000000, -10.7654000000], [58.4726500000, -10.6969250000], [58.5208000000, -10.6284500000], [58.5689500000, -10.5599750000], [58.6171000000, -10.4915000000], [58.6652500000, -10.4230250000], [58.7134000000, -10.3545500000], [58.7615500000, -10.2860750000], [58.8097000000, -10.2176000000], [58.8565250000, -10.1543662500], [58.9033500000, -10.0911325000], [58.9501750000, -10.0278987500], [58.9970000000, -9.9646650000], [59.0438250000, -9.9014312500], [59.0906500000, -9.8381975000], [59.1374750000, -9.7749637500], [59.1843000000, -9.7117300000], [59.2168000000, -9.6615050000], [59.2493000000, -9.6112800000], [59.2797312500, -9.5619837500], [59.3101625000, -9.5126875000], [59.3405937500, -9.4633912500], [59.3710250000, -9.4140950000], [59.4014562500, -9.3647987500], [59.4318875000, -9.3155025000], [59.4623187500, -9.2662062500], [59.4927500000, -9.2169100000], [59.5231812500, -9.1676137500], [59.5536125000, -9.1183175000], [59.5840437500, -9.0690212500], [59.6144750000, -9.0197250000], [59.6449062500, -8.9704287500], [59.6753375000, -8.9211325000], [59.7057687500, -8.8718362500], [59.7362000000, -8.8225400000], [59.7761750000, -8.7572050000], [59.8161500000, -8.6918700000], [59.8561250000, -8.6265350000], [59.8961000000, -8.5612000000], [59.9062000000, -8.5439800000], [59.9485750000, -8.4690475000], [59.9909500000, -8.3941150000], [60.0333250000, -8.3191825000], [60.0757000000, -8.2442500000], [60.1011718750, -8.1908846875], [60.1266437500, -8.1375193750], [60.1521156250, -8.0841540625], [60.1775875000, -8.0307887500], [60.2030593750, -7.9774234375], [60.2285312500, -7.9240581250], [60.2540031250, -7.8706928125], [60.2794750000, -7.8173275000], [60.3049468750, -7.7639621875], [60.3304187500, -7.7105968750], [60.3558906250, -7.6572315625], [60.3813625000, -7.6038662500], [60.4068343750, -7.5505009375], [60.4323062500, -7.4971356250], [60.4577781250, -7.4437703125], [60.4832500000, -7.3904050000], [60.5087218750, -7.3370396875], [60.5341937500, -7.2836743750], [60.5596656250, -7.2303090625], [60.5851375000, -7.1769437500], [60.6106093750, -7.1235784375], [60.6360812500, -7.0702131250], [60.6615531250, -7.0168478125], [60.6870250000, -6.9634825000], [60.7124968750, -6.9101171875], [60.7379687500, -6.8567518750], [60.7634406250, -6.8033865625], [60.7889125000, -6.7500212500], [60.8143843750, -6.6966559375], [60.8398562500, -6.6432906250], [60.8653281250, -6.5899253125], [60.8908000000, -6.5365600000], [60.9294875000, -6.4596687500], [60.9681750000, -6.3827775000], [61.0068625000, -6.3058862500], [61.0455500000, -6.2289950000], [61.0842375000, -6.1521037500], [61.1229250000, -6.0752125000], [61.1616125000, -5.9983212500], [61.2003000000, -5.9214300000], [61.2159000000, -5.8833200000], [61.2443500000, -5.8102825000], [61.2728000000, -5.7372450000], [61.3012500000, -5.6642075000], [61.3297000000, -5.5911700000], [61.3559000000, -5.5254650000], [61.3821000000, -5.4597600000], [61.4083000000, -5.3752056250], [61.4345000000, -5.2906512500], [61.4607000000, -5.2060968750], [61.4869000000, -5.1215425000], [61.5131000000, -5.0369881250], [61.5393000000, -4.9524337500], [61.5655000000, -4.8678793750], [61.5917000000, -4.7833250000], [61.6179000000, -4.6987706250], [61.6441000000, -4.6142162500], [61.6703000000, -4.5296618750], [61.6965000000, -4.4451075000], [61.7227000000, -4.3605531250], [61.7489000000, -4.2759987500], [61.7751000000, -4.1914443750], [61.8013000000, -4.1068900000], [61.8264875000, -4.0268750000], [61.8516750000, -3.9468600000], [61.8768625000, -3.8668450000], [61.9020500000, -3.7868300000], [61.9272375000, -3.7068150000], [61.9524250000, -3.6268000000], [61.9776125000, -3.5467850000], [62.0028000000, -3.4667700000], [62.0076000000, -3.4470700000], [62.0247500000, -3.3672262500], [62.0419000000, -3.2873825000], [62.0590500000, -3.2075387500], [62.0762000000, -3.1276950000], [62.0933500000, -3.0478512500], [62.1105000000, -2.9680075000], [62.1276500000, -2.8881637500], [62.1448000000, -2.8083200000], [62.1556250000, -2.7587200000], [62.1664500000, -2.7091200000], [62.1772750000, -2.6595200000], [62.1881000000, -2.6099200000], [62.1889000000, -2.6052900000], [62.1968875000, -2.5483718750], [62.2048750000, -2.4914537500], [62.2128625000, -2.4345356250], [62.2208500000, -2.3776175000], [62.2288375000, -2.3206993750], [62.2368250000, -2.2637812500], [62.2448125000, -2.2068631250], [62.2528000000, -2.1499450000], [62.2607875000, -2.0930268750], [62.2687750000, -2.0361087500], [62.2767625000, -1.9791906250], [62.2847500000, -1.9222725000], [62.2927375000, -1.8653543750], [62.3007250000, -1.8084362500], [62.3087125000, -1.7515181250], [62.3167000000, -1.6946000000], [62.3245500000, -1.6382262500], [62.3324000000, -1.5818525000], [62.3402500000, -1.5254787500], [62.3481000000, -1.4691050000], [62.3559500000, -1.4127312500], [62.3638000000, -1.3563575000], [62.3716500000, -1.2999837500], [62.3795000000, -1.2436100000], [62.3851625000, -1.1455317500], [62.3908250000, -1.0474535000], [62.3964875000, -0.9493752500], [62.4021500000, -0.8512970000], [62.4078125000, -0.7532187500], [62.4134750000, -0.6551405000], [62.4191375000, -0.5570622500], [62.4248000000, -0.4589840000], [62.4277000000, -0.4085080000], [62.4306000000, -0.3580320000], [62.4335000000, -0.3075560000], [62.4364000000, -0.2570800000], [62.4364000000, -0.2548680000], [62.4306187500, -0.1588212500], [62.4248375000, -0.0627745000], [62.4190562500, 0.0332722500], [62.4132750000, 0.1293190000], [62.4074937500, 0.2253657500], [62.4017125000, 0.3214125000], [62.3959312500, 0.4174592500], [62.3901500000, 0.5135060000], [62.3843687500, 0.6095527500], [62.3785875000, 0.7055995000], [62.3728062500, 0.8016462500], [62.3670250000, 0.8976930000], [62.3612437500, 0.9937397500], [62.3554625000, 1.0897865000], [62.3496812500, 1.1858332500], [62.3439000000, 1.2818800000], [62.3392000000, 1.3593175000], [62.3345000000, 1.4367550000], [62.3298000000, 1.5141925000], [62.3251000000, 1.5916300000], [62.3213875000, 1.6510250000], [62.3176750000, 1.7104200000], [62.3139625000, 1.7698150000], [62.3102500000, 1.8292100000], [62.3065375000, 1.8886050000], [62.3028250000, 1.9480000000], [62.2991125000, 2.0073950000], [62.2954000000, 2.0667900000], [62.2943000000, 2.0738700000], [62.2806000000, 2.1643850000], [62.2669000000, 2.2549000000], [62.2624000000, 2.2845900000], [62.2511000000, 2.3517200000], [62.2398000000, 2.4188500000], [62.2293000000, 2.4787000000], [62.2189000000, 2.5352275000], [62.2085000000, 2.5917550000], [62.1981000000, 2.6482825000], [62.1877000000, 2.7048100000], [62.1773000000, 2.7613375000], [62.1669000000, 2.8178650000], [62.1565000000, 2.8743925000], [62.1461000000, 2.9309200000], [62.1301000000, 3.0110500000], [62.1063000000, 3.1000306250], [62.0825000000, 3.1890112500], [62.0587000000, 3.2779918750], [62.0349000000, 3.3669725000], [62.0111000000, 3.4559531250], [61.9873000000, 3.5449337500], [61.9635000000, 3.6339143750], [61.9397000000, 3.7228950000], [61.9159000000, 3.8118756250], [61.8921000000, 3.9008562500], [61.8683000000, 3.9898368750], [61.8445000000, 4.0788175000], [61.8207000000, 4.1677981250], [61.7969000000, 4.2567787500], [61.7731000000, 4.3457593750], [61.7493000000, 4.4347400000], [61.7343000000, 4.4885312500], [61.7193000000, 4.5423225000], [61.7043000000, 4.5961137500], [61.6893000000, 4.6499050000], [61.6743000000, 4.7036962500], [61.6593000000, 4.7574875000], [61.6443000000, 4.8112787500], [61.6293000000, 4.8650700000], [61.6136000000, 4.9115100000], [61.5932312500, 4.9615600000], [61.5728625000, 5.0116100000], [61.5524937500, 5.0616600000], [61.5321250000, 5.1117100000], [61.5117562500, 5.1617600000], [61.4913875000, 5.2118100000], [61.4710187500, 5.2618600000], [61.4506500000, 5.3119100000], [61.4302812500, 5.3619600000], [61.4099125000, 5.4120100000], [61.3895437500, 5.4620600000], [61.3691750000, 5.5121100000], [61.3488062500, 5.5621600000], [61.3284375000, 5.6122100000], [61.3080687500, 5.6622600000], [61.2877000000, 5.7123100000], [61.2673312500, 5.7623600000], [61.2469625000, 5.8124100000], [61.2265937500, 5.8624600000], [61.2062250000, 5.9125100000], [61.1858562500, 5.9625600000], [61.1654875000, 6.0126100000], [61.1451187500, 6.0626600000], [61.1247500000, 6.1127100000], [61.1043812500, 6.1627600000], [61.0840125000, 6.2128100000], [61.0636437500, 6.2628600000], [61.0432750000, 6.3129100000], [61.0229062500, 6.3629600000], [61.0025375000, 6.4130100000], [60.9821687500, 6.4630600000], [60.9618000000, 6.5131100000], [60.9252250000, 6.6005425000], [60.8886500000, 6.6879750000], [60.8520750000, 6.7754075000], [60.8155000000, 6.8628400000], [60.7789250000, 6.9502725000], [60.7423500000, 7.0377050000], [60.7057750000, 7.1251375000], [60.6692000000, 7.2125700000], [60.6617000000, 7.2281000000], [60.6209000000, 7.3105200000], [60.5974125000, 7.3569275000], [60.5739250000, 7.4033350000], [60.5504375000, 7.4497425000], [60.5269500000, 7.4961500000], [60.5034625000, 7.5425575000], [60.4799750000, 7.5889650000], [60.4564875000, 7.6353725000], [60.4330000000, 7.6817800000], [60.4101000000, 7.7263000000], [60.3852250000, 7.7729625000], [60.3603500000, 7.8196250000], [60.3354750000, 7.8662875000], [60.3106000000, 7.9129500000], [60.2671000000, 7.9928600000], [60.2328156250, 8.0487043750], [60.1985312500, 8.1045487500], [60.1642468750, 8.1603931250], [60.1299625000, 8.2162375000], [60.0956781250, 8.2720818750], [60.0613937500, 8.3279262500], [60.0271093750, 8.3837706250], [59.9928250000, 8.4396150000], [59.9585406250, 8.4954593750], [59.9242562500, 8.5513037500], [59.8899718750, 8.6071481250], [59.8556875000, 8.6629925000], [59.8214031250, 8.7188368750], [59.7871187500, 8.7746812500], [59.7528343750, 8.8305256250], [59.7185500000, 8.8863700000], [59.6842656250, 8.9422143750], [59.6499812500, 8.9980587500], [59.6156968750, 9.0539031250], [59.5814125000, 9.1097475000], [59.5471281250, 9.1655918750], [59.5128437500, 9.2214362500], [59.4785593750, 9.2772806250], [59.4442750000, 9.3331250000], [59.4099906250, 9.3889693750], [59.3757062500, 9.4448137500], [59.3414218750, 9.5006581250], [59.3071375000, 9.5565025000], [59.2728531250, 9.6123468750], [59.2385687500, 9.6681912500], [59.2042843750, 9.7240356250], [59.1700000000, 9.7798800000], [59.1246750000, 9.8514100000], [59.0793500000, 9.9229400000], [59.0340250000, 9.9944700000], [58.9887000000, 10.0660000000], [58.9475500000, 10.1296375000], [58.9064000000, 10.1932750000], [58.8652500000, 10.2569125000], [58.8241000000, 10.3205500000], [58.7829500000, 10.3841875000], [58.7418000000, 10.4478250000], [58.7006500000, 10.5114625000], [58.6595000000, 10.5751000000], [58.6212000000, 10.6285000000], [58.5861062500, 10.6757187500], [58.5510125000, 10.7229375000], [58.5159187500, 10.7701562500], [58.4808250000, 10.8173750000], [58.4457312500, 10.8645937500], [58.4106375000, 10.9118125000], [58.3755437500, 10.9590312500], [58.3404500000, 11.0062500000], [58.3053562500, 11.0534687500], [58.2702625000, 11.1006875000], [58.2351687500, 11.1479062500], [58.2000750000, 11.1951250000], [58.1649812500, 11.2423437500], [58.1298875000, 11.2895625000], [58.0947937500, 11.3367812500], [58.0597000000, 11.3840000000], [58.0113500000, 11.4478750000], [57.9630000000, 11.5117500000], [57.9146500000, 11.5756250000], [57.8663000000, 11.6395000000], [57.8050875000, 11.7128625000], [57.7438750000, 11.7862250000], [57.6826625000, 11.8595875000], [57.6214500000, 11.9329500000], [57.5602375000, 12.0063125000], [57.4990250000, 12.0796750000], [57.4378125000, 12.1530375000], [57.3766000000, 12.2264000000], [57.3153875000, 12.2997625000], [57.2541750000, 12.3731250000], [57.1929625000, 12.4464875000], [57.1317500000, 12.5198500000], [57.0705375000, 12.5932125000], [57.0093250000, 12.6665750000], [56.9481125000, 12.7399375000], [56.8869000000, 12.8133000000], [56.8516125000, 12.8552750000], [56.8163250000, 12.8972500000], [56.7810375000, 12.9392250000], [56.7457500000, 12.9812000000], [56.7104625000, 13.0231750000], [56.6751750000, 13.0651500000], [56.6398875000, 13.1071250000], [56.6046000000, 13.1491000000], [56.5839000000, 13.1722000000], [56.5213875000, 13.2382437500], [56.4588750000, 13.3042875000], [56.3963625000, 13.3703312500], [56.3338500000, 13.4363750000], [56.2713375000, 13.5024187500], [56.2088250000, 13.5684625000], [56.1463125000, 13.6345062500], [56.0838000000, 13.7005500000], [56.0212875000, 13.7665937500], [55.9587750000, 13.8326375000], [55.8962625000, 13.8986812500], [55.8337500000, 13.9647250000], [55.7712375000, 14.0307687500], [55.7087250000, 14.0968125000], [55.6462125000, 14.1628562500], [55.5837000000, 14.2289000000], [55.5327500000, 14.2827500000], [55.4818000000, 14.3366000000], [55.4308500000, 14.3904500000], [55.3799000000, 14.4443000000], [55.3289500000, 14.4981500000], [55.2780000000, 14.5520000000], [55.2270500000, 14.6058500000], [55.1761000000, 14.6597000000], [55.1525000000, 14.6832000000], [55.1041625000, 14.7279687500], [55.0558250000, 14.7727375000], [55.0074875000, 14.8175062500], [54.9591500000, 14.8622750000], [54.9108125000, 14.9070437500], [54.8624750000, 14.9518125000], [54.8141375000, 14.9965812500], [54.7658000000, 15.0413500000], [54.7174625000, 15.0861187500], [54.6691250000, 15.1308875000], [54.6207875000, 15.1756562500], [54.5724500000, 15.2204250000], [54.5241125000, 15.2651937500], [54.4757750000, 15.3099625000], [54.4274375000, 15.3547312500], [54.3791000000, 15.3995000000], [54.3307625000, 15.4442687500], [54.2824250000, 15.4890375000], [54.2340875000, 15.5338062500], [54.1857500000, 15.5785750000], [54.1374125000, 15.6233437500], [54.0890750000, 15.6681125000], [54.0407375000, 15.7128812500], [53.9924000000, 15.7576500000], [53.9440625000, 15.8024187500], [53.8957250000, 15.8471875000], [53.8473875000, 15.8919562500], [53.7990500000, 15.9367250000], [53.7507125000, 15.9814937500], [53.7023750000, 16.0262625000], [53.6540375000, 16.0710312500], [53.6057000000, 16.1158000000], [53.5513750000, 16.1664375000], [53.4970500000, 16.2170750000], [53.4427250000, 16.2677125000], [53.3884000000, 16.3183500000], [53.3340750000, 16.3689875000], [53.2797500000, 16.4196250000], [53.2254250000, 16.4702625000], [53.1711000000, 16.5209000000], [53.1170750000, 16.5667500000], [53.0630500000, 16.6126000000], [53.0090250000, 16.6584500000], [52.9550000000, 16.7043000000], [52.9096187500, 16.7422437500], [52.8642375000, 16.7801875000], [52.8188562500, 16.8181312500], [52.7734750000, 16.8560750000], [52.7280937500, 16.8940187500], [52.6827125000, 16.9319625000], [52.6373312500, 16.9699062500], [52.5919500000, 17.0078500000], [52.5465687500, 17.0457937500], [52.5011875000, 17.0837375000], [52.4558062500, 17.1216812500], [52.4104250000, 17.1596250000], [52.3650437500, 17.1975687500], [52.3196625000, 17.2355125000], [52.2742812500, 17.2734562500], [52.2289000000, 17.3114000000], [52.1633000000, 17.3652000000], [52.0847125000, 17.4250500000], [52.0061250000, 17.4849000000], [51.9275375000, 17.5447500000], [51.8489500000, 17.6046000000], [51.7703625000, 17.6644500000], [51.6917750000, 17.7243000000], [51.6131875000, 17.7841500000], [51.5346000000, 17.8440000000], [51.4904000000, 17.8771750000], [51.4462000000, 17.9103500000], [51.4020000000, 17.9435250000], [51.3578000000, 17.9767000000], [51.3136000000, 18.0098750000], [51.2694000000, 18.0430500000], [51.2252000000, 18.0762250000], [51.1810000000, 18.1094000000]]);
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
import math
import time

from stl import mesh, Dimension

from tkinter import Tk     # from tkinter import Tk for Python 3.x
from tkinter.filedialog import askopenfilename
from mpl_toolkits.mplot3d import art3d
from matplotlib import pyplot as plt
import solid
import os
import ezdxf
import shapely.geometry as sg
import subprocess
from GUI import getSCADPath



def outputSTL(From, To, PATH=getSCADPath()):
    subprocess.Popen(PATH + " -o " + To + " " + From)
    while not os.path.exists(To):
        time.sleep(1)


def get_size(i):
    x_list = [int(a) for a in str(i)]
    return len(x_list)



class Model:
    def __init__(self, model, fileName, location, layer, thickness):
        self.location = location
        self.code = None
        self.fileName = fileName
        self.stl = fileName + ".stl"
        self.layer = layer
        self.thickness = thickness
        self.maxz = (layer+1)*thickness
        self.dxf = fileName + ".dxf"
        self.scad = fileName + ".scad"
        self.model = model
        self.center = None
        self.width = 10
        self.mesh = None
        self.useable_area = None


    def get_code(self):
        max_dim = 0.05
        max_array = 6

        num = int(self.fileName)
        nums = [int(a) for a in str(num)]
        nums.reverse()
        indices = nums
        length = len(nums)

        print(indices)
        t = 0
        i = 0
        cubes = []
        x = 0
        y = 0
        width = 0.01
        while x <= max_dim:
            while y <= max_dim:
                print(indices)
                if nums == []:
                    break
                if indices[0] != 0:
                    cubes.append(solid.translate([x, y, 0])(solid.cube(size=t / 1000 + 0.001)))
                    y += max_dim / (max_array - 1)
                    nums[0] = nums[0] - 1
                else:
                    indices.pop(0)
                    t += 1
                i += 1
            x += max_dim / (max_array - 1)
            y = 0

        outside = solid.translate([-width / 2, -width / 2])(solid.cube(max_dim + (length - 1) / 1000 + 0.001 + width))
        self.code = solid.difference()(outside, cubes)
        self.code = solid.projection(cut=True)(self.code)
        solid.scad_render_to_file(self.code, self.location + "/code.scad")
        outputSTL(From=self.location+"/code.scad", To=self.location+"code.dxf", PATH=getSCADPath())
        # os.system("toSTL.sh renders/code.scad renders/code.dxf")
        return self.location+"/code.dxf"

    def download(self, type):
        if type =="stl":
            print("generating:" + self.location+"/"+ self.fileName+".stl")
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".stl")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".stl")
        elif type == "dxf":
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".dxf")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".dxf")

    def render(self):
        solid.scad_render_to_file(self.model, self.location+"/"+ self.fileName+'.scad')
        while not os.path.exists(self.location+"/"+self.fileName+".scad"):
            time.sleep(1)

    def get_points(self):
        doc = ezdxf.readfile(filename=self.location+"/"+ self.fileName+".dxf")
        msp = doc.modelspace()
        i=0
        lists = []
        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return [start, end]

        for e in msp.query("LINE"):
            line = helper(e)
            if not lists:
                lists.append([line])
            else:
                if lists[i][len(lists)-1][1] != line[0]:
                    lists.append([line])
                    i+=1
                else:
                    lists[i].append(line)

    def get_points2(self, FILE):
        doc = ezdxf.readfile(filename=FILE)
        msp = doc.modelspace()
        i = 0
        lists = []

        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return (start, end)

        for e in msp.query("LINE"):
            line = helper(e)
            if lists==[]:
                lists.append([line])
            else:
                if lists[i][len(lists[i]) - 1][1] != line[0]:
                    lists.append([line])
                    i += 1
                else:
                    lists[i].append(line)
        return lists

    def add_code(self):
        dxf = solid.projection(cut=False)(self.model)
        offset = solid.offset(r=-0.1)(dxf)
        solid.scad_render_to_file(offset, self.location+'/offset.scad')
        os.system("toSTL.sh renders/offset.scad renders/offset.dxf")
        lines = self.get_points2("renders/offset.dxf")
        x = lines[0][0][0][0]
        y = lines[0][0][0][1]
        print(x)
        print(y)
        code = solid.translate([x,y,0])(self.code)
        code = solid.linear_extrude(height=999)(code)
        save = self.model
        self.model = solid.projection()(solid.difference()(self.model, code))
        self.render()
        self.download("dxf")
        self.model = save

    def add_label(self, pos):
        # num = 12
        # minx, maxx, miny, maxy, minz, maxz = self.find_minmax()
        maxz = self.maxz
        # label = solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.5, halign="center"))
        # i=minx
        # print("x-len: " + str(maxx-minx))
        # print(i)
        # inc = (maxx-minx)/num
        # while minx <= i <= maxx:
        #     label = solid.union()(solid.translate([i, 0, maxz - 0.2])(solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.25, halign="center"))), label)
        #     i += inc
        #
        # l = label
        #
        # i =miny
        # while miny<= i <= maxy:
        #     print("y inc")
        #     l = solid.union()(solid.translate([0, i, 0])(label), l)
        #     i += 0.5
        for i in str(self.fileName):
            cur = pos[0]
            label = solid.translate([pos[0][0], pos[0][1], self.maxz-0.2])(solid.linear_extrude(height=(self.thickness)/3)(solid.text(str(i), size=0.5, halign="center", valign="center")))
            self.model = solid.difference()(self.model, label)
            pos.append(pos.pop(0))
            while abs(cur[0]-pos[0][0])<0.5 and abs(cur[1]-pos[0][1])<0.5:
                pos.append(pos.pop(0))



    def Center(self):

        volume, cog, inertia = self.mesh.get_mass_properties()
        print("Volume                                  = {0}".format(volume))
        print("Position of the center of gravity (COG) = {0}".format(cog))
        m_centered = solid.translate([-cog[0], -cog[1], 0])(
            self.model
        )
        return m_centered

    def find_minmax(self):
        minx = maxx = miny = maxy = minz = maxz = None
        for p in self.mesh.points:
            # p contains (x, y, z)
            if minx is None:
                minx = p[Dimension.X]
                maxx = p[Dimension.X]
                miny = p[Dimension.Y]
                maxy = p[Dimension.Y]
                minz = p[Dimension.Z]
                maxz = p[Dimension.Z]
            else:
                maxx = max(p[Dimension.X], maxx)
                minx = min(p[Dimension.X], minx)
                maxy = max(p[Dimension.Y], maxy)
                miny = min(p[Dimension.Y], miny)
                maxz = max(p[Dimension.Z], maxz)
                minz = min(p[Dimension.Z], minz)
        lenx = maxx - minx
        leny = maxy - miny
        lenz = maxz - minz
        return minx, maxx, miny, maxy, minz, maxz

    # def generate_Mesh(self):
    #     self.mesh = mesh.Mesh.from_file(self.location + "/" + str(int(self.fileName)//8)+ "b.stl")

    def get_top(self):
        top = solid.projection(cut=True)(solid.translate([0,0,-1*self.thickness*(self.layer+1)])(self.model))
        useable_area = solid.offset(r=-0.45)(top)
        self.useable_area = useable_area
        solid.scad_render_to_file(self.useable_area, self.location+'/' + 'toptemp.scad')
        outputSTL(From=self.location+'/' + 'toptemp.scad', To=self.location+"/top"+ self.dxf)

        # os.system("toSTL.sh out/toptemp.scad renders/" + self.fileName + ".dxf")
        dxf = DXF(self.location+"/top"+ self.dxf)
        min_p=dxf.points[0][0]
        points_ordered = dxf.points
        i=0
        while i <= len(dxf.points)+1:
            while math.sqrt((dxf.points[0][0]-dxf.points[1][0])**2+(dxf.points[0][1]-dxf.points[1][1])**2) > 0.1:
                dxf.points.insert(1, [(dxf.points[0][0]+dxf.points[1][0])/2, (dxf.points[0][1]+dxf.points[1][1])/2])
                i = i-1
            dxf.points.append(dxf.points.pop(0))
            i+=1
        for i in range(len(dxf.points)):
            dxf.points.append(dxf.points.pop(0))
            if dxf.points[0][0] < min_p:
                min_p = dxf.points[0][0]
                points_ordered = dxf.points.copy()
        dxf.points = points_ordered.copy()

        print(dxf.points)
        self.add_label(dxf.points)

class DXF:
    def __init__(self, file):
        self.file = file
        self.Lines = []
        self.points = []
        doc = ezdxf.readfile(self.file)
        msp = doc.modelspace()
        for e in msp:
            if e.dxftype() == "LINE":
                self.Lines.append(e)
                self.points.append([e.dxf.start[0], e.dxf.start[1]])
        # self.points.append([self.Lines[-1].dxf.end[0], self.Lines[-1].dxf.end[1]])
        self.area = None
        self.center = None
        self.polygon = sg.Polygon(self.points)

    def get_area(self):
        self.area = self.polygon.area
        return self.area

    def get_center(self):
        x_sum = 0
        y_sum =0
        for i in self.points:
            x_sum += i[0]
            y_sum += i[1]
        x_c = x_sum/len(self.points)
        y_c = y_sum/len(self.points)
        return (x_c, y_c)

    def split(self, maxdim):
        splits = []
        length = 0
        pieces = [[]]
        prev = self.points[0]
        for j in self.points:
            length = length + math.sqrt((prev[0]-j[0])**2+(prev[1]-j[1])**2)
            if length >= maxdim:
                pieces[-1].append(j)
                pieces.append([])
                length = 0
            pieces[-1].append(j)
            prev = j
        for j in pieces:
            j.insert(0, [0,0])
            piece = solid.linear_extrude(height=10)(solid.polygon(j))
            splits.append(piece)
        return splits
    def refine_points(self):
        i=0
        while i <= len(self.points)+1:
            while math.sqrt((self.points[0][0]-self.points[1][0])**2+(self.points[0][1]-self.points[1][1])**2) > 0.1:
                self.points.insert(1, [(self.points[0][0]+self.points[1][0])/2, (self.points[0][1]+self.points[1][1])/2])
                i = i-1
            self.points.append(self.points.pop(0))
            i+=1


if __name__== "__main__":
    test = DXF("C:/Users/Daniel/Documents/repos/Shell_Maker/output/0top_slice.dxf")
    test.refine_points()
    k = test.split(48)
    for i in range(len(k)):
        solid.scad_render_to_file(k[i], str(i) + ".scad")


 
 
************************************************/
