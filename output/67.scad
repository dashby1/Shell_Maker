// Generated by SolidPython 1.1.3 on 2024-05-19 23:42:08


intersection() {
	difference() {
		intersection() {
			translate(v = [0, 0, 0]) {
				import(file = "CE3E3V2_Bottom_shell.stl", origin = [0, 0]);
			}
			translate(v = [-90.04029846191406, -32.690147399902344, 16]) {
				cube(size = [180.0806, 65.380295, 2]);
			}
		}
		linear_extrude(height = 999) {
			offset(r = -1) {
				import(file = "C:/Users/Daniel/Documents/repos/Shell_Maker/output/8top_slice.dxf", origin = [0, 0]);
			}
		}
	}
	translate(v = [0, 0, 16]) {
		linear_extrude(height = 10) {
			polygon(points = [[0, 0], [-35.4961000000, -18.6236500000], [-35.4380750000, -18.6392890625], [-35.3800500000, -18.6549281250], [-35.3220250000, -18.6705671875], [-35.2640000000, -18.6862062500], [-35.2059750000, -18.7018453125], [-35.1479500000, -18.7174843750], [-35.0899250000, -18.7331234375], [-35.0319000000, -18.7487625000], [-34.9738750000, -18.7644015625], [-34.9158500000, -18.7800406250], [-34.8578250000, -18.7956796875], [-34.7998000000, -18.8113187500], [-34.7417750000, -18.8269578125], [-34.6837500000, -18.8425968750], [-34.6257250000, -18.8582359375], [-34.5677000000, -18.8738750000], [-34.5096750000, -18.8895140625], [-34.4516500000, -18.9051531250], [-34.3936250000, -18.9207921875], [-34.3356000000, -18.9364312500], [-34.2775750000, -18.9520703125], [-34.2195500000, -18.9677093750], [-34.1615250000, -18.9833484375], [-34.1035000000, -18.9989875000], [-34.0454750000, -19.0146265625], [-33.9874500000, -19.0302656250], [-33.9294250000, -19.0459046875], [-33.8714000000, -19.0615437500], [-33.8133750000, -19.0771828125], [-33.7553500000, -19.0928218750], [-33.6973250000, -19.1084609375], [-33.6393000000, -19.1241000000], [-33.5833500000, -19.1386500000], [-33.5274000000, -19.1532000000], [-33.4749656250, -19.1664390625], [-33.4225312500, -19.1796781250], [-33.3700968750, -19.1929171875], [-33.3176625000, -19.2061562500], [-33.2652281250, -19.2193953125], [-33.2127937500, -19.2326343750], [-33.1603593750, -19.2458734375], [-33.1079250000, -19.2591125000], [-33.0554906250, -19.2723515625], [-33.0030562500, -19.2855906250], [-32.9506218750, -19.2988296875], [-32.8981875000, -19.3120687500], [-32.8457531250, -19.3253078125], [-32.7933187500, -19.3385468750], [-32.7408843750, -19.3517859375], [-32.6884500000, -19.3650250000], [-32.6360156250, -19.3782640625], [-32.5835812500, -19.3915031250], [-32.5311468750, -19.4047421875], [-32.4787125000, -19.4179812500], [-32.4262781250, -19.4312203125], [-32.3738437500, -19.4444593750], [-32.3214093750, -19.4576984375], [-32.2689750000, -19.4709375000], [-32.2165406250, -19.4841765625], [-32.1641062500, -19.4974156250], [-32.1116718750, -19.5106546875], [-32.0592375000, -19.5238937500], [-32.0068031250, -19.5371328125], [-31.9543687500, -19.5503718750], [-31.9019343750, -19.5636109375], [-31.8495000000, -19.5768500000], [-31.7970656250, -19.5900890625], [-31.7446312500, -19.6033281250], [-31.6921968750, -19.6165671875], [-31.6397625000, -19.6298062500], [-31.5873281250, -19.6430453125], [-31.5348937500, -19.6562843750], [-31.4824593750, -19.6695234375], [-31.4300250000, -19.6827625000], [-31.3775906250, -19.6960015625], [-31.3251562500, -19.7092406250], [-31.2727218750, -19.7224796875], [-31.2202875000, -19.7357187500], [-31.1678531250, -19.7489578125], [-31.1154187500, -19.7621968750], [-31.0629843750, -19.7754359375], [-31.0105500000, -19.7886750000], [-30.9581156250, -19.8019140625], [-30.9056812500, -19.8151531250], [-30.8532468750, -19.8283921875], [-30.8008125000, -19.8416312500], [-30.7483781250, -19.8548703125], [-30.6959437500, -19.8681093750], [-30.6435093750, -19.8813484375], [-30.5910750000, -19.8945875000], [-30.5386406250, -19.9078265625], [-30.4862062500, -19.9210656250], [-30.4337718750, -19.9343046875], [-30.3813375000, -19.9475437500], [-30.3289031250, -19.9607828125], [-30.2764687500, -19.9740218750], [-30.2240343750, -19.9872609375], [-30.1716000000, -20.0005000000], [-30.1200625000, -20.0127875000], [-30.0685250000, -20.0250750000], [-30.0169875000, -20.0373625000], [-29.9654500000, -20.0496500000], [-29.9139125000, -20.0619375000], [-29.8623750000, -20.0742250000], [-29.8108375000, -20.0865125000], [-29.7593000000, -20.0988000000], [-29.6757273437, -20.1180882813], [-29.5921546875, -20.1373765625], [-29.5085820313, -20.1566648438], [-29.4250093750, -20.1759531250], [-29.3414367188, -20.1952414062], [-29.2578640625, -20.2145296875], [-29.1742914062, -20.2338179688], [-29.0907187500, -20.2531062500], [-29.0071460938, -20.2723945313], [-28.9235734375, -20.2916828125], [-28.8400007812, -20.3109710937], [-28.7564281250, -20.3302593750], [-28.6728554688, -20.3495476563], [-28.5892828125, -20.3688359375], [-28.5057101562, -20.3881242188], [-28.4221375000, -20.4074125000], [-28.3385648437, -20.4267007812], [-28.2549921875, -20.4459890625], [-28.1714195312, -20.4652773438], [-28.0878468750, -20.4845656250], [-28.0042742187, -20.5038539063], [-27.9207015625, -20.5231421875], [-27.8371289063, -20.5424304687], [-27.7535562500, -20.5617187500], [-27.6699835937, -20.5810070313], [-27.5864109375, -20.6002953125], [-27.5028382812, -20.6195835938], [-27.4192656250, -20.6388718750], [-27.3356929688, -20.6581601562], [-27.2521203125, -20.6774484375], [-27.1685476562, -20.6967367188], [-27.0849750000, -20.7160250000], [-27.0014023438, -20.7353132813], [-26.9178296875, -20.7546015625], [-26.8342570312, -20.7738898437], [-26.7506843750, -20.7931781250], [-26.6671117188, -20.8124664063], [-26.5835390625, -20.8317546875], [-26.4999664063, -20.8510429688], [-26.4163937500, -20.8703312500], [-26.3328210937, -20.8896195312], [-26.2492484375, -20.9089078125], [-26.1656757813, -20.9281960938], [-26.0821031250, -20.9474843750], [-25.9985304688, -20.9667726563], [-25.9149578125, -20.9860609375], [-25.8313851563, -21.0053492187], [-25.7478125000, -21.0246375000], [-25.6642398438, -21.0439257813], [-25.5806671875, -21.0632140625], [-25.4970945312, -21.0825023438], [-25.4135218750, -21.1017906250], [-25.3299492188, -21.1210789062], [-25.2463765625, -21.1403671875], [-25.1628039062, -21.1596554688], [-25.0792312500, -21.1789437500], [-24.9956585938, -21.1982320313], [-24.9120859375, -21.2175203125], [-24.8285132812, -21.2368085937], [-24.7449406250, -21.2560968750], [-24.6613679687, -21.2753851563], [-24.5777953125, -21.2946734375], [-24.4942226563, -21.3139617188], [-24.4106500000, -21.3332500000], [-24.3270773437, -21.3525382812], [-24.2435046875, -21.3718265625], [-24.1599320313, -21.3911148437], [-24.0763593750, -21.4104031250], [-23.9927867188, -21.4296914063], [-23.9092140625, -21.4489796875], [-23.8256414062, -21.4682679687], [-23.7420687500, -21.4875562500], [-23.6584960938, -21.5068445312], [-23.5749234375, -21.5261328125], [-23.4913507812, -21.5454210938], [-23.4077781250, -21.5647093750], [-23.3242054688, -21.5839976562], [-23.2406328125, -21.6032859375], [-23.1570601562, -21.6225742187], [-23.0734875000, -21.6418625000], [-22.9899148438, -21.6611507813], [-22.9063421875, -21.6804390625], [-22.8227695312, -21.6997273437], [-22.7391968750, -21.7190156250], [-22.6556242187, -21.7383039062], [-22.5720515625, -21.7575921875], [-22.4884789063, -21.7768804688], [-22.4049062500, -21.7961687500], [-22.3213335937, -21.8154570312], [-22.2377609375, -21.8347453125], [-22.1541882813, -21.8540335937], [-22.0706156250, -21.8733218750], [-21.9870429688, -21.8926101563], [-21.9034703125, -21.9118984375], [-21.8198976562, -21.9311867187], [-21.7363250000, -21.9504750000], [-21.6527523438, -21.9697632812], [-21.5691796875, -21.9890515625], [-21.4856070312, -22.0083398438], [-21.4020343750, -22.0276281250], [-21.3184617188, -22.0469164062], [-21.2348890625, -22.0662046875], [-21.1513164063, -22.0854929687], [-21.0677437500, -22.1047812500], [-20.9841710937, -22.1240695313], [-20.9005984375, -22.1433578125], [-20.8170257813, -22.1626460937], [-20.7334531250, -22.1819343750], [-20.6498804688, -22.2012226562], [-20.5663078125, -22.2205109375], [-20.4827351563, -22.2397992188], [-20.3991625000, -22.2590875000], [-20.3155898438, -22.2783757812], [-20.2320171875, -22.2976640625], [-20.1484445313, -22.3169523437], [-20.0648718750, -22.3362406250], [-19.9812992188, -22.3555289063], [-19.8977265625, -22.3748171875], [-19.8141539062, -22.3941054687], [-19.7305812500, -22.4133937500], [-19.6470085938, -22.4326820312], [-19.5634359375, -22.4519703125], [-19.4798632812, -22.4712585938], [-19.3962906250, -22.4905468750], [-19.3127179688, -22.5098351562], [-19.2291453125, -22.5291234375], [-19.1455726563, -22.5484117187], [-19.0620000000, -22.5677000000], [-18.9728250000, -22.5875000000], [-18.8836500000, -22.6073000000], [-18.7944750000, -22.6271000000], [-18.7053000000, -22.6469000000], [-18.6338546875, -22.6617453125], [-18.5624093750, -22.6765906250], [-18.4909640625, -22.6914359375], [-18.4195187500, -22.7062812500], [-18.3480734375, -22.7211265625], [-18.2766281250, -22.7359718750], [-18.2051828125, -22.7508171875], [-18.1337375000, -22.7656625000], [-18.0622921875, -22.7805078125], [-17.9908468750, -22.7953531250], [-17.9194015625, -22.8101984375], [-17.8479562500, -22.8250437500], [-17.7765109375, -22.8398890625], [-17.7050656250, -22.8547343750], [-17.6336203125, -22.8695796875], [-17.5621750000, -22.8844250000], [-17.4907296875, -22.8992703125], [-17.4192843750, -22.9141156250], [-17.3478390625, -22.9289609375], [-17.2763937500, -22.9438062500], [-17.2049484375, -22.9586515625], [-17.1335031250, -22.9734968750], [-17.0620578125, -22.9883421875], [-16.9906125000, -23.0031875000], [-16.9191671875, -23.0180328125], [-16.8477218750, -23.0328781250], [-16.7762765625, -23.0477234375], [-16.7048312500, -23.0625687500], [-16.6333859375, -23.0774140625], [-16.5619406250, -23.0922593750], [-16.4904953125, -23.1071046875], [-16.4190500000, -23.1219500000], [-16.3476046875, -23.1367953125], [-16.2761593750, -23.1516406250], [-16.2047140625, -23.1664859375], [-16.1332687500, -23.1813312500], [-16.0618234375, -23.1961765625], [-15.9903781250, -23.2110218750], [-15.9189328125, -23.2258671875], [-15.8474875000, -23.2407125000], [-15.7760421875, -23.2555578125], [-15.7045968750, -23.2704031250], [-15.6331515625, -23.2852484375], [-15.5617062500, -23.3000937500], [-15.4902609375, -23.3149390625], [-15.4188156250, -23.3297843750], [-15.3473703125, -23.3446296875], [-15.2759250000, -23.3594750000], [-15.2044796875, -23.3743203125], [-15.1330343750, -23.3891656250], [-15.0615890625, -23.4040109375], [-14.9901437500, -23.4188562500], [-14.9186984375, -23.4337015625], [-14.8472531250, -23.4485468750], [-14.7758078125, -23.4633921875], [-14.7043625000, -23.4782375000], [-14.6329171875, -23.4930828125], [-14.5614718750, -23.5079281250], [-14.4900265625, -23.5227734375], [-14.4185812500, -23.5376187500], [-14.3471359375, -23.5524640625], [-14.2756906250, -23.5673093750], [-14.2042453125, -23.5821546875], [-14.1328000000, -23.5970000000], [-14.0666968750, -23.6101062500], [-14.0005937500, -23.6232125000], [-13.9344906250, -23.6363187500], [-13.8683875000, -23.6494250000], [-13.8022843750, -23.6625312500], [-13.7361812500, -23.6756375000], [-13.6700781250, -23.6887437500], [-13.6039750000, -23.7018500000], [-13.5378718750, -23.7149562500], [-13.4717687500, -23.7280625000], [-13.4056656250, -23.7411687500], [-13.3395625000, -23.7542750000], [-13.2734593750, -23.7673812500], [-13.2073562500, -23.7804875000], [-13.1412531250, -23.7935937500], [-13.0751500000, -23.8067000000], [-13.0090468750, -23.8198062500], [-12.9429437500, -23.8329125000], [-12.8768406250, -23.8460187500], [-12.8107375000, -23.8591250000], [-12.7446343750, -23.8722312500], [-12.6785312500, -23.8853375000], [-12.6124281250, -23.8984437500], [-12.5463250000, -23.9115500000], [-12.4802218750, -23.9246562500], [-12.4141187500, -23.9377625000], [-12.3480156250, -23.9508687500], [-12.2819125000, -23.9639750000], [-12.2158093750, -23.9770812500], [-12.1497062500, -23.9901875000], [-12.0836031250, -24.0032937500], [-12.0175000000, -24.0164000000], [-11.9430525000, -24.0299242188], [-11.8686050000, -24.0434484375], [-11.7941575000, -24.0569726563], [-11.7197100000, -24.0704968750], [-11.6452625000, -24.0840210938], [-11.5708150000, -24.0975453125], [-11.4963675000, -24.1110695313], [-11.4219200000, -24.1245937500], [-11.3474725000, -24.1381179688], [-11.2730250000, -24.1516421875], [-11.1985775000, -24.1651664063], [-11.1241300000, -24.1786906250], [-11.0496825000, -24.1922148438], [-10.9752350000, -24.2057390625], [-10.9007875000, -24.2192632813], [-10.8263400000, -24.2327875000], [-10.7518925000, -24.2463117188], [-10.6774450000, -24.2598359375], [-10.6029975000, -24.2733601562], [-10.5285500000, -24.2868843750], [-10.4541025000, -24.3004085937], [-10.3796550000, -24.3139328125], [-10.3052075000, -24.3274570312], [-10.2307600000, -24.3409812500], [-10.1563125000, -24.3545054687], [-10.0818650000, -24.3680296875], [-10.0074175000, -24.3815539062], [-9.9329700000, -24.3950781250], [-9.8585225000, -24.4086023437], [-9.7840750000, -24.4221265625], [-9.7096275000, -24.4356507812], [-9.6351800000, -24.4491750000], [-9.5607325000, -24.4626992188], [-9.4862850000, -24.4762234375], [-9.4118375000, -24.4897476563], [-9.3373900000, -24.5032718750], [-9.2629425000, -24.5167960938], [-9.1884950000, -24.5303203125], [-9.1140475000, -24.5438445313], [-9.0396000000, -24.5573687500], [-8.9651525000, -24.5708929688], [-8.8907050000, -24.5844171875], [-8.8162575000, -24.5979414063], [-8.7418100000, -24.6114656250], [-8.6673625000, -24.6249898438], [-8.5929150000, -24.6385140625], [-8.5184675000, -24.6520382813], [-8.4440200000, -24.6655625000], [-8.3695725000, -24.6790867187], [-8.2951250000, -24.6926109375], [-8.2206775000, -24.7061351562], [-8.1462300000, -24.7196593750], [-8.0717825000, -24.7331835937], [-7.9973350000, -24.7467078125], [-7.9228875000, -24.7602320312], [-7.8484400000, -24.7737562500], [-7.7739925000, -24.7872804687], [-7.6995450000, -24.8008046875], [-7.6250975000, -24.8143289062], [-7.5506500000, -24.8278531250], [-7.4762025000, -24.8413773437], [-7.4017550000, -24.8549015625], [-7.3273075000, -24.8684257812], [-7.2528600000, -24.8819500000], [-7.1784125000, -24.8954742188], [-7.1039650000, -24.9089984375], [-7.0295175000, -24.9225226563], [-6.9550700000, -24.9360468750], [-6.8806225000, -24.9495710938], [-6.8061750000, -24.9630953125], [-6.7317275000, -24.9766195313], [-6.6572800000, -24.9901437500], [-6.5828325000, -25.0036679688], [-6.5083850000, -25.0171921875], [-6.4339375000, -25.0307164063], [-6.3594900000, -25.0442406250], [-6.2850425000, -25.0577648438], [-6.2105950000, -25.0712890625], [-6.1361475000, -25.0848132812], [-6.0617000000, -25.0983375000], [-5.9872525000, -25.1118617187], [-5.9128050000, -25.1253859375], [-5.8383575000, -25.1389101562], [-5.7639100000, -25.1524343750], [-5.6894625000, -25.1659585937], [-5.6150150000, -25.1794828125], [-5.5405675000, -25.1930070312], [-5.4661200000, -25.2065312500], [-5.3916725000, -25.2200554687], [-5.3172250000, -25.2335796875], [-5.2427775000, -25.2471039062], [-5.1683300000, -25.2606281250], [-5.0938825000, -25.2741523437], [-5.0194350000, -25.2876765625], [-4.9449875000, -25.3012007812], [-4.8705400000, -25.3147250000], [-4.7960925000, -25.3282492188], [-4.7216450000, -25.3417734375], [-4.6471975000, -25.3552976563], [-4.5727500000, -25.3688218750], [-4.4983025000, -25.3823460938], [-4.4238550000, -25.3958703125], [-4.3494075000, -25.4093945313], [-4.2749600000, -25.4229187500], [-4.2005125000, -25.4364429688], [-4.1260650000, -25.4499671875], [-4.0516175000, -25.4634914063], [-3.9771700000, -25.4770156250], [-3.9027225000, -25.4905398437], [-3.8282750000, -25.5040640625], [-3.7538275000, -25.5175882812], [-3.6793800000, -25.5311125000], [-3.6049325000, -25.5446367187], [-3.5304850000, -25.5581609375], [-3.4560375000, -25.5716851562], [-3.3815900000, -25.5852093750], [-3.3071425000, -25.5987335937], [-3.2326950000, -25.6122578125], [-3.1582475000, -25.6257820312], [-3.0838000000, -25.6393062500], [-3.0093525000, -25.6528304687], [-2.9349050000, -25.6663546875], [-2.8604575000, -25.6798789062], [-2.7860100000, -25.6934031250], [-2.7115625000, -25.7069273437], [-2.6371150000, -25.7204515625], [-2.5626675000, -25.7339757812], [-2.4882200000, -25.7475000000], [-2.3982570313, -25.7610953125], [-2.3082940625, -25.7746906250], [-2.2183310937, -25.7882859375], [-2.1283681250, -25.8018812500], [-2.0384051563, -25.8154765625], [-1.9484421875, -25.8290718750], [-1.8584792188, -25.8426671875], [-1.7685162500, -25.8562625000], [-1.6785532813, -25.8698578125], [-1.5885903125, -25.8834531250], [-1.4986273438, -25.8970484375], [-1.4086643750, -25.9106437500], [-1.3187014063, -25.9242390625], [-1.2287384375, -25.9378343750], [-1.1387754688, -25.9514296875], [-1.0488125000, -25.9650250000], [-0.9588495313, -25.9786203125], [-0.8688865625, -25.9922156250], [-0.7789235938, -26.0058109375], [-0.6889606250, -26.0194062500], [-0.5989976563, -26.0330015625], [-0.5090346875, -26.0465968750], [-0.4190717188, -26.0601921875], [-0.3291087500, -26.0737875000], [-0.2391457813, -26.0873828125], [-0.1491828125, -26.1009781250], [-0.0592198438, -26.1145734375], [0.0307431250, -26.1281687500], [0.1207060937, -26.1417640625], [0.2106690625, -26.1553593750], [0.3006320312, -26.1689546875], [0.3905950000, -26.1825500000], [0.4805579687, -26.1961453125], [0.5705209375, -26.2097406250], [0.6604839062, -26.2233359375], [0.7504468750, -26.2369312500], [0.8404098437, -26.2505265625], [0.9303728125, -26.2641218750], [1.0203357812, -26.2777171875], [1.1102987500, -26.2913125000], [1.2002617187, -26.3049078125], [1.2902246875, -26.3185031250], [1.3801876562, -26.3320984375], [1.4701506250, -26.3456937500], [1.5601135937, -26.3592890625], [1.6500765625, -26.3728843750], [1.7400395312, -26.3864796875], [1.8300025000, -26.4000750000], [1.9199654687, -26.4136703125], [2.0099284375, -26.4272656250], [2.0998914062, -26.4408609375], [2.1898543750, -26.4544562500], [2.2798173437, -26.4680515625], [2.3697803125, -26.4816468750], [2.4597432812, -26.4952421875], [2.5497062500, -26.5088375000], [2.6396692187, -26.5224328125], [2.7296321875, -26.5360281250], [2.8195951563, -26.5496234375], [2.9095581250, -26.5632187500], [2.9995210937, -26.5768140625], [3.0894840625, -26.5904093750], [3.1794470312, -26.6040046875], [3.2694100000, -26.6176000000], [3.3593729687, -26.6311953125], [3.4493359375, -26.6447906250], [3.5392989062, -26.6583859375], [3.6292618750, -26.6719812500], [3.7192248438, -26.6855765625], [3.8091878125, -26.6991718750], [3.8991507813, -26.7127671875], [3.9891137500, -26.7263625000], [4.0790767187, -26.7399578125], [4.1690396875, -26.7535531250], [4.2590026562, -26.7671484375], [4.3489656250, -26.7807437500], [4.4389285938, -26.7943390625], [4.5288915625, -26.8079343750], [4.6188545313, -26.8215296875], [4.7088175000, -26.8351250000], [4.7987804688, -26.8487203125], [4.8887434375, -26.8623156250], [4.9787064063, -26.8759109375], [5.0686693750, -26.8895062500], [5.1586323438, -26.9031015625], [5.2485953125, -26.9166968750], [5.3385582813, -26.9302921875], [5.4285212500, -26.9438875000], [5.5184842188, -26.9574828125], [5.6084471875, -26.9710781250], [5.6984101562, -26.9846734375], [5.7883731250, -26.9982687500], [5.8783360937, -27.0118640625], [5.9682990625, -27.0254593750], [6.0582620312, -27.0390546875], [6.1482250000, -27.0526500000], [6.2381879688, -27.0662453125], [6.3281509375, -27.0798406250], [6.4181139063, -27.0934359375], [6.5080768750, -27.1070312500], [6.5980398438, -27.1206265625], [6.6880028125, -27.1342218750], [6.7779657812, -27.1478171875], [6.8679287500, -27.1614125000], [6.9578917188, -27.1750078125], [7.0478546875, -27.1886031250], [7.1378176562, -27.2021984375], [7.2277806250, -27.2157937500], [7.3177435937, -27.2293890625], [7.4077065625, -27.2429843750], [7.4976695312, -27.2565796875], [7.5876325000, -27.2701750000], [7.6775954687, -27.2837703125], [7.7675584375, -27.2973656250], [7.8575214062, -27.3109609375], [7.9474843750, -27.3245562500], [8.0374473437, -27.3381515625], [8.1274103125, -27.3517468750], [8.2173732812, -27.3653421875], [8.3073362500, -27.3789375000], [8.3972992187, -27.3925328125], [8.4872621875, -27.4061281250], [8.5772251562, -27.4197234375], [8.6671881250, -27.4333187500], [8.7571510938, -27.4469140625], [8.8471140625, -27.4605093750], [8.9370770312, -27.4741046875], [9.0270400000, -27.4877000000], [9.0918750000, -27.4959500000], [9.1567100000, -27.5042000000], [9.2238942188, -27.5119562500], [9.2910784375, -27.5197125000], [9.3582626563, -27.5274687500], [9.4254468750, -27.5352250000], [9.4926310937, -27.5429812500], [9.5598153125, -27.5507375000], [9.6269995313, -27.5584937500], [9.6941837500, -27.5662500000], [9.7613679688, -27.5740062500], [9.8285521875, -27.5817625000], [9.8957364063, -27.5895187500], [9.9629206250, -27.5972750000]]);
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
import math
import time

from stl import mesh, Dimension

from tkinter import Tk     # from tkinter import Tk for Python 3.x
from tkinter.filedialog import askopenfilename
from mpl_toolkits.mplot3d import art3d
from matplotlib import pyplot as plt
import solid
import os
import ezdxf
import shapely.geometry as sg
import subprocess
from GUI import getSCADPath



def outputSTL(From, To, PATH=getSCADPath()):
    subprocess.Popen(PATH + " -o " + To + " " + From)
    while not os.path.exists(To):
        time.sleep(1)


def get_size(i):
    x_list = [int(a) for a in str(i)]
    return len(x_list)



class Model:
    def __init__(self, model, fileName, location, layer, thickness):
        self.location = location
        self.code = None
        self.fileName = fileName
        self.stl = fileName + ".stl"
        self.layer = layer
        self.thickness = thickness
        self.maxz = (layer+1)*thickness
        self.dxf = fileName + ".dxf"
        self.scad = fileName + ".scad"
        self.model = model
        self.center = None
        self.width = 10
        self.mesh = None
        self.useable_area = None


    def get_code(self):
        max_dim = 0.05
        max_array = 6

        num = int(self.fileName)
        nums = [int(a) for a in str(num)]
        nums.reverse()
        indices = nums
        length = len(nums)

        print(indices)
        t = 0
        i = 0
        cubes = []
        x = 0
        y = 0
        width = 0.01
        while x <= max_dim:
            while y <= max_dim:
                print(indices)
                if nums == []:
                    break
                if indices[0] != 0:
                    cubes.append(solid.translate([x, y, 0])(solid.cube(size=t / 1000 + 0.001)))
                    y += max_dim / (max_array - 1)
                    nums[0] = nums[0] - 1
                else:
                    indices.pop(0)
                    t += 1
                i += 1
            x += max_dim / (max_array - 1)
            y = 0

        outside = solid.translate([-width / 2, -width / 2])(solid.cube(max_dim + (length - 1) / 1000 + 0.001 + width))
        self.code = solid.difference()(outside, cubes)
        self.code = solid.projection(cut=True)(self.code)
        solid.scad_render_to_file(self.code, self.location + "/code.scad")
        outputSTL(From=self.location+"/code.scad", To=self.location+"code.dxf", PATH=getSCADPath())
        # os.system("toSTL.sh renders/code.scad renders/code.dxf")
        return self.location+"/code.dxf"

    def download(self, type):
        if type =="stl":
            print("generating:" + self.location+"/"+ self.fileName+".stl")
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".stl")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".stl")
        elif type == "dxf":
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".dxf")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".dxf")

    def render(self):
        solid.scad_render_to_file(self.model, self.location+"/"+ self.fileName+'.scad')
        while not os.path.exists(self.location+"/"+self.fileName+".scad"):
            time.sleep(1)

    def get_points(self):
        doc = ezdxf.readfile(filename=self.location+"/"+ self.fileName+".dxf")
        msp = doc.modelspace()
        i=0
        lists = []
        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return [start, end]

        for e in msp.query("LINE"):
            line = helper(e)
            if not lists:
                lists.append([line])
            else:
                if lists[i][len(lists)-1][1] != line[0]:
                    lists.append([line])
                    i+=1
                else:
                    lists[i].append(line)

    def get_points2(self, FILE):
        doc = ezdxf.readfile(filename=FILE)
        msp = doc.modelspace()
        i = 0
        lists = []

        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return (start, end)

        for e in msp.query("LINE"):
            line = helper(e)
            if lists==[]:
                lists.append([line])
            else:
                if lists[i][len(lists[i]) - 1][1] != line[0]:
                    lists.append([line])
                    i += 1
                else:
                    lists[i].append(line)
        return lists

    def add_code(self):
        dxf = solid.projection(cut=False)(self.model)
        offset = solid.offset(r=-0.1)(dxf)
        solid.scad_render_to_file(offset, self.location+'/offset.scad')
        os.system("toSTL.sh renders/offset.scad renders/offset.dxf")
        lines = self.get_points2("renders/offset.dxf")
        x = lines[0][0][0][0]
        y = lines[0][0][0][1]
        print(x)
        print(y)
        code = solid.translate([x,y,0])(self.code)
        code = solid.linear_extrude(height=999)(code)
        save = self.model
        self.model = solid.projection()(solid.difference()(self.model, code))
        self.render()
        self.download("dxf")
        self.model = save

    def add_label(self, pos):
        # num = 12
        # minx, maxx, miny, maxy, minz, maxz = self.find_minmax()
        maxz = self.maxz
        # label = solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.5, halign="center"))
        # i=minx
        # print("x-len: " + str(maxx-minx))
        # print(i)
        # inc = (maxx-minx)/num
        # while minx <= i <= maxx:
        #     label = solid.union()(solid.translate([i, 0, maxz - 0.2])(solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.25, halign="center"))), label)
        #     i += inc
        #
        # l = label
        #
        # i =miny
        # while miny<= i <= maxy:
        #     print("y inc")
        #     l = solid.union()(solid.translate([0, i, 0])(label), l)
        #     i += 0.5
        for i in str(self.fileName):
            cur = pos[0]
            label = solid.translate([pos[0][0], pos[0][1], self.maxz-0.2])(solid.linear_extrude(height=(self.thickness)/3)(solid.text(str(i), size=0.5, halign="center", valign="center")))
            self.model = solid.difference()(self.model, label)
            pos.append(pos.pop(0))
            while abs(cur[0]-pos[0][0])<0.5 and abs(cur[1]-pos[0][1])<0.5:
                pos.append(pos.pop(0))



    def Center(self):

        volume, cog, inertia = self.mesh.get_mass_properties()
        print("Volume                                  = {0}".format(volume))
        print("Position of the center of gravity (COG) = {0}".format(cog))
        m_centered = solid.translate([-cog[0], -cog[1], 0])(
            self.model
        )
        return m_centered

    def find_minmax(self):
        minx = maxx = miny = maxy = minz = maxz = None
        for p in self.mesh.points:
            # p contains (x, y, z)
            if minx is None:
                minx = p[Dimension.X]
                maxx = p[Dimension.X]
                miny = p[Dimension.Y]
                maxy = p[Dimension.Y]
                minz = p[Dimension.Z]
                maxz = p[Dimension.Z]
            else:
                maxx = max(p[Dimension.X], maxx)
                minx = min(p[Dimension.X], minx)
                maxy = max(p[Dimension.Y], maxy)
                miny = min(p[Dimension.Y], miny)
                maxz = max(p[Dimension.Z], maxz)
                minz = min(p[Dimension.Z], minz)
        lenx = maxx - minx
        leny = maxy - miny
        lenz = maxz - minz
        return minx, maxx, miny, maxy, minz, maxz

    # def generate_Mesh(self):
    #     self.mesh = mesh.Mesh.from_file(self.location + "/" + str(int(self.fileName)//8)+ "b.stl")

    def get_top(self):
        top = solid.projection(cut=True)(solid.translate([0,0,-1*self.thickness*(self.layer+1)])(self.model))
        useable_area = solid.offset(r=-0.45)(top)
        self.useable_area = useable_area
        solid.scad_render_to_file(self.useable_area, self.location+'/' + 'toptemp.scad')
        outputSTL(From=self.location+'/' + 'toptemp.scad', To=self.location+"/top"+ self.dxf)

        # os.system("toSTL.sh out/toptemp.scad renders/" + self.fileName + ".dxf")
        dxf = DXF(self.location+"/top"+ self.dxf)
        min_p=dxf.points[0][0]
        points_ordered = dxf.points
        i=0
        while i <= len(dxf.points)+1:
            while math.sqrt((dxf.points[0][0]-dxf.points[1][0])**2+(dxf.points[0][1]-dxf.points[1][1])**2) > 0.1:
                dxf.points.insert(1, [(dxf.points[0][0]+dxf.points[1][0])/2, (dxf.points[0][1]+dxf.points[1][1])/2])
                i = i-1
            dxf.points.append(dxf.points.pop(0))
            i+=1
        for i in range(len(dxf.points)):
            dxf.points.append(dxf.points.pop(0))
            if dxf.points[0][0] < min_p:
                min_p = dxf.points[0][0]
                points_ordered = dxf.points.copy()
        dxf.points = points_ordered.copy()

        print(dxf.points)
        self.add_label(dxf.points)

class DXF:
    def __init__(self, file):
        self.file = file
        self.Lines = []
        self.points = []
        doc = ezdxf.readfile(self.file)
        msp = doc.modelspace()
        for e in msp:
            if e.dxftype() == "LINE":
                self.Lines.append(e)
                self.points.append([e.dxf.start[0], e.dxf.start[1]])
        # self.points.append([self.Lines[-1].dxf.end[0], self.Lines[-1].dxf.end[1]])
        self.area = None
        self.center = None
        self.polygon = sg.Polygon(self.points)

    def get_area(self):
        self.area = self.polygon.area
        return self.area

    def get_center(self):
        x_sum = 0
        y_sum =0
        for i in self.points:
            x_sum += i[0]
            y_sum += i[1]
        x_c = x_sum/len(self.points)
        y_c = y_sum/len(self.points)
        return (x_c, y_c)

    def split(self, maxdim):
        splits = []
        length = 0
        pieces = [[]]
        prev = self.points[0]
        for j in self.points:
            length = length + math.sqrt((prev[0]-j[0])**2+(prev[1]-j[1])**2)
            if length >= maxdim:
                pieces[-1].append(j)
                pieces.append([])
                length = 0
            pieces[-1].append(j)
            prev = j
        for j in pieces:
            j.insert(0, [0,0])
            piece = solid.linear_extrude(height=10)(solid.polygon(j))
            splits.append(piece)
        return splits
    def refine_points(self):
        i=0
        while i <= len(self.points)+1:
            while math.sqrt((self.points[0][0]-self.points[1][0])**2+(self.points[0][1]-self.points[1][1])**2) > 0.1:
                self.points.insert(1, [(self.points[0][0]+self.points[1][0])/2, (self.points[0][1]+self.points[1][1])/2])
                i = i-1
            self.points.append(self.points.pop(0))
            i+=1


if __name__== "__main__":
    test = DXF("C:/Users/Daniel/Documents/repos/Shell_Maker/output/0top_slice.dxf")
    test.refine_points()
    k = test.split(48)
    for i in range(len(k)):
        solid.scad_render_to_file(k[i], str(i) + ".scad")


 
 
************************************************/
