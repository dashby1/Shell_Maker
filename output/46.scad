// Generated by SolidPython 1.1.3 on 2024-05-26 01:59:28


intersection() {
	difference() {
		intersection() {
			translate(v = [0, 0, 0]) {
				import(file = "CE3E3V2_Bottom_shell.stl", origin = [0, 0]);
			}
			translate(v = [-90.04029846191406, -32.690147399902344, 10]) {
				cube(size = [180.0806, 65.380295, 2]);
			}
		}
		linear_extrude(height = 999) {
			offset(r = -1) {
				import(file = "C:/Users/Daniel/Documents/repos/Shell_Maker/output/5top_slice.dxf", origin = [0, 0]);
			}
		}
	}
	translate(v = [0, 0, 10]) {
		linear_extrude(height = 10) {
			polygon(points = [[0, 0], [-40.3719828125, -17.3042500000], [-40.3156250000, -17.3200000000], [-40.2592671875, -17.3357500000], [-40.2029093750, -17.3515000000], [-40.1465515625, -17.3672500000], [-40.0901937500, -17.3830000000], [-40.0338359375, -17.3987500000], [-39.9774781250, -17.4145000000], [-39.9211203125, -17.4302500000], [-39.8647625000, -17.4460000000], [-39.8084046875, -17.4617500000], [-39.7520468750, -17.4775000000], [-39.6956890625, -17.4932500000], [-39.6393312500, -17.5090000000], [-39.5829734375, -17.5247500000], [-39.5266156250, -17.5405000000], [-39.4702578125, -17.5562500000], [-39.4139000000, -17.5720000000], [-39.3622562500, -17.5860562500], [-39.3106125000, -17.6001125000], [-39.2589687500, -17.6141687500], [-39.2073250000, -17.6282250000], [-39.1556812500, -17.6422812500], [-39.1040375000, -17.6563375000], [-39.0523937500, -17.6703937500], [-39.0007500000, -17.6844500000], [-38.9491062500, -17.6985062500], [-38.8974625000, -17.7125625000], [-38.8458187500, -17.7266187500], [-38.7941750000, -17.7406750000], [-38.7425312500, -17.7547312500], [-38.6908875000, -17.7687875000], [-38.6392437500, -17.7828437500], [-38.5876000000, -17.7969000000], [-38.5207796875, -17.8149078125], [-38.4539593750, -17.8329156250], [-38.3871390625, -17.8509234375], [-38.3203187500, -17.8689312500], [-38.2534984375, -17.8869390625], [-38.1866781250, -17.9049468750], [-38.1198578125, -17.9229546875], [-38.0530375000, -17.9409625000], [-37.9862171875, -17.9589703125], [-37.9193968750, -17.9769781250], [-37.8525765625, -17.9949859375], [-37.7857562500, -18.0129937500], [-37.7189359375, -18.0310015625], [-37.6521156250, -18.0490093750], [-37.5852953125, -18.0670171875], [-37.5184750000, -18.0850250000], [-37.4516546875, -18.1030328125], [-37.3848343750, -18.1210406250], [-37.3180140625, -18.1390484375], [-37.2511937500, -18.1570562500], [-37.1843734375, -18.1750640625], [-37.1175531250, -18.1930718750], [-37.0507328125, -18.2110796875], [-36.9839125000, -18.2290875000], [-36.9170921875, -18.2470953125], [-36.8502718750, -18.2651031250], [-36.7834515625, -18.2831109375], [-36.7166312500, -18.3011187500], [-36.6498109375, -18.3191265625], [-36.5829906250, -18.3371343750], [-36.5161703125, -18.3551421875], [-36.4493500000, -18.3731500000], [-36.3825296875, -18.3911578125], [-36.3157093750, -18.4091656250], [-36.2488890625, -18.4271734375], [-36.1820687500, -18.4451812500], [-36.1152484375, -18.4631890625], [-36.0484281250, -18.4811968750], [-35.9816078125, -18.4992046875], [-35.9147875000, -18.5172125000], [-35.8479671875, -18.5352203125], [-35.7811468750, -18.5532281250], [-35.7143265625, -18.5712359375], [-35.6475062500, -18.5892437500], [-35.5806859375, -18.6072515625], [-35.5138656250, -18.6252593750], [-35.4470453125, -18.6432671875], [-35.3802250000, -18.6612750000], [-35.3134046875, -18.6792828125], [-35.2465843750, -18.6972906250], [-35.1797640625, -18.7152984375], [-35.1129437500, -18.7333062500], [-35.0461234375, -18.7513140625], [-34.9793031250, -18.7693218750], [-34.9124828125, -18.7873296875], [-34.8456625000, -18.8053375000], [-34.7788421875, -18.8233453125], [-34.7120218750, -18.8413531250], [-34.6452015625, -18.8593609375], [-34.5783812500, -18.8773687500], [-34.5115609375, -18.8953765625], [-34.4447406250, -18.9133843750], [-34.3779203125, -18.9313921875], [-34.3111000000, -18.9494000000], [-34.2621187500, -18.9621375000], [-34.2131375000, -18.9748750000], [-34.1641562500, -18.9876125000], [-34.1151750000, -19.0003500000], [-34.0661937500, -19.0130875000], [-34.0172125000, -19.0258250000], [-33.9682312500, -19.0385625000], [-33.9192500000, -19.0513000000], [-33.8702687500, -19.0640375000], [-33.8212875000, -19.0767750000], [-33.7723062500, -19.0895125000], [-33.7233250000, -19.1022500000], [-33.6743437500, -19.1149875000], [-33.6253625000, -19.1277250000], [-33.5763812500, -19.1404625000], [-33.5274000000, -19.1532000000], [-33.4572406250, -19.1709156250], [-33.3870812500, -19.1886312500], [-33.3169218750, -19.2063468750], [-33.2467625000, -19.2240625000], [-33.1766031250, -19.2417781250], [-33.1064437500, -19.2594937500], [-33.0362843750, -19.2772093750], [-32.9661250000, -19.2949250000], [-32.8959656250, -19.3126406250], [-32.8258062500, -19.3303562500], [-32.7556468750, -19.3480718750], [-32.6854875000, -19.3657875000], [-32.6153281250, -19.3835031250], [-32.5451687500, -19.4012187500], [-32.4750093750, -19.4189343750], [-32.4048500000, -19.4366500000], [-32.3346906250, -19.4543656250], [-32.2645312500, -19.4720812500], [-32.1943718750, -19.4897968750], [-32.1242125000, -19.5075125000], [-32.0540531250, -19.5252281250], [-31.9838937500, -19.5429437500], [-31.9137343750, -19.5606593750], [-31.8435750000, -19.5783750000], [-31.7734156250, -19.5960906250], [-31.7032562500, -19.6138062500], [-31.6330968750, -19.6315218750], [-31.5629375000, -19.6492375000], [-31.4927781250, -19.6669531250], [-31.4226187500, -19.6846687500], [-31.3524593750, -19.7023843750], [-31.2823000000, -19.7201000000], [-31.2327218750, -19.7321656250], [-31.1831437500, -19.7442312500], [-31.1335656250, -19.7562968750], [-31.0839875000, -19.7683625000], [-31.0344093750, -19.7804281250], [-30.9848312500, -19.7924937500], [-30.9352531250, -19.8045593750], [-30.8856750000, -19.8166250000], [-30.8360968750, -19.8286906250], [-30.7865187500, -19.8407562500], [-30.7369406250, -19.8528218750], [-30.6873625000, -19.8648875000], [-30.6377843750, -19.8769531250], [-30.5882062500, -19.8890187500], [-30.5386281250, -19.9010843750], [-30.4890500000, -19.9131500000], [-30.4394718750, -19.9252156250], [-30.3898937500, -19.9372812500], [-30.3403156250, -19.9493468750], [-30.2907375000, -19.9614125000], [-30.2411593750, -19.9734781250], [-30.1915812500, -19.9855437500], [-30.1420031250, -19.9976093750], [-30.0924250000, -20.0096750000], [-30.0428468750, -20.0217406250], [-29.9932687500, -20.0338062500], [-29.9436906250, -20.0458718750], [-29.8941125000, -20.0579375000], [-29.8445343750, -20.0700031250], [-29.7949562500, -20.0820687500], [-29.7453781250, -20.0941343750], [-29.6958000000, -20.1062000000], [-29.6462218750, -20.1182656250], [-29.5966437500, -20.1303312500], [-29.5470656250, -20.1423968750], [-29.4974875000, -20.1544625000], [-29.4479093750, -20.1665281250], [-29.3983312500, -20.1785937500], [-29.3487531250, -20.1906593750], [-29.2991750000, -20.2027250000], [-29.2495968750, -20.2147906250], [-29.2000187500, -20.2268562500], [-29.1504406250, -20.2389218750], [-29.1008625000, -20.2509875000], [-29.0512843750, -20.2630531250], [-29.0017062500, -20.2751187500], [-28.9521281250, -20.2871843750], [-28.9025500000, -20.2992500000], [-28.8529718750, -20.3113156250], [-28.8033937500, -20.3233812500], [-28.7538156250, -20.3354468750], [-28.7042375000, -20.3475125000], [-28.6546593750, -20.3595781250], [-28.6050812500, -20.3716437500], [-28.5555031250, -20.3837093750], [-28.5059250000, -20.3957750000], [-28.4563468750, -20.4078406250], [-28.4067687500, -20.4199062500], [-28.3571906250, -20.4319718750], [-28.3076125000, -20.4440375000], [-28.2580343750, -20.4561031250], [-28.2084562500, -20.4681687500], [-28.1588781250, -20.4802343750], [-28.1093000000, -20.4923000000], [-28.0577312500, -20.5046000000], [-28.0061625000, -20.5169000000], [-27.9545937500, -20.5292000000], [-27.9030250000, -20.5415000000], [-27.8514562500, -20.5538000000], [-27.7998875000, -20.5661000000], [-27.7483187500, -20.5784000000], [-27.6967500000, -20.5907000000], [-27.6451812500, -20.6030000000], [-27.5936125000, -20.6153000000], [-27.5420437500, -20.6276000000], [-27.4904750000, -20.6399000000], [-27.4389062500, -20.6522000000], [-27.3873375000, -20.6645000000], [-27.3357687500, -20.6768000000], [-27.2842000000, -20.6891000000], [-27.1891875000, -20.7110281250], [-27.0941750000, -20.7329562500], [-26.9991625000, -20.7548843750], [-26.9041500000, -20.7768125000], [-26.8091375000, -20.7987406250], [-26.7141250000, -20.8206687500], [-26.6191125000, -20.8425968750], [-26.5241000000, -20.8645250000], [-26.4290875000, -20.8864531250], [-26.3340750000, -20.9083812500], [-26.2390625000, -20.9303093750], [-26.1440500000, -20.9522375000], [-26.0490375000, -20.9741656250], [-25.9540250000, -20.9960937500], [-25.8590125000, -21.0180218750], [-25.7640000000, -21.0399500000], [-25.6689875000, -21.0618781250], [-25.5739750000, -21.0838062500], [-25.4789625000, -21.1057343750], [-25.3839500000, -21.1276625000], [-25.2889375000, -21.1495906250], [-25.1939250000, -21.1715187500], [-25.0989125000, -21.1934468750], [-25.0039000000, -21.2153750000], [-24.9088875000, -21.2373031250], [-24.8138750000, -21.2592312500], [-24.7188625000, -21.2811593750], [-24.6238500000, -21.3030875000], [-24.5288375000, -21.3250156250], [-24.4338250000, -21.3469437500], [-24.3388125000, -21.3688718750], [-24.2438000000, -21.3908000000], [-24.1487875000, -21.4127281250], [-24.0537750000, -21.4346562500], [-23.9587625000, -21.4565843750], [-23.8637500000, -21.4785125000], [-23.7687375000, -21.5004406250], [-23.6737250000, -21.5223687500], [-23.5787125000, -21.5442968750], [-23.4837000000, -21.5662250000], [-23.3886875000, -21.5881531250], [-23.2936750000, -21.6100812500], [-23.1986625000, -21.6320093750], [-23.1036500000, -21.6539375000], [-23.0086375000, -21.6758656250], [-22.9136250000, -21.6977937500], [-22.8186125000, -21.7197218750], [-22.7236000000, -21.7416500000], [-22.6285875000, -21.7635781250], [-22.5335750000, -21.7855062500], [-22.4385625000, -21.8074343750], [-22.3435500000, -21.8293625000], [-22.2485375000, -21.8512906250], [-22.1535250000, -21.8732187500], [-22.0585125000, -21.8951468750], [-21.9635000000, -21.9170750000], [-21.8684875000, -21.9390031250], [-21.7734750000, -21.9609312500], [-21.6784625000, -21.9828593750], [-21.5834500000, -22.0047875000], [-21.4884375000, -22.0267156250], [-21.3934250000, -22.0486437500], [-21.2984125000, -22.0705718750], [-21.2034000000, -22.0925000000], [-21.1141750000, -22.1123000000], [-21.0249500000, -22.1321000000], [-20.9357250000, -22.1519000000], [-20.8465000000, -22.1717000000], [-20.7572750000, -22.1915000000], [-20.6680500000, -22.2113000000], [-20.5788250000, -22.2311000000], [-20.4896000000, -22.2509000000], [-20.3946687500, -22.2706281250], [-20.2997375000, -22.2903562500], [-20.2048062500, -22.3100843750], [-20.1098750000, -22.3298125000], [-20.0149437500, -22.3495406250], [-19.9200125000, -22.3692687500], [-19.8250812500, -22.3889968750], [-19.7301500000, -22.4087250000], [-19.6352187500, -22.4284531250], [-19.5402875000, -22.4481812500], [-19.4453562500, -22.4679093750], [-19.3504250000, -22.4876375000], [-19.2554937500, -22.5073656250], [-19.1605625000, -22.5270937500], [-19.0656312500, -22.5468218750], [-18.9707000000, -22.5665500000], [-18.8757687500, -22.5862781250], [-18.7808375000, -22.6060062500], [-18.6859062500, -22.6257343750], [-18.5909750000, -22.6454625000], [-18.4960437500, -22.6651906250], [-18.4011125000, -22.6849187500], [-18.3061812500, -22.7046468750], [-18.2112500000, -22.7243750000], [-18.1163187500, -22.7441031250], [-18.0213875000, -22.7638312500], [-17.9264562500, -22.7835593750], [-17.8315250000, -22.8032875000], [-17.7365937500, -22.8230156250], [-17.6416625000, -22.8427437500], [-17.5467312500, -22.8624718750], [-17.4518000000, -22.8822000000], [-17.3998468750, -22.8933875000], [-17.3478937500, -22.9045750000], [-17.2959406250, -22.9157625000], [-17.2439875000, -22.9269500000], [-17.1920343750, -22.9381375000], [-17.1400812500, -22.9493250000], [-17.0881281250, -22.9605125000], [-17.0361750000, -22.9717000000], [-16.9842218750, -22.9828875000], [-16.9322687500, -22.9940750000], [-16.8803156250, -23.0052625000], [-16.8283625000, -23.0164500000], [-16.7764093750, -23.0276375000], [-16.7244562500, -23.0388250000], [-16.6725031250, -23.0500125000], [-16.6205500000, -23.0612000000], [-16.5685968750, -23.0723875000], [-16.5166437500, -23.0835750000], [-16.4646906250, -23.0947625000], [-16.4127375000, -23.1059500000], [-16.3607843750, -23.1171375000], [-16.3088312500, -23.1283250000], [-16.2568781250, -23.1395125000], [-16.2049250000, -23.1507000000], [-16.1529718750, -23.1618875000], [-16.1010187500, -23.1730750000], [-16.0490656250, -23.1842625000], [-15.9971125000, -23.1954500000], [-15.9451593750, -23.2066375000], [-15.8932062500, -23.2178250000], [-15.8412531250, -23.2290125000], [-15.7893000000, -23.2402000000], [-15.7373468750, -23.2513875000], [-15.6853937500, -23.2625750000], [-15.6334406250, -23.2737625000], [-15.5814875000, -23.2849500000], [-15.5295343750, -23.2961375000], [-15.4775812500, -23.3073250000], [-15.4256281250, -23.3185125000], [-15.3736750000, -23.3297000000], [-15.3217218750, -23.3408875000], [-15.2697687500, -23.3520750000], [-15.2178156250, -23.3632625000], [-15.1658625000, -23.3744500000], [-15.1139093750, -23.3856375000], [-15.0619562500, -23.3968250000], [-15.0100031250, -23.4080125000], [-14.9580500000, -23.4192000000], [-14.9060968750, -23.4303875000], [-14.8541437500, -23.4415750000], [-14.8021906250, -23.4527625000], [-14.7502375000, -23.4639500000], [-14.6982843750, -23.4751375000], [-14.6463312500, -23.4863250000], [-14.5943781250, -23.4975125000], [-14.5424250000, -23.5087000000], [-14.4904718750, -23.5198875000], [-14.4385187500, -23.5310750000], [-14.3865656250, -23.5422625000], [-14.3346125000, -23.5534500000], [-14.2826593750, -23.5646375000], [-14.2307062500, -23.5758250000], [-14.1787531250, -23.5870125000], [-14.1268000000, -23.5982000000], [-14.0608843750, -23.6112687500], [-13.9949687500, -23.6243375000], [-13.9290531250, -23.6374062500], [-13.8631375000, -23.6504750000], [-13.7972218750, -23.6635437500], [-13.7313062500, -23.6766125000], [-13.6653906250, -23.6896812500], [-13.5994750000, -23.7027500000], [-13.5335593750, -23.7158187500], [-13.4676437500, -23.7288875000], [-13.4017281250, -23.7419562500], [-13.3358125000, -23.7550250000], [-13.2698968750, -23.7680937500], [-13.2039812500, -23.7811625000], [-13.1380656250, -23.7942312500], [-13.0721500000, -23.8073000000], [-13.0062343750, -23.8203687500], [-12.9403187500, -23.8334375000], [-12.8744031250, -23.8465062500], [-12.8084875000, -23.8595750000], [-12.7425718750, -23.8726437500], [-12.6766562500, -23.8857125000], [-12.6107406250, -23.8987812500], [-12.5448250000, -23.9118500000], [-12.4789093750, -23.9249187500], [-12.4129937500, -23.9379875000], [-12.3470781250, -23.9510562500], [-12.2811625000, -23.9641250000], [-12.2152468750, -23.9771937500], [-12.1493312500, -23.9902625000], [-12.0834156250, -24.0033312500], [-12.0175000000, -24.0164000000], [-11.9430459375, -24.0299257813], [-11.8685918750, -24.0434515625], [-11.7941378125, -24.0569773438], [-11.7196837500, -24.0705031250], [-11.6452296875, -24.0840289063], [-11.5707756250, -24.0975546875], [-11.4963215625, -24.1110804687], [-11.4218675000, -24.1246062500], [-11.3474134375, -24.1381320312], [-11.2729593750, -24.1516578125], [-11.1985053125, -24.1651835938], [-11.1240512500, -24.1787093750], [-11.0495971875, -24.1922351562], [-10.9751431250, -24.2057609375], [-10.9006890625, -24.2192867188], [-10.8262350000, -24.2328125000], [-10.7517809375, -24.2463382813], [-10.6773268750, -24.2598640625], [-10.6028728125, -24.2733898437], [-10.5284187500, -24.2869156250], [-10.4539646875, -24.3004414062], [-10.3795106250, -24.3139671875], [-10.3050565625, -24.3274929688], [-10.2306025000, -24.3410187500], [-10.1561484375, -24.3545445312], [-10.0816943750, -24.3680703125], [-10.0072403125, -24.3815960938], [-9.9327862500, -24.3951218750], [-9.8583321875, -24.4086476563], [-9.7838781250, -24.4221734375], [-9.7094240625, -24.4356992187], [-9.6349700000, -24.4492250000], [-9.5605159375, -24.4627507812], [-9.4860618750, -24.4762765625], [-9.4116078125, -24.4898023438], [-9.3371537500, -24.5033281250], [-9.2626996875, -24.5168539062], [-9.1882456250, -24.5303796875], [-9.1137915625, -24.5439054688], [-9.0393375000, -24.5574312500], [-8.9648834375, -24.5709570312], [-8.8904293750, -24.5844828125], [-8.8159753125, -24.5980085937], [-8.7415212500, -24.6115343750], [-8.6670671875, -24.6250601562], [-8.5926131250, -24.6385859375], [-8.5181590625, -24.6521117187], [-8.4437050000, -24.6656375000], [-8.3692509375, -24.6791632812], [-8.2947968750, -24.6926890625], [-8.2203428125, -24.7062148438], [-8.1458887500, -24.7197406250], [-8.0714346875, -24.7332664062], [-7.9969806250, -24.7467921875], [-7.9225265625, -24.7603179687], [-7.8480725000, -24.7738437500], [-7.7736184375, -24.7873695312], [-7.6991643750, -24.8008953125], [-7.6247103125, -24.8144210937], [-7.5502562500, -24.8279468750], [-7.4758021875, -24.8414726562], [-7.4013481250, -24.8549984375], [-7.3268940625, -24.8685242188], [-7.2524400000, -24.8820500000], [-7.1779859375, -24.8955757812], [-7.1035318750, -24.9091015625], [-7.0290778125, -24.9226273438], [-6.9546237500, -24.9361531250], [-6.8801696875, -24.9496789062], [-6.8057156250, -24.9632046875], [-6.7312615625, -24.9767304688], [-6.6568075000, -24.9902562500], [-6.5823534375, -25.0037820313], [-6.5078993750, -25.0173078125], [-6.4334453125, -25.0308335937], [-6.3589912500, -25.0443593750], [-6.2845371875, -25.0578851562], [-6.2100831250, -25.0714109375], [-6.1356290625, -25.0849367188], [-6.0611750000, -25.0984625000], [-5.9867209375, -25.1119882812], [-5.9122668750, -25.1255140625], [-5.8378128125, -25.1390398438], [-5.7633587500, -25.1525656250], [-5.6889046875, -25.1660914063], [-5.6144506250, -25.1796171875], [-5.5399965625, -25.1931429687], [-5.4655425000, -25.2066687500], [-5.3910884375, -25.2201945312], [-5.3166343750, -25.2337203125], [-5.2421803125, -25.2472460938], [-5.1677262500, -25.2607718750], [-5.0932721875, -25.2742976562], [-5.0188181250, -25.2878234375], [-4.9443640625, -25.3013492188], [-4.8699100000, -25.3148750000], [-4.7954559375, -25.3284007813], [-4.7210018750, -25.3419265625], [-4.6465478125, -25.3554523437], [-4.5720937500, -25.3689781250], [-4.4976396875, -25.3825039062], [-4.4231856250, -25.3960296875], [-4.3487315625, -25.4095554687], [-4.2742775000, -25.4230812500], [-4.1998234375, -25.4366070312], [-4.1253693750, -25.4501328125], [-4.0509153125, -25.4636585938], [-3.9764612500, -25.4771843750], [-3.9020071875, -25.4907101562], [-3.8275531250, -25.5042359375], [-3.7530990625, -25.5177617187], [-3.6786450000, -25.5312875000], [-3.6041909375, -25.5448132812], [-3.5297368750, -25.5583390625], [-3.4552828125, -25.5718648437], [-3.3808287500, -25.5853906250], [-3.3063746875, -25.5989164062], [-3.2319206250, -25.6124421875], [-3.1574665625, -25.6259679688], [-3.0830125000, -25.6394937500], [-3.0085584375, -25.6530195312], [-2.9341043750, -25.6665453125], [-2.8596503125, -25.6800710937], [-2.7851962500, -25.6935968750], [-2.7107421875, -25.7071226562], [-2.6362881250, -25.7206484375], [-2.5618340625, -25.7341742187], [-2.4873800000, -25.7477000000], [-2.3974235938, -25.7612937500], [-2.3074671875, -25.7748875000], [-2.2175107812, -25.7884812500], [-2.1275543750, -25.8020750000], [-2.0375979688, -25.8156687500], [-1.9476415625, -25.8292625000], [-1.8576851562, -25.8428562500], [-1.7677287500, -25.8564500000], [-1.6777723437, -25.8700437500], [-1.5878159375, -25.8836375000], [-1.4978595312, -25.8972312500], [-1.4079031250, -25.9108250000], [-1.3179467187, -25.9244187500], [-1.2279903125, -25.9380125000], [-1.1380339063, -25.9516062500], [-1.0480775000, -25.9652000000], [-0.9581210937, -25.9787937500], [-0.8681646875, -25.9923875000], [-0.7782082812, -26.0059812500], [-0.6882518750, -26.0195750000], [-0.5982954687, -26.0331687500], [-0.5083390625, -26.0467625000], [-0.4183826562, -26.0603562500], [-0.3284262500, -26.0739500000], [-0.2384698438, -26.0875437500], [-0.1485134375, -26.1011375000], [-0.0585570313, -26.1147312500], [0.0313993750, -26.1283250000], [0.1213557812, -26.1419187500], [0.2113121875, -26.1555125000], [0.3012685937, -26.1691062500], [0.3912250000, -26.1827000000], [0.4811814062, -26.1962937500], [0.5711378125, -26.2098875000], [0.6610942187, -26.2234812500], [0.7510506250, -26.2370750000], [0.8410070312, -26.2506687500], [0.9309634375, -26.2642625000], [1.0209198438, -26.2778562500], [1.1108762500, -26.2914500000], [1.2008326563, -26.3050437500], [1.2907890625, -26.3186375000], [1.3807454688, -26.3322312500], [1.4707018750, -26.3458250000], [1.5606582813, -26.3594187500], [1.6506146875, -26.3730125000], [1.7405710937, -26.3866062500], [1.8305275000, -26.4002000000], [1.9204839062, -26.4137937500], [2.0104403125, -26.4273875000], [2.1003967187, -26.4409812500], [2.1903531250, -26.4545750000], [2.2803095312, -26.4681687500], [2.3702659375, -26.4817625000], [2.4602223437, -26.4953562500], [2.5501787500, -26.5089500000], [2.6401351562, -26.5225437500], [2.7300915625, -26.5361375000], [2.8200479687, -26.5497312500], [2.9100043750, -26.5633250000], [2.9999607812, -26.5769187500], [3.0899171875, -26.5905125000], [3.1798735938, -26.6041062500], [3.2698300000, -26.6177000000], [3.3597864062, -26.6312937500], [3.4497428125, -26.6448875000], [3.5396992188, -26.6584812500], [3.6296556250, -26.6720750000], [3.7196120312, -26.6856687500], [3.8095684375, -26.6992625000], [3.8995248437, -26.7128562500], [3.9894812500, -26.7264500000], [4.0794376562, -26.7400437500], [4.1693940625, -26.7536375000], [4.2593504687, -26.7672312500], [4.3493068750, -26.7808250000], [4.4392632812, -26.7944187500], [4.5292196875, -26.8080125000], [4.6191760937, -26.8216062500], [4.7091325000, -26.8352000000], [4.7990889062, -26.8487937500], [4.8890453125, -26.8623875000], [4.9790017187, -26.8759812500]]);
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
import math
import time

from stl import mesh, Dimension

from tkinter import Tk     # from tkinter import Tk for Python 3.x
from tkinter.filedialog import askopenfilename
from mpl_toolkits.mplot3d import art3d
from matplotlib import pyplot as plt
import solid
import os
import ezdxf
import shapely.geometry as sg
import subprocess
from GUI import getSCADPath



def outputSTL(From, To, PATH=getSCADPath()):
    subprocess.Popen(PATH + " -o " + To + " " + From)
    while not os.path.exists(To):
        time.sleep(1)

class Model:
    def __init__(self, model, fileName, location, layer, thickness):
        self.location = location
        self.code = None
        self.fileName = fileName
        self.stl = fileName + ".stl"
        self.layer = layer
        self.thickness = thickness
        self.maxz = (layer+1)*thickness
        self.dxf = fileName + ".dxf"
        self.scad = fileName + ".scad"
        self.model = model
        self.center = None
        self.width = 10
        self.mesh = None
        self.useable_area = None


    def get_code(self):
        max_dim = 0.05
        max_array = 6

        num = int(self.fileName)
        nums = [int(a) for a in str(num)]
        nums.reverse()
        indices = nums
        length = len(nums)

        print(indices)
        t = 0
        i = 0
        cubes = []
        x = 0
        y = 0
        width = 0.01
        while x <= max_dim:
            while y <= max_dim:
                print(indices)
                if nums == []:
                    break
                if indices[0] != 0:
                    cubes.append(solid.translate([x, y, 0])(solid.cube(size=t / 1000 + 0.001)))
                    y += max_dim / (max_array - 1)
                    nums[0] = nums[0] - 1
                else:
                    indices.pop(0)
                    t += 1
                i += 1
            x += max_dim / (max_array - 1)
            y = 0

        outside = solid.translate([-width / 2, -width / 2])(solid.cube(max_dim + (length - 1) / 1000 + 0.001 + width))
        self.code = solid.difference()(outside, cubes)
        self.code = solid.projection(cut=True)(self.code)
        solid.scad_render_to_file(self.code, self.location + "/code.scad")
        outputSTL(From=self.location+"/code.scad", To=self.location+"code.dxf", PATH=getSCADPath())
        # os.system("toSTL.sh renders/code.scad renders/code.dxf")
        return self.location+"/code.dxf"

    def download(self, type):
        if type =="stl":
            print("generating:" + self.location+"/"+ self.fileName+".stl")
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".stl")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".stl")
        elif type == "dxf":
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".dxf")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".dxf")

    def render(self):
        solid.scad_render_to_file(self.model, self.location+"/"+ self.fileName+'.scad')
        while not os.path.exists(self.location+"/"+self.fileName+".scad"):
            time.sleep(1)
        # outputSTL(From= self.location+"/"+ self.fileName+'.scad', To=self.location+"/"+ self.fileName+'.stl')

    def get_points(self):
        doc = ezdxf.readfile(filename=self.location+"/"+ self.fileName+".dxf")
        msp = doc.modelspace()
        i=0
        lists = []
        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return [start, end]

        for e in msp.query("LINE"):
            line = helper(e)
            if not lists:
                lists.append([line])
            else:
                if lists[i][len(lists)-1][1] != line[0]:
                    lists.append([line])
                    i+=1
                else:
                    lists[i].append(line)

    def get_points2(self, FILE):
        doc = ezdxf.readfile(filename=FILE)
        msp = doc.modelspace()
        i = 0
        lists = []

        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return (start, end)

        for e in msp.query("LINE"):
            line = helper(e)
            if lists==[]:
                lists.append([line])
            else:
                if lists[i][len(lists[i]) - 1][1] != line[0]:
                    lists.append([line])
                    i += 1
                else:
                    lists[i].append(line)
        return lists

    def add_code(self):
        dxf = solid.projection(cut=False)(self.model)
        offset = solid.offset(r=-0.1)(dxf)
        solid.scad_render_to_file(offset, self.location+'/offset.scad')
        os.system("toSTL.sh renders/offset.scad renders/offset.dxf")
        lines = self.get_points2("renders/offset.dxf")
        x = lines[0][0][0][0]
        y = lines[0][0][0][1]
        print(x)
        print(y)
        code = solid.translate([x,y,0])(self.code)
        code = solid.linear_extrude(height=999)(code)
        save = self.model
        self.model = solid.projection()(solid.difference()(self.model, code))
        self.render()
        self.download("dxf")
        self.model = save

    def add_label(self, pos):
        # num = 12
        # minx, maxx, miny, maxy, minz, maxz = self.find_minmax()
        maxz = self.maxz
        # label = solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.5, halign="center"))
        # i=minx
        # print("x-len: " + str(maxx-minx))
        # print(i)
        # inc = (maxx-minx)/num
        # while minx <= i <= maxx:
        #     label = solid.union()(solid.translate([i, 0, maxz - 0.2])(solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.25, halign="center"))), label)
        #     i += inc
        #
        # l = label
        #
        # i =miny
        # while miny<= i <= maxy:
        #     print("y inc")
        #     l = solid.union()(solid.translate([0, i, 0])(label), l)
        #     i += 0.5
        for i in str(self.fileName):
            cur = pos[0]
            label = solid.translate([pos[0][0], pos[0][1], self.maxz-0.2])(solid.linear_extrude(height=(self.thickness)/3)(solid.text(str(i), size=0.5, halign="center", valign="center")))
            self.model = solid.difference()(self.model, label)
            pos.append(pos.pop(0))
            while abs(cur[0]-pos[0][0])<0.5 and abs(cur[1]-pos[0][1])<0.5:
                pos.append(pos.pop(0))



    def Center(self):

        volume, cog, inertia = self.mesh.get_mass_properties()
        print("Volume                                  = {0}".format(volume))
        print("Position of the center of gravity (COG) = {0}".format(cog))
        m_centered = solid.translate([-cog[0], -cog[1], 0])(
            self.model
        )
        return m_centered

    def find_minmax(self):
        minx = maxx = miny = maxy = minz = maxz = None
        for p in self.mesh.points:
            # p contains (x, y, z)
            if minx is None:
                minx = p[Dimension.X]
                maxx = p[Dimension.X]
                miny = p[Dimension.Y]
                maxy = p[Dimension.Y]
                minz = p[Dimension.Z]
                maxz = p[Dimension.Z]
            else:
                maxx = max(p[Dimension.X], maxx)
                minx = min(p[Dimension.X], minx)
                maxy = max(p[Dimension.Y], maxy)
                miny = min(p[Dimension.Y], miny)
                maxz = max(p[Dimension.Z], maxz)
                minz = min(p[Dimension.Z], minz)
        lenx = maxx - minx
        leny = maxy - miny
        lenz = maxz - minz
        return minx, maxx, miny, maxy, minz, maxz

    # def generate_Mesh(self):
    #     self.mesh = mesh.Mesh.from_file(self.location + "/" + str(int(self.fileName)//8)+ "b.stl")

    def get_top(self):
        top = solid.projection(cut=True)(solid.translate([0,0,-1*self.thickness*(self.layer+1)])(self.model))
        useable_area = solid.offset(r=-0.45)(top)
        self.useable_area = useable_area
        solid.scad_render_to_file(self.useable_area, self.location+'/' + 'toptemp.scad')
        outputSTL(From=self.location+'/' + 'toptemp.scad', To=self.location+"/top"+ self.dxf)

        # os.system("toSTL.sh out/toptemp.scad renders/" + self.fileName + ".dxf")
        dxf = DXF(self.location+"/top"+ self.dxf)
        min_p=dxf.points[0][0]
        points_ordered = dxf.points
        i=0
        while i <= len(dxf.points)+1:
            while math.sqrt((dxf.points[0][0]-dxf.points[1][0])**2+(dxf.points[0][1]-dxf.points[1][1])**2) > 0.1:
                dxf.points.insert(1, [(dxf.points[0][0]+dxf.points[1][0])/2, (dxf.points[0][1]+dxf.points[1][1])/2])
                i = i-1
            dxf.points.append(dxf.points.pop(0))
            i+=1
        for i in range(len(dxf.points)):
            dxf.points.append(dxf.points.pop(0))
            if dxf.points[0][0] < min_p:
                min_p = dxf.points[0][0]
                points_ordered = dxf.points.copy()
        dxf.points = points_ordered.copy()

        print(dxf.points)
        self.add_label(dxf.points)

class DXF:
    def __init__(self, file):
        self.file = file
        self.Lines = []
        self.points = []
        doc = ezdxf.readfile(self.file)
        msp = doc.modelspace()
        for e in msp:
            if e.dxftype() == "LINE":
                self.Lines.append(e)
                self.points.append([e.dxf.start[0], e.dxf.start[1]])
        # self.points.append([self.Lines[-1].dxf.end[0], self.Lines[-1].dxf.end[1]])
        self.area = None
        self.center = None
        self.polygon = sg.Polygon(self.points)

    def get_area(self):
        self.area = self.polygon.area
        return self.area

    def get_center(self):
        x_sum = 0
        y_sum =0
        for i in self.points:
            x_sum += i[0]
            y_sum += i[1]
        x_c = x_sum/len(self.points)
        y_c = y_sum/len(self.points)
        return (x_c, y_c)

    def split(self, maxdim):
        splits = []
        length = 0
        pieces = [[]]
        prev = self.points[-1]
        pieces[-1].append(prev)
        for j in self.points:
            length = length + math.sqrt((prev[0]-j[0])**2+(prev[1]-j[1])**2)
            if length >= maxdim:
                pieces[-1].append(j)
                pieces.append([])
                length = 0
            pieces[-1].append(j)
            prev = j
        for j in pieces:
            j.insert(0, [0,0])
            piece = solid.linear_extrude(height=10)(solid.polygon(j))
            splits.append(piece)
        return splits
    def refine_points(self):
        i=0
        while i <= len(self.points)+1:
            while math.sqrt((self.points[0][0]-self.points[1][0])**2+(self.points[0][1]-self.points[1][1])**2) > 0.1:
                self.points.insert(1, [(self.points[0][0]+self.points[1][0])/2, (self.points[0][1]+self.points[1][1])/2])
                i = i-1
            self.points.append(self.points.pop(0))
            i+=1


if __name__== "__main__":
    test = DXF("C:/Users/Daniel/Documents/repos/Shell_Maker/output/0top_slice.dxf")
    test.refine_points()
    k = test.split(48)
    for i in range(len(k)):
        solid.scad_render_to_file(k[i], str(i) + ".scad")


 
 
************************************************/
