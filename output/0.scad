// Generated by SolidPython 1.1.3 on 2024-05-26 01:58:49


intersection() {
	difference() {
		intersection() {
			translate(v = [0, 0, 0]) {
				import(file = "CE3E3V2_Bottom_shell.stl", origin = [0, 0]);
			}
			translate(v = [-90.04029846191406, -32.690147399902344, 0]) {
				cube(size = [180.0806, 65.380295, 2]);
			}
		}
		linear_extrude(height = 999) {
			offset(r = -1) {
				import(file = "C:/Users/Daniel/Documents/repos/Shell_Maker/output/0top_slice.dxf", origin = [0, 0]);
			}
		}
	}
	translate(v = [0, 0, 0]) {
		linear_extrude(height = 10) {
			polygon(points = [[0, 0], [41.9017613281, -32.5496734375], [41.9716437500, -32.5491250000], [42.0415261719, -32.5485765625], [42.1114085937, -32.5480281250], [42.1812910156, -32.5474796875], [42.2511734375, -32.5469312500], [42.3210558594, -32.5463828125], [42.3909382813, -32.5458343750], [42.4608207031, -32.5452859375], [42.5307031250, -32.5447375000], [42.6005855469, -32.5441890625], [42.6704679688, -32.5436406250], [42.7403503906, -32.5430921875], [42.8102328125, -32.5425437500], [42.8801152344, -32.5419953125], [42.9499976563, -32.5414468750], [43.0198800781, -32.5408984375], [43.0897625000, -32.5403500000], [43.1596449219, -32.5398015625], [43.2295273438, -32.5392531250], [43.2994097656, -32.5387046875], [43.3692921875, -32.5381562500], [43.4391746094, -32.5376078125], [43.5090570313, -32.5370593750], [43.5789394531, -32.5365109375], [43.6488218750, -32.5359625000], [43.7187042969, -32.5354140625], [43.7885867187, -32.5348656250], [43.8584691406, -32.5343171875], [43.9283515625, -32.5337687500], [43.9982339844, -32.5332203125], [44.0681164062, -32.5326718750], [44.1379988281, -32.5321234375], [44.2078812500, -32.5315750000], [44.2777636719, -32.5310265625], [44.3476460938, -32.5304781250], [44.4175285156, -32.5299296875], [44.4874109375, -32.5293812500], [44.5572933594, -32.5288328125], [44.6271757813, -32.5282843750], [44.6970582031, -32.5277359375], [44.7669406250, -32.5271875000], [44.8368230469, -32.5266390625], [44.9067054688, -32.5260906250], [44.9765878906, -32.5255421875], [45.0464703125, -32.5249937500], [45.1163527344, -32.5244453125], [45.1862351563, -32.5238968750], [45.2561175781, -32.5233484375], [45.3260000000, -32.5228000000], [45.4195765625, -32.5206687500], [45.5131531250, -32.5185375000], [45.6067296875, -32.5164062500], [45.7003062500, -32.5142750000], [45.7938828125, -32.5121437500], [45.8874593750, -32.5100125000], [45.9810359375, -32.5078812500], [46.0746125000, -32.5057500000], [46.1681890625, -32.5036187500], [46.2617656250, -32.5014875000], [46.3553421875, -32.4993562500], [46.4489187500, -32.4972250000], [46.5424953125, -32.4950937500], [46.6360718750, -32.4929625000], [46.7296484375, -32.4908312500], [46.8232250000, -32.4887000000], [46.9168015625, -32.4865687500], [47.0103781250, -32.4844375000], [47.1039546875, -32.4823062500], [47.1975312500, -32.4801750000], [47.2911078125, -32.4780437500], [47.3846843750, -32.4759125000], [47.4782609375, -32.4737812500], [47.5718375000, -32.4716500000], [47.6654140625, -32.4695187500], [47.7589906250, -32.4673875000], [47.8525671875, -32.4652562500], [47.9461437500, -32.4631250000], [48.0397203125, -32.4609937500], [48.1332968750, -32.4588625000], [48.2268734375, -32.4567312500], [48.3204500000, -32.4546000000], [48.4140265625, -32.4524687500], [48.5076031250, -32.4503375000], [48.6011796875, -32.4482062500], [48.6947562500, -32.4460750000], [48.7883328125, -32.4439437500], [48.8819093750, -32.4418125000], [48.9754859375, -32.4396812500], [49.0690625000, -32.4375500000], [49.1626390625, -32.4354187500], [49.2562156250, -32.4332875000], [49.3497921875, -32.4311562500], [49.4433687500, -32.4290250000], [49.5369453125, -32.4268937500], [49.6305218750, -32.4247625000], [49.7240984375, -32.4226312500], [49.8176750000, -32.4205000000], [49.9112515625, -32.4183687500], [50.0048281250, -32.4162375000], [50.0984046875, -32.4141062500], [50.1919812500, -32.4119750000], [50.2855578125, -32.4098437500], [50.3791343750, -32.4077125000], [50.4727109375, -32.4055812500], [50.5662875000, -32.4034500000], [50.6598640625, -32.4013187500], [50.7534406250, -32.3991875000], [50.8470171875, -32.3970562500], [50.9405937500, -32.3949250000], [51.0341703125, -32.3927937500], [51.1277468750, -32.3906625000], [51.2213234375, -32.3885312500], [51.3149000000, -32.3864000000], [51.4084765625, -32.3842687500], [51.5020531250, -32.3821375000], [51.5956296875, -32.3800062500], [51.6892062500, -32.3778750000], [51.7827828125, -32.3757437500], [51.8763593750, -32.3736125000], [51.9699359375, -32.3714812500], [52.0635125000, -32.3693500000], [52.1570890625, -32.3672187500], [52.2506656250, -32.3650875000], [52.3442421875, -32.3629562500], [52.4378187500, -32.3608250000], [52.5313953125, -32.3586937500], [52.6249718750, -32.3565625000], [52.7185484375, -32.3544312500], [52.8121250000, -32.3523000000], [52.9057015625, -32.3501687500], [52.9992781250, -32.3480375000], [53.0928546875, -32.3459062500], [53.1864312500, -32.3437750000], [53.2800078125, -32.3416437500], [53.3735843750, -32.3395125000], [53.4671609375, -32.3373812500], [53.5607375000, -32.3352500000], [53.6543140625, -32.3331187500], [53.7478906250, -32.3309875000], [53.8414671875, -32.3288562500], [53.9350437500, -32.3267250000], [54.0286203125, -32.3245937500], [54.1221968750, -32.3224625000], [54.2157734375, -32.3203312500], [54.3093500000, -32.3182000000], [54.4029265625, -32.3160687500], [54.4965031250, -32.3139375000], [54.5900796875, -32.3118062500], [54.6836562500, -32.3096750000], [54.7772328125, -32.3075437500], [54.8708093750, -32.3054125000], [54.9643859375, -32.3032812500], [55.0579625000, -32.3011500000], [55.1515390625, -32.2990187500], [55.2451156250, -32.2968875000], [55.3386921875, -32.2947562500], [55.4322687500, -32.2926250000], [55.5258453125, -32.2904937500], [55.6194218750, -32.2883625000], [55.7129984375, -32.2862312500], [55.8065750000, -32.2841000000], [55.9001515625, -32.2819687500], [55.9937281250, -32.2798375000], [56.0873046875, -32.2777062500], [56.1808812500, -32.2755750000], [56.2744578125, -32.2734437500], [56.3680343750, -32.2713125000], [56.4616109375, -32.2691812500], [56.5551875000, -32.2670500000], [56.6487640625, -32.2649187500], [56.7423406250, -32.2627875000], [56.8359171875, -32.2606562500], [56.9294937500, -32.2585250000], [57.0230703125, -32.2563937500], [57.1166468750, -32.2542625000], [57.2102234375, -32.2521312500], [57.3038000000, -32.2500000000], [57.3664625000, -32.2475546875], [57.4291250000, -32.2451093750], [57.4917875000, -32.2426640625], [57.5544500000, -32.2402187500], [57.6171125000, -32.2377734375], [57.6797750000, -32.2353281250], [57.7424375000, -32.2328828125], [57.8051000000, -32.2304375000], [57.8677625000, -32.2279921875], [57.9304250000, -32.2255468750], [57.9930875000, -32.2231015625], [58.0557500000, -32.2206562500], [58.1184125000, -32.2182109375], [58.1810750000, -32.2157656250], [58.2437375000, -32.2133203125], [58.3064000000, -32.2108750000], [58.3690625000, -32.2084296875], [58.4317250000, -32.2059843750], [58.4943875000, -32.2035390625], [58.5570500000, -32.2010937500], [58.6197125000, -32.1986484375], [58.6823750000, -32.1962031250], [58.7450375000, -32.1937578125], [58.8077000000, -32.1913125000], [58.8703625000, -32.1888671875], [58.9330250000, -32.1864218750], [58.9956875000, -32.1839765625], [59.0583500000, -32.1815312500], [59.1210125000, -32.1790859375], [59.1836750000, -32.1766406250], [59.2463375000, -32.1741953125], [59.3090000000, -32.1717500000], [59.3716625000, -32.1693046875], [59.4343250000, -32.1668593750], [59.4969875000, -32.1644140625], [59.5596500000, -32.1619687500], [59.6223125000, -32.1595234375], [59.6849750000, -32.1570781250], [59.7476375000, -32.1546328125], [59.8103000000, -32.1521875000], [59.8729625000, -32.1497421875], [59.9356250000, -32.1472968750], [59.9982875000, -32.1448515625], [60.0609500000, -32.1424062500], [60.1236125000, -32.1399609375], [60.1862750000, -32.1375156250], [60.2489375000, -32.1350703125], [60.3116000000, -32.1326250000], [60.3742625000, -32.1301796875], [60.4369250000, -32.1277343750], [60.4995875000, -32.1252890625], [60.5622500000, -32.1228437500], [60.6249125000, -32.1203984375], [60.6875750000, -32.1179531250], [60.7502375000, -32.1155078125], [60.8129000000, -32.1130625000], [60.8755625000, -32.1106171875], [60.9382250000, -32.1081718750], [61.0008875000, -32.1057265625], [61.0635500000, -32.1032812500], [61.1262125000, -32.1008359375], [61.1888750000, -32.0983906250], [61.2515375000, -32.0959453125], [61.3142000000, -32.0935000000], [61.3768625000, -32.0910546875], [61.4395250000, -32.0886093750], [61.5021875000, -32.0861640625], [61.5648500000, -32.0837187500], [61.6275125000, -32.0812734375], [61.6901750000, -32.0788281250], [61.7528375000, -32.0763828125], [61.8155000000, -32.0739375000], [61.8781625000, -32.0714921875], [61.9408250000, -32.0690468750], [62.0034875000, -32.0666015625], [62.0661500000, -32.0641562500], [62.1288125000, -32.0617109375], [62.1914750000, -32.0592656250], [62.2541375000, -32.0568203125], [62.3168000000, -32.0543750000], [62.3794625000, -32.0519296875], [62.4421250000, -32.0494843750], [62.5047875000, -32.0470390625], [62.5674500000, -32.0445937500], [62.6301125000, -32.0421484375], [62.6927750000, -32.0397031250], [62.7554375000, -32.0372578125], [62.8181000000, -32.0348125000], [62.8807625000, -32.0323671875], [62.9434250000, -32.0299218750], [63.0060875000, -32.0274765625], [63.0687500000, -32.0250312500], [63.1314125000, -32.0225859375], [63.1940750000, -32.0201406250], [63.2567375000, -32.0176953125], [63.3194000000, -32.0152500000], [63.3820625000, -32.0128046875], [63.4447250000, -32.0103593750], [63.5073875000, -32.0079140625], [63.5700500000, -32.0054687500], [63.6327125000, -32.0030234375], [63.6953750000, -32.0005781250], [63.7580375000, -31.9981328125], [63.8207000000, -31.9956875000], [63.8833625000, -31.9932421875], [63.9460250000, -31.9907968750], [64.0086875000, -31.9883515625], [64.0713500000, -31.9859062500], [64.1340125000, -31.9834609375], [64.1966750000, -31.9810156250], [64.2593375000, -31.9785703125], [64.3220000000, -31.9761250000], [64.3846625000, -31.9736796875], [64.4473250000, -31.9712343750], [64.5099875000, -31.9687890625], [64.5726500000, -31.9663437500], [64.6353125000, -31.9638984375], [64.6979750000, -31.9614531250], [64.7606375000, -31.9590078125], [64.8233000000, -31.9565625000], [64.8859625000, -31.9541171875], [64.9486250000, -31.9516718750], [65.0112875000, -31.9492265625], [65.0739500000, -31.9467812500], [65.1366125000, -31.9443359375], [65.1992750000, -31.9418906250], [65.2619375000, -31.9394453125], [65.3246000000, -31.9370000000], [65.4085296875, -31.9322109375], [65.4924593750, -31.9274218750], [65.5763890625, -31.9226328125], [65.6603187500, -31.9178437500], [65.7442484375, -31.9130546875], [65.8281781250, -31.9082656250], [65.9121078125, -31.9034765625], [65.9960375000, -31.8986875000], [66.0799671875, -31.8938984375], [66.1638968750, -31.8891093750], [66.2478265625, -31.8843203125], [66.3317562500, -31.8795312500], [66.4156859375, -31.8747421875], [66.4996156250, -31.8699531250], [66.5835453125, -31.8651640625], [66.6674750000, -31.8603750000], [66.7514046875, -31.8555859375], [66.8353343750, -31.8507968750], [66.9192640625, -31.8460078125], [67.0031937500, -31.8412187500], [67.0871234375, -31.8364296875], [67.1710531250, -31.8316406250], [67.2549828125, -31.8268515625], [67.3389125000, -31.8220625000], [67.4228421875, -31.8172734375], [67.5067718750, -31.8124843750], [67.5907015625, -31.8076953125], [67.6746312500, -31.8029062500], [67.7585609375, -31.7981171875], [67.8424906250, -31.7933281250], [67.9264203125, -31.7885390625], [68.0103500000, -31.7837500000], [68.0942796875, -31.7789609375], [68.1782093750, -31.7741718750], [68.2621390625, -31.7693828125], [68.3460687500, -31.7645937500], [68.4299984375, -31.7598046875], [68.5139281250, -31.7550156250], [68.5978578125, -31.7502265625], [68.6817875000, -31.7454375000], [68.7657171875, -31.7406484375], [68.8496468750, -31.7358593750], [68.9335765625, -31.7310703125], [69.0175062500, -31.7262812500], [69.1014359375, -31.7214921875], [69.1853656250, -31.7167031250], [69.2692953125, -31.7119140625], [69.3532250000, -31.7071250000], [69.4371546875, -31.7023359375], [69.5210843750, -31.6975468750], [69.6050140625, -31.6927578125], [69.6889437500, -31.6879687500], [69.7728734375, -31.6831796875], [69.8568031250, -31.6783906250], [69.9407328125, -31.6736015625], [70.0246625000, -31.6688125000], [70.1085921875, -31.6640234375], [70.1925218750, -31.6592343750], [70.2764515625, -31.6544453125], [70.3603812500, -31.6496562500], [70.4443109375, -31.6448671875], [70.5282406250, -31.6400781250], [70.6121703125, -31.6352890625], [70.6961000000, -31.6305000000], [70.7523109375, -31.6261343750], [70.8085218750, -31.6217687500], [70.8647328125, -31.6174031250], [70.9209437500, -31.6130375000], [70.9771546875, -31.6086718750], [71.0333656250, -31.6043062500], [71.0895765625, -31.5999406250], [71.1457875000, -31.5955750000], [71.2019984375, -31.5912093750], [71.2582093750, -31.5868437500], [71.3144203125, -31.5824781250], [71.3706312500, -31.5781125000], [71.4268421875, -31.5737468750], [71.4830531250, -31.5693812500], [71.5392640625, -31.5650156250], [71.5954750000, -31.5606500000], [71.6516859375, -31.5562843750], [71.7078968750, -31.5519187500], [71.7641078125, -31.5475531250], [71.8203187500, -31.5431875000], [71.8765296875, -31.5388218750], [71.9327406250, -31.5344562500], [71.9889515625, -31.5300906250], [72.0451625000, -31.5257250000], [72.1013734375, -31.5213593750], [72.1575843750, -31.5169937500], [72.2137953125, -31.5126281250], [72.2700062500, -31.5082625000], [72.3262171875, -31.5038968750], [72.3824281250, -31.4995312500], [72.4386390625, -31.4951656250], [72.4948500000, -31.4908000000], [72.5510609375, -31.4864343750], [72.6072718750, -31.4820687500], [72.6634828125, -31.4777031250], [72.7196937500, -31.4733375000], [72.7759046875, -31.4689718750], [72.8321156250, -31.4646062500], [72.8883265625, -31.4602406250], [72.9445375000, -31.4558750000], [73.0007484375, -31.4515093750], [73.0569593750, -31.4471437500], [73.1131703125, -31.4427781250], [73.1693812500, -31.4384125000], [73.2255921875, -31.4340468750], [73.2818031250, -31.4296812500], [73.3380140625, -31.4253156250], [73.3942250000, -31.4209500000], [73.4504359375, -31.4165843750], [73.5066468750, -31.4122187500], [73.5628578125, -31.4078531250], [73.6190687500, -31.4034875000], [73.6752796875, -31.3991218750], [73.7314906250, -31.3947562500], [73.7877015625, -31.3903906250], [73.8439125000, -31.3860250000], [73.9001234375, -31.3816593750], [73.9563343750, -31.3772937500], [74.0125453125, -31.3729281250], [74.0687562500, -31.3685625000], [74.1249671875, -31.3641968750], [74.1811781250, -31.3598312500], [74.2373890625, -31.3554656250], [74.2936000000, -31.3511000000], [74.3688812500, -31.3433468750], [74.4441625000, -31.3355937500], [74.5194437500, -31.3278406250], [74.5947250000, -31.3200875000], [74.6700062500, -31.3123343750], [74.7452875000, -31.3045812500], [74.8205687500, -31.2968281250], [74.8958500000, -31.2890750000], [74.9711312500, -31.2813218750], [75.0464125000, -31.2735687500], [75.1216937500, -31.2658156250], [75.1969750000, -31.2580625000], [75.2722562500, -31.2503093750], [75.3475375000, -31.2425562500], [75.4228187500, -31.2348031250], [75.4981000000, -31.2270500000], [75.5733812500, -31.2192968750], [75.6486625000, -31.2115437500], [75.7239437500, -31.2037906250], [75.7992250000, -31.1960375000], [75.8745062500, -31.1882843750], [75.9497875000, -31.1805312500], [76.0250687500, -31.1727781250], [76.1003500000, -31.1650250000], [76.1756312500, -31.1572718750], [76.2509125000, -31.1495187500], [76.3261937500, -31.1417656250], [76.4014750000, -31.1340125000], [76.4767562500, -31.1262593750], [76.5520375000, -31.1185062500], [76.6273187500, -31.1107531250], [76.7026000000, -31.1030000000], [76.7531312500, -31.0966843750], [76.8036625000, -31.0903687500], [76.8541937500, -31.0840531250], [76.9047250000, -31.0777375000], [76.9552562500, -31.0714218750], [77.0057875000, -31.0651062500], [77.0563187500, -31.0587906250], [77.1068500000, -31.0524750000], [77.1573812500, -31.0461593750], [77.2079125000, -31.0398437500], [77.2584437500, -31.0335281250], [77.3089750000, -31.0272125000], [77.3595062500, -31.0208968750], [77.4100375000, -31.0145812500], [77.4605687500, -31.0082656250], [77.5111000000, -31.0019500000], [77.5616312500, -30.9956343750], [77.6121625000, -30.9893187500], [77.6626937500, -30.9830031250], [77.7132250000, -30.9766875000], [77.7637562500, -30.9703718750], [77.8142875000, -30.9640562500], [77.8648187500, -30.9577406250], [77.9153500000, -30.9514250000], [77.9658812500, -30.9451093750], [78.0164125000, -30.9387937500], [78.0669437500, -30.9324781250], [78.1174750000, -30.9261625000], [78.1680062500, -30.9198468750], [78.2185375000, -30.9135312500], [78.2690687500, -30.9072156250], [78.3196000000, -30.9009000000], [78.3698375000, -30.8915187500], [78.4200750000, -30.8821375000], [78.4703125000, -30.8727562500], [78.5205500000, -30.8633750000], [78.5707875000, -30.8539937500], [78.6210250000, -30.8446125000], [78.6712625000, -30.8352312500], [78.7215000000, -30.8258500000], [78.7717375000, -30.8164687500], [78.8219750000, -30.8070875000], [78.8722125000, -30.7977062500], [78.9224500000, -30.7883250000], [78.9726875000, -30.7789437500], [79.0229250000, -30.7695625000], [79.0731625000, -30.7601812500], [79.1234000000, -30.7508000000], [79.1736375000, -30.7414187500], [79.2238750000, -30.7320375000], [79.2741125000, -30.7226562500], [79.3243500000, -30.7132750000], [79.3745875000, -30.7038937500], [79.4248250000, -30.6945125000], [79.4750625000, -30.6851312500], [79.5253000000, -30.6757500000], [79.5755375000, -30.6663687500], [79.6257750000, -30.6569875000], [79.6760125000, -30.6476062500], [79.7262500000, -30.6382250000], [79.7764875000, -30.6288437500], [79.8267250000, -30.6194625000], [79.8769625000, -30.6100812500], [79.9272000000, -30.6007000000], [79.9962000000, -30.5819250000], [80.0652000000, -30.5631500000], [80.1342000000, -30.5443750000], [80.2032000000, -30.5256000000], [80.2722000000, -30.5068250000], [80.3412000000, -30.4880500000], [80.4102000000, -30.4692750000], [80.4792000000, -30.4505000000], [80.5711250000, -30.4199000000], [80.6630500000, -30.3893000000], [80.7549750000, -30.3587000000], [80.8469000000, -30.3281000000], [80.9078250000, -30.3031000000], [80.9687500000, -30.2781000000], [81.0296750000, -30.2531000000], [81.0906000000, -30.2281000000], [81.1709000000, -30.1868000000], [81.2512000000, -30.1455000000], [81.3138000000, -30.1023500000], [81.3764000000, -30.0592000000], [81.3982000000, -30.0399000000], [81.4471000000, -29.9842000000], [81.4651000000, -29.9489000000], [81.4746000000, -29.9288000000], [81.4774000000, -29.9176000000], [81.4796000000, -29.9043000000], [81.4803000000, -29.8940000000], [81.4804000000, -29.8900000000], [81.4803209961, -29.8314050781], [81.4802419922, -29.7728101563], [81.4801629883, -29.7142152344], [81.4800839844, -29.6556203125], [81.4800049805, -29.5970253906], [81.4799259766, -29.5384304688], [81.4798469727, -29.4798355469], [81.4797679687, -29.4212406250], [81.4796889648, -29.3626457031], [81.4796099609, -29.3040507813], [81.4795309570, -29.2454558594], [81.4794519531, -29.1868609375], [81.4793729492, -29.1282660156], [81.4792939453, -29.0696710938], [81.4792149414, -29.0110761719], [81.4791359375, -28.9524812500], [81.4790569336, -28.8938863281], [81.4789779297, -28.8352914063], [81.4788989258, -28.7766964844], [81.4788199219, -28.7181015625], [81.4787409180, -28.6595066406], [81.4786619141, -28.6009117188], [81.4785829102, -28.5423167969], [81.4785039063, -28.4837218750], [81.4784249023, -28.4251269531], [81.4783458984, -28.3665320313], [81.4782668945, -28.3079371094], [81.4781878906, -28.2493421875], [81.4781088867, -28.1907472656], [81.4780298828, -28.1321523438], [81.4779508789, -28.0735574219], [81.4778718750, -28.0149625000], [81.4777928711, -27.9563675781], [81.4777138672, -27.8977726563], [81.4776348633, -27.8391777344], [81.4775558594, -27.7805828125], [81.4774768555, -27.7219878906], [81.4773978516, -27.6633929688], [81.4773188477, -27.6047980469], [81.4772398437, -27.5462031250], [81.4771608398, -27.4876082031], [81.4770818359, -27.4290132813], [81.4770028320, -27.3704183594], [81.4769238281, -27.3118234375], [81.4768448242, -27.2532285156], [81.4767658203, -27.1946335938], [81.4766868164, -27.1360386719], [81.4766078125, -27.0774437500], [81.4765288086, -27.0188488281], [81.4764498047, -26.9602539063], [81.4763708008, -26.9016589844], [81.4762917969, -26.8430640625], [81.4762127930, -26.7844691406], [81.4761337891, -26.7258742188], [81.4760547852, -26.6672792969], [81.4759757813, -26.6086843750], [81.4758967773, -26.5500894531], [81.4758177734, -26.4914945313], [81.4757387695, -26.4328996094], [81.4756597656, -26.3743046875], [81.4755807617, -26.3157097656], [81.4755017578, -26.2571148438], [81.4754227539, -26.1985199219], [81.4753437500, -26.1399250000], [81.4752647461, -26.0813300781], [81.4751857422, -26.0227351563], [81.4751067383, -25.9641402344], [81.4750277344, -25.9055453125], [81.4749487305, -25.8469503906], [81.4748697266, -25.7883554688], [81.4747907227, -25.7297605469], [81.4747117188, -25.6711656250], [81.4746327148, -25.6125707031], [81.4745537109, -25.5539757813], [81.4744747070, -25.4953808594], [81.4743957031, -25.4367859375], [81.4743166992, -25.3781910156], [81.4742376953, -25.3195960938], [81.4741586914, -25.2610011719], [81.4740796875, -25.2024062500], [81.4740006836, -25.1438113281], [81.4739216797, -25.0852164063], [81.4738426758, -25.0266214844], [81.4737636719, -24.9680265625], [81.4736846680, -24.9094316406], [81.4736056641, -24.8508367188], [81.4735266602, -24.7922417969], [81.4734476563, -24.7336468750], [81.4733686523, -24.6750519531], [81.4732896484, -24.6164570313], [81.4732106445, -24.5578621094], [81.4731316406, -24.4992671875], [81.4730526367, -24.4406722656], [81.4729736328, -24.3820773438], [81.4728946289, -24.3234824219], [81.4728156250, -24.2648875000], [81.4727366211, -24.2062925781], [81.4726576172, -24.1476976563], [81.4725786133, -24.0891027344], [81.4724996094, -24.0305078125], [81.4724206055, -23.9719128906], [81.4723416016, -23.9133179688], [81.4722625977, -23.8547230469], [81.4721835938, -23.7961281250], [81.4721045898, -23.7375332031], [81.4720255859, -23.6789382813], [81.4719465820, -23.6203433594], [81.4718675781, -23.5617484375], [81.4717885742, -23.5031535156], [81.4717095703, -23.4445585938], [81.4716305664, -23.3859636719], [81.4715515625, -23.3273687500], [81.4714725586, -23.2687738281], [81.4713935547, -23.2101789063], [81.4713145508, -23.1515839844], [81.4712355469, -23.0929890625], [81.4711565430, -23.0343941406], [81.4710775391, -22.9757992188], [81.4709985352, -22.9172042969], [81.4709195313, -22.8586093750], [81.4708405273, -22.8000144531], [81.4707615234, -22.7414195313], [81.4706825195, -22.6828246094], [81.4706035156, -22.6242296875], [81.4705245117, -22.5656347656], [81.4704455078, -22.5070398438], [81.4703665039, -22.4484449219], [81.4702875000, -22.3898500000], [81.4702084961, -22.3312550781], [81.4701294922, -22.2726601563], [81.4700504883, -22.2140652344], [81.4699714844, -22.1554703125], [81.4698924805, -22.0968753906], [81.4698134766, -22.0382804688], [81.4697344727, -21.9796855469], [81.4696554688, -21.9210906250], [81.4695764648, -21.8624957031], [81.4694974609, -21.8039007813], [81.4694184570, -21.7453058594]]);
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
import math
import time

from stl import mesh, Dimension

from tkinter import Tk     # from tkinter import Tk for Python 3.x
from tkinter.filedialog import askopenfilename
from mpl_toolkits.mplot3d import art3d
from matplotlib import pyplot as plt
import solid
import os
import ezdxf
import shapely.geometry as sg
import subprocess
from GUI import getSCADPath



def outputSTL(From, To, PATH=getSCADPath()):
    subprocess.Popen(PATH + " -o " + To + " " + From)
    while not os.path.exists(To):
        time.sleep(1)

class Model:
    def __init__(self, model, fileName, location, layer, thickness):
        self.location = location
        self.code = None
        self.fileName = fileName
        self.stl = fileName + ".stl"
        self.layer = layer
        self.thickness = thickness
        self.maxz = (layer+1)*thickness
        self.dxf = fileName + ".dxf"
        self.scad = fileName + ".scad"
        self.model = model
        self.center = None
        self.width = 10
        self.mesh = None
        self.useable_area = None


    def get_code(self):
        max_dim = 0.05
        max_array = 6

        num = int(self.fileName)
        nums = [int(a) for a in str(num)]
        nums.reverse()
        indices = nums
        length = len(nums)

        print(indices)
        t = 0
        i = 0
        cubes = []
        x = 0
        y = 0
        width = 0.01
        while x <= max_dim:
            while y <= max_dim:
                print(indices)
                if nums == []:
                    break
                if indices[0] != 0:
                    cubes.append(solid.translate([x, y, 0])(solid.cube(size=t / 1000 + 0.001)))
                    y += max_dim / (max_array - 1)
                    nums[0] = nums[0] - 1
                else:
                    indices.pop(0)
                    t += 1
                i += 1
            x += max_dim / (max_array - 1)
            y = 0

        outside = solid.translate([-width / 2, -width / 2])(solid.cube(max_dim + (length - 1) / 1000 + 0.001 + width))
        self.code = solid.difference()(outside, cubes)
        self.code = solid.projection(cut=True)(self.code)
        solid.scad_render_to_file(self.code, self.location + "/code.scad")
        outputSTL(From=self.location+"/code.scad", To=self.location+"code.dxf", PATH=getSCADPath())
        # os.system("toSTL.sh renders/code.scad renders/code.dxf")
        return self.location+"/code.dxf"

    def download(self, type):
        if type =="stl":
            print("generating:" + self.location+"/"+ self.fileName+".stl")
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".stl")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".stl")
        elif type == "dxf":
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".dxf")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".dxf")

    def render(self):
        solid.scad_render_to_file(self.model, self.location+"/"+ self.fileName+'.scad')
        while not os.path.exists(self.location+"/"+self.fileName+".scad"):
            time.sleep(1)
        # outputSTL(From= self.location+"/"+ self.fileName+'.scad', To=self.location+"/"+ self.fileName+'.stl')

    def get_points(self):
        doc = ezdxf.readfile(filename=self.location+"/"+ self.fileName+".dxf")
        msp = doc.modelspace()
        i=0
        lists = []
        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return [start, end]

        for e in msp.query("LINE"):
            line = helper(e)
            if not lists:
                lists.append([line])
            else:
                if lists[i][len(lists)-1][1] != line[0]:
                    lists.append([line])
                    i+=1
                else:
                    lists[i].append(line)

    def get_points2(self, FILE):
        doc = ezdxf.readfile(filename=FILE)
        msp = doc.modelspace()
        i = 0
        lists = []

        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return (start, end)

        for e in msp.query("LINE"):
            line = helper(e)
            if lists==[]:
                lists.append([line])
            else:
                if lists[i][len(lists[i]) - 1][1] != line[0]:
                    lists.append([line])
                    i += 1
                else:
                    lists[i].append(line)
        return lists

    def add_code(self):
        dxf = solid.projection(cut=False)(self.model)
        offset = solid.offset(r=-0.1)(dxf)
        solid.scad_render_to_file(offset, self.location+'/offset.scad')
        os.system("toSTL.sh renders/offset.scad renders/offset.dxf")
        lines = self.get_points2("renders/offset.dxf")
        x = lines[0][0][0][0]
        y = lines[0][0][0][1]
        print(x)
        print(y)
        code = solid.translate([x,y,0])(self.code)
        code = solid.linear_extrude(height=999)(code)
        save = self.model
        self.model = solid.projection()(solid.difference()(self.model, code))
        self.render()
        self.download("dxf")
        self.model = save

    def add_label(self, pos):
        # num = 12
        # minx, maxx, miny, maxy, minz, maxz = self.find_minmax()
        maxz = self.maxz
        # label = solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.5, halign="center"))
        # i=minx
        # print("x-len: " + str(maxx-minx))
        # print(i)
        # inc = (maxx-minx)/num
        # while minx <= i <= maxx:
        #     label = solid.union()(solid.translate([i, 0, maxz - 0.2])(solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.25, halign="center"))), label)
        #     i += inc
        #
        # l = label
        #
        # i =miny
        # while miny<= i <= maxy:
        #     print("y inc")
        #     l = solid.union()(solid.translate([0, i, 0])(label), l)
        #     i += 0.5
        for i in str(self.fileName):
            cur = pos[0]
            label = solid.translate([pos[0][0], pos[0][1], self.maxz-0.2])(solid.linear_extrude(height=(self.thickness)/3)(solid.text(str(i), size=0.5, halign="center", valign="center")))
            self.model = solid.difference()(self.model, label)
            pos.append(pos.pop(0))
            while abs(cur[0]-pos[0][0])<0.5 and abs(cur[1]-pos[0][1])<0.5:
                pos.append(pos.pop(0))



    def Center(self):

        volume, cog, inertia = self.mesh.get_mass_properties()
        print("Volume                                  = {0}".format(volume))
        print("Position of the center of gravity (COG) = {0}".format(cog))
        m_centered = solid.translate([-cog[0], -cog[1], 0])(
            self.model
        )
        return m_centered

    def find_minmax(self):
        minx = maxx = miny = maxy = minz = maxz = None
        for p in self.mesh.points:
            # p contains (x, y, z)
            if minx is None:
                minx = p[Dimension.X]
                maxx = p[Dimension.X]
                miny = p[Dimension.Y]
                maxy = p[Dimension.Y]
                minz = p[Dimension.Z]
                maxz = p[Dimension.Z]
            else:
                maxx = max(p[Dimension.X], maxx)
                minx = min(p[Dimension.X], minx)
                maxy = max(p[Dimension.Y], maxy)
                miny = min(p[Dimension.Y], miny)
                maxz = max(p[Dimension.Z], maxz)
                minz = min(p[Dimension.Z], minz)
        lenx = maxx - minx
        leny = maxy - miny
        lenz = maxz - minz
        return minx, maxx, miny, maxy, minz, maxz

    # def generate_Mesh(self):
    #     self.mesh = mesh.Mesh.from_file(self.location + "/" + str(int(self.fileName)//8)+ "b.stl")

    def get_top(self):
        top = solid.projection(cut=True)(solid.translate([0,0,-1*self.thickness*(self.layer+1)])(self.model))
        useable_area = solid.offset(r=-0.45)(top)
        self.useable_area = useable_area
        solid.scad_render_to_file(self.useable_area, self.location+'/' + 'toptemp.scad')
        outputSTL(From=self.location+'/' + 'toptemp.scad', To=self.location+"/top"+ self.dxf)

        # os.system("toSTL.sh out/toptemp.scad renders/" + self.fileName + ".dxf")
        dxf = DXF(self.location+"/top"+ self.dxf)
        min_p=dxf.points[0][0]
        points_ordered = dxf.points
        i=0
        while i <= len(dxf.points)+1:
            while math.sqrt((dxf.points[0][0]-dxf.points[1][0])**2+(dxf.points[0][1]-dxf.points[1][1])**2) > 0.1:
                dxf.points.insert(1, [(dxf.points[0][0]+dxf.points[1][0])/2, (dxf.points[0][1]+dxf.points[1][1])/2])
                i = i-1
            dxf.points.append(dxf.points.pop(0))
            i+=1
        for i in range(len(dxf.points)):
            dxf.points.append(dxf.points.pop(0))
            if dxf.points[0][0] < min_p:
                min_p = dxf.points[0][0]
                points_ordered = dxf.points.copy()
        dxf.points = points_ordered.copy()

        print(dxf.points)
        self.add_label(dxf.points)

class DXF:
    def __init__(self, file):
        self.file = file
        self.Lines = []
        self.points = []
        doc = ezdxf.readfile(self.file)
        msp = doc.modelspace()
        for e in msp:
            if e.dxftype() == "LINE":
                self.Lines.append(e)
                self.points.append([e.dxf.start[0], e.dxf.start[1]])
        # self.points.append([self.Lines[-1].dxf.end[0], self.Lines[-1].dxf.end[1]])
        self.area = None
        self.center = None
        self.polygon = sg.Polygon(self.points)

    def get_area(self):
        self.area = self.polygon.area
        return self.area

    def get_center(self):
        x_sum = 0
        y_sum =0
        for i in self.points:
            x_sum += i[0]
            y_sum += i[1]
        x_c = x_sum/len(self.points)
        y_c = y_sum/len(self.points)
        return (x_c, y_c)

    def split(self, maxdim):
        splits = []
        length = 0
        pieces = [[]]
        prev = self.points[-1]
        pieces[-1].append(prev)
        for j in self.points:
            length = length + math.sqrt((prev[0]-j[0])**2+(prev[1]-j[1])**2)
            if length >= maxdim:
                pieces[-1].append(j)
                pieces.append([])
                length = 0
            pieces[-1].append(j)
            prev = j
        for j in pieces:
            j.insert(0, [0,0])
            piece = solid.linear_extrude(height=10)(solid.polygon(j))
            splits.append(piece)
        return splits
    def refine_points(self):
        i=0
        while i <= len(self.points)+1:
            while math.sqrt((self.points[0][0]-self.points[1][0])**2+(self.points[0][1]-self.points[1][1])**2) > 0.1:
                self.points.insert(1, [(self.points[0][0]+self.points[1][0])/2, (self.points[0][1]+self.points[1][1])/2])
                i = i-1
            self.points.append(self.points.pop(0))
            i+=1


if __name__== "__main__":
    test = DXF("C:/Users/Daniel/Documents/repos/Shell_Maker/output/0top_slice.dxf")
    test.refine_points()
    k = test.split(48)
    for i in range(len(k)):
        solid.scad_render_to_file(k[i], str(i) + ".scad")


 
 
************************************************/
