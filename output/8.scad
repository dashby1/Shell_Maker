// Generated by SolidPython 1.1.3 on 2024-05-26 01:58:49


intersection() {
	difference() {
		intersection() {
			translate(v = [0, 0, 0]) {
				import(file = "CE3E3V2_Bottom_shell.stl", origin = [0, 0]);
			}
			translate(v = [-90.04029846191406, -32.690147399902344, 0]) {
				cube(size = [180.0806, 65.380295, 2]);
			}
		}
		linear_extrude(height = 999) {
			offset(r = -1) {
				import(file = "C:/Users/Daniel/Documents/repos/Shell_Maker/output/0top_slice.dxf", origin = [0, 0]);
			}
		}
	}
	translate(v = [0, 0, 0]) {
		linear_extrude(height = 10) {
			polygon(points = [[0, 0], [-37.9520398438, -31.8410250000], [-37.8610855469, -31.8428125000], [-37.7701312500, -31.8446000000], [-37.6791769531, -31.8463875000], [-37.5882226563, -31.8481750000], [-37.4972683594, -31.8499625000], [-37.4063140625, -31.8517500000], [-37.3153597656, -31.8535375000], [-37.2244054688, -31.8553250000], [-37.1334511719, -31.8571125000], [-37.0424968750, -31.8589000000], [-36.9515425781, -31.8606875000], [-36.8605882813, -31.8624750000], [-36.7696339844, -31.8642625000], [-36.6786796875, -31.8660500000], [-36.5877253906, -31.8678375000], [-36.4967710938, -31.8696250000], [-36.4058167969, -31.8714125000], [-36.3148625000, -31.8732000000], [-36.2239082031, -31.8749875000], [-36.1329539063, -31.8767750000], [-36.0419996094, -31.8785625000], [-35.9510453125, -31.8803500000], [-35.8600910156, -31.8821375000], [-35.7691367188, -31.8839250000], [-35.6781824219, -31.8857125000], [-35.5872281250, -31.8875000000], [-35.4962738281, -31.8892875000], [-35.4053195313, -31.8910750000], [-35.3143652344, -31.8928625000], [-35.2234109375, -31.8946500000], [-35.1324566406, -31.8964375000], [-35.0415023438, -31.8982250000], [-34.9505480469, -31.9000125000], [-34.8595937500, -31.9018000000], [-34.7686394531, -31.9035875000], [-34.6776851562, -31.9053750000], [-34.5867308594, -31.9071625000], [-34.4957765625, -31.9089500000], [-34.4048222656, -31.9107375000], [-34.3138679688, -31.9125250000], [-34.2229136719, -31.9143125000], [-34.1319593750, -31.9161000000], [-34.0410050781, -31.9178875000], [-33.9500507812, -31.9196750000], [-33.8590964844, -31.9214625000], [-33.7681421875, -31.9232500000], [-33.6771878906, -31.9250375000], [-33.5862335938, -31.9268250000], [-33.4952792969, -31.9286125000], [-33.4043250000, -31.9304000000], [-33.3133707031, -31.9321875000], [-33.2224164062, -31.9339750000], [-33.1314621094, -31.9357625000], [-33.0405078125, -31.9375500000], [-32.9495535156, -31.9393375000], [-32.8585992188, -31.9411250000], [-32.7676449219, -31.9429125000], [-32.6766906250, -31.9447000000], [-32.5857363281, -31.9464875000], [-32.4947820312, -31.9482750000], [-32.4038277344, -31.9500625000], [-32.3128734375, -31.9518500000], [-32.2219191406, -31.9536375000], [-32.1309648438, -31.9554250000], [-32.0400105469, -31.9572125000], [-31.9490562500, -31.9590000000], [-31.8581019531, -31.9607875000], [-31.7671476562, -31.9625750000], [-31.6761933594, -31.9643625000], [-31.5852390625, -31.9661500000], [-31.4942847656, -31.9679375000], [-31.4033304687, -31.9697250000], [-31.3123761719, -31.9715125000], [-31.2214218750, -31.9733000000], [-31.1304675781, -31.9750875000], [-31.0395132812, -31.9768750000], [-30.9485589844, -31.9786625000], [-30.8576046875, -31.9804500000], [-30.7666503906, -31.9822375000], [-30.6756960937, -31.9840250000], [-30.5847417969, -31.9858125000], [-30.4937875000, -31.9876000000], [-30.4028332031, -31.9893875000], [-30.3118789063, -31.9911750000], [-30.2209246094, -31.9929625000], [-30.1299703125, -31.9947500000], [-30.0390160156, -31.9965375000], [-29.9480617188, -31.9983250000], [-29.8571074219, -32.0001125000], [-29.7661531250, -32.0019000000], [-29.6751988281, -32.0036875000], [-29.5842445313, -32.0054750000], [-29.4932902344, -32.0072625000], [-29.4023359375, -32.0090500000], [-29.3113816406, -32.0108375000], [-29.2204273438, -32.0126250000], [-29.1294730469, -32.0144125000], [-29.0385187500, -32.0162000000], [-28.9475644531, -32.0179875000], [-28.8566101562, -32.0197750000], [-28.7656558594, -32.0215625000], [-28.6747015625, -32.0233500000], [-28.5837472656, -32.0251375000], [-28.4927929688, -32.0269250000], [-28.4018386719, -32.0287125000], [-28.3108843750, -32.0305000000], [-28.2199300781, -32.0322875000], [-28.1289757812, -32.0340750000], [-28.0380214844, -32.0358625000], [-27.9470671875, -32.0376500000], [-27.8561128906, -32.0394375000], [-27.7651585938, -32.0412250000], [-27.6742042969, -32.0430125000], [-27.5832500000, -32.0448000000], [-27.4922957031, -32.0465875000], [-27.4013414062, -32.0483750000], [-27.3103871094, -32.0501625000], [-27.2194328125, -32.0519500000], [-27.1284785156, -32.0537375000], [-27.0375242188, -32.0555250000], [-26.9465699219, -32.0573125000], [-26.8556156250, -32.0591000000], [-26.7646613281, -32.0608875000], [-26.6737070312, -32.0626750000], [-26.5827527344, -32.0644625000], [-26.4917984375, -32.0662500000], [-26.4008441406, -32.0680375000], [-26.3098898437, -32.0698250000], [-26.2189355469, -32.0716125000], [-26.1279812500, -32.0734000000], [-26.0370269531, -32.0751875000], [-25.9460726562, -32.0769750000], [-25.8551183594, -32.0787625000], [-25.7641640625, -32.0805500000], [-25.6732097656, -32.0823375000], [-25.5822554687, -32.0841250000], [-25.4913011719, -32.0859125000], [-25.4003468750, -32.0877000000], [-25.3093925781, -32.0894875000], [-25.2184382812, -32.0912750000], [-25.1274839844, -32.0930625000], [-25.0365296875, -32.0948500000], [-24.9455753906, -32.0966375000], [-24.8546210937, -32.0984250000], [-24.7636667969, -32.1002125000], [-24.6727125000, -32.1020000000], [-24.5817582031, -32.1037875000], [-24.4908039063, -32.1055750000], [-24.3998496094, -32.1073625000], [-24.3088953125, -32.1091500000], [-24.2179410156, -32.1109375000], [-24.1269867188, -32.1127250000], [-24.0360324219, -32.1145125000], [-23.9450781250, -32.1163000000], [-23.8541238281, -32.1180875000], [-23.7631695312, -32.1198750000], [-23.6722152344, -32.1216625000], [-23.5812609375, -32.1234500000], [-23.4903066406, -32.1252375000], [-23.3993523438, -32.1270250000], [-23.3083980469, -32.1288125000], [-23.2174437500, -32.1306000000], [-23.1264894531, -32.1323875000], [-23.0355351562, -32.1341750000], [-22.9445808594, -32.1359625000], [-22.8536265625, -32.1377500000], [-22.7626722656, -32.1395375000], [-22.6717179688, -32.1413250000], [-22.5807636719, -32.1431125000], [-22.4898093750, -32.1449000000], [-22.3988550781, -32.1466875000], [-22.3079007812, -32.1484750000], [-22.2169464844, -32.1502625000], [-22.1259921875, -32.1520500000], [-22.0350378906, -32.1538375000], [-21.9440835938, -32.1556250000], [-21.8531292969, -32.1574125000], [-21.7621750000, -32.1592000000], [-21.6712207031, -32.1609875000], [-21.5802664062, -32.1627750000], [-21.4893121094, -32.1645625000], [-21.3983578125, -32.1663500000], [-21.3074035156, -32.1681375000], [-21.2164492188, -32.1699250000], [-21.1254949219, -32.1717125000], [-21.0345406250, -32.1735000000], [-20.9435863281, -32.1752875000], [-20.8526320312, -32.1770750000], [-20.7616777344, -32.1788625000], [-20.6707234375, -32.1806500000], [-20.5797691406, -32.1824375000], [-20.4888148437, -32.1842250000], [-20.3978605469, -32.1860125000], [-20.3069062500, -32.1878000000], [-20.2159519531, -32.1895875000], [-20.1249976562, -32.1913750000], [-20.0340433594, -32.1931625000], [-19.9430890625, -32.1949500000], [-19.8521347656, -32.1967375000], [-19.7611804687, -32.1985250000], [-19.6702261719, -32.2003125000], [-19.5792718750, -32.2021000000], [-19.4883175781, -32.2038875000], [-19.3973632812, -32.2056750000], [-19.3064089844, -32.2074625000], [-19.2154546875, -32.2092500000], [-19.1245003906, -32.2110375000], [-19.0335460937, -32.2128250000], [-18.9425917969, -32.2146125000], [-18.8516375000, -32.2164000000], [-18.7606832031, -32.2181875000], [-18.6697289063, -32.2199750000], [-18.5787746094, -32.2217625000], [-18.4878203125, -32.2235500000], [-18.3968660156, -32.2253375000], [-18.3059117188, -32.2271250000], [-18.2149574219, -32.2289125000], [-18.1240031250, -32.2307000000], [-18.0330488281, -32.2324875000], [-17.9420945312, -32.2342750000], [-17.8511402344, -32.2360625000], [-17.7601859375, -32.2378500000], [-17.6692316406, -32.2396375000], [-17.5782773438, -32.2414250000], [-17.4873230469, -32.2432125000], [-17.3963687500, -32.2450000000], [-17.3054144531, -32.2467875000], [-17.2144601562, -32.2485750000], [-17.1235058594, -32.2503625000], [-17.0325515625, -32.2521500000], [-16.9415972656, -32.2539375000], [-16.8506429688, -32.2557250000], [-16.7596886719, -32.2575125000], [-16.6687343750, -32.2593000000], [-16.5777800781, -32.2610875000], [-16.4868257812, -32.2628750000], [-16.3958714844, -32.2646625000], [-16.3049171875, -32.2664500000], [-16.2139628906, -32.2682375000], [-16.1230085938, -32.2700250000], [-16.0320542969, -32.2718125000], [-15.9411000000, -32.2736000000], [-15.8760555430, -32.2745265625], [-15.8110110859, -32.2754531250], [-15.7459666289, -32.2763796875], [-15.6809221719, -32.2773062500], [-15.6158777148, -32.2782328125], [-15.5508332578, -32.2791593750], [-15.4857888008, -32.2800859375], [-15.4207443438, -32.2810125000], [-15.3556998867, -32.2819390625], [-15.2906554297, -32.2828656250], [-15.2256109727, -32.2837921875], [-15.1605665156, -32.2847187500], [-15.0955220586, -32.2856453125], [-15.0304776016, -32.2865718750], [-14.9654331445, -32.2874984375], [-14.9003886875, -32.2884250000], [-14.8353442305, -32.2893515625], [-14.7702997734, -32.2902781250], [-14.7052553164, -32.2912046875], [-14.6402108594, -32.2921312500], [-14.5751664023, -32.2930578125], [-14.5101219453, -32.2939843750], [-14.4450774883, -32.2949109375], [-14.3800330313, -32.2958375000], [-14.3149885742, -32.2967640625], [-14.2499441172, -32.2976906250], [-14.1848996602, -32.2986171875], [-14.1198552031, -32.2995437500], [-14.0548107461, -32.3004703125], [-13.9897662891, -32.3013968750], [-13.9247218320, -32.3023234375], [-13.8596773750, -32.3032500000], [-13.7946329180, -32.3041765625], [-13.7295884609, -32.3051031250], [-13.6645440039, -32.3060296875], [-13.5994995469, -32.3069562500], [-13.5344550898, -32.3078828125], [-13.4694106328, -32.3088093750], [-13.4043661758, -32.3097359375], [-13.3393217187, -32.3106625000], [-13.2742772617, -32.3115890625], [-13.2092328047, -32.3125156250], [-13.1441883477, -32.3134421875], [-13.0791438906, -32.3143687500], [-13.0140994336, -32.3152953125], [-12.9490549766, -32.3162218750], [-12.8840105195, -32.3171484375], [-12.8189660625, -32.3180750000], [-12.7539216055, -32.3190015625], [-12.6888771484, -32.3199281250], [-12.6238326914, -32.3208546875], [-12.5587882344, -32.3217812500], [-12.4937437773, -32.3227078125], [-12.4286993203, -32.3236343750], [-12.3636548633, -32.3245609375], [-12.2986104062, -32.3254875000], [-12.2335659492, -32.3264140625], [-12.1685214922, -32.3273406250], [-12.1034770352, -32.3282671875], [-12.0384325781, -32.3291937500], [-11.9733881211, -32.3301203125], [-11.9083436641, -32.3310468750], [-11.8432992070, -32.3319734375], [-11.7782547500, -32.3329000000], [-11.7132102930, -32.3338265625], [-11.6481658359, -32.3347531250], [-11.5831213789, -32.3356796875], [-11.5180769219, -32.3366062500], [-11.4530324648, -32.3375328125], [-11.3879880078, -32.3384593750], [-11.3229435508, -32.3393859375], [-11.2578990938, -32.3403125000], [-11.1928546367, -32.3412390625], [-11.1278101797, -32.3421656250], [-11.0627657227, -32.3430921875], [-10.9977212656, -32.3440187500], [-10.9326768086, -32.3449453125], [-10.8676323516, -32.3458718750], [-10.8025878945, -32.3467984375], [-10.7375434375, -32.3477250000], [-10.6724989805, -32.3486515625], [-10.6074545234, -32.3495781250], [-10.5424100664, -32.3505046875], [-10.4773656094, -32.3514312500], [-10.4123211523, -32.3523578125], [-10.3472766953, -32.3532843750], [-10.2822322383, -32.3542109375], [-10.2171877813, -32.3551375000], [-10.1521433242, -32.3560640625], [-10.0870988672, -32.3569906250], [-10.0220544102, -32.3579171875], [-9.9570099531, -32.3588437500], [-9.8919654961, -32.3597703125], [-9.8269210391, -32.3606968750], [-9.7618765820, -32.3616234375], [-9.6968321250, -32.3625500000], [-9.6317876680, -32.3634765625], [-9.5667432109, -32.3644031250], [-9.5016987539, -32.3653296875], [-9.4366542969, -32.3662562500], [-9.3716098398, -32.3671828125], [-9.3065653828, -32.3681093750], [-9.2415209258, -32.3690359375], [-9.1764764687, -32.3699625000], [-9.1114320117, -32.3708890625], [-9.0463875547, -32.3718156250], [-8.9813430977, -32.3727421875], [-8.9162986406, -32.3736687500], [-8.8512541836, -32.3745953125], [-8.7862097266, -32.3755218750], [-8.7211652695, -32.3764484375], [-8.6561208125, -32.3773750000], [-8.5910763555, -32.3783015625], [-8.5260318984, -32.3792281250], [-8.4609874414, -32.3801546875], [-8.3959429844, -32.3810812500], [-8.3308985273, -32.3820078125], [-8.2658540703, -32.3829343750], [-8.2008096133, -32.3838609375], [-8.1357651562, -32.3847875000], [-8.0707206992, -32.3857140625], [-8.0056762422, -32.3866406250], [-7.9406317852, -32.3875671875], [-7.8755873281, -32.3884937500], [-7.8105428711, -32.3894203125], [-7.7454984141, -32.3903468750], [-7.6804539570, -32.3912734375], [-7.6154095000, -32.3922000000], [-7.5503650430, -32.3931265625], [-7.4853205859, -32.3940531250], [-7.4202761289, -32.3949796875], [-7.3552316719, -32.3959062500], [-7.2901872148, -32.3968328125], [-7.2251427578, -32.3977593750], [-7.1600983008, -32.3986859375], [-7.0950538437, -32.3996125000], [-7.0300093867, -32.4005390625], [-6.9649649297, -32.4014656250], [-6.8999204727, -32.4023921875], [-6.8348760156, -32.4033187500], [-6.7698315586, -32.4042453125], [-6.7047871016, -32.4051718750], [-6.6397426445, -32.4060984375], [-6.5746981875, -32.4070250000], [-6.5096537305, -32.4079515625], [-6.4446092734, -32.4088781250], [-6.3795648164, -32.4098046875], [-6.3145203594, -32.4107312500], [-6.2494759023, -32.4116578125], [-6.1844314453, -32.4125843750], [-6.1193869883, -32.4135109375], [-6.0543425313, -32.4144375000], [-5.9892980742, -32.4153640625], [-5.9242536172, -32.4162906250], [-5.8592091602, -32.4172171875], [-5.7941647031, -32.4181437500], [-5.7291202461, -32.4190703125], [-5.6640757891, -32.4199968750], [-5.5990313320, -32.4209234375], [-5.5339868750, -32.4218500000], [-5.4689424180, -32.4227765625], [-5.4038979609, -32.4237031250], [-5.3388535039, -32.4246296875], [-5.2738090469, -32.4255562500], [-5.2087645898, -32.4264828125], [-5.1437201328, -32.4274093750], [-5.0786756758, -32.4283359375], [-5.0136312187, -32.4292625000], [-4.9485867617, -32.4301890625], [-4.8835423047, -32.4311156250], [-4.8184978477, -32.4320421875], [-4.7534533906, -32.4329687500], [-4.6884089336, -32.4338953125], [-4.6233644766, -32.4348218750], [-4.5583200195, -32.4357484375], [-4.4932755625, -32.4366750000], [-4.4282311055, -32.4376015625], [-4.3631866484, -32.4385281250], [-4.2981421914, -32.4394546875], [-4.2330977344, -32.4403812500], [-4.1680532773, -32.4413078125], [-4.1030088203, -32.4422343750], [-4.0379643633, -32.4431609375], [-3.9729199063, -32.4440875000], [-3.9078754492, -32.4450140625], [-3.8428309922, -32.4459406250], [-3.7777865352, -32.4468671875], [-3.7127420781, -32.4477937500], [-3.6476976211, -32.4487203125], [-3.5826531641, -32.4496468750], [-3.5176087070, -32.4505734375], [-3.4525642500, -32.4515000000], [-3.3875197930, -32.4524265625], [-3.3224753359, -32.4533531250], [-3.2574308789, -32.4542796875], [-3.1923864219, -32.4552062500], [-3.1273419648, -32.4561328125], [-3.0622975078, -32.4570593750], [-2.9972530508, -32.4579859375], [-2.9322085937, -32.4589125000], [-2.8671641367, -32.4598390625], [-2.8021196797, -32.4607656250], [-2.7370752227, -32.4616921875], [-2.6720307656, -32.4626187500], [-2.6069863086, -32.4635453125], [-2.5419418516, -32.4644718750], [-2.4768973945, -32.4653984375], [-2.4118529375, -32.4663250000], [-2.3468084805, -32.4672515625], [-2.2817640234, -32.4681781250], [-2.2167195664, -32.4691046875], [-2.1516751094, -32.4700312500], [-2.0866306523, -32.4709578125], [-2.0215861953, -32.4718843750], [-1.9565417383, -32.4728109375], [-1.8914972812, -32.4737375000], [-1.8264528242, -32.4746640625], [-1.7614083672, -32.4755906250], [-1.6963639102, -32.4765171875], [-1.6313194531, -32.4774437500], [-1.5662749961, -32.4783703125], [-1.5012305391, -32.4792968750], [-1.4361860820, -32.4802234375], [-1.3711416250, -32.4811500000], [-1.3060971680, -32.4820765625], [-1.2410527109, -32.4830031250], [-1.1760082539, -32.4839296875], [-1.1109637969, -32.4848562500], [-1.0459193398, -32.4857828125], [-0.9808748828, -32.4867093750], [-0.9158304258, -32.4876359375], [-0.8507859687, -32.4885625000], [-0.7857415117, -32.4894890625], [-0.7206970547, -32.4904156250], [-0.6556525977, -32.4913421875], [-0.5906081406, -32.4922687500], [-0.5255636836, -32.4931953125], [-0.4605192266, -32.4941218750], [-0.3954747695, -32.4950484375], [-0.3304303125, -32.4959750000], [-0.2653858555, -32.4969015625], [-0.2003413984, -32.4978281250], [-0.1352969414, -32.4987546875], [-0.0702524844, -32.4996812500], [-0.0052080273, -32.5006078125], [0.0598364297, -32.5015343750], [0.1248808867, -32.5024609375], [0.1899253438, -32.5033875000], [0.2549698008, -32.5043140625], [0.3200142578, -32.5052406250], [0.3850587148, -32.5061671875], [0.4501031719, -32.5070937500], [0.5151476289, -32.5080203125], [0.5801920859, -32.5089468750], [0.6452365430, -32.5098734375], [0.7102810000, -32.5108000000], [0.7624798652, -32.5110976563], [0.8146787305, -32.5113953125], [0.8668775957, -32.5116929687], [0.9190764609, -32.5119906250], [0.9712753262, -32.5122882813], [1.0234741914, -32.5125859375], [1.0756730566, -32.5128835938], [1.1278719219, -32.5131812500], [1.1800707871, -32.5134789063], [1.2322696523, -32.5137765625], [1.2844685176, -32.5140742187], [1.3366673828, -32.5143718750], [1.3888662480, -32.5146695313], [1.4410651133, -32.5149671875], [1.4932639785, -32.5152648438], [1.5454628437, -32.5155625000], [1.5976617090, -32.5158601562], [1.6498605742, -32.5161578125], [1.7020594395, -32.5164554687], [1.7542583047, -32.5167531250], [1.8064571699, -32.5170507813], [1.8586560352, -32.5173484375], [1.9108549004, -32.5176460938], [1.9630537656, -32.5179437500], [2.0152526309, -32.5182414062], [2.0674514961, -32.5185390625], [2.1196503613, -32.5188367187], [2.1718492266, -32.5191343750], [2.2240480918, -32.5194320313], [2.2762469570, -32.5197296875], [2.3284458223, -32.5200273438], [2.3806446875, -32.5203250000], [2.4328435527, -32.5206226562], [2.4850424180, -32.5209203125], [2.5372412832, -32.5212179687], [2.5894401484, -32.5215156250], [2.6416390137, -32.5218132813], [2.6938378789, -32.5221109375], [2.7460367441, -32.5224085938], [2.7982356094, -32.5227062500], [2.8504344746, -32.5230039062], [2.9026333398, -32.5233015625], [2.9548322051, -32.5235992187], [3.0070310703, -32.5238968750], [3.0592299355, -32.5241945313], [3.1114288008, -32.5244921875], [3.1636276660, -32.5247898437], [3.2158265312, -32.5250875000], [3.2680253965, -32.5253851562], [3.3202242617, -32.5256828125], [3.3724231270, -32.5259804687], [3.4246219922, -32.5262781250], [3.4768208574, -32.5265757813], [3.5290197227, -32.5268734375], [3.5812185879, -32.5271710937], [3.6334174531, -32.5274687500], [3.6856163184, -32.5277664062], [3.7378151836, -32.5280640625], [3.7900140488, -32.5283617188], [3.8422129141, -32.5286593750], [3.8944117793, -32.5289570313], [3.9466106445, -32.5292546875], [3.9988095098, -32.5295523437], [4.0510083750, -32.5298500000], [4.1032072402, -32.5301476563], [4.1554061055, -32.5304453125], [4.2076049707, -32.5307429688], [4.2598038359, -32.5310406250], [4.3120027012, -32.5313382813], [4.3642015664, -32.5316359375], [4.4164004316, -32.5319335938], [4.4685992969, -32.5322312500], [4.5207981621, -32.5325289063], [4.5729970273, -32.5328265625], [4.6251958926, -32.5331242188], [4.6773947578, -32.5334218750], [4.7295936230, -32.5337195313], [4.7817924883, -32.5340171875], [4.8339913535, -32.5343148438], [4.8861902187, -32.5346125000], [4.9383890840, -32.5349101563], [4.9905879492, -32.5352078125], [5.0427868145, -32.5355054688], [5.0949856797, -32.5358031250], [5.1471845449, -32.5361007813], [5.1993834102, -32.5363984375], [5.2515822754, -32.5366960938], [5.3037811406, -32.5369937500], [5.3559800059, -32.5372914063], [5.4081788711, -32.5375890625], [5.4603777363, -32.5378867188], [5.5125766016, -32.5381843750], [5.5647754668, -32.5384820313], [5.6169743320, -32.5387796875], [5.6691731973, -32.5390773438], [5.7213720625, -32.5393750000], [5.7735709277, -32.5396726563], [5.8257697930, -32.5399703125], [5.8779686582, -32.5402679688], [5.9301675234, -32.5405656250], [5.9823663887, -32.5408632813], [6.0345652539, -32.5411609375], [6.0867641191, -32.5414585938], [6.1389629844, -32.5417562500], [6.1911618496, -32.5420539063], [6.2433607148, -32.5423515625], [6.2955595801, -32.5426492188], [6.3477584453, -32.5429468750], [6.3999573105, -32.5432445313], [6.4521561758, -32.5435421875], [6.5043550410, -32.5438398438], [6.5565539062, -32.5441375000], [6.6087527715, -32.5444351563], [6.6609516367, -32.5447328125], [6.7131505020, -32.5450304687], [6.7653493672, -32.5453281250], [6.8175482324, -32.5456257813], [6.8697470977, -32.5459234375], [6.9219459629, -32.5462210938], [6.9741448281, -32.5465187500], [7.0263436934, -32.5468164063], [7.0785425586, -32.5471140625], [7.1307414238, -32.5474117187], [7.1829402891, -32.5477093750], [7.2351391543, -32.5480070313], [7.2873380195, -32.5483046875], [7.3395368848, -32.5486023438], [7.3917357500, -32.5489000000], [7.4439346152, -32.5491976563], [7.4961334805, -32.5494953125], [7.5483323457, -32.5497929687], [7.6005312109, -32.5500906250], [7.6527300762, -32.5503882813], [7.7049289414, -32.5506859375], [7.7571278066, -32.5509835938], [7.8093266719, -32.5512812500], [7.8615255371, -32.5515789063], [7.9137244023, -32.5518765625], [7.9659232676, -32.5521742187], [8.0181221328, -32.5524718750], [8.0703209980, -32.5527695313], [8.1225198633, -32.5530671875], [8.1747187285, -32.5533648438], [8.2269175937, -32.5536625000], [8.2791164590, -32.5539601562], [8.3313153242, -32.5542578125], [8.3835141895, -32.5545554687], [8.4357130547, -32.5548531250], [8.4879119199, -32.5551507813], [8.5401107852, -32.5554484375], [8.5923096504, -32.5557460938], [8.6445085156, -32.5560437500], [8.6967073809, -32.5563414062], [8.7489062461, -32.5566390625], [8.8011051113, -32.5569367187], [8.8533039766, -32.5572343750], [8.9055028418, -32.5575320313], [8.9577017070, -32.5578296875], [9.0099005723, -32.5581273438], [9.0620994375, -32.5584250000], [9.1142983027, -32.5587226562], [9.1664971680, -32.5590203125], [9.2186960332, -32.5593179687], [9.2708948984, -32.5596156250], [9.3230937637, -32.5599132813], [9.3752926289, -32.5602109375], [9.4274914941, -32.5605085938], [9.4796903594, -32.5608062500], [9.5318892246, -32.5611039062], [9.5840880898, -32.5614015625], [9.6362869551, -32.5616992187], [9.6884858203, -32.5619968750], [9.7406846855, -32.5622945313], [9.7928835508, -32.5625921875], [9.8450824160, -32.5628898437], [9.8972812812, -32.5631875000], [9.9494801465, -32.5634851562], [10.0016790117, -32.5637828125], [10.0538778770, -32.5640804687]]);
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
import math
import time

from stl import mesh, Dimension

from tkinter import Tk     # from tkinter import Tk for Python 3.x
from tkinter.filedialog import askopenfilename
from mpl_toolkits.mplot3d import art3d
from matplotlib import pyplot as plt
import solid
import os
import ezdxf
import shapely.geometry as sg
import subprocess
from GUI import getSCADPath



def outputSTL(From, To, PATH=getSCADPath()):
    subprocess.Popen(PATH + " -o " + To + " " + From)
    while not os.path.exists(To):
        time.sleep(1)

class Model:
    def __init__(self, model, fileName, location, layer, thickness):
        self.location = location
        self.code = None
        self.fileName = fileName
        self.stl = fileName + ".stl"
        self.layer = layer
        self.thickness = thickness
        self.maxz = (layer+1)*thickness
        self.dxf = fileName + ".dxf"
        self.scad = fileName + ".scad"
        self.model = model
        self.center = None
        self.width = 10
        self.mesh = None
        self.useable_area = None


    def get_code(self):
        max_dim = 0.05
        max_array = 6

        num = int(self.fileName)
        nums = [int(a) for a in str(num)]
        nums.reverse()
        indices = nums
        length = len(nums)

        print(indices)
        t = 0
        i = 0
        cubes = []
        x = 0
        y = 0
        width = 0.01
        while x <= max_dim:
            while y <= max_dim:
                print(indices)
                if nums == []:
                    break
                if indices[0] != 0:
                    cubes.append(solid.translate([x, y, 0])(solid.cube(size=t / 1000 + 0.001)))
                    y += max_dim / (max_array - 1)
                    nums[0] = nums[0] - 1
                else:
                    indices.pop(0)
                    t += 1
                i += 1
            x += max_dim / (max_array - 1)
            y = 0

        outside = solid.translate([-width / 2, -width / 2])(solid.cube(max_dim + (length - 1) / 1000 + 0.001 + width))
        self.code = solid.difference()(outside, cubes)
        self.code = solid.projection(cut=True)(self.code)
        solid.scad_render_to_file(self.code, self.location + "/code.scad")
        outputSTL(From=self.location+"/code.scad", To=self.location+"code.dxf", PATH=getSCADPath())
        # os.system("toSTL.sh renders/code.scad renders/code.dxf")
        return self.location+"/code.dxf"

    def download(self, type):
        if type =="stl":
            print("generating:" + self.location+"/"+ self.fileName+".stl")
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".stl")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".stl")
        elif type == "dxf":
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".dxf")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".dxf")

    def render(self):
        solid.scad_render_to_file(self.model, self.location+"/"+ self.fileName+'.scad')
        while not os.path.exists(self.location+"/"+self.fileName+".scad"):
            time.sleep(1)
        # outputSTL(From= self.location+"/"+ self.fileName+'.scad', To=self.location+"/"+ self.fileName+'.stl')

    def get_points(self):
        doc = ezdxf.readfile(filename=self.location+"/"+ self.fileName+".dxf")
        msp = doc.modelspace()
        i=0
        lists = []
        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return [start, end]

        for e in msp.query("LINE"):
            line = helper(e)
            if not lists:
                lists.append([line])
            else:
                if lists[i][len(lists)-1][1] != line[0]:
                    lists.append([line])
                    i+=1
                else:
                    lists[i].append(line)

    def get_points2(self, FILE):
        doc = ezdxf.readfile(filename=FILE)
        msp = doc.modelspace()
        i = 0
        lists = []

        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return (start, end)

        for e in msp.query("LINE"):
            line = helper(e)
            if lists==[]:
                lists.append([line])
            else:
                if lists[i][len(lists[i]) - 1][1] != line[0]:
                    lists.append([line])
                    i += 1
                else:
                    lists[i].append(line)
        return lists

    def add_code(self):
        dxf = solid.projection(cut=False)(self.model)
        offset = solid.offset(r=-0.1)(dxf)
        solid.scad_render_to_file(offset, self.location+'/offset.scad')
        os.system("toSTL.sh renders/offset.scad renders/offset.dxf")
        lines = self.get_points2("renders/offset.dxf")
        x = lines[0][0][0][0]
        y = lines[0][0][0][1]
        print(x)
        print(y)
        code = solid.translate([x,y,0])(self.code)
        code = solid.linear_extrude(height=999)(code)
        save = self.model
        self.model = solid.projection()(solid.difference()(self.model, code))
        self.render()
        self.download("dxf")
        self.model = save

    def add_label(self, pos):
        # num = 12
        # minx, maxx, miny, maxy, minz, maxz = self.find_minmax()
        maxz = self.maxz
        # label = solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.5, halign="center"))
        # i=minx
        # print("x-len: " + str(maxx-minx))
        # print(i)
        # inc = (maxx-minx)/num
        # while minx <= i <= maxx:
        #     label = solid.union()(solid.translate([i, 0, maxz - 0.2])(solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.25, halign="center"))), label)
        #     i += inc
        #
        # l = label
        #
        # i =miny
        # while miny<= i <= maxy:
        #     print("y inc")
        #     l = solid.union()(solid.translate([0, i, 0])(label), l)
        #     i += 0.5
        for i in str(self.fileName):
            cur = pos[0]
            label = solid.translate([pos[0][0], pos[0][1], self.maxz-0.2])(solid.linear_extrude(height=(self.thickness)/3)(solid.text(str(i), size=0.5, halign="center", valign="center")))
            self.model = solid.difference()(self.model, label)
            pos.append(pos.pop(0))
            while abs(cur[0]-pos[0][0])<0.5 and abs(cur[1]-pos[0][1])<0.5:
                pos.append(pos.pop(0))



    def Center(self):

        volume, cog, inertia = self.mesh.get_mass_properties()
        print("Volume                                  = {0}".format(volume))
        print("Position of the center of gravity (COG) = {0}".format(cog))
        m_centered = solid.translate([-cog[0], -cog[1], 0])(
            self.model
        )
        return m_centered

    def find_minmax(self):
        minx = maxx = miny = maxy = minz = maxz = None
        for p in self.mesh.points:
            # p contains (x, y, z)
            if minx is None:
                minx = p[Dimension.X]
                maxx = p[Dimension.X]
                miny = p[Dimension.Y]
                maxy = p[Dimension.Y]
                minz = p[Dimension.Z]
                maxz = p[Dimension.Z]
            else:
                maxx = max(p[Dimension.X], maxx)
                minx = min(p[Dimension.X], minx)
                maxy = max(p[Dimension.Y], maxy)
                miny = min(p[Dimension.Y], miny)
                maxz = max(p[Dimension.Z], maxz)
                minz = min(p[Dimension.Z], minz)
        lenx = maxx - minx
        leny = maxy - miny
        lenz = maxz - minz
        return minx, maxx, miny, maxy, minz, maxz

    # def generate_Mesh(self):
    #     self.mesh = mesh.Mesh.from_file(self.location + "/" + str(int(self.fileName)//8)+ "b.stl")

    def get_top(self):
        top = solid.projection(cut=True)(solid.translate([0,0,-1*self.thickness*(self.layer+1)])(self.model))
        useable_area = solid.offset(r=-0.45)(top)
        self.useable_area = useable_area
        solid.scad_render_to_file(self.useable_area, self.location+'/' + 'toptemp.scad')
        outputSTL(From=self.location+'/' + 'toptemp.scad', To=self.location+"/top"+ self.dxf)

        # os.system("toSTL.sh out/toptemp.scad renders/" + self.fileName + ".dxf")
        dxf = DXF(self.location+"/top"+ self.dxf)
        min_p=dxf.points[0][0]
        points_ordered = dxf.points
        i=0
        while i <= len(dxf.points)+1:
            while math.sqrt((dxf.points[0][0]-dxf.points[1][0])**2+(dxf.points[0][1]-dxf.points[1][1])**2) > 0.1:
                dxf.points.insert(1, [(dxf.points[0][0]+dxf.points[1][0])/2, (dxf.points[0][1]+dxf.points[1][1])/2])
                i = i-1
            dxf.points.append(dxf.points.pop(0))
            i+=1
        for i in range(len(dxf.points)):
            dxf.points.append(dxf.points.pop(0))
            if dxf.points[0][0] < min_p:
                min_p = dxf.points[0][0]
                points_ordered = dxf.points.copy()
        dxf.points = points_ordered.copy()

        print(dxf.points)
        self.add_label(dxf.points)

class DXF:
    def __init__(self, file):
        self.file = file
        self.Lines = []
        self.points = []
        doc = ezdxf.readfile(self.file)
        msp = doc.modelspace()
        for e in msp:
            if e.dxftype() == "LINE":
                self.Lines.append(e)
                self.points.append([e.dxf.start[0], e.dxf.start[1]])
        # self.points.append([self.Lines[-1].dxf.end[0], self.Lines[-1].dxf.end[1]])
        self.area = None
        self.center = None
        self.polygon = sg.Polygon(self.points)

    def get_area(self):
        self.area = self.polygon.area
        return self.area

    def get_center(self):
        x_sum = 0
        y_sum =0
        for i in self.points:
            x_sum += i[0]
            y_sum += i[1]
        x_c = x_sum/len(self.points)
        y_c = y_sum/len(self.points)
        return (x_c, y_c)

    def split(self, maxdim):
        splits = []
        length = 0
        pieces = [[]]
        prev = self.points[-1]
        pieces[-1].append(prev)
        for j in self.points:
            length = length + math.sqrt((prev[0]-j[0])**2+(prev[1]-j[1])**2)
            if length >= maxdim:
                pieces[-1].append(j)
                pieces.append([])
                length = 0
            pieces[-1].append(j)
            prev = j
        for j in pieces:
            j.insert(0, [0,0])
            piece = solid.linear_extrude(height=10)(solid.polygon(j))
            splits.append(piece)
        return splits
    def refine_points(self):
        i=0
        while i <= len(self.points)+1:
            while math.sqrt((self.points[0][0]-self.points[1][0])**2+(self.points[0][1]-self.points[1][1])**2) > 0.1:
                self.points.insert(1, [(self.points[0][0]+self.points[1][0])/2, (self.points[0][1]+self.points[1][1])/2])
                i = i-1
            self.points.append(self.points.pop(0))
            i+=1


if __name__== "__main__":
    test = DXF("C:/Users/Daniel/Documents/repos/Shell_Maker/output/0top_slice.dxf")
    test.refine_points()
    k = test.split(48)
    for i in range(len(k)):
        solid.scad_render_to_file(k[i], str(i) + ".scad")


 
 
************************************************/
