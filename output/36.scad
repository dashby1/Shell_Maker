// Generated by SolidPython 1.1.3 on 2024-05-26 01:59:20


intersection() {
	difference() {
		intersection() {
			translate(v = [0, 0, 0]) {
				import(file = "CE3E3V2_Bottom_shell.stl", origin = [0, 0]);
			}
			translate(v = [-90.04029846191406, -32.690147399902344, 8]) {
				cube(size = [180.0806, 65.380295, 2]);
			}
		}
		linear_extrude(height = 999) {
			offset(r = -1) {
				import(file = "C:/Users/Daniel/Documents/repos/Shell_Maker/output/4top_slice.dxf", origin = [0, 0]);
			}
		}
	}
	translate(v = [0, 0, 8]) {
		linear_extrude(height = 10) {
			polygon(points = [[0, 0], [2.0405110938, 26.4787515625], [1.9726787500, 26.4683125000], [1.9048464062, 26.4578734375], [1.8370140625, 26.4474343750], [1.7691817188, 26.4369953125], [1.7013493750, 26.4265562500], [1.6335170313, 26.4161171875], [1.5656846875, 26.4056781250], [1.4978523437, 26.3952390625], [1.4300200000, 26.3848000000], [1.3746288750, 26.3758562500], [1.3192377500, 26.3669125000], [1.2638466250, 26.3579687500], [1.2084555000, 26.3490250000], [1.1530643750, 26.3400812500], [1.0976732500, 26.3311375000], [1.0422821250, 26.3221937500], [0.9868910000, 26.3132500000], [0.9314998750, 26.3043062500], [0.8761087500, 26.2953625000], [0.8207176250, 26.2864187500], [0.7653265000, 26.2774750000], [0.7099353750, 26.2685312500], [0.6545442500, 26.2595875000], [0.5991531250, 26.2506437500], [0.5437620000, 26.2417000000], [0.4583640000, 26.2273078125], [0.3729660000, 26.2129156250], [0.2875680000, 26.1985234375], [0.2021700000, 26.1841312500], [0.1167720000, 26.1697390625], [0.0313740000, 26.1553468750], [-0.0540240000, 26.1409546875], [-0.1394220000, 26.1265625000], [-0.2248200000, 26.1121703125], [-0.3102180000, 26.0977781250], [-0.3956160000, 26.0833859375], [-0.4810140000, 26.0689937500], [-0.5664120000, 26.0546015625], [-0.6518100000, 26.0402093750], [-0.7372080000, 26.0258171875], [-0.8226060000, 26.0114250000], [-0.9080040000, 25.9970328125], [-0.9934020000, 25.9826406250], [-1.0788000000, 25.9682484375], [-1.1641980000, 25.9538562500], [-1.2495960000, 25.9394640625], [-1.3349940000, 25.9250718750], [-1.4203920000, 25.9106796875], [-1.5057900000, 25.8962875000], [-1.5911880000, 25.8818953125], [-1.6765860000, 25.8675031250], [-1.7619840000, 25.8531109375], [-1.8473820000, 25.8387187500], [-1.9327800000, 25.8243265625], [-2.0181780000, 25.8099343750], [-2.1035760000, 25.7955421875], [-2.1889740000, 25.7811500000], [-2.2743720000, 25.7667578125], [-2.3597700000, 25.7523656250], [-2.4451680000, 25.7379734375], [-2.5305660000, 25.7235812500], [-2.6159640000, 25.7091890625], [-2.7013620000, 25.6947968750], [-2.7867600000, 25.6804046875], [-2.8721580000, 25.6660125000], [-2.9575560000, 25.6516203125], [-3.0429540000, 25.6372281250], [-3.1283520000, 25.6228359375], [-3.2137500000, 25.6084437500], [-3.2991480000, 25.5940515625], [-3.3845460000, 25.5796593750], [-3.4699440000, 25.5652671875], [-3.5553420000, 25.5508750000], [-3.6407400000, 25.5364828125], [-3.7261380000, 25.5220906250], [-3.8115360000, 25.5076984375], [-3.8969340000, 25.4933062500], [-3.9823320000, 25.4789140625], [-4.0677300000, 25.4645218750], [-4.1531280000, 25.4501296875], [-4.2385260000, 25.4357375000], [-4.3239240000, 25.4213453125], [-4.4093220000, 25.4069531250], [-4.4947200000, 25.3925609375], [-4.5801180000, 25.3781687500], [-4.6655160000, 25.3637765625], [-4.7509140000, 25.3493843750], [-4.8363120000, 25.3349921875], [-4.9217100000, 25.3206000000], [-5.0061387500, 25.3055750000], [-5.0905675000, 25.2905500000], [-5.1749962500, 25.2755250000], [-5.2594250000, 25.2605000000], [-5.3438537500, 25.2454750000], [-5.4282825000, 25.2304500000], [-5.5127112500, 25.2154250000], [-5.5971400000, 25.2004000000], [-5.6662706250, 25.1874515625], [-5.7354012500, 25.1745031250], [-5.8045318750, 25.1615546875], [-5.8736625000, 25.1486062500], [-5.9427931250, 25.1356578125], [-6.0119237500, 25.1227093750], [-6.0810543750, 25.1097609375], [-6.1501850000, 25.0968125000], [-6.2193156250, 25.0838640625], [-6.2884462500, 25.0709156250], [-6.3575768750, 25.0579671875], [-6.4267075000, 25.0450187500], [-6.4958381250, 25.0320703125], [-6.5649687500, 25.0191218750], [-6.6340993750, 25.0061734375], [-6.7032300000, 24.9932250000], [-6.7723606250, 24.9802765625], [-6.8414912500, 24.9673281250], [-6.9106218750, 24.9543796875], [-6.9797525000, 24.9414312500], [-7.0488831250, 24.9284828125], [-7.1180137500, 24.9155343750], [-7.1871443750, 24.9025859375], [-7.2562750000, 24.8896375000], [-7.3254056250, 24.8766890625], [-7.3945362500, 24.8637406250], [-7.4636668750, 24.8507921875], [-7.5327975000, 24.8378437500], [-7.6019281250, 24.8248953125], [-7.6710587500, 24.8119468750], [-7.7401893750, 24.7989984375], [-7.8093200000, 24.7860500000], [-7.8784506250, 24.7731015625], [-7.9475812500, 24.7601531250], [-8.0167118750, 24.7472046875], [-8.0858425000, 24.7342562500], [-8.1549731250, 24.7213078125], [-8.2241037500, 24.7083593750], [-8.2932343750, 24.6954109375], [-8.3623650000, 24.6824625000], [-8.4314956250, 24.6695140625], [-8.5006262500, 24.6565656250], [-8.5697568750, 24.6436171875], [-8.6388875000, 24.6306687500], [-8.7080181250, 24.6177203125], [-8.7771487500, 24.6047718750], [-8.8462793750, 24.5918234375], [-8.9154100000, 24.5788750000], [-8.9845406250, 24.5659265625], [-9.0536712500, 24.5529781250], [-9.1228018750, 24.5400296875], [-9.1919325000, 24.5270812500], [-9.2610631250, 24.5141328125], [-9.3301937500, 24.5011843750], [-9.3993243750, 24.4882359375], [-9.4684550000, 24.4752875000], [-9.5375856250, 24.4623390625], [-9.6067162500, 24.4493906250], [-9.6758468750, 24.4364421875], [-9.7449775000, 24.4234937500], [-9.8141081250, 24.4105453125], [-9.8832387500, 24.3975968750], [-9.9523693750, 24.3846484375], [-10.0215000000, 24.3717000000], [-10.0850171875, 24.3593531250], [-10.1485343750, 24.3470062500], [-10.2120515625, 24.3346593750], [-10.2755687500, 24.3223125000], [-10.3390859375, 24.3099656250], [-10.4026031250, 24.2976187500], [-10.4661203125, 24.2852718750], [-10.5296375000, 24.2729250000], [-10.5931546875, 24.2605781250], [-10.6566718750, 24.2482312500], [-10.7201890625, 24.2358843750], [-10.7837062500, 24.2235375000], [-10.8472234375, 24.2111906250], [-10.9107406250, 24.1988437500], [-10.9742578125, 24.1864968750], [-11.0377750000, 24.1741500000], [-11.1012921875, 24.1618031250], [-11.1648093750, 24.1494562500], [-11.2283265625, 24.1371093750], [-11.2918437500, 24.1247625000], [-11.3553609375, 24.1124156250], [-11.4188781250, 24.1000687500], [-11.4823953125, 24.0877218750], [-11.5459125000, 24.0753750000], [-11.6094296875, 24.0630281250], [-11.6729468750, 24.0506812500], [-11.7364640625, 24.0383343750], [-11.7999812500, 24.0259875000], [-11.8634984375, 24.0136406250], [-11.9270156250, 24.0012937500], [-11.9905328125, 23.9889468750], [-12.0540500000, 23.9766000000], [-12.1175671875, 23.9642531250], [-12.1810843750, 23.9519062500], [-12.2446015625, 23.9395593750], [-12.3081187500, 23.9272125000], [-12.3716359375, 23.9148656250], [-12.4351531250, 23.9025187500], [-12.4986703125, 23.8901718750], [-12.5621875000, 23.8778250000], [-12.6257046875, 23.8654781250], [-12.6892218750, 23.8531312500], [-12.7527390625, 23.8407843750], [-12.8162562500, 23.8284375000], [-12.8797734375, 23.8160906250], [-12.9432906250, 23.8037437500], [-13.0068078125, 23.7913968750], [-13.0703250000, 23.7790500000], [-13.1338421875, 23.7667031250], [-13.1973593750, 23.7543562500], [-13.2608765625, 23.7420093750], [-13.3243937500, 23.7296625000], [-13.3879109375, 23.7173156250], [-13.4514281250, 23.7049687500], [-13.5149453125, 23.6926218750], [-13.5784625000, 23.6802750000], [-13.6419796875, 23.6679281250], [-13.7054968750, 23.6555812500], [-13.7690140625, 23.6432343750], [-13.8325312500, 23.6308875000], [-13.8960484375, 23.6185406250], [-13.9595656250, 23.6061937500], [-14.0230828125, 23.5938468750], [-14.0866000000, 23.5815000000], [-14.1447000000, 23.5697000000], [-14.2176109375, 23.5543453125], [-14.2905218750, 23.5389906250], [-14.3634328125, 23.5236359375], [-14.4363437500, 23.5082812500], [-14.5092546875, 23.4929265625], [-14.5821656250, 23.4775718750], [-14.6550765625, 23.4622171875], [-14.7279875000, 23.4468625000], [-14.8008984375, 23.4315078125], [-14.8738093750, 23.4161531250], [-14.9467203125, 23.4007984375], [-15.0196312500, 23.3854437500], [-15.0925421875, 23.3700890625], [-15.1654531250, 23.3547343750], [-15.2383640625, 23.3393796875], [-15.3112750000, 23.3240250000], [-15.3841859375, 23.3086703125], [-15.4570968750, 23.2933156250], [-15.5300078125, 23.2779609375], [-15.6029187500, 23.2626062500], [-15.6758296875, 23.2472515625], [-15.7487406250, 23.2318968750], [-15.8216515625, 23.2165421875], [-15.8945625000, 23.2011875000], [-15.9674734375, 23.1858328125], [-16.0403843750, 23.1704781250], [-16.1132953125, 23.1551234375], [-16.1862062500, 23.1397687500], [-16.2591171875, 23.1244140625], [-16.3320281250, 23.1090593750], [-16.4049390625, 23.0937046875], [-16.4778500000, 23.0783500000], [-16.5507609375, 23.0629953125], [-16.6236718750, 23.0476406250], [-16.6965828125, 23.0322859375], [-16.7694937500, 23.0169312500], [-16.8424046875, 23.0015765625], [-16.9153156250, 22.9862218750], [-16.9882265625, 22.9708671875], [-17.0611375000, 22.9555125000], [-17.1340484375, 22.9401578125], [-17.2069593750, 22.9248031250], [-17.2798703125, 22.9094484375], [-17.3527812500, 22.8940937500], [-17.4256921875, 22.8787390625], [-17.4986031250, 22.8633843750], [-17.5715140625, 22.8480296875], [-17.6444250000, 22.8326750000], [-17.7173359375, 22.8173203125], [-17.7902468750, 22.8019656250], [-17.8631578125, 22.7866109375], [-17.9360687500, 22.7712562500], [-18.0089796875, 22.7559015625], [-18.0818906250, 22.7405468750], [-18.1548015625, 22.7251921875], [-18.2277125000, 22.7098375000], [-18.3006234375, 22.6944828125], [-18.3735343750, 22.6791281250], [-18.4464453125, 22.6637734375], [-18.5193562500, 22.6484187500], [-18.5922671875, 22.6330640625], [-18.6651781250, 22.6177093750], [-18.7380890625, 22.6023546875], [-18.8110000000, 22.5870000000], [-18.8238000000, 22.5842000000], [-18.8939765625, 22.5678031250], [-18.9641531250, 22.5514062500], [-19.0343296875, 22.5350093750], [-19.1045062500, 22.5186125000], [-19.1746828125, 22.5022156250], [-19.2448593750, 22.4858187500], [-19.3150359375, 22.4694218750], [-19.3852125000, 22.4530250000], [-19.4553890625, 22.4366281250], [-19.5255656250, 22.4202312500], [-19.5957421875, 22.4038343750], [-19.6659187500, 22.3874375000], [-19.7360953125, 22.3710406250], [-19.8062718750, 22.3546437500], [-19.8764484375, 22.3382468750], [-19.9466250000, 22.3218500000], [-20.0168015625, 22.3054531250], [-20.0869781250, 22.2890562500], [-20.1571546875, 22.2726593750], [-20.2273312500, 22.2562625000], [-20.2975078125, 22.2398656250], [-20.3676843750, 22.2234687500], [-20.4378609375, 22.2070718750], [-20.5080375000, 22.1906750000], [-20.5782140625, 22.1742781250], [-20.6483906250, 22.1578812500], [-20.7185671875, 22.1414843750], [-20.7887437500, 22.1250875000], [-20.8589203125, 22.1086906250], [-20.9290968750, 22.0922937500], [-20.9992734375, 22.0758968750], [-21.0694500000, 22.0595000000], [-21.1396265625, 22.0431031250], [-21.2098031250, 22.0267062500], [-21.2799796875, 22.0103093750], [-21.3501562500, 21.9939125000], [-21.4203328125, 21.9775156250], [-21.4905093750, 21.9611187500], [-21.5606859375, 21.9447218750], [-21.6308625000, 21.9283250000], [-21.7010390625, 21.9119281250], [-21.7712156250, 21.8955312500], [-21.8413921875, 21.8791343750], [-21.9115687500, 21.8627375000], [-21.9817453125, 21.8463406250], [-22.0519218750, 21.8299437500], [-22.1220984375, 21.8135468750], [-22.1922750000, 21.7971500000], [-22.2624515625, 21.7807531250], [-22.3326281250, 21.7643562500], [-22.4028046875, 21.7479593750], [-22.4729812500, 21.7315625000], [-22.5431578125, 21.7151656250], [-22.6133343750, 21.6987687500], [-22.6835109375, 21.6823718750], [-22.7536875000, 21.6659750000], [-22.8238640625, 21.6495781250], [-22.8940406250, 21.6331812500], [-22.9642171875, 21.6167843750], [-23.0343937500, 21.6003875000], [-23.1045703125, 21.5839906250], [-23.1747468750, 21.5675937500], [-23.2449234375, 21.5511968750], [-23.3151000000, 21.5348000000], [-23.3691195312, 21.5221703125], [-23.4231390625, 21.5095406250], [-23.4771585937, 21.4969109375], [-23.5311781250, 21.4842812500], [-23.5851976563, 21.4716515625], [-23.6392171875, 21.4590218750], [-23.6932367188, 21.4463921875], [-23.7472562500, 21.4337625000], [-23.8012757812, 21.4211328125], [-23.8552953125, 21.4085031250], [-23.9093148438, 21.3958734375], [-23.9633343750, 21.3832437500], [-24.0173539063, 21.3706140625], [-24.0713734375, 21.3579843750], [-24.1253929687, 21.3453546875], [-24.1794125000, 21.3327250000], [-24.2334320313, 21.3200953125], [-24.2874515625, 21.3074656250], [-24.3414710938, 21.2948359375], [-24.3954906250, 21.2822062500], [-24.4495101562, 21.2695765625], [-24.5035296875, 21.2569468750], [-24.5575492188, 21.2443171875], [-24.6115687500, 21.2316875000], [-24.6655882813, 21.2190578125], [-24.7196078125, 21.2064281250], [-24.7736273438, 21.1937984375], [-24.8276468750, 21.1811687500], [-24.8816664063, 21.1685390625], [-24.9356859375, 21.1559093750], [-24.9897054688, 21.1432796875], [-25.0437250000, 21.1306500000], [-25.0977445313, 21.1180203125], [-25.1517640625, 21.1053906250], [-25.2057835937, 21.0927609375], [-25.2598031250, 21.0801312500], [-25.3138226563, 21.0675015625], [-25.3678421875, 21.0548718750], [-25.4218617188, 21.0422421875], [-25.4758812500, 21.0296125000], [-25.5299007812, 21.0169828125], [-25.5839203125, 21.0043531250], [-25.6379398438, 20.9917234375], [-25.6919593750, 20.9790937500], [-25.7459789063, 20.9664640625], [-25.7999984375, 20.9538343750], [-25.8540179688, 20.9412046875], [-25.9080375000, 20.9285750000], [-25.9620570313, 20.9159453125], [-26.0160765625, 20.9033156250], [-26.0700960938, 20.8906859375], [-26.1241156250, 20.8780562500], [-26.1781351563, 20.8654265625], [-26.2321546875, 20.8527968750], [-26.2861742188, 20.8401671875], [-26.3401937500, 20.8275375000], [-26.3942132813, 20.8149078125], [-26.4482328125, 20.8022781250], [-26.5022523438, 20.7896484375], [-26.5562718750, 20.7770187500], [-26.6102914063, 20.7643890625], [-26.6643109375, 20.7517593750], [-26.7183304688, 20.7391296875], [-26.7723500000, 20.7265000000], [-26.8263695313, 20.7138703125], [-26.8803890625, 20.7012406250], [-26.9344085937, 20.6886109375], [-26.9884281250, 20.6759812500], [-27.0424476563, 20.6633515625], [-27.0964671875, 20.6507218750], [-27.1504867188, 20.6380921875], [-27.2045062500, 20.6254625000], [-27.2585257813, 20.6128328125], [-27.3125453125, 20.6002031250], [-27.3665648438, 20.5875734375], [-27.4205843750, 20.5749437500], [-27.4746039063, 20.5623140625], [-27.5286234375, 20.5496843750], [-27.5826429688, 20.5370546875], [-27.6366625000, 20.5244250000], [-27.6906820313, 20.5117953125], [-27.7447015625, 20.4991656250], [-27.7987210938, 20.4865359375], [-27.8527406250, 20.4739062500], [-27.9067601563, 20.4612765625], [-27.9607796875, 20.4486468750], [-28.0147992188, 20.4360171875], [-28.0688187500, 20.4233875000], [-28.1228382813, 20.4107578125], [-28.1768578125, 20.3981281250], [-28.2308773438, 20.3854984375], [-28.2848968750, 20.3728687500], [-28.3389164063, 20.3602390625], [-28.3929359375, 20.3476093750], [-28.4469554688, 20.3349796875], [-28.5009750000, 20.3223500000], [-28.5549945313, 20.3097203125], [-28.6090140625, 20.2970906250], [-28.6630335938, 20.2844609375], [-28.7170531250, 20.2718312500], [-28.7710726563, 20.2592015625], [-28.8250921875, 20.2465718750], [-28.8791117188, 20.2339421875], [-28.9331312500, 20.2213125000], [-28.9871507813, 20.2086828125], [-29.0411703125, 20.1960531250], [-29.0951898437, 20.1834234375], [-29.1492093750, 20.1707937500], [-29.2032289063, 20.1581640625], [-29.2572484375, 20.1455343750], [-29.3112679688, 20.1329046875], [-29.3652875000, 20.1202750000], [-29.4193070312, 20.1076453125], [-29.4733265625, 20.0950156250], [-29.5273460937, 20.0823859375], [-29.5813656250, 20.0697562500], [-29.6353851563, 20.0571265625], [-29.6894046875, 20.0444968750], [-29.7434242188, 20.0318671875], [-29.7974437500, 20.0192375000], [-29.8514632812, 20.0066078125], [-29.9054828125, 19.9939781250], [-29.9595023438, 19.9813484375], [-30.0135218750, 19.9687187500], [-30.0675414063, 19.9560890625], [-30.1215609375, 19.9434593750], [-30.1755804687, 19.9308296875], [-30.2296000000, 19.9182000000], [-30.2955312500, 19.9012796875], [-30.3614625000, 19.8843593750], [-30.4273937500, 19.8674390625], [-30.4933250000, 19.8505187500], [-30.5592562500, 19.8335984375], [-30.6251875000, 19.8166781250], [-30.6911187500, 19.7997578125], [-30.7570500000, 19.7828375000], [-30.8229812500, 19.7659171875], [-30.8889125000, 19.7489968750], [-30.9548437500, 19.7320765625], [-31.0207750000, 19.7151562500], [-31.0867062500, 19.6982359375], [-31.1526375000, 19.6813156250], [-31.2185687500, 19.6643953125], [-31.2845000000, 19.6474750000], [-31.3504312500, 19.6305546875], [-31.4163625000, 19.6136343750], [-31.4822937500, 19.5967140625], [-31.5482250000, 19.5797937500], [-31.6141562500, 19.5628734375], [-31.6800875000, 19.5459531250], [-31.7460187500, 19.5290328125], [-31.8119500000, 19.5121125000], [-31.8778812500, 19.4951921875], [-31.9438125000, 19.4782718750], [-32.0097437500, 19.4613515625], [-32.0756750000, 19.4444312500], [-32.1416062500, 19.4275109375], [-32.2075375000, 19.4105906250], [-32.2734687500, 19.3936703125], [-32.3394000000, 19.3767500000], [-32.4053312500, 19.3598296875], [-32.4712625000, 19.3429093750], [-32.5371937500, 19.3259890625], [-32.6031250000, 19.3090687500], [-32.6690562500, 19.2921484375], [-32.7349875000, 19.2752281250], [-32.8009187500, 19.2583078125], [-32.8668500000, 19.2413875000], [-32.9327812500, 19.2244671875], [-32.9987125000, 19.2075468750], [-33.0646437500, 19.1906265625], [-33.1305750000, 19.1737062500], [-33.1965062500, 19.1567859375], [-33.2624375000, 19.1398656250], [-33.3283687500, 19.1229453125], [-33.3943000000, 19.1060250000], [-33.4602312500, 19.0891046875], [-33.5261625000, 19.0721843750], [-33.5920937500, 19.0552640625], [-33.6580250000, 19.0383437500], [-33.7239562500, 19.0214234375], [-33.7898875000, 19.0045031250], [-33.8558187500, 18.9875828125], [-33.9217500000, 18.9706625000], [-33.9876812500, 18.9537421875], [-34.0536125000, 18.9368218750], [-34.1195437500, 18.9199015625], [-34.1854750000, 18.9029812500], [-34.2514062500, 18.8860609375], [-34.3173375000, 18.8691406250], [-34.3832687500, 18.8522203125], [-34.4492000000, 18.8353000000], [-34.5049125000, 18.8205875000], [-34.5606250000, 18.8058750000], [-34.6163375000, 18.7911625000], [-34.6720500000, 18.7764500000], [-34.7277625000, 18.7617375000], [-34.7834750000, 18.7470250000], [-34.8391875000, 18.7323125000], [-34.8949000000, 18.7176000000], [-34.9846000000, 18.6930468750], [-35.0743000000, 18.6684937500], [-35.1640000000, 18.6439406250], [-35.2537000000, 18.6193875000], [-35.3434000000, 18.5948343750], [-35.4331000000, 18.5702812500], [-35.5228000000, 18.5457281250], [-35.6125000000, 18.5211750000], [-35.7022000000, 18.4966218750], [-35.7919000000, 18.4720687500], [-35.8816000000, 18.4475156250], [-35.9713000000, 18.4229625000], [-36.0610000000, 18.3984093750], [-36.1507000000, 18.3738562500], [-36.2404000000, 18.3493031250], [-36.3301000000, 18.3247500000], [-36.4198000000, 18.3001968750], [-36.5095000000, 18.2756437500], [-36.5992000000, 18.2510906250], [-36.6889000000, 18.2265375000], [-36.7786000000, 18.2019843750], [-36.8683000000, 18.1774312500], [-36.9580000000, 18.1528781250], [-37.0477000000, 18.1283250000], [-37.1374000000, 18.1037718750], [-37.2271000000, 18.0792187500], [-37.3168000000, 18.0546656250], [-37.4065000000, 18.0301125000], [-37.4962000000, 18.0055593750], [-37.5859000000, 17.9810062500], [-37.6756000000, 17.9564531250], [-37.7653000000, 17.9319000000], [-37.8175187500, 17.9175437500], [-37.8697375000, 17.9031875000], [-37.9219562500, 17.8888312500], [-37.9741750000, 17.8744750000], [-38.0263937500, 17.8601187500], [-38.0786125000, 17.8457625000], [-38.1308312500, 17.8314062500], [-38.1830500000, 17.8170500000], [-38.2352687500, 17.8026937500], [-38.2874875000, 17.7883375000], [-38.3397062500, 17.7739812500], [-38.3919250000, 17.7596250000], [-38.4441437500, 17.7452687500], [-38.4963625000, 17.7309125000], [-38.5485812500, 17.7165562500], [-38.6008000000, 17.7022000000], [-38.6813390625, 17.6794468750], [-38.7618781250, 17.6566937500], [-38.8424171875, 17.6339406250], [-38.9229562500, 17.6111875000], [-39.0034953125, 17.5884343750], [-39.0840343750, 17.5656812500], [-39.1645734375, 17.5429281250], [-39.2451125000, 17.5201750000], [-39.3256515625, 17.4974218750], [-39.4061906250, 17.4746687500], [-39.4867296875, 17.4519156250], [-39.5672687500, 17.4291625000], [-39.6478078125, 17.4064093750], [-39.7283468750, 17.3836562500], [-39.8088859375, 17.3609031250], [-39.8894250000, 17.3381500000], [-39.9699640625, 17.3153968750], [-40.0505031250, 17.2926437500], [-40.1310421875, 17.2698906250], [-40.2115812500, 17.2471375000], [-40.2921203125, 17.2243843750], [-40.3726593750, 17.2016312500], [-40.4531984375, 17.1788781250], [-40.5337375000, 17.1561250000], [-40.6142765625, 17.1333718750], [-40.6948156250, 17.1106187500], [-40.7753546875, 17.0878656250], [-40.8558937500, 17.0651125000], [-40.9364328125, 17.0423593750], [-41.0169718750, 17.0196062500], [-41.0975109375, 16.9968531250], [-41.1780500000, 16.9741000000], [-41.2585890625, 16.9513468750], [-41.3391281250, 16.9285937500], [-41.4196671875, 16.9058406250], [-41.5002062500, 16.8830875000], [-41.5807453125, 16.8603343750], [-41.6612843750, 16.8375812500], [-41.7418234375, 16.8148281250], [-41.8223625000, 16.7920750000], [-41.9029015625, 16.7693218750], [-41.9834406250, 16.7465687500], [-42.0639796875, 16.7238156250], [-42.1445187500, 16.7010625000], [-42.2250578125, 16.6783093750], [-42.3055968750, 16.6555562500], [-42.3861359375, 16.6328031250], [-42.4666750000, 16.6100500000], [-42.5472140625, 16.5872968750], [-42.6277531250, 16.5645437500], [-42.7082921875, 16.5417906250], [-42.7888312500, 16.5190375000], [-42.8693703125, 16.4962843750], [-42.9499093750, 16.4735312500], [-43.0304484375, 16.4507781250], [-43.1109875000, 16.4280250000], [-43.1915265625, 16.4052718750], [-43.2720656250, 16.3825187500], [-43.3526046875, 16.3597656250], [-43.4331437500, 16.3370125000], [-43.5136828125, 16.3142593750], [-43.5942218750, 16.2915062500], [-43.6747609375, 16.2687531250], [-43.7553000000, 16.2460000000], [-43.8320593750, 16.2235968750], [-43.9088187500, 16.2011937500], [-43.9855781250, 16.1787906250], [-44.0623375000, 16.1563875000], [-44.1390968750, 16.1339843750], [-44.2158562500, 16.1115812500], [-44.2926156250, 16.0891781250], [-44.3693750000, 16.0667750000], [-44.4461343750, 16.0443718750], [-44.5228937500, 16.0219687500], [-44.5996531250, 15.9995656250], [-44.6764125000, 15.9771625000], [-44.7531718750, 15.9547593750], [-44.8299312500, 15.9323562500]]);
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
import math
import time

from stl import mesh, Dimension

from tkinter import Tk     # from tkinter import Tk for Python 3.x
from tkinter.filedialog import askopenfilename
from mpl_toolkits.mplot3d import art3d
from matplotlib import pyplot as plt
import solid
import os
import ezdxf
import shapely.geometry as sg
import subprocess
from GUI import getSCADPath



def outputSTL(From, To, PATH=getSCADPath()):
    subprocess.Popen(PATH + " -o " + To + " " + From)
    while not os.path.exists(To):
        time.sleep(1)

class Model:
    def __init__(self, model, fileName, location, layer, thickness):
        self.location = location
        self.code = None
        self.fileName = fileName
        self.stl = fileName + ".stl"
        self.layer = layer
        self.thickness = thickness
        self.maxz = (layer+1)*thickness
        self.dxf = fileName + ".dxf"
        self.scad = fileName + ".scad"
        self.model = model
        self.center = None
        self.width = 10
        self.mesh = None
        self.useable_area = None


    def get_code(self):
        max_dim = 0.05
        max_array = 6

        num = int(self.fileName)
        nums = [int(a) for a in str(num)]
        nums.reverse()
        indices = nums
        length = len(nums)

        print(indices)
        t = 0
        i = 0
        cubes = []
        x = 0
        y = 0
        width = 0.01
        while x <= max_dim:
            while y <= max_dim:
                print(indices)
                if nums == []:
                    break
                if indices[0] != 0:
                    cubes.append(solid.translate([x, y, 0])(solid.cube(size=t / 1000 + 0.001)))
                    y += max_dim / (max_array - 1)
                    nums[0] = nums[0] - 1
                else:
                    indices.pop(0)
                    t += 1
                i += 1
            x += max_dim / (max_array - 1)
            y = 0

        outside = solid.translate([-width / 2, -width / 2])(solid.cube(max_dim + (length - 1) / 1000 + 0.001 + width))
        self.code = solid.difference()(outside, cubes)
        self.code = solid.projection(cut=True)(self.code)
        solid.scad_render_to_file(self.code, self.location + "/code.scad")
        outputSTL(From=self.location+"/code.scad", To=self.location+"code.dxf", PATH=getSCADPath())
        # os.system("toSTL.sh renders/code.scad renders/code.dxf")
        return self.location+"/code.dxf"

    def download(self, type):
        if type =="stl":
            print("generating:" + self.location+"/"+ self.fileName+".stl")
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".stl")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".stl")
        elif type == "dxf":
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".dxf")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".dxf")

    def render(self):
        solid.scad_render_to_file(self.model, self.location+"/"+ self.fileName+'.scad')
        while not os.path.exists(self.location+"/"+self.fileName+".scad"):
            time.sleep(1)
        # outputSTL(From= self.location+"/"+ self.fileName+'.scad', To=self.location+"/"+ self.fileName+'.stl')

    def get_points(self):
        doc = ezdxf.readfile(filename=self.location+"/"+ self.fileName+".dxf")
        msp = doc.modelspace()
        i=0
        lists = []
        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return [start, end]

        for e in msp.query("LINE"):
            line = helper(e)
            if not lists:
                lists.append([line])
            else:
                if lists[i][len(lists)-1][1] != line[0]:
                    lists.append([line])
                    i+=1
                else:
                    lists[i].append(line)

    def get_points2(self, FILE):
        doc = ezdxf.readfile(filename=FILE)
        msp = doc.modelspace()
        i = 0
        lists = []

        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return (start, end)

        for e in msp.query("LINE"):
            line = helper(e)
            if lists==[]:
                lists.append([line])
            else:
                if lists[i][len(lists[i]) - 1][1] != line[0]:
                    lists.append([line])
                    i += 1
                else:
                    lists[i].append(line)
        return lists

    def add_code(self):
        dxf = solid.projection(cut=False)(self.model)
        offset = solid.offset(r=-0.1)(dxf)
        solid.scad_render_to_file(offset, self.location+'/offset.scad')
        os.system("toSTL.sh renders/offset.scad renders/offset.dxf")
        lines = self.get_points2("renders/offset.dxf")
        x = lines[0][0][0][0]
        y = lines[0][0][0][1]
        print(x)
        print(y)
        code = solid.translate([x,y,0])(self.code)
        code = solid.linear_extrude(height=999)(code)
        save = self.model
        self.model = solid.projection()(solid.difference()(self.model, code))
        self.render()
        self.download("dxf")
        self.model = save

    def add_label(self, pos):
        # num = 12
        # minx, maxx, miny, maxy, minz, maxz = self.find_minmax()
        maxz = self.maxz
        # label = solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.5, halign="center"))
        # i=minx
        # print("x-len: " + str(maxx-minx))
        # print(i)
        # inc = (maxx-minx)/num
        # while minx <= i <= maxx:
        #     label = solid.union()(solid.translate([i, 0, maxz - 0.2])(solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.25, halign="center"))), label)
        #     i += inc
        #
        # l = label
        #
        # i =miny
        # while miny<= i <= maxy:
        #     print("y inc")
        #     l = solid.union()(solid.translate([0, i, 0])(label), l)
        #     i += 0.5
        for i in str(self.fileName):
            cur = pos[0]
            label = solid.translate([pos[0][0], pos[0][1], self.maxz-0.2])(solid.linear_extrude(height=(self.thickness)/3)(solid.text(str(i), size=0.5, halign="center", valign="center")))
            self.model = solid.difference()(self.model, label)
            pos.append(pos.pop(0))
            while abs(cur[0]-pos[0][0])<0.5 and abs(cur[1]-pos[0][1])<0.5:
                pos.append(pos.pop(0))



    def Center(self):

        volume, cog, inertia = self.mesh.get_mass_properties()
        print("Volume                                  = {0}".format(volume))
        print("Position of the center of gravity (COG) = {0}".format(cog))
        m_centered = solid.translate([-cog[0], -cog[1], 0])(
            self.model
        )
        return m_centered

    def find_minmax(self):
        minx = maxx = miny = maxy = minz = maxz = None
        for p in self.mesh.points:
            # p contains (x, y, z)
            if minx is None:
                minx = p[Dimension.X]
                maxx = p[Dimension.X]
                miny = p[Dimension.Y]
                maxy = p[Dimension.Y]
                minz = p[Dimension.Z]
                maxz = p[Dimension.Z]
            else:
                maxx = max(p[Dimension.X], maxx)
                minx = min(p[Dimension.X], minx)
                maxy = max(p[Dimension.Y], maxy)
                miny = min(p[Dimension.Y], miny)
                maxz = max(p[Dimension.Z], maxz)
                minz = min(p[Dimension.Z], minz)
        lenx = maxx - minx
        leny = maxy - miny
        lenz = maxz - minz
        return minx, maxx, miny, maxy, minz, maxz

    # def generate_Mesh(self):
    #     self.mesh = mesh.Mesh.from_file(self.location + "/" + str(int(self.fileName)//8)+ "b.stl")

    def get_top(self):
        top = solid.projection(cut=True)(solid.translate([0,0,-1*self.thickness*(self.layer+1)])(self.model))
        useable_area = solid.offset(r=-0.45)(top)
        self.useable_area = useable_area
        solid.scad_render_to_file(self.useable_area, self.location+'/' + 'toptemp.scad')
        outputSTL(From=self.location+'/' + 'toptemp.scad', To=self.location+"/top"+ self.dxf)

        # os.system("toSTL.sh out/toptemp.scad renders/" + self.fileName + ".dxf")
        dxf = DXF(self.location+"/top"+ self.dxf)
        min_p=dxf.points[0][0]
        points_ordered = dxf.points
        i=0
        while i <= len(dxf.points)+1:
            while math.sqrt((dxf.points[0][0]-dxf.points[1][0])**2+(dxf.points[0][1]-dxf.points[1][1])**2) > 0.1:
                dxf.points.insert(1, [(dxf.points[0][0]+dxf.points[1][0])/2, (dxf.points[0][1]+dxf.points[1][1])/2])
                i = i-1
            dxf.points.append(dxf.points.pop(0))
            i+=1
        for i in range(len(dxf.points)):
            dxf.points.append(dxf.points.pop(0))
            if dxf.points[0][0] < min_p:
                min_p = dxf.points[0][0]
                points_ordered = dxf.points.copy()
        dxf.points = points_ordered.copy()

        print(dxf.points)
        self.add_label(dxf.points)

class DXF:
    def __init__(self, file):
        self.file = file
        self.Lines = []
        self.points = []
        doc = ezdxf.readfile(self.file)
        msp = doc.modelspace()
        for e in msp:
            if e.dxftype() == "LINE":
                self.Lines.append(e)
                self.points.append([e.dxf.start[0], e.dxf.start[1]])
        # self.points.append([self.Lines[-1].dxf.end[0], self.Lines[-1].dxf.end[1]])
        self.area = None
        self.center = None
        self.polygon = sg.Polygon(self.points)

    def get_area(self):
        self.area = self.polygon.area
        return self.area

    def get_center(self):
        x_sum = 0
        y_sum =0
        for i in self.points:
            x_sum += i[0]
            y_sum += i[1]
        x_c = x_sum/len(self.points)
        y_c = y_sum/len(self.points)
        return (x_c, y_c)

    def split(self, maxdim):
        splits = []
        length = 0
        pieces = [[]]
        prev = self.points[-1]
        pieces[-1].append(prev)
        for j in self.points:
            length = length + math.sqrt((prev[0]-j[0])**2+(prev[1]-j[1])**2)
            if length >= maxdim:
                pieces[-1].append(j)
                pieces.append([])
                length = 0
            pieces[-1].append(j)
            prev = j
        for j in pieces:
            j.insert(0, [0,0])
            piece = solid.linear_extrude(height=10)(solid.polygon(j))
            splits.append(piece)
        return splits
    def refine_points(self):
        i=0
        while i <= len(self.points)+1:
            while math.sqrt((self.points[0][0]-self.points[1][0])**2+(self.points[0][1]-self.points[1][1])**2) > 0.1:
                self.points.insert(1, [(self.points[0][0]+self.points[1][0])/2, (self.points[0][1]+self.points[1][1])/2])
                i = i-1
            self.points.append(self.points.pop(0))
            i+=1


if __name__== "__main__":
    test = DXF("C:/Users/Daniel/Documents/repos/Shell_Maker/output/0top_slice.dxf")
    test.refine_points()
    k = test.split(48)
    for i in range(len(k)):
        solid.scad_render_to_file(k[i], str(i) + ".scad")


 
 
************************************************/
