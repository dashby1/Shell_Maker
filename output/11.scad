// Generated by SolidPython 1.1.3 on 2024-05-19 23:41:26


intersection() {
	difference() {
		intersection() {
			translate(v = [0, 0, 0]) {
				import(file = "CE3E3V2_Bottom_shell.stl", origin = [0, 0]);
			}
			translate(v = [-90.04029846191406, -32.690147399902344, 2]) {
				cube(size = [180.0806, 65.380295, 2]);
			}
		}
		linear_extrude(height = 999) {
			offset(r = -1) {
				import(file = "C:/Users/Daniel/Documents/repos/Shell_Maker/output/1top_slice.dxf", origin = [0, 0]);
			}
		}
	}
	translate(v = [0, 0, 2]) {
		linear_extrude(height = 10) {
			polygon(points = [[0, 0], [64.7153886719, -13.7935246094], [64.7135960938, -13.7266429687], [64.7118035156, -13.6597613281], [64.7100109375, -13.5928796875], [64.7082183594, -13.5259980469], [64.7064257813, -13.4591164063], [64.7046332031, -13.3922347656], [64.7028406250, -13.3253531250], [64.7010480469, -13.2584714844], [64.6992554688, -13.1915898438], [64.6974628906, -13.1247082031], [64.6956703125, -13.0578265625], [64.6938777344, -12.9909449219], [64.6920851563, -12.9240632812], [64.6902925781, -12.8571816406], [64.6885000000, -12.7903000000], [64.6697875000, -12.6946750000], [64.6510750000, -12.5990500000], [64.6323625000, -12.5034250000], [64.6136500000, -12.4078000000], [64.5949375000, -12.3121750000], [64.5762250000, -12.2165500000], [64.5575125000, -12.1209250000], [64.5388000000, -12.0253000000], [64.5476000000, -11.9363125000], [64.5564000000, -11.8473250000], [64.5652000000, -11.7583375000], [64.5740000000, -11.6693500000], [64.5828000000, -11.5803625000], [64.5916000000, -11.4913750000], [64.6004000000, -11.4023875000], [64.6092000000, -11.3134000000], [64.6142468750, -11.2496525000], [64.6192937500, -11.1859050000], [64.6243406250, -11.1221575000], [64.6293875000, -11.0584100000], [64.6344343750, -10.9946625000], [64.6394812500, -10.9309150000], [64.6445281250, -10.8671675000], [64.6495750000, -10.8034200000], [64.6546218750, -10.7396725000], [64.6596687500, -10.6759250000], [64.6647156250, -10.6121775000], [64.6697625000, -10.5484300000], [64.6748093750, -10.4846825000], [64.6798562500, -10.4209350000], [64.6849031250, -10.3571875000], [64.6899500000, -10.2934400000], [64.6949968750, -10.2296925000], [64.7000437500, -10.1659450000], [64.7050906250, -10.1021975000], [64.7101375000, -10.0384500000], [64.7151843750, -9.9747025000], [64.7202312500, -9.9109550000], [64.7252781250, -9.8472075000], [64.7303250000, -9.7834600000], [64.7353718750, -9.7197125000], [64.7404187500, -9.6559650000], [64.7454656250, -9.5922175000], [64.7505125000, -9.5284700000], [64.7555593750, -9.4647225000], [64.7606062500, -9.4009750000], [64.7656531250, -9.3372275000], [64.7707000000, -9.2734800000], [64.7742937500, -9.2105843750], [64.7778875000, -9.1476887500], [64.7814812500, -9.0847931250], [64.7850750000, -9.0218975000], [64.7886687500, -8.9590018750], [64.7922625000, -8.8961062500], [64.7958562500, -8.8332106250], [64.7994500000, -8.7703150000], [64.8030437500, -8.7074193750], [64.8066375000, -8.6445237500], [64.8102312500, -8.5816281250], [64.8138250000, -8.5187325000], [64.8174187500, -8.4558368750], [64.8210125000, -8.3929412500], [64.8246062500, -8.3300456250], [64.8282000000, -8.2671500000], [64.8313062500, -8.1868325000], [64.8344125000, -8.1065150000], [64.8375187500, -8.0261975000], [64.8406250000, -7.9458800000], [64.8437312500, -7.8655625000], [64.8468375000, -7.7852450000], [64.8499437500, -7.7049275000], [64.8530500000, -7.6246100000], [64.8561562500, -7.5442925000], [64.8592625000, -7.4639750000], [64.8623687500, -7.3836575000], [64.8654750000, -7.3033400000], [64.8685812500, -7.2230225000], [64.8716875000, -7.1427050000], [64.8747937500, -7.0623875000], [64.8779000000, -6.9820700000], [64.8788312500, -6.9275037500], [64.8797625000, -6.8729375000], [64.8806937500, -6.8183712500], [64.8816250000, -6.7638050000], [64.8825562500, -6.7092387500], [64.8834875000, -6.6546725000], [64.8844187500, -6.6001062500], [64.8853500000, -6.5455400000], [64.8862812500, -6.4909737500], [64.8872125000, -6.4364075000], [64.8881437500, -6.3818412500], [64.8890750000, -6.3272750000], [64.8900062500, -6.2727087500], [64.8909375000, -6.2181425000], [64.8918687500, -6.1635762500], [64.8928000000, -6.1090100000], [64.8914968750, -6.0561215625], [64.8901937500, -6.0032331250], [64.8888906250, -5.9503446875], [64.8875875000, -5.8974562500], [64.8862843750, -5.8445678125], [64.8849812500, -5.7916793750], [64.8836781250, -5.7387909375], [64.8823750000, -5.6859025000], [64.8810718750, -5.6330140625], [64.8797687500, -5.5801256250], [64.8784656250, -5.5272371875], [64.8771625000, -5.4743487500], [64.8758593750, -5.4214603125], [64.8745562500, -5.3685718750], [64.8732531250, -5.3156834375], [64.8719500000, -5.2627950000], [64.8706468750, -5.2099065625], [64.8693437500, -5.1570181250], [64.8680406250, -5.1041296875], [64.8667375000, -5.0512412500], [64.8654343750, -4.9983528125], [64.8641312500, -4.9454643750], [64.8628281250, -4.8925759375], [64.8615250000, -4.8396875000], [64.8602218750, -4.7867990625], [64.8589187500, -4.7339106250], [64.8576156250, -4.6810221875], [64.8563125000, -4.6281337500], [64.8550093750, -4.5752453125], [64.8537062500, -4.5223568750], [64.8524031250, -4.4694684375], [64.8511000000, -4.4165800000], [64.8509710938, -4.3210170312], [64.8508421875, -4.2254540625], [64.8507132813, -4.1298910938], [64.8505843750, -4.0343281250], [64.8504554688, -3.9387651562], [64.8503265625, -3.8432021875], [64.8501976563, -3.7476392187], [64.8500687500, -3.6520762500], [64.8499398438, -3.5565132812], [64.8498109375, -3.4609503125], [64.8496820312, -3.3653873437], [64.8495531250, -3.2698243750], [64.8494242188, -3.1742614062], [64.8492953125, -3.0786984375], [64.8491664063, -2.9831354687], [64.8490375000, -2.8875725000], [64.8489085938, -2.7920095312], [64.8487796875, -2.6964465625], [64.8486507813, -2.6008835937], [64.8485218750, -2.5053206250], [64.8483929688, -2.4097576562], [64.8482640625, -2.3141946875], [64.8481351562, -2.2186317187], [64.8480062500, -2.1230687500], [64.8478773437, -2.0275057812], [64.8477484375, -1.9319428125], [64.8476195313, -1.8363798437], [64.8474906250, -1.7408168750], [64.8473617188, -1.6452539062], [64.8472328125, -1.5496909375], [64.8471039062, -1.4541279687], [64.8469750000, -1.3585650000], [64.8468460938, -1.2630020312], [64.8467171875, -1.1674390625], [64.8465882812, -1.0718760937], [64.8464593750, -0.9763131250], [64.8463304687, -0.8807501562], [64.8462015625, -0.7851871875], [64.8460726563, -0.6896242187], [64.8459437500, -0.5940612500], [64.8458148438, -0.4984982812], [64.8456859375, -0.4029353125], [64.8455570312, -0.3073723437], [64.8454281250, -0.2118093750], [64.8452992188, -0.1162464062], [64.8451703125, -0.0206834375], [64.8450414062, 0.0748795313], [64.8449125000, 0.1704425000], [64.8447835937, 0.2660054688], [64.8446546875, 0.3615684375], [64.8445257812, 0.4571314063], [64.8443968750, 0.5526943750], [64.8442679688, 0.6482573438], [64.8441390625, 0.7438203125], [64.8440101562, 0.8393832813], [64.8438812500, 0.9349462500], [64.8437523437, 1.0305092188], [64.8436234375, 1.1260721875], [64.8434945312, 1.2216351563], [64.8433656250, 1.3171981250], [64.8432367187, 1.4127610937], [64.8431078125, 1.5083240625], [64.8429789062, 1.6038870313], [64.8428500000, 1.6994500000], [64.8427210938, 1.7950129688], [64.8425921875, 1.8905759375], [64.8424632813, 1.9861389063], [64.8423343750, 2.0817018750], [64.8422054688, 2.1772648438], [64.8420765625, 2.2728278125], [64.8419476562, 2.3683907813], [64.8418187500, 2.4639537500], [64.8416898438, 2.5595167187], [64.8415609375, 2.6550796875], [64.8414320312, 2.7506426563], [64.8413031250, 2.8462056250], [64.8411742187, 2.9417685937], [64.8410453125, 3.0373315625], [64.8409164063, 3.1328945313], [64.8407875000, 3.2284575000], [64.8406585938, 3.3240204688], [64.8405296875, 3.4195834375], [64.8404007812, 3.5151464062], [64.8402718750, 3.6107093750], [64.8401429688, 3.7062723437], [64.8400140625, 3.8018353125], [64.8398851562, 3.8973982813], [64.8397562500, 3.9929612500], [64.8396273437, 4.0885242187], [64.8394984375, 4.1840871875], [64.8393695313, 4.2796501562], [64.8392406250, 4.3752131250], [64.8391117188, 4.4707760938], [64.8389828125, 4.5663390625], [64.8388539062, 4.6619020312], [64.8387250000, 4.7574650000], [64.8385960937, 4.8530279688], [64.8384671875, 4.9485909375], [64.8383382812, 5.0441539062], [64.8382093750, 5.1397168750], [64.8380804687, 5.2352798437], [64.8379515625, 5.3308428125], [64.8378226562, 5.4264057813], [64.8376937500, 5.5219687500], [64.8375648438, 5.6175317187], [64.8374359375, 5.7130946875], [64.8373070312, 5.8086576563], [64.8371781250, 5.9042206250], [64.8370492187, 5.9997835938], [64.8369203125, 6.0953465625], [64.8367914062, 6.1909095312], [64.8366625000, 6.2864725000], [64.8365335937, 6.3820354688], [64.8364046875, 6.4775984375], [64.8362757812, 6.5731614062], [64.8361468750, 6.6687243750], [64.8360179687, 6.7642873438], [64.8358890625, 6.8598503125], [64.8357601562, 6.9554132812], [64.8356312500, 7.0509762500], [64.8355023437, 7.1465392188], [64.8353734375, 7.2421021875], [64.8352445312, 7.3376651562], [64.8351156250, 7.4332281250], [64.8349867187, 7.5287910937], [64.8348578125, 7.6243540625], [64.8347289062, 7.7199170313], [64.8346000000, 7.8154800000], [64.8307125000, 7.8972900000], [64.8268250000, 7.9791000000], [64.8229375000, 8.0609100000], [64.8190500000, 8.1427200000], [64.8151625000, 8.2245300000], [64.8112750000, 8.3063400000], [64.8073875000, 8.3881500000], [64.8035000000, 8.4699600000], [64.8001750000, 8.5300100000], [64.7968500000, 8.5900600000], [64.7935250000, 8.6501100000], [64.7902000000, 8.7101600000], [64.7850468750, 8.7805987500], [64.7798937500, 8.8510375000], [64.7747406250, 8.9214762500], [64.7695875000, 8.9919150000], [64.7644343750, 9.0623537500], [64.7592812500, 9.1327925000], [64.7541281250, 9.2032312500], [64.7489750000, 9.2736700000], [64.7438218750, 9.3441087500], [64.7386687500, 9.4145475000], [64.7335156250, 9.4849862500], [64.7283625000, 9.5554250000], [64.7232093750, 9.6258637500], [64.7180562500, 9.6963025000], [64.7129031250, 9.7667412500], [64.7077500000, 9.8371800000], [64.7025968750, 9.9076187500], [64.6974437500, 9.9780575000], [64.6922906250, 10.0484962500], [64.6871375000, 10.1189350000], [64.6819843750, 10.1893737500], [64.6768312500, 10.2598125000], [64.6716781250, 10.3302512500], [64.6665250000, 10.4006900000], [64.6613718750, 10.4711287500], [64.6562187500, 10.5415675000], [64.6510656250, 10.6120062500], [64.6459125000, 10.6824450000], [64.6407593750, 10.7528837500], [64.6356062500, 10.8233225000], [64.6304531250, 10.8937612500], [64.6253000000, 10.9642000000], [64.6177812500, 11.0353718750], [64.6102625000, 11.1065437500], [64.6027437500, 11.1777156250], [64.5952250000, 11.2488875000], [64.5877062500, 11.3200593750], [64.5801875000, 11.3912312500], [64.5726687500, 11.4624031250], [64.5651500000, 11.5335750000], [64.5576312500, 11.6047468750], [64.5501125000, 11.6759187500], [64.5425937500, 11.7470906250], [64.5350750000, 11.8182625000], [64.5275562500, 11.8894343750], [64.5200375000, 11.9606062500], [64.5125187500, 12.0317781250], [64.5050000000, 12.1029500000], [64.4974812500, 12.1741218750], [64.4899625000, 12.2452937500], [64.4824437500, 12.3164656250], [64.4749250000, 12.3876375000], [64.4674062500, 12.4588093750], [64.4598875000, 12.5299812500], [64.4523687500, 12.6011531250], [64.4448500000, 12.6723250000], [64.4373312500, 12.7434968750], [64.4298125000, 12.8146687500], [64.4222937500, 12.8858406250], [64.4147750000, 12.9570125000], [64.4072562500, 13.0281843750], [64.3997375000, 13.0993562500], [64.3922187500, 13.1705281250], [64.3847000000, 13.2417000000], [64.3760500000, 13.3106500000], [64.3674000000, 13.3796000000], [64.3587500000, 13.4485500000], [64.3501000000, 13.5175000000], [64.3707750000, 13.6125000000], [64.3914500000, 13.7075000000], [64.4121250000, 13.8025000000], [64.4328000000, 13.8975000000], [64.4534750000, 13.9925000000], [64.4741500000, 14.0875000000], [64.4948250000, 14.1825000000], [64.5155000000, 14.2775000000], [64.5079562500, 14.3396562500], [64.5004125000, 14.4018125000], [64.4928687500, 14.4639687500], [64.4853250000, 14.5261250000], [64.4777812500, 14.5882812500], [64.4702375000, 14.6504375000], [64.4626937500, 14.7125937500], [64.4551500000, 14.7747500000], [64.4476062500, 14.8369062500], [64.4400625000, 14.8990625000], [64.4325187500, 14.9612187500], [64.4249750000, 15.0233750000], [64.4174312500, 15.0855312500], [64.4098875000, 15.1476875000], [64.4023437500, 15.2098437500], [64.3948000000, 15.2720000000], [64.3974238281, 15.3298746094], [64.4000476562, 15.3877492187], [64.4026714844, 15.4456238281], [64.4052953125, 15.5034984375], [64.4079191406, 15.5613730469], [64.4105429688, 15.6192476562], [64.4131667969, 15.6771222656], [64.4157906250, 15.7349968750], [64.4184144531, 15.7928714844], [64.4210382812, 15.8507460938], [64.4236621094, 15.9086207031], [64.4262859375, 15.9664953125], [64.4289097656, 16.0243699219], [64.4315335938, 16.0822445313], [64.4341574219, 16.1401191406], [64.4367812500, 16.1979937500], [64.4394050781, 16.2558683594], [64.4420289062, 16.3137429688], [64.4446527344, 16.3716175781], [64.4472765625, 16.4294921875], [64.4499003906, 16.4873667969], [64.4525242187, 16.5452414063], [64.4551480469, 16.6031160156], [64.4577718750, 16.6609906250], [64.4603957031, 16.7188652344], [64.4630195312, 16.7767398438], [64.4656433594, 16.8346144531], [64.4682671875, 16.8924890625], [64.4708910156, 16.9503636719], [64.4735148437, 17.0082382813], [64.4761386719, 17.0661128906], [64.4787625000, 17.1239875000], [64.4813863281, 17.1818621094], [64.4840101563, 17.2397367188], [64.4866339844, 17.2976113281], [64.4892578125, 17.3554859375], [64.4918816406, 17.4133605469], [64.4945054688, 17.4712351562], [64.4971292969, 17.5291097656], [64.4997531250, 17.5869843750], [64.5023769531, 17.6448589844], [64.5050007813, 17.7027335938], [64.5076246094, 17.7606082031], [64.5102484375, 17.8184828125], [64.5128722656, 17.8763574219], [64.5154960938, 17.9342320313], [64.5181199219, 17.9921066406], [64.5207437500, 18.0499812500], [64.5233675781, 18.1078558594], [64.5259914063, 18.1657304688], [64.5286152344, 18.2236050781], [64.5312390625, 18.2814796875], [64.5338628906, 18.3393542969], [64.5364867188, 18.3972289063], [64.5391105469, 18.4551035156], [64.5417343750, 18.5129781250], [64.5443582031, 18.5708527344], [64.5469820312, 18.6287273438], [64.5496058594, 18.6866019531], [64.5522296875, 18.7444765625], [64.5548535156, 18.8023511719], [64.5574773438, 18.8602257813], [64.5601011719, 18.9181003906], [64.5627250000, 18.9759750000], [64.5653488281, 19.0338496094], [64.5679726562, 19.0917242188], [64.5705964844, 19.1495988281], [64.5732203125, 19.2074734375], [64.5758441406, 19.2653480469], [64.5784679688, 19.3232226562], [64.5810917969, 19.3810972656], [64.5837156250, 19.4389718750], [64.5863394531, 19.4968464844], [64.5889632812, 19.5547210938], [64.5915871094, 19.6125957031], [64.5942109375, 19.6704703125], [64.5968347656, 19.7283449219], [64.5994585938, 19.7862195313], [64.6020824219, 19.8440941406], [64.6047062500, 19.9019687500], [64.6073300781, 19.9598433594], [64.6099539062, 20.0177179688], [64.6125777344, 20.0755925781], [64.6152015625, 20.1334671875], [64.6178253906, 20.1913417969], [64.6204492187, 20.2492164063], [64.6230730469, 20.3070910156], [64.6256968750, 20.3649656250], [64.6283207031, 20.4228402344], [64.6309445312, 20.4807148438], [64.6335683594, 20.5385894531], [64.6361921875, 20.5964640625], [64.6388160156, 20.6543386719], [64.6414398437, 20.7122132813], [64.6440636719, 20.7700878906], [64.6466875000, 20.8279625000], [64.6493113281, 20.8858371094], [64.6519351563, 20.9437117188], [64.6545589844, 21.0015863281], [64.6571828125, 21.0594609375], [64.6598066406, 21.1173355469], [64.6624304688, 21.1752101562], [64.6650542969, 21.2330847656], [64.6676781250, 21.2909593750], [64.6703019531, 21.3488339844], [64.6729257813, 21.4067085938], [64.6755496094, 21.4645832031], [64.6781734375, 21.5224578125], [64.6807972656, 21.5803324219], [64.6834210938, 21.6382070313], [64.6860449219, 21.6960816406], [64.6886687500, 21.7539562500], [64.6912925781, 21.8118308594], [64.6939164062, 21.8697054688], [64.6965402344, 21.9275800781], [64.6991640625, 21.9854546875], [64.7017878906, 22.0433292969], [64.7044117188, 22.1012039063], [64.7070355469, 22.1590785156], [64.7096593750, 22.2169531250], [64.7122832031, 22.2748277344], [64.7149070312, 22.3327023438], [64.7175308594, 22.3905769531], [64.7201546875, 22.4484515625], [64.7227785156, 22.5063261719], [64.7254023438, 22.5642007813], [64.7280261719, 22.6220753906], [64.7306500000, 22.6799500000], [64.7332738281, 22.7378246094], [64.7358976562, 22.7956992188], [64.7385214844, 22.8535738281], [64.7411453125, 22.9114484375], [64.7437691406, 22.9693230469], [64.7463929688, 23.0271976562], [64.7490167969, 23.0850722656], [64.7516406250, 23.1429468750], [64.7542644531, 23.2008214844], [64.7568882812, 23.2586960938], [64.7595121094, 23.3165707031], [64.7621359375, 23.3744453125], [64.7647597656, 23.4323199219], [64.7673835937, 23.4901945313], [64.7700074219, 23.5480691406], [64.7726312500, 23.6059437500], [64.7752550781, 23.6638183594], [64.7778789062, 23.7216929688], [64.7805027344, 23.7795675781], [64.7831265625, 23.8374421875], [64.7857503906, 23.8953167969], [64.7883742187, 23.9531914063], [64.7909980469, 24.0110660156], [64.7936218750, 24.0689406250], [64.7962457031, 24.1268152344], [64.7988695312, 24.1846898438], [64.8014933594, 24.2425644531], [64.8041171875, 24.3004390625], [64.8067410156, 24.3583136719], [64.8093648437, 24.4161882813], [64.8119886719, 24.4740628906], [64.8146125000, 24.5319375000], [64.8172363281, 24.5898121094], [64.8198601563, 24.6476867188], [64.8224839844, 24.7055613281], [64.8251078125, 24.7634359375], [64.8277316406, 24.8213105469], [64.8303554687, 24.8791851562], [64.8329792969, 24.9370597656], [64.8356031250, 24.9949343750], [64.8382269531, 25.0528089844], [64.8408507812, 25.1106835938], [64.8434746094, 25.1685582031], [64.8460984375, 25.2264328125], [64.8487222656, 25.2843074219], [64.8513460938, 25.3421820313], [64.8539699219, 25.4000566406], [64.8565937500, 25.4579312500], [64.8592175781, 25.5158058594], [64.8618414062, 25.5736804688], [64.8644652344, 25.6315550781], [64.8670890625, 25.6894296875], [64.8697128906, 25.7473042969], [64.8723367188, 25.8051789063], [64.8749605469, 25.8630535156], [64.8775843750, 25.9209281250], [64.8802082031, 25.9788027344], [64.8828320312, 26.0366773438], [64.8854558594, 26.0945519531], [64.8880796875, 26.1524265625], [64.8907035156, 26.2103011719], [64.8933273438, 26.2681757813], [64.8959511719, 26.3260503906], [64.8985750000, 26.3839250000], [64.9011988281, 26.4417996094], [64.9038226562, 26.4996742188], [64.9064464844, 26.5575488281], [64.9090703125, 26.6154234375], [64.9116941406, 26.6732980469], [64.9143179687, 26.7311726562], [64.9169417969, 26.7890472656], [64.9195656250, 26.8469218750], [64.9221894531, 26.9047964844], [64.9248132812, 26.9626710938], [64.9274371094, 27.0205457031], [64.9300609375, 27.0784203125], [64.9326847656, 27.1362949219], [64.9353085937, 27.1941695313], [64.9379324219, 27.2520441406], [64.9405562500, 27.3099187500], [64.9431800781, 27.3677933594], [64.9458039063, 27.4256679688], [64.9484277344, 27.4835425781], [64.9510515625, 27.5414171875], [64.9536753906, 27.5992917969], [64.9562992188, 27.6571664063], [64.9589230469, 27.7150410156], [64.9615468750, 27.7729156250], [64.9641707031, 27.8307902344], [64.9667945313, 27.8886648438], [64.9694183594, 27.9465394531], [64.9720421875, 28.0044140625], [64.9746660156, 28.0622886719], [64.9772898438, 28.1201632813], [64.9799136719, 28.1780378906], [64.9825375000, 28.2359125000], [64.9851613281, 28.2937871094], [64.9877851562, 28.3516617188], [64.9904089844, 28.4095363281], [64.9930328125, 28.4674109375], [64.9956566406, 28.5252855469], [64.9982804688, 28.5831601562], [65.0009042969, 28.6410347656], [65.0035281250, 28.6989093750], [65.0061519531, 28.7567839844], [65.0087757812, 28.8146585937], [65.0113996094, 28.8725332031], [65.0140234375, 28.9304078125], [65.0166472656, 28.9882824219], [65.0192710938, 29.0461570313], [65.0218949219, 29.1040316406], [65.0245187500, 29.1619062500], [65.0271425781, 29.2197808594], [65.0297664062, 29.2776554688], [65.0323902344, 29.3355300781], [65.0350140625, 29.3934046875], [65.0376378906, 29.4512792969], [65.0402617188, 29.5091539063], [65.0428855469, 29.5670285156], [65.0455093750, 29.6249031250], [65.0481332031, 29.6827777344], [65.0507570313, 29.7406523438], [65.0533808594, 29.7985269531], [65.0560046875, 29.8564015625], [65.0586285156, 29.9142761719], [65.0612523437, 29.9721507813], [65.0638761719, 30.0300253906], [65.0665000000, 30.0879000000], [64.9980156250, 30.1078656250], [64.9295312500, 30.1278312500], [64.8610468750, 30.1477968750], [64.7925625000, 30.1677625000], [64.7240781250, 30.1877281250], [64.6555937500, 30.2076937500], [64.5871093750, 30.2276593750], [64.5186250000, 30.2476250000], [64.4501406250, 30.2675906250], [64.3816562500, 30.2875562500], [64.3131718750, 30.3075218750], [64.2446875000, 30.3274875000], [64.1762031250, 30.3474531250], [64.1077187500, 30.3674187500], [64.0392343750, 30.3873843750], [63.9707500000, 30.4073500000], [63.9022656250, 30.4273156250], [63.8337812500, 30.4472812500], [63.7652968750, 30.4672468750], [63.6968125000, 30.4872125000], [63.6283281250, 30.5071781250], [63.5598437500, 30.5271437500], [63.4913593750, 30.5471093750], [63.4228750000, 30.5670750000], [63.3543906250, 30.5870406250], [63.2859062500, 30.6070062500], [63.2174218750, 30.6269718750], [63.1489375000, 30.6469375000], [63.0804531250, 30.6669031250], [63.0119687500, 30.6868687500], [62.9434843750, 30.7068343750], [62.8750000000, 30.7268000000], [62.8050125000, 30.7389375000], [62.7350250000, 30.7510750000], [62.6650375000, 30.7632125000], [62.5950500000, 30.7753500000], [62.5250625000, 30.7874875000], [62.4550750000, 30.7996250000], [62.3850875000, 30.8117625000], [62.3151000000, 30.8239000000], [62.2626125000, 30.8297312500], [62.2101250000, 30.8355625000], [62.1576375000, 30.8413937500], [62.1051500000, 30.8472250000], [62.0526625000, 30.8530562500], [62.0001750000, 30.8588875000], [61.9476875000, 30.8647187500], [61.8952000000, 30.8705500000], [61.8427125000, 30.8763812500], [61.7902250000, 30.8822125000], [61.7377375000, 30.8880437500], [61.6852500000, 30.8938750000], [61.6327625000, 30.8997062500], [61.5802750000, 30.9055375000], [61.5277875000, 30.9113687500], [61.4753000000, 30.9172000000], [61.4216230469, 30.9197183594], [61.3679460937, 30.9222367187], [61.3142691406, 30.9247550781], [61.2605921875, 30.9272734375], [61.2069152344, 30.9297917969], [61.1532382812, 30.9323101563], [61.0995613281, 30.9348285156]]);
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
import math
import time

from stl import mesh, Dimension

from tkinter import Tk     # from tkinter import Tk for Python 3.x
from tkinter.filedialog import askopenfilename
from mpl_toolkits.mplot3d import art3d
from matplotlib import pyplot as plt
import solid
import os
import ezdxf
import shapely.geometry as sg
import subprocess
from GUI import getSCADPath



def outputSTL(From, To, PATH=getSCADPath()):
    subprocess.Popen(PATH + " -o " + To + " " + From)
    while not os.path.exists(To):
        time.sleep(1)


def get_size(i):
    x_list = [int(a) for a in str(i)]
    return len(x_list)



class Model:
    def __init__(self, model, fileName, location, layer, thickness):
        self.location = location
        self.code = None
        self.fileName = fileName
        self.stl = fileName + ".stl"
        self.layer = layer
        self.thickness = thickness
        self.maxz = (layer+1)*thickness
        self.dxf = fileName + ".dxf"
        self.scad = fileName + ".scad"
        self.model = model
        self.center = None
        self.width = 10
        self.mesh = None
        self.useable_area = None


    def get_code(self):
        max_dim = 0.05
        max_array = 6

        num = int(self.fileName)
        nums = [int(a) for a in str(num)]
        nums.reverse()
        indices = nums
        length = len(nums)

        print(indices)
        t = 0
        i = 0
        cubes = []
        x = 0
        y = 0
        width = 0.01
        while x <= max_dim:
            while y <= max_dim:
                print(indices)
                if nums == []:
                    break
                if indices[0] != 0:
                    cubes.append(solid.translate([x, y, 0])(solid.cube(size=t / 1000 + 0.001)))
                    y += max_dim / (max_array - 1)
                    nums[0] = nums[0] - 1
                else:
                    indices.pop(0)
                    t += 1
                i += 1
            x += max_dim / (max_array - 1)
            y = 0

        outside = solid.translate([-width / 2, -width / 2])(solid.cube(max_dim + (length - 1) / 1000 + 0.001 + width))
        self.code = solid.difference()(outside, cubes)
        self.code = solid.projection(cut=True)(self.code)
        solid.scad_render_to_file(self.code, self.location + "/code.scad")
        outputSTL(From=self.location+"/code.scad", To=self.location+"code.dxf", PATH=getSCADPath())
        # os.system("toSTL.sh renders/code.scad renders/code.dxf")
        return self.location+"/code.dxf"

    def download(self, type):
        if type =="stl":
            print("generating:" + self.location+"/"+ self.fileName+".stl")
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".stl")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".stl")
        elif type == "dxf":
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".dxf")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".dxf")

    def render(self):
        solid.scad_render_to_file(self.model, self.location+"/"+ self.fileName+'.scad')
        while not os.path.exists(self.location+"/"+self.fileName+".scad"):
            time.sleep(1)

    def get_points(self):
        doc = ezdxf.readfile(filename=self.location+"/"+ self.fileName+".dxf")
        msp = doc.modelspace()
        i=0
        lists = []
        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return [start, end]

        for e in msp.query("LINE"):
            line = helper(e)
            if not lists:
                lists.append([line])
            else:
                if lists[i][len(lists)-1][1] != line[0]:
                    lists.append([line])
                    i+=1
                else:
                    lists[i].append(line)

    def get_points2(self, FILE):
        doc = ezdxf.readfile(filename=FILE)
        msp = doc.modelspace()
        i = 0
        lists = []

        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return (start, end)

        for e in msp.query("LINE"):
            line = helper(e)
            if lists==[]:
                lists.append([line])
            else:
                if lists[i][len(lists[i]) - 1][1] != line[0]:
                    lists.append([line])
                    i += 1
                else:
                    lists[i].append(line)
        return lists

    def add_code(self):
        dxf = solid.projection(cut=False)(self.model)
        offset = solid.offset(r=-0.1)(dxf)
        solid.scad_render_to_file(offset, self.location+'/offset.scad')
        os.system("toSTL.sh renders/offset.scad renders/offset.dxf")
        lines = self.get_points2("renders/offset.dxf")
        x = lines[0][0][0][0]
        y = lines[0][0][0][1]
        print(x)
        print(y)
        code = solid.translate([x,y,0])(self.code)
        code = solid.linear_extrude(height=999)(code)
        save = self.model
        self.model = solid.projection()(solid.difference()(self.model, code))
        self.render()
        self.download("dxf")
        self.model = save

    def add_label(self, pos):
        # num = 12
        # minx, maxx, miny, maxy, minz, maxz = self.find_minmax()
        maxz = self.maxz
        # label = solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.5, halign="center"))
        # i=minx
        # print("x-len: " + str(maxx-minx))
        # print(i)
        # inc = (maxx-minx)/num
        # while minx <= i <= maxx:
        #     label = solid.union()(solid.translate([i, 0, maxz - 0.2])(solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.25, halign="center"))), label)
        #     i += inc
        #
        # l = label
        #
        # i =miny
        # while miny<= i <= maxy:
        #     print("y inc")
        #     l = solid.union()(solid.translate([0, i, 0])(label), l)
        #     i += 0.5
        for i in str(self.fileName):
            cur = pos[0]
            label = solid.translate([pos[0][0], pos[0][1], self.maxz-0.2])(solid.linear_extrude(height=(self.thickness)/3)(solid.text(str(i), size=0.5, halign="center", valign="center")))
            self.model = solid.difference()(self.model, label)
            pos.append(pos.pop(0))
            while abs(cur[0]-pos[0][0])<0.5 and abs(cur[1]-pos[0][1])<0.5:
                pos.append(pos.pop(0))



    def Center(self):

        volume, cog, inertia = self.mesh.get_mass_properties()
        print("Volume                                  = {0}".format(volume))
        print("Position of the center of gravity (COG) = {0}".format(cog))
        m_centered = solid.translate([-cog[0], -cog[1], 0])(
            self.model
        )
        return m_centered

    def find_minmax(self):
        minx = maxx = miny = maxy = minz = maxz = None
        for p in self.mesh.points:
            # p contains (x, y, z)
            if minx is None:
                minx = p[Dimension.X]
                maxx = p[Dimension.X]
                miny = p[Dimension.Y]
                maxy = p[Dimension.Y]
                minz = p[Dimension.Z]
                maxz = p[Dimension.Z]
            else:
                maxx = max(p[Dimension.X], maxx)
                minx = min(p[Dimension.X], minx)
                maxy = max(p[Dimension.Y], maxy)
                miny = min(p[Dimension.Y], miny)
                maxz = max(p[Dimension.Z], maxz)
                minz = min(p[Dimension.Z], minz)
        lenx = maxx - minx
        leny = maxy - miny
        lenz = maxz - minz
        return minx, maxx, miny, maxy, minz, maxz

    # def generate_Mesh(self):
    #     self.mesh = mesh.Mesh.from_file(self.location + "/" + str(int(self.fileName)//8)+ "b.stl")

    def get_top(self):
        top = solid.projection(cut=True)(solid.translate([0,0,-1*self.thickness*(self.layer+1)])(self.model))
        useable_area = solid.offset(r=-0.45)(top)
        self.useable_area = useable_area
        solid.scad_render_to_file(self.useable_area, self.location+'/' + 'toptemp.scad')
        outputSTL(From=self.location+'/' + 'toptemp.scad', To=self.location+"/top"+ self.dxf)

        # os.system("toSTL.sh out/toptemp.scad renders/" + self.fileName + ".dxf")
        dxf = DXF(self.location+"/top"+ self.dxf)
        min_p=dxf.points[0][0]
        points_ordered = dxf.points
        i=0
        while i <= len(dxf.points)+1:
            while math.sqrt((dxf.points[0][0]-dxf.points[1][0])**2+(dxf.points[0][1]-dxf.points[1][1])**2) > 0.1:
                dxf.points.insert(1, [(dxf.points[0][0]+dxf.points[1][0])/2, (dxf.points[0][1]+dxf.points[1][1])/2])
                i = i-1
            dxf.points.append(dxf.points.pop(0))
            i+=1
        for i in range(len(dxf.points)):
            dxf.points.append(dxf.points.pop(0))
            if dxf.points[0][0] < min_p:
                min_p = dxf.points[0][0]
                points_ordered = dxf.points.copy()
        dxf.points = points_ordered.copy()

        print(dxf.points)
        self.add_label(dxf.points)

class DXF:
    def __init__(self, file):
        self.file = file
        self.Lines = []
        self.points = []
        doc = ezdxf.readfile(self.file)
        msp = doc.modelspace()
        for e in msp:
            if e.dxftype() == "LINE":
                self.Lines.append(e)
                self.points.append([e.dxf.start[0], e.dxf.start[1]])
        # self.points.append([self.Lines[-1].dxf.end[0], self.Lines[-1].dxf.end[1]])
        self.area = None
        self.center = None
        self.polygon = sg.Polygon(self.points)

    def get_area(self):
        self.area = self.polygon.area
        return self.area

    def get_center(self):
        x_sum = 0
        y_sum =0
        for i in self.points:
            x_sum += i[0]
            y_sum += i[1]
        x_c = x_sum/len(self.points)
        y_c = y_sum/len(self.points)
        return (x_c, y_c)

    def split(self, maxdim):
        splits = []
        length = 0
        pieces = [[]]
        prev = self.points[0]
        for j in self.points:
            length = length + math.sqrt((prev[0]-j[0])**2+(prev[1]-j[1])**2)
            if length >= maxdim:
                pieces[-1].append(j)
                pieces.append([])
                length = 0
            pieces[-1].append(j)
            prev = j
        for j in pieces:
            j.insert(0, [0,0])
            piece = solid.linear_extrude(height=10)(solid.polygon(j))
            splits.append(piece)
        return splits
    def refine_points(self):
        i=0
        while i <= len(self.points)+1:
            while math.sqrt((self.points[0][0]-self.points[1][0])**2+(self.points[0][1]-self.points[1][1])**2) > 0.1:
                self.points.insert(1, [(self.points[0][0]+self.points[1][0])/2, (self.points[0][1]+self.points[1][1])/2])
                i = i-1
            self.points.append(self.points.pop(0))
            i+=1


if __name__== "__main__":
    test = DXF("C:/Users/Daniel/Documents/repos/Shell_Maker/output/0top_slice.dxf")
    test.refine_points()
    k = test.split(48)
    for i in range(len(k)):
        solid.scad_render_to_file(k[i], str(i) + ".scad")


 
 
************************************************/
