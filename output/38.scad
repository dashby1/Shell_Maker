// Generated by SolidPython 1.1.3 on 2024-05-19 23:41:42


intersection() {
	difference() {
		intersection() {
			translate(v = [0, 0, 0]) {
				import(file = "CE3E3V2_Bottom_shell.stl", origin = [0, 0]);
			}
			translate(v = [-90.04029846191406, -32.690147399902344, 8]) {
				cube(size = [180.0806, 65.380295, 2]);
			}
		}
		linear_extrude(height = 999) {
			offset(r = -1) {
				import(file = "C:/Users/Daniel/Documents/repos/Shell_Maker/output/4top_slice.dxf", origin = [0, 0]);
			}
		}
	}
	translate(v = [0, 0, 8]) {
		linear_extrude(height = 10) {
			polygon(points = [[0, 0], [-85.3048500000, -1.1441378750], [-85.2243125000, -1.1807934062], [-85.1437750000, -1.2174489375], [-85.0632375000, -1.2541044688], [-84.9827000000, -1.2907600000], [-84.9199593750, -1.3196437500], [-84.8572187500, -1.3485275000], [-84.7944781250, -1.3774112500], [-84.7317375000, -1.4062950000], [-84.6689968750, -1.4351787500], [-84.6062562500, -1.4640625000], [-84.5435156250, -1.4929462500], [-84.4807750000, -1.5218300000], [-84.4180343750, -1.5507137500], [-84.3552937500, -1.5795975000], [-84.2925531250, -1.6084812500], [-84.2298125000, -1.6373650000], [-84.1670718750, -1.6662487500], [-84.1043312500, -1.6951325000], [-84.0415906250, -1.7240162500], [-83.9788500000, -1.7529000000], [-83.9161093750, -1.7817837500], [-83.8533687500, -1.8106675000], [-83.7906281250, -1.8395512500], [-83.7278875000, -1.8684350000], [-83.6651468750, -1.8973187500], [-83.6024062500, -1.9262025000], [-83.5396656250, -1.9550862500], [-83.4769250000, -1.9839700000], [-83.4141843750, -2.0128537500], [-83.3514437500, -2.0417375000], [-83.2887031250, -2.0706212500], [-83.2259625000, -2.0995050000], [-83.1632218750, -2.1283887500], [-83.1004812500, -2.1572725000], [-83.0377406250, -2.1861562500], [-82.9750000000, -2.2150400000], [-82.9174500000, -2.2406525000], [-82.8599000000, -2.2662650000], [-82.8023500000, -2.2918775000], [-82.7448000000, -2.3174900000], [-82.6726453125, -2.3475970312], [-82.6004906250, -2.3777040625], [-82.5283359375, -2.4078110937], [-82.4561812500, -2.4379181250], [-82.3840265625, -2.4680251562], [-82.3118718750, -2.4981321875], [-82.2397171875, -2.5282392187], [-82.1675625000, -2.5583462500], [-82.0954078125, -2.5884532812], [-82.0232531250, -2.6185603125], [-81.9510984375, -2.6486673437], [-81.8789437500, -2.6787743750], [-81.8067890625, -2.7088814062], [-81.7346343750, -2.7389884375], [-81.6624796875, -2.7690954687], [-81.5903250000, -2.7992025000], [-81.5181703125, -2.8293095312], [-81.4460156250, -2.8594165625], [-81.3738609375, -2.8895235937], [-81.3017062500, -2.9196306250], [-81.2295515625, -2.9497376562], [-81.1573968750, -2.9798446875], [-81.0852421875, -3.0099517188], [-81.0130875000, -3.0400587500], [-80.9409328125, -3.0701657813], [-80.8687781250, -3.1002728125], [-80.7966234375, -3.1303798438], [-80.7244687500, -3.1604868750], [-80.6523140625, -3.1905939063], [-80.5801593750, -3.2207009375], [-80.5080046875, -3.2508079688], [-80.4358500000, -3.2809150000], [-80.3636953125, -3.3110220313], [-80.2915406250, -3.3411290625], [-80.2193859375, -3.3712360938], [-80.1472312500, -3.4013431250], [-80.0750765625, -3.4314501563], [-80.0029218750, -3.4615571875], [-79.9307671875, -3.4916642188], [-79.8586125000, -3.5217712500], [-79.7864578125, -3.5518782813], [-79.7143031250, -3.5819853125], [-79.6421484375, -3.6120923438], [-79.5699937500, -3.6421993750], [-79.4978390625, -3.6723064063], [-79.4256843750, -3.7024134375], [-79.3535296875, -3.7325204688], [-79.2813750000, -3.7626275000], [-79.2092203125, -3.7927345312], [-79.1370656250, -3.8228415625], [-79.0649109375, -3.8529485937], [-78.9927562500, -3.8830556250], [-78.9206015625, -3.9131626562], [-78.8484468750, -3.9432696875], [-78.7762921875, -3.9733767187], [-78.7041375000, -4.0034837500], [-78.6319828125, -4.0335907813], [-78.5598281250, -4.0636978125], [-78.4876734375, -4.0938048438], [-78.4155187500, -4.1239118750], [-78.3433640625, -4.1540189063], [-78.2712093750, -4.1841259375], [-78.1990546875, -4.2142329688], [-78.1269000000, -4.2443400000], [-78.0609250000, -4.2725434375], [-77.9949500000, -4.3007468750], [-77.9289750000, -4.3289503125], [-77.8630000000, -4.3571537500], [-77.7970250000, -4.3853571875], [-77.7310500000, -4.4135606250], [-77.6650750000, -4.4417640625], [-77.5991000000, -4.4699675000], [-77.5331250000, -4.4981709375], [-77.4671500000, -4.5263743750], [-77.4011750000, -4.5545778125], [-77.3352000000, -4.5827812500], [-77.2692250000, -4.6109846875], [-77.2032500000, -4.6391881250], [-77.1372750000, -4.6673915625], [-77.0713000000, -4.6955950000], [-77.0053250000, -4.7237984375], [-76.9393500000, -4.7520018750], [-76.8733750000, -4.7802053125], [-76.8074000000, -4.8084087500], [-76.7414250000, -4.8366121875], [-76.6754500000, -4.8648156250], [-76.6094750000, -4.8930190625], [-76.5435000000, -4.9212225000], [-76.4775250000, -4.9494259375], [-76.4115500000, -4.9776293750], [-76.3455750000, -5.0058328125], [-76.2796000000, -5.0340362500], [-76.2136250000, -5.0622396875], [-76.1476500000, -5.0904431250], [-76.0816750000, -5.1186465625], [-76.0157000000, -5.1468500000], [-75.9497250000, -5.1750534375], [-75.8837500000, -5.2032568750], [-75.8177750000, -5.2314603125], [-75.7518000000, -5.2596637500], [-75.6858250000, -5.2878671875], [-75.6198500000, -5.3160706250], [-75.5538750000, -5.3442740625], [-75.4879000000, -5.3724775000], [-75.4219250000, -5.4006809375], [-75.3559500000, -5.4288843750], [-75.2899750000, -5.4570878125], [-75.2240000000, -5.4852912500], [-75.1580250000, -5.5134946875], [-75.0920500000, -5.5416981250], [-75.0260750000, -5.5699015625], [-74.9601000000, -5.5981050000], [-74.8941250000, -5.6263084375], [-74.8281500000, -5.6545118750], [-74.7621750000, -5.6827153125], [-74.6962000000, -5.7109187500], [-74.6302250000, -5.7391221875], [-74.5642500000, -5.7673256250], [-74.4982750000, -5.7955290625], [-74.4323000000, -5.8237325000], [-74.3663250000, -5.8519359375], [-74.3003500000, -5.8801393750], [-74.2343750000, -5.9083428125], [-74.1684000000, -5.9365462500], [-74.1024250000, -5.9647496875], [-74.0364500000, -5.9929531250], [-73.9704750000, -6.0211565625], [-73.9045000000, -6.0493600000], [-73.8344250000, -6.0774450000], [-73.7643500000, -6.1055300000], [-73.6942750000, -6.1336150000], [-73.6242000000, -6.1617000000], [-73.5408000000, -6.1945975000], [-73.4574000000, -6.2274950000], [-73.3740000000, -6.2603925000], [-73.2906000000, -6.2932900000], [-73.2134375000, -6.3241106250], [-73.1362750000, -6.3549312500], [-73.0591125000, -6.3857518750], [-72.9819500000, -6.4165725000], [-72.9047875000, -6.4473931250], [-72.8276250000, -6.4782137500], [-72.7504625000, -6.5090343750], [-72.6733000000, -6.5398550000], [-72.5961375000, -6.5706756250], [-72.5189750000, -6.6014962500], [-72.4418125000, -6.6323168750], [-72.3646500000, -6.6631375000], [-72.2874875000, -6.6939581250], [-72.2103250000, -6.7247787500], [-72.1331625000, -6.7555993750], [-72.0560000000, -6.7864200000], [-72.0057281250, -6.8055743750], [-71.9554562500, -6.8247287500], [-71.9051843750, -6.8438831250], [-71.8549125000, -6.8630375000], [-71.8046406250, -6.8821918750], [-71.7543687500, -6.9013462500], [-71.7040968750, -6.9205006250], [-71.6538250000, -6.9396550000], [-71.6035531250, -6.9588093750], [-71.5532812500, -6.9779637500], [-71.5030093750, -6.9971181250], [-71.4527375000, -7.0162725000], [-71.4024656250, -7.0354268750], [-71.3521937500, -7.0545812500], [-71.3019218750, -7.0737356250], [-71.2516500000, -7.0928900000], [-71.2013781250, -7.1120443750], [-71.1511062500, -7.1311987500], [-71.1008343750, -7.1503531250], [-71.0505625000, -7.1695075000], [-71.0002906250, -7.1886618750], [-70.9500187500, -7.2078162500], [-70.8997468750, -7.2269706250], [-70.8494750000, -7.2461250000], [-70.7992031250, -7.2652793750], [-70.7489312500, -7.2844337500], [-70.6986593750, -7.3035881250], [-70.6483875000, -7.3227425000], [-70.5981156250, -7.3418968750], [-70.5478437500, -7.3610512500], [-70.4975718750, -7.3802056250], [-70.4473000000, -7.3993600000], [-70.3970281250, -7.4185143750], [-70.3467562500, -7.4376687500], [-70.2964843750, -7.4568231250], [-70.2462125000, -7.4759775000], [-70.1959406250, -7.4951318750], [-70.1456687500, -7.5142862500], [-70.0953968750, -7.5334406250], [-70.0451250000, -7.5525950000], [-69.9948531250, -7.5717493750], [-69.9445812500, -7.5909037500], [-69.8943093750, -7.6100581250], [-69.8440375000, -7.6292125000], [-69.7937656250, -7.6483668750], [-69.7434937500, -7.6675212500], [-69.6932218750, -7.6866756250], [-69.6429500000, -7.7058300000], [-69.5926781250, -7.7249843750], [-69.5424062500, -7.7441387500], [-69.4921343750, -7.7632931250], [-69.4418625000, -7.7824475000], [-69.3915906250, -7.8016018750], [-69.3413187500, -7.8207562500], [-69.2910468750, -7.8399106250], [-69.2407750000, -7.8590650000], [-69.1905031250, -7.8782193750], [-69.1402312500, -7.8973737500], [-69.0899593750, -7.9165281250], [-69.0396875000, -7.9356825000], [-68.9894156250, -7.9548368750], [-68.9391437500, -7.9739912500], [-68.8888718750, -7.9931456250], [-68.8386000000, -8.0123000000], [-68.7521531250, -8.0451162500], [-68.6657062500, -8.0779325000], [-68.5792593750, -8.1107487500], [-68.4928125000, -8.1435650000], [-68.4063656250, -8.1763812500], [-68.3199187500, -8.2091975000], [-68.2334718750, -8.2420137500], [-68.1470250000, -8.2748300000], [-68.0605781250, -8.3076462500], [-67.9741312500, -8.3404625000], [-67.8876843750, -8.3732787500], [-67.8012375000, -8.4060950000], [-67.7147906250, -8.4389112500], [-67.6283437500, -8.4717275000], [-67.5418968750, -8.5045437500], [-67.4554500000, -8.5373600000], [-67.3690031250, -8.5701762500], [-67.2825562500, -8.6029925000], [-67.1961093750, -8.6358087500], [-67.1096625000, -8.6686250000], [-67.0232156250, -8.7014412500], [-66.9367687500, -8.7342575000], [-66.8503218750, -8.7670737500], [-66.7638750000, -8.7998900000], [-66.6774281250, -8.8327062500], [-66.5909812500, -8.8655225000], [-66.5045343750, -8.8983387500], [-66.4180875000, -8.9311550000], [-66.3316406250, -8.9639712500], [-66.2451937500, -8.9967875000], [-66.1587468750, -9.0296037500], [-66.0723000000, -9.0624200000], [-65.9873000000, -9.0937000000], [-65.9188656250, -9.1176406250], [-65.8504312500, -9.1415812500], [-65.7819968750, -9.1655218750], [-65.7135625000, -9.1894625000], [-65.6451281250, -9.2134031250], [-65.5766937500, -9.2373437500], [-65.5082593750, -9.2612843750], [-65.4398250000, -9.2852250000], [-65.3713906250, -9.3091656250], [-65.3029562500, -9.3331062500], [-65.2345218750, -9.3570468750], [-65.1660875000, -9.3809875000], [-65.0976531250, -9.4049281250], [-65.0292187500, -9.4288687500], [-64.9607843750, -9.4528093750], [-64.8923500000, -9.4767500000], [-64.8239156250, -9.5006906250], [-64.7554812500, -9.5246312500], [-64.6870468750, -9.5485718750], [-64.6186125000, -9.5725125000], [-64.5501781250, -9.5964531250], [-64.4817437500, -9.6203937500], [-64.4133093750, -9.6443343750], [-64.3448750000, -9.6682750000], [-64.2764406250, -9.6922156250], [-64.2080062500, -9.7161562500], [-64.1395718750, -9.7400968750], [-64.0711375000, -9.7640375000], [-64.0027031250, -9.7879781250], [-63.9342687500, -9.8119187500], [-63.8658343750, -9.8358593750], [-63.7974000000, -9.8598000000], [-63.7289656250, -9.8837406250], [-63.6605312500, -9.9076812500], [-63.5920968750, -9.9316218750], [-63.5236625000, -9.9555625000], [-63.4552281250, -9.9795031250], [-63.3867937500, -10.0034437500], [-63.3183593750, -10.0273843750], [-63.2499250000, -10.0513250000], [-63.1814906250, -10.0752656250], [-63.1130562500, -10.0992062500], [-63.0446218750, -10.1231468750], [-62.9761875000, -10.1470875000], [-62.9077531250, -10.1710281250], [-62.8393187500, -10.1949687500], [-62.7708843750, -10.2189093750], [-62.7024500000, -10.2428500000], [-62.6340156250, -10.2667906250], [-62.5655812500, -10.2907312500], [-62.4971468750, -10.3146718750], [-62.4287125000, -10.3386125000], [-62.3602781250, -10.3625531250], [-62.2918437500, -10.3864937500], [-62.2234093750, -10.4104343750], [-62.1549750000, -10.4343750000], [-62.0865406250, -10.4583156250], [-62.0181062500, -10.4822562500], [-61.9496718750, -10.5061968750], [-61.8812375000, -10.5301375000], [-61.8128031250, -10.5540781250], [-61.7443687500, -10.5780187500], [-61.6759343750, -10.6019593750], [-61.6075000000, -10.6259000000], [-61.5338500000, -10.6515750000], [-61.4602000000, -10.6772500000], [-61.3865500000, -10.7029250000], [-61.3129000000, -10.7286000000], [-61.2392500000, -10.7542750000], [-61.1656000000, -10.7799500000], [-61.0919500000, -10.8056250000], [-61.0183000000, -10.8313000000], [-60.9446500000, -10.8569750000], [-60.8710000000, -10.8826500000], [-60.7973500000, -10.9083250000], [-60.7237000000, -10.9340000000], [-60.6500500000, -10.9596750000], [-60.5764000000, -10.9853500000], [-60.5027500000, -11.0110250000], [-60.4291000000, -11.0367000000], [-60.3638515625, -11.0594265625], [-60.2986031250, -11.0821531250], [-60.2333546875, -11.1048796875], [-60.1681062500, -11.1276062500], [-60.1028578125, -11.1503328125], [-60.0376093750, -11.1730593750], [-59.9723609375, -11.1957859375], [-59.9071125000, -11.2185125000], [-59.8418640625, -11.2412390625], [-59.7766156250, -11.2639656250], [-59.7113671875, -11.2866921875], [-59.6461187500, -11.3094187500], [-59.5808703125, -11.3321453125], [-59.5156218750, -11.3548718750], [-59.4503734375, -11.3775984375], [-59.3851250000, -11.4003250000], [-59.3198765625, -11.4230515625], [-59.2546281250, -11.4457781250], [-59.1893796875, -11.4685046875], [-59.1241312500, -11.4912312500], [-59.0588828125, -11.5139578125], [-58.9936343750, -11.5366843750], [-58.9283859375, -11.5594109375], [-58.8631375000, -11.5821375000], [-58.7978890625, -11.6048640625], [-58.7326406250, -11.6275906250], [-58.6673921875, -11.6503171875], [-58.6021437500, -11.6730437500], [-58.5368953125, -11.6957703125], [-58.4716468750, -11.7184968750], [-58.4063984375, -11.7412234375], [-58.3411500000, -11.7639500000], [-58.2759015625, -11.7866765625], [-58.2106531250, -11.8094031250], [-58.1454046875, -11.8321296875], [-58.0801562500, -11.8548562500], [-58.0149078125, -11.8775828125], [-57.9496593750, -11.9003093750], [-57.8844109375, -11.9230359375], [-57.8191625000, -11.9457625000], [-57.7539140625, -11.9684890625], [-57.6886656250, -11.9912156250], [-57.6234171875, -12.0139421875], [-57.5581687500, -12.0366687500], [-57.4929203125, -12.0593953125], [-57.4276718750, -12.0821218750], [-57.3624234375, -12.1048484375], [-57.2971750000, -12.1275750000], [-57.2319265625, -12.1503015625], [-57.1666781250, -12.1730281250], [-57.1014296875, -12.1957546875], [-57.0361812500, -12.2184812500], [-56.9709328125, -12.2412078125], [-56.9056843750, -12.2639343750], [-56.8404359375, -12.2866609375], [-56.7751875000, -12.3093875000], [-56.7099390625, -12.3321140625], [-56.6446906250, -12.3548406250], [-56.5794421875, -12.3775671875], [-56.5141937500, -12.4002937500], [-56.4489453125, -12.4230203125], [-56.3836968750, -12.4457468750], [-56.3184484375, -12.4684734375], [-56.2532000000, -12.4912000000], [-56.2383000000, -12.4961000000], [-56.1789375000, -12.5155687500], [-56.1195750000, -12.5350375000], [-56.0602125000, -12.5545062500], [-56.0008500000, -12.5739750000], [-55.9414875000, -12.5934437500], [-55.8821250000, -12.6129125000], [-55.8227625000, -12.6323812500], [-55.7634000000, -12.6518500000], [-55.7040375000, -12.6713187500], [-55.6446750000, -12.6907875000], [-55.5853125000, -12.7102562500], [-55.5259500000, -12.7297250000], [-55.4665875000, -12.7491937500], [-55.4072250000, -12.7686625000], [-55.3478625000, -12.7881312500], [-55.2885000000, -12.8076000000], [-55.1976375000, -12.8374000000], [-55.1067750000, -12.8672000000], [-55.0159125000, -12.8970000000], [-54.9250500000, -12.9268000000], [-54.8341875000, -12.9566000000], [-54.7433250000, -12.9864000000], [-54.6524625000, -13.0162000000], [-54.5616000000, -13.0460000000], [-54.5047718750, -13.0636390625], [-54.4479437500, -13.0812781250], [-54.3911156250, -13.0989171875], [-54.3342875000, -13.1165562500], [-54.2774593750, -13.1341953125], [-54.2206312500, -13.1518343750], [-54.1638031250, -13.1694734375], [-54.1069750000, -13.1871125000], [-54.0501468750, -13.2047515625], [-53.9933187500, -13.2223906250], [-53.9364906250, -13.2400296875], [-53.8796625000, -13.2576687500], [-53.8228343750, -13.2753078125], [-53.7660062500, -13.2929468750], [-53.7091781250, -13.3105859375], [-53.6523500000, -13.3282250000], [-53.5955218750, -13.3458640625], [-53.5386937500, -13.3635031250], [-53.4818656250, -13.3811421875], [-53.4250375000, -13.3987812500], [-53.3682093750, -13.4164203125], [-53.3113812500, -13.4340593750], [-53.2545531250, -13.4516984375], [-53.1977250000, -13.4693375000], [-53.1408968750, -13.4869765625], [-53.0840687500, -13.5046156250], [-53.0272406250, -13.5222546875], [-52.9704125000, -13.5398937500], [-52.9135843750, -13.5575328125], [-52.8567562500, -13.5751718750], [-52.7999281250, -13.5928109375], [-52.7431000000, -13.6104500000], [-52.6862718750, -13.6280890625], [-52.6294437500, -13.6457281250], [-52.5726156250, -13.6633671875], [-52.5157875000, -13.6810062500], [-52.4589593750, -13.6986453125], [-52.4021312500, -13.7162843750], [-52.3453031250, -13.7339234375], [-52.2884750000, -13.7515625000], [-52.2316468750, -13.7692015625], [-52.1748187500, -13.7868406250], [-52.1179906250, -13.8044796875], [-52.0611625000, -13.8221187500], [-52.0043343750, -13.8397578125], [-51.9475062500, -13.8573968750], [-51.8906781250, -13.8750359375], [-51.8338500000, -13.8926750000], [-51.7770218750, -13.9103140625], [-51.7201937500, -13.9279531250], [-51.6633656250, -13.9455921875], [-51.6065375000, -13.9632312500], [-51.5497093750, -13.9808703125], [-51.4928812500, -13.9985093750], [-51.4360531250, -14.0161484375], [-51.3792250000, -14.0337875000], [-51.3223968750, -14.0514265625], [-51.2655687500, -14.0690656250], [-51.2087406250, -14.0867046875], [-51.1519125000, -14.1043437500], [-51.0950843750, -14.1219828125], [-51.0382562500, -14.1396218750], [-50.9814281250, -14.1572609375], [-50.9246000000, -14.1749000000], [-50.8496390625, -14.1981984375], [-50.7746781250, -14.2214968750], [-50.6997171875, -14.2447953125], [-50.6247562500, -14.2680937500], [-50.5497953125, -14.2913921875], [-50.4748343750, -14.3146906250], [-50.3998734375, -14.3379890625], [-50.3249125000, -14.3612875000], [-50.2499515625, -14.3845859375], [-50.1749906250, -14.4078843750], [-50.1000296875, -14.4311828125], [-50.0250687500, -14.4544812500], [-49.9501078125, -14.4777796875], [-49.8751468750, -14.5010781250], [-49.8001859375, -14.5243765625], [-49.7252250000, -14.5476750000], [-49.6502640625, -14.5709734375], [-49.5753031250, -14.5942718750], [-49.5003421875, -14.6175703125], [-49.4253812500, -14.6408687500], [-49.3504203125, -14.6641671875], [-49.2754593750, -14.6874656250], [-49.2004984375, -14.7107640625], [-49.1255375000, -14.7340625000], [-49.0505765625, -14.7573609375], [-48.9756156250, -14.7806593750], [-48.9006546875, -14.8039578125], [-48.8256937500, -14.8272562500], [-48.7507328125, -14.8505546875], [-48.6757718750, -14.8738531250], [-48.6008109375, -14.8971515625], [-48.5258500000, -14.9204500000], [-48.4508890625, -14.9437484375], [-48.3759281250, -14.9670468750], [-48.3009671875, -14.9903453125], [-48.2260062500, -15.0136437500], [-48.1510453125, -15.0369421875], [-48.0760843750, -15.0602406250], [-48.0011234375, -15.0835390625], [-47.9261625000, -15.1068375000], [-47.8512015625, -15.1301359375], [-47.7762406250, -15.1534343750], [-47.7012796875, -15.1767328125], [-47.6263187500, -15.2000312500], [-47.5513578125, -15.2233296875], [-47.4763968750, -15.2466281250], [-47.4014359375, -15.2699265625], [-47.3264750000, -15.2932250000], [-47.2515140625, -15.3165234375], [-47.1765531250, -15.3398218750], [-47.1015921875, -15.3631203125], [-47.0266312500, -15.3864187500], [-46.9516703125, -15.4097171875], [-46.8767093750, -15.4330156250], [-46.8017484375, -15.4563140625], [-46.7267875000, -15.4796125000], [-46.6518265625, -15.5029109375], [-46.5768656250, -15.5262093750], [-46.5019046875, -15.5495078125], [-46.4269437500, -15.5728062500], [-46.3519828125, -15.5961046875], [-46.2770218750, -15.6194031250], [-46.2020609375, -15.6427015625], [-46.1271000000, -15.6660000000], [-46.0951000000, -15.6755000000], [-46.0183000000, -15.6976906250], [-45.9415000000, -15.7198812500], [-45.8647000000, -15.7420718750], [-45.7879000000, -15.7642625000], [-45.7111000000, -15.7864531250], [-45.6343000000, -15.8086437500], [-45.5575000000, -15.8308343750], [-45.4807000000, -15.8530250000], [-45.4039000000, -15.8752156250], [-45.3271000000, -15.8974062500], [-45.2503000000, -15.9195968750], [-45.1735000000, -15.9417875000], [-45.0967000000, -15.9639781250], [-45.0199000000, -15.9861687500], [-44.9431000000, -16.0083593750], [-44.8663000000, -16.0305500000], [-44.7895000000, -16.0527406250], [-44.7127000000, -16.0749312500], [-44.6359000000, -16.0971218750], [-44.5591000000, -16.1193125000], [-44.4823000000, -16.1415031250], [-44.4055000000, -16.1636937500], [-44.3287000000, -16.1858843750], [-44.2519000000, -16.2080750000], [-44.1751000000, -16.2302656250], [-44.0983000000, -16.2524562500], [-44.0215000000, -16.2746468750], [-43.9447000000, -16.2968375000], [-43.8679000000, -16.3190281250], [-43.7911000000, -16.3412187500], [-43.7143000000, -16.3634093750], [-43.6375000000, -16.3856000000], [-43.5585953125, -16.4076515625], [-43.4796906250, -16.4297031250], [-43.4007859375, -16.4517546875], [-43.3218812500, -16.4738062500], [-43.2429765625, -16.4958578125], [-43.1640718750, -16.5179093750], [-43.0851671875, -16.5399609375], [-43.0062625000, -16.5620125000], [-42.9273578125, -16.5840640625], [-42.8484531250, -16.6061156250], [-42.7695484375, -16.6281671875], [-42.6906437500, -16.6502187500], [-42.6117390625, -16.6722703125], [-42.5328343750, -16.6943218750], [-42.4539296875, -16.7163734375], [-42.3750250000, -16.7384250000], [-42.2961203125, -16.7604765625], [-42.2172156250, -16.7825281250], [-42.1383109375, -16.8045796875], [-42.0594062500, -16.8266312500], [-41.9805015625, -16.8486828125], [-41.9015968750, -16.8707343750], [-41.8226921875, -16.8927859375], [-41.7437875000, -16.9148375000], [-41.6648828125, -16.9368890625], [-41.5859781250, -16.9589406250], [-41.5070734375, -16.9809921875], [-41.4281687500, -17.0030437500], [-41.3492640625, -17.0250953125], [-41.2703593750, -17.0471468750], [-41.1914546875, -17.0691984375], [-41.1125500000, -17.0912500000], [-41.0336453125, -17.1133015625], [-40.9547406250, -17.1353531250], [-40.8758359375, -17.1574046875], [-40.7969312500, -17.1794562500], [-40.7180265625, -17.2015078125], [-40.6391218750, -17.2235593750], [-40.5602171875, -17.2456109375], [-40.4813125000, -17.2676625000], [-40.4024078125, -17.2897140625], [-40.3235031250, -17.3117656250], [-40.2445984375, -17.3338171875], [-40.1656937500, -17.3558687500]]);
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
import math
import time

from stl import mesh, Dimension

from tkinter import Tk     # from tkinter import Tk for Python 3.x
from tkinter.filedialog import askopenfilename
from mpl_toolkits.mplot3d import art3d
from matplotlib import pyplot as plt
import solid
import os
import ezdxf
import shapely.geometry as sg
import subprocess
from GUI import getSCADPath



def outputSTL(From, To, PATH=getSCADPath()):
    subprocess.Popen(PATH + " -o " + To + " " + From)
    while not os.path.exists(To):
        time.sleep(1)


def get_size(i):
    x_list = [int(a) for a in str(i)]
    return len(x_list)



class Model:
    def __init__(self, model, fileName, location, layer, thickness):
        self.location = location
        self.code = None
        self.fileName = fileName
        self.stl = fileName + ".stl"
        self.layer = layer
        self.thickness = thickness
        self.maxz = (layer+1)*thickness
        self.dxf = fileName + ".dxf"
        self.scad = fileName + ".scad"
        self.model = model
        self.center = None
        self.width = 10
        self.mesh = None
        self.useable_area = None


    def get_code(self):
        max_dim = 0.05
        max_array = 6

        num = int(self.fileName)
        nums = [int(a) for a in str(num)]
        nums.reverse()
        indices = nums
        length = len(nums)

        print(indices)
        t = 0
        i = 0
        cubes = []
        x = 0
        y = 0
        width = 0.01
        while x <= max_dim:
            while y <= max_dim:
                print(indices)
                if nums == []:
                    break
                if indices[0] != 0:
                    cubes.append(solid.translate([x, y, 0])(solid.cube(size=t / 1000 + 0.001)))
                    y += max_dim / (max_array - 1)
                    nums[0] = nums[0] - 1
                else:
                    indices.pop(0)
                    t += 1
                i += 1
            x += max_dim / (max_array - 1)
            y = 0

        outside = solid.translate([-width / 2, -width / 2])(solid.cube(max_dim + (length - 1) / 1000 + 0.001 + width))
        self.code = solid.difference()(outside, cubes)
        self.code = solid.projection(cut=True)(self.code)
        solid.scad_render_to_file(self.code, self.location + "/code.scad")
        outputSTL(From=self.location+"/code.scad", To=self.location+"code.dxf", PATH=getSCADPath())
        # os.system("toSTL.sh renders/code.scad renders/code.dxf")
        return self.location+"/code.dxf"

    def download(self, type):
        if type =="stl":
            print("generating:" + self.location+"/"+ self.fileName+".stl")
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".stl")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".stl")
        elif type == "dxf":
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".dxf")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".dxf")

    def render(self):
        solid.scad_render_to_file(self.model, self.location+"/"+ self.fileName+'.scad')
        while not os.path.exists(self.location+"/"+self.fileName+".scad"):
            time.sleep(1)

    def get_points(self):
        doc = ezdxf.readfile(filename=self.location+"/"+ self.fileName+".dxf")
        msp = doc.modelspace()
        i=0
        lists = []
        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return [start, end]

        for e in msp.query("LINE"):
            line = helper(e)
            if not lists:
                lists.append([line])
            else:
                if lists[i][len(lists)-1][1] != line[0]:
                    lists.append([line])
                    i+=1
                else:
                    lists[i].append(line)

    def get_points2(self, FILE):
        doc = ezdxf.readfile(filename=FILE)
        msp = doc.modelspace()
        i = 0
        lists = []

        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return (start, end)

        for e in msp.query("LINE"):
            line = helper(e)
            if lists==[]:
                lists.append([line])
            else:
                if lists[i][len(lists[i]) - 1][1] != line[0]:
                    lists.append([line])
                    i += 1
                else:
                    lists[i].append(line)
        return lists

    def add_code(self):
        dxf = solid.projection(cut=False)(self.model)
        offset = solid.offset(r=-0.1)(dxf)
        solid.scad_render_to_file(offset, self.location+'/offset.scad')
        os.system("toSTL.sh renders/offset.scad renders/offset.dxf")
        lines = self.get_points2("renders/offset.dxf")
        x = lines[0][0][0][0]
        y = lines[0][0][0][1]
        print(x)
        print(y)
        code = solid.translate([x,y,0])(self.code)
        code = solid.linear_extrude(height=999)(code)
        save = self.model
        self.model = solid.projection()(solid.difference()(self.model, code))
        self.render()
        self.download("dxf")
        self.model = save

    def add_label(self, pos):
        # num = 12
        # minx, maxx, miny, maxy, minz, maxz = self.find_minmax()
        maxz = self.maxz
        # label = solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.5, halign="center"))
        # i=minx
        # print("x-len: " + str(maxx-minx))
        # print(i)
        # inc = (maxx-minx)/num
        # while minx <= i <= maxx:
        #     label = solid.union()(solid.translate([i, 0, maxz - 0.2])(solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.25, halign="center"))), label)
        #     i += inc
        #
        # l = label
        #
        # i =miny
        # while miny<= i <= maxy:
        #     print("y inc")
        #     l = solid.union()(solid.translate([0, i, 0])(label), l)
        #     i += 0.5
        for i in str(self.fileName):
            cur = pos[0]
            label = solid.translate([pos[0][0], pos[0][1], self.maxz-0.2])(solid.linear_extrude(height=(self.thickness)/3)(solid.text(str(i), size=0.5, halign="center", valign="center")))
            self.model = solid.difference()(self.model, label)
            pos.append(pos.pop(0))
            while abs(cur[0]-pos[0][0])<0.5 and abs(cur[1]-pos[0][1])<0.5:
                pos.append(pos.pop(0))



    def Center(self):

        volume, cog, inertia = self.mesh.get_mass_properties()
        print("Volume                                  = {0}".format(volume))
        print("Position of the center of gravity (COG) = {0}".format(cog))
        m_centered = solid.translate([-cog[0], -cog[1], 0])(
            self.model
        )
        return m_centered

    def find_minmax(self):
        minx = maxx = miny = maxy = minz = maxz = None
        for p in self.mesh.points:
            # p contains (x, y, z)
            if minx is None:
                minx = p[Dimension.X]
                maxx = p[Dimension.X]
                miny = p[Dimension.Y]
                maxy = p[Dimension.Y]
                minz = p[Dimension.Z]
                maxz = p[Dimension.Z]
            else:
                maxx = max(p[Dimension.X], maxx)
                minx = min(p[Dimension.X], minx)
                maxy = max(p[Dimension.Y], maxy)
                miny = min(p[Dimension.Y], miny)
                maxz = max(p[Dimension.Z], maxz)
                minz = min(p[Dimension.Z], minz)
        lenx = maxx - minx
        leny = maxy - miny
        lenz = maxz - minz
        return minx, maxx, miny, maxy, minz, maxz

    # def generate_Mesh(self):
    #     self.mesh = mesh.Mesh.from_file(self.location + "/" + str(int(self.fileName)//8)+ "b.stl")

    def get_top(self):
        top = solid.projection(cut=True)(solid.translate([0,0,-1*self.thickness*(self.layer+1)])(self.model))
        useable_area = solid.offset(r=-0.45)(top)
        self.useable_area = useable_area
        solid.scad_render_to_file(self.useable_area, self.location+'/' + 'toptemp.scad')
        outputSTL(From=self.location+'/' + 'toptemp.scad', To=self.location+"/top"+ self.dxf)

        # os.system("toSTL.sh out/toptemp.scad renders/" + self.fileName + ".dxf")
        dxf = DXF(self.location+"/top"+ self.dxf)
        min_p=dxf.points[0][0]
        points_ordered = dxf.points
        i=0
        while i <= len(dxf.points)+1:
            while math.sqrt((dxf.points[0][0]-dxf.points[1][0])**2+(dxf.points[0][1]-dxf.points[1][1])**2) > 0.1:
                dxf.points.insert(1, [(dxf.points[0][0]+dxf.points[1][0])/2, (dxf.points[0][1]+dxf.points[1][1])/2])
                i = i-1
            dxf.points.append(dxf.points.pop(0))
            i+=1
        for i in range(len(dxf.points)):
            dxf.points.append(dxf.points.pop(0))
            if dxf.points[0][0] < min_p:
                min_p = dxf.points[0][0]
                points_ordered = dxf.points.copy()
        dxf.points = points_ordered.copy()

        print(dxf.points)
        self.add_label(dxf.points)

class DXF:
    def __init__(self, file):
        self.file = file
        self.Lines = []
        self.points = []
        doc = ezdxf.readfile(self.file)
        msp = doc.modelspace()
        for e in msp:
            if e.dxftype() == "LINE":
                self.Lines.append(e)
                self.points.append([e.dxf.start[0], e.dxf.start[1]])
        # self.points.append([self.Lines[-1].dxf.end[0], self.Lines[-1].dxf.end[1]])
        self.area = None
        self.center = None
        self.polygon = sg.Polygon(self.points)

    def get_area(self):
        self.area = self.polygon.area
        return self.area

    def get_center(self):
        x_sum = 0
        y_sum =0
        for i in self.points:
            x_sum += i[0]
            y_sum += i[1]
        x_c = x_sum/len(self.points)
        y_c = y_sum/len(self.points)
        return (x_c, y_c)

    def split(self, maxdim):
        splits = []
        length = 0
        pieces = [[]]
        prev = self.points[0]
        for j in self.points:
            length = length + math.sqrt((prev[0]-j[0])**2+(prev[1]-j[1])**2)
            if length >= maxdim:
                pieces[-1].append(j)
                pieces.append([])
                length = 0
            pieces[-1].append(j)
            prev = j
        for j in pieces:
            j.insert(0, [0,0])
            piece = solid.linear_extrude(height=10)(solid.polygon(j))
            splits.append(piece)
        return splits
    def refine_points(self):
        i=0
        while i <= len(self.points)+1:
            while math.sqrt((self.points[0][0]-self.points[1][0])**2+(self.points[0][1]-self.points[1][1])**2) > 0.1:
                self.points.insert(1, [(self.points[0][0]+self.points[1][0])/2, (self.points[0][1]+self.points[1][1])/2])
                i = i-1
            self.points.append(self.points.pop(0))
            i+=1


if __name__== "__main__":
    test = DXF("C:/Users/Daniel/Documents/repos/Shell_Maker/output/0top_slice.dxf")
    test.refine_points()
    k = test.split(48)
    for i in range(len(k)):
        solid.scad_render_to_file(k[i], str(i) + ".scad")


 
 
************************************************/
