// Generated by SolidPython 1.1.3 on 2024-05-19 23:41:37


intersection() {
	difference() {
		intersection() {
			translate(v = [0, 0, 0]) {
				import(file = "CE3E3V2_Bottom_shell.stl", origin = [0, 0]);
			}
			translate(v = [-90.04029846191406, -32.690147399902344, 6]) {
				cube(size = [180.0806, 65.380295, 2]);
			}
		}
		linear_extrude(height = 999) {
			offset(r = -1) {
				import(file = "C:/Users/Daniel/Documents/repos/Shell_Maker/output/3top_slice.dxf", origin = [0, 0]);
			}
		}
	}
	translate(v = [0, 0, 6]) {
		linear_extrude(height = 10) {
			polygon(points = [[0, 0], [4.0797985937, -26.7400867188], [4.1697484375, -26.7536796875], [4.2596982812, -26.7672726563], [4.3496481250, -26.7808656250], [4.4395979688, -26.7944585938], [4.5295478125, -26.8080515625], [4.6194976562, -26.8216445313], [4.7094475000, -26.8352375000], [4.7993973437, -26.8488304688], [4.8893471875, -26.8624234375], [4.9792970312, -26.8760164062], [5.0692468750, -26.8896093750], [5.1591967187, -26.9032023437], [5.2491465625, -26.9167953125], [5.3390964063, -26.9303882812], [5.4290462500, -26.9439812500], [5.5189960937, -26.9575742188], [5.6089459375, -26.9711671875], [5.6988957813, -26.9847601563], [5.7888456250, -26.9983531250], [5.8787954688, -27.0119460938], [5.9687453125, -27.0255390625], [6.0586951562, -27.0391320313], [6.1486450000, -27.0527250000], [6.2385948438, -27.0663179688], [6.3285446875, -27.0799109375], [6.4184945312, -27.0935039063], [6.5084443750, -27.1070968750], [6.5983942188, -27.1206898438], [6.6883440625, -27.1342828125], [6.7782939062, -27.1478757813], [6.8682437500, -27.1614687500], [6.9581935937, -27.1750617188], [7.0481434375, -27.1886546875], [7.1380932812, -27.2022476562], [7.2280431250, -27.2158406250], [7.3179929687, -27.2294335937], [7.4079428125, -27.2430265625], [7.4978926563, -27.2566195312], [7.5878425000, -27.2702125000], [7.6777923437, -27.2838054687], [7.7677421875, -27.2973984375], [7.8576920313, -27.3109914063], [7.9476418750, -27.3245843750], [8.0375917188, -27.3381773438], [8.1275415625, -27.3517703125], [8.2174914062, -27.3653632813], [8.3074412500, -27.3789562500], [8.3973910938, -27.3925492188], [8.4873409375, -27.4061421875], [8.5772907812, -27.4197351563], [8.6672406250, -27.4333281250], [8.7571904688, -27.4469210938], [8.8471403125, -27.4605140625], [8.9370901562, -27.4741070312], [9.0270400000, -27.4877000000], [9.1162312500, -27.4990812500], [9.2054225000, -27.5104625000], [9.2946137500, -27.5218437500], [9.3838050000, -27.5332250000], [9.4729962500, -27.5446062500], [9.5621875000, -27.5559875000], [9.6513787500, -27.5673687500], [9.7405700000, -27.5787500000], [9.8297612500, -27.5901312500], [9.9189525000, -27.6015125000], [10.0081437500, -27.6128937500], [10.0973350000, -27.6242750000], [10.1865262500, -27.6356562500], [10.2757175000, -27.6470375000], [10.3649087500, -27.6584187500], [10.4541000000, -27.6698000000], [10.5219562500, -27.6776312500], [10.5898125000, -27.6854625000], [10.6576687500, -27.6932937500], [10.7255250000, -27.7011250000], [10.7933812500, -27.7089562500], [10.8612375000, -27.7167875000], [10.9290937500, -27.7246187500], [10.9969500000, -27.7324500000], [11.0648062500, -27.7402812500], [11.1326625000, -27.7481125000], [11.2005187500, -27.7559437500], [11.2683750000, -27.7637750000], [11.3362312500, -27.7716062500], [11.4040875000, -27.7794375000], [11.4719437500, -27.7872687500], [11.5398000000, -27.7951000000], [11.6356500000, -27.8053750000], [11.7315000000, -27.8156500000], [11.8273500000, -27.8259250000], [11.9232000000, -27.8362000000], [11.9799156250, -27.8413140625], [12.0366312500, -27.8464281250], [12.0933468750, -27.8515421875], [12.1500625000, -27.8566562500], [12.2067781250, -27.8617703125], [12.2634937500, -27.8668843750], [12.3202093750, -27.8719984375], [12.3769250000, -27.8771125000], [12.4336406250, -27.8822265625], [12.4903562500, -27.8873406250], [12.5470718750, -27.8924546875], [12.6037875000, -27.8975687500], [12.6605031250, -27.9026828125], [12.7172187500, -27.9077968750], [12.7739343750, -27.9129109375], [12.8306500000, -27.9180250000], [12.8873656250, -27.9231390625], [12.9440812500, -27.9282531250], [13.0007968750, -27.9333671875], [13.0575125000, -27.9384812500], [13.1142281250, -27.9435953125], [13.1709437500, -27.9487093750], [13.2276593750, -27.9538234375], [13.2843750000, -27.9589375000], [13.3410906250, -27.9640515625], [13.3978062500, -27.9691656250], [13.4545218750, -27.9742796875], [13.5112375000, -27.9793937500], [13.5679531250, -27.9845078125], [13.6246687500, -27.9896218750], [13.6813843750, -27.9947359375], [13.7381000000, -27.9998500000], [13.7948156250, -28.0049640625], [13.8515312500, -28.0100781250], [13.9082468750, -28.0151921875], [13.9649625000, -28.0203062500], [14.0216781250, -28.0254203125], [14.0783937500, -28.0305343750], [14.1351093750, -28.0356484375], [14.1918250000, -28.0407625000], [14.2485406250, -28.0458765625], [14.3052562500, -28.0509906250], [14.3619718750, -28.0561046875], [14.4186875000, -28.0612187500], [14.4754031250, -28.0663328125], [14.5321187500, -28.0714468750], [14.5888343750, -28.0765609375], [14.6455500000, -28.0816750000], [14.7022656250, -28.0867890625], [14.7589812500, -28.0919031250], [14.8156968750, -28.0970171875], [14.8724125000, -28.1021312500], [14.9291281250, -28.1072453125], [14.9858437500, -28.1123593750], [15.0425593750, -28.1174734375], [15.0992750000, -28.1225875000], [15.1559906250, -28.1277015625], [15.2127062500, -28.1328156250], [15.2694218750, -28.1379296875], [15.3261375000, -28.1430437500], [15.3828531250, -28.1481578125], [15.4395687500, -28.1532718750], [15.4962843750, -28.1583859375], [15.5530000000, -28.1635000000], [15.6059125000, -28.1674625000], [15.6588250000, -28.1714250000], [15.7117375000, -28.1753875000], [15.7646500000, -28.1793500000], [15.8175625000, -28.1833125000], [15.8704750000, -28.1872750000], [15.9233875000, -28.1912375000], [15.9763000000, -28.1952000000], [16.0418187500, -28.1994750000], [16.1073375000, -28.2037500000], [16.1728562500, -28.2080250000], [16.2383750000, -28.2123000000], [16.3038937500, -28.2165750000], [16.3694125000, -28.2208500000], [16.4349312500, -28.2251250000], [16.5004500000, -28.2294000000], [16.5659687500, -28.2336750000], [16.6314875000, -28.2379500000], [16.6970062500, -28.2422250000], [16.7625250000, -28.2465000000], [16.8280437500, -28.2507750000], [16.8935625000, -28.2550500000], [16.9590812500, -28.2593250000], [17.0246000000, -28.2636000000], [17.0759250000, -28.2659500000], [17.1272500000, -28.2683000000], [17.1785750000, -28.2706500000], [17.2299000000, -28.2730000000], [17.3234312500, -28.2750062500], [17.4169625000, -28.2770125000], [17.5104937500, -28.2790187500], [17.6040250000, -28.2810250000], [17.6975562500, -28.2830312500], [17.7910875000, -28.2850375000], [17.8846187500, -28.2870437500], [17.9781500000, -28.2890500000], [18.0716812500, -28.2910562500], [18.1652125000, -28.2930625000], [18.2587437500, -28.2950687500], [18.3522750000, -28.2970750000], [18.4458062500, -28.2990812500], [18.5393375000, -28.3010875000], [18.6328687500, -28.3030937500], [18.7264000000, -28.3051000000], [18.8199312500, -28.3071062500], [18.9134625000, -28.3091125000], [19.0069937500, -28.3111187500], [19.1005250000, -28.3131250000], [19.1940562500, -28.3151312500], [19.2875875000, -28.3171375000], [19.3811187500, -28.3191437500], [19.4746500000, -28.3211500000], [19.5681812500, -28.3231562500], [19.6617125000, -28.3251625000], [19.7552437500, -28.3271687500], [19.8487750000, -28.3291750000], [19.9423062500, -28.3311812500], [20.0358375000, -28.3331875000], [20.1293687500, -28.3351937500], [20.2229000000, -28.3372000000], [20.2992187500, -28.3380125000], [20.3755375000, -28.3388250000], [20.4518562500, -28.3396375000], [20.5281750000, -28.3404500000], [20.6044937500, -28.3412625000], [20.6808125000, -28.3420750000], [20.7571312500, -28.3428875000], [20.8334500000, -28.3437000000], [20.9097687500, -28.3445125000], [20.9860875000, -28.3453250000], [21.0624062500, -28.3461375000], [21.1387250000, -28.3469500000], [21.2150437500, -28.3477625000], [21.2913625000, -28.3485750000], [21.3676812500, -28.3493875000], [21.4440000000, -28.3502000000], [21.5408000000, -28.3483250000], [21.6376000000, -28.3464500000], [21.7344000000, -28.3445750000], [21.8312000000, -28.3427000000], [21.8944000000, -28.3411500000], [21.9576000000, -28.3396000000], [22.0208000000, -28.3380500000], [22.0840000000, -28.3365000000], [22.1664000000, -28.3342000000], [22.2366593750, -28.3303312500], [22.3069187500, -28.3264625000], [22.3771781250, -28.3225937500], [22.4474375000, -28.3187250000], [22.5176968750, -28.3148562500], [22.5879562500, -28.3109875000], [22.6582156250, -28.3071187500], [22.7284750000, -28.3032500000], [22.7987343750, -28.2993812500], [22.8689937500, -28.2955125000], [22.9392531250, -28.2916437500], [23.0095125000, -28.2877750000], [23.0797718750, -28.2839062500], [23.1500312500, -28.2800375000], [23.2202906250, -28.2761687500], [23.2905500000, -28.2723000000], [23.3608093750, -28.2684312500], [23.4310687500, -28.2645625000], [23.5013281250, -28.2606937500], [23.5715875000, -28.2568250000], [23.6418468750, -28.2529562500], [23.7121062500, -28.2490875000], [23.7823656250, -28.2452187500], [23.8526250000, -28.2413500000], [23.9228843750, -28.2374812500], [23.9931437500, -28.2336125000], [24.0634031250, -28.2297437500], [24.1336625000, -28.2258750000], [24.2039218750, -28.2220062500], [24.2741812500, -28.2181375000], [24.3444406250, -28.2142687500], [24.4147000000, -28.2104000000], [24.4668625000, -28.2072500000], [24.5190250000, -28.2041000000], [24.5711875000, -28.2009500000], [24.6233500000, -28.1978000000], [24.6755125000, -28.1946500000], [24.7276750000, -28.1915000000], [24.7798375000, -28.1883500000], [24.8320000000, -28.1852000000], [24.8936062500, -28.1807312500], [24.9552125000, -28.1762625000], [25.0168187500, -28.1717937500], [25.0784250000, -28.1673250000], [25.1400312500, -28.1628562500], [25.2016375000, -28.1583875000], [25.2632437500, -28.1539187500], [25.3248500000, -28.1494500000], [25.3864562500, -28.1449812500], [25.4480625000, -28.1405125000], [25.5096687500, -28.1360437500], [25.5712750000, -28.1315750000], [25.6328812500, -28.1271062500], [25.6944875000, -28.1226375000], [25.7560937500, -28.1181687500], [25.8177000000, -28.1137000000], [25.8887250000, -28.1071750000], [25.9597500000, -28.1006500000], [26.0307750000, -28.0941250000], [26.1018000000, -28.0876000000], [26.1659000000, -28.0809000000], [26.2300000000, -28.0742000000], [26.3208000000, -28.0619625000], [26.4116000000, -28.0497250000], [26.5024000000, -28.0374875000], [26.5932000000, -28.0252500000], [26.6840000000, -28.0130125000], [26.7748000000, -28.0007750000], [26.8656000000, -27.9885375000], [26.9564000000, -27.9763000000], [27.0129687500, -27.9692218750], [27.0695375000, -27.9621437500], [27.1261062500, -27.9550656250], [27.1826750000, -27.9479875000], [27.2392437500, -27.9409093750], [27.2958125000, -27.9338312500], [27.3523812500, -27.9267531250], [27.4089500000, -27.9196750000], [27.4655187500, -27.9125968750], [27.5220875000, -27.9055187500], [27.5786562500, -27.8984406250], [27.6352250000, -27.8913625000], [27.6917937500, -27.8842843750], [27.7483625000, -27.8772062500], [27.8049312500, -27.8701281250], [27.8615000000, -27.8630500000], [27.9180687500, -27.8559718750], [27.9746375000, -27.8488937500], [28.0312062500, -27.8418156250], [28.0877750000, -27.8347375000], [28.1443437500, -27.8276593750], [28.2009125000, -27.8205812500], [28.2574812500, -27.8135031250], [28.3140500000, -27.8064250000], [28.3706187500, -27.7993468750], [28.4271875000, -27.7922687500], [28.4837562500, -27.7851906250], [28.5403250000, -27.7781125000], [28.5968937500, -27.7710343750], [28.6534625000, -27.7639562500], [28.7100312500, -27.7568781250], [28.7666000000, -27.7498000000], [28.8266750000, -27.7395250000], [28.8867500000, -27.7292500000], [28.9468250000, -27.7189750000], [29.0069000000, -27.7087000000], [29.0669750000, -27.6984250000], [29.1270500000, -27.6881500000], [29.1871250000, -27.6778750000], [29.2472000000, -27.6676000000], [29.3010187500, -27.6583562500], [29.3548375000, -27.6491125000], [29.4086562500, -27.6398687500], [29.4624750000, -27.6306250000], [29.5162937500, -27.6213812500], [29.5701125000, -27.6121375000], [29.6239312500, -27.6028937500], [29.6777500000, -27.5936500000], [29.7315687500, -27.5844062500], [29.7853875000, -27.5751625000], [29.8392062500, -27.5659187500], [29.8930250000, -27.5566750000], [29.9468437500, -27.5474312500], [30.0006625000, -27.5381875000], [30.0544812500, -27.5289437500], [30.1083000000, -27.5197000000], [30.1183000000, -27.5178000000], [30.1793625000, -27.5033562500], [30.2404250000, -27.4889125000], [30.3014875000, -27.4744687500], [30.3625500000, -27.4600250000], [30.4236125000, -27.4455812500], [30.4846750000, -27.4311375000], [30.5457375000, -27.4166937500], [30.6068000000, -27.4022500000], [30.6678625000, -27.3878062500], [30.7289250000, -27.3733625000], [30.7899875000, -27.3589187500], [30.8510500000, -27.3444750000], [30.9121125000, -27.3300312500], [30.9731750000, -27.3155875000], [31.0342375000, -27.3011437500], [31.0953000000, -27.2867000000], [31.1448343750, -27.2749593750], [31.1943687500, -27.2632187500], [31.2439031250, -27.2514781250], [31.2934375000, -27.2397375000], [31.3429718750, -27.2279968750], [31.3925062500, -27.2162562500], [31.4420406250, -27.2045156250], [31.4915750000, -27.1927750000], [31.5411093750, -27.1810343750], [31.5906437500, -27.1692937500], [31.6401781250, -27.1575531250], [31.6897125000, -27.1458125000], [31.7392468750, -27.1340718750], [31.7887812500, -27.1223312500], [31.8383156250, -27.1105906250], [31.8878500000, -27.0988500000], [31.9373843750, -27.0871093750], [31.9869187500, -27.0753687500], [32.0364531250, -27.0636281250], [32.0859875000, -27.0518875000], [32.1355218750, -27.0401468750], [32.1850562500, -27.0284062500], [32.2345906250, -27.0166656250], [32.2841250000, -27.0049250000], [32.3336593750, -26.9931843750], [32.3831937500, -26.9814437500], [32.4327281250, -26.9697031250], [32.4822625000, -26.9579625000], [32.5317968750, -26.9462218750], [32.5813312500, -26.9344812500], [32.6308656250, -26.9227406250], [32.6804000000, -26.9110000000], [32.7299343750, -26.8992593750], [32.7794687500, -26.8875187500], [32.8290031250, -26.8757781250], [32.8785375000, -26.8640375000], [32.9280718750, -26.8522968750], [32.9776062500, -26.8405562500], [33.0271406250, -26.8288156250], [33.0766750000, -26.8170750000], [33.1262093750, -26.8053343750], [33.1757437500, -26.7935937500], [33.2252781250, -26.7818531250], [33.2748125000, -26.7701125000], [33.3243468750, -26.7583718750], [33.3738812500, -26.7466312500], [33.4234156250, -26.7348906250], [33.4729500000, -26.7231500000], [33.5224843750, -26.7114093750], [33.5720187500, -26.6996687500], [33.6215531250, -26.6879281250], [33.6710875000, -26.6761875000], [33.7206218750, -26.6644468750], [33.7701562500, -26.6527062500], [33.8196906250, -26.6409656250], [33.8692250000, -26.6292250000], [33.9187593750, -26.6174843750], [33.9682937500, -26.6057437500], [34.0178281250, -26.5940031250], [34.0673625000, -26.5822625000], [34.1168968750, -26.5705218750], [34.1664312500, -26.5587812500], [34.2159656250, -26.5470406250], [34.2655000000, -26.5353000000], [34.2707000000, -26.5338000000], [34.3224062500, -26.5176562500], [34.3741125000, -26.5015125000], [34.4258187500, -26.4853687500], [34.4775250000, -26.4692250000], [34.5292312500, -26.4530812500], [34.5809375000, -26.4369375000], [34.6326437500, -26.4207937500], [34.6843500000, -26.4046500000], [34.7360562500, -26.3885062500], [34.7877625000, -26.3723625000], [34.8394687500, -26.3562187500], [34.8911750000, -26.3400750000], [34.9428812500, -26.3239312500], [34.9945875000, -26.3077875000], [35.0462937500, -26.2916437500], [35.0980000000, -26.2755000000], [35.1870062500, -26.2477375000], [35.2760125000, -26.2199750000], [35.3650187500, -26.1922125000], [35.4540250000, -26.1644500000], [35.5430312500, -26.1366875000], [35.6320375000, -26.1089250000], [35.7210437500, -26.0811625000], [35.8100500000, -26.0534000000], [35.8990562500, -26.0256375000], [35.9880625000, -25.9978750000], [36.0770687500, -25.9701125000], [36.1660750000, -25.9423500000], [36.2550812500, -25.9145875000], [36.3440875000, -25.8868250000], [36.4330937500, -25.8590625000], [36.5221000000, -25.8313000000], [36.5791500000, -25.8107000000], [36.6362000000, -25.7901000000], [36.6932500000, -25.7695000000], [36.7503000000, -25.7489000000], [36.8073500000, -25.7283000000], [36.8644000000, -25.7077000000], [36.9214500000, -25.6871000000], [36.9785000000, -25.6665000000], [37.0668687500, -25.6346937500], [37.1552375000, -25.6028875000], [37.2436062500, -25.5710812500], [37.3319750000, -25.5392750000], [37.4203437500, -25.5074687500], [37.5087125000, -25.4756625000], [37.5970812500, -25.4438562500], [37.6854500000, -25.4120500000], [37.7738187500, -25.3802437500], [37.8621875000, -25.3484375000], [37.9505562500, -25.3166312500], [38.0389250000, -25.2848250000], [38.1272937500, -25.2530187500], [38.2156625000, -25.2212125000], [38.3040312500, -25.1894062500], [38.3924000000, -25.1576000000], [38.4061000000, -25.1524000000], [38.4674125000, -25.1258000000], [38.5287250000, -25.0992000000], [38.5900375000, -25.0726000000], [38.6513500000, -25.0460000000], [38.7126625000, -25.0194000000], [38.7739750000, -24.9928000000], [38.8352875000, -24.9662000000], [38.8966000000, -24.9396000000], [38.9579125000, -24.9130000000], [39.0192250000, -24.8864000000], [39.0805375000, -24.8598000000], [39.1418500000, -24.8332000000], [39.2031625000, -24.8066000000], [39.2644750000, -24.7800000000], [39.3257875000, -24.7534000000], [39.3871000000, -24.7268000000], [39.4564906250, -24.6978437500], [39.5258812500, -24.6688875000], [39.5952718750, -24.6399312500], [39.6646625000, -24.6109750000], [39.7340531250, -24.5820187500], [39.8034437500, -24.5530625000], [39.8728343750, -24.5241062500], [39.9422250000, -24.4951500000], [40.0116156250, -24.4661937500], [40.0810062500, -24.4372375000], [40.1503968750, -24.4082812500], [40.2197875000, -24.3793250000], [40.2891781250, -24.3503687500], [40.3585687500, -24.3214125000], [40.4279593750, -24.2924562500], [40.4973500000, -24.2635000000], [40.5667406250, -24.2345437500], [40.6361312500, -24.2055875000], [40.7055218750, -24.1766312500], [40.7749125000, -24.1476750000], [40.8443031250, -24.1187187500], [40.9136937500, -24.0897625000], [40.9830843750, -24.0608062500], [41.0524750000, -24.0318500000], [41.1218656250, -24.0028937500], [41.1912562500, -23.9739375000], [41.2606468750, -23.9449812500], [41.3300375000, -23.9160250000], [41.3994281250, -23.8870687500], [41.4688187500, -23.8581125000], [41.5382093750, -23.8291562500], [41.6076000000, -23.8002000000], [41.6937000000, -23.7598000000], [41.7798000000, -23.7194000000], [41.8330000000, -23.6927875000], [41.8862000000, -23.6661750000], [41.9394000000, -23.6395625000], [41.9926000000, -23.6129500000], [42.0458000000, -23.5863375000], [42.0990000000, -23.5597250000], [42.1522000000, -23.5331125000], [42.2054000000, -23.5065000000], [42.2519187500, -23.4839875000], [42.2984375000, -23.4614750000], [42.3449562500, -23.4389625000], [42.3914750000, -23.4164500000], [42.4379937500, -23.3939375000], [42.4845125000, -23.3714250000], [42.5310312500, -23.3489125000], [42.5775500000, -23.3264000000], [42.6240687500, -23.3038875000], [42.6705875000, -23.2813750000], [42.7171062500, -23.2588625000], [42.7636250000, -23.2363500000], [42.8101437500, -23.2138375000], [42.8566625000, -23.1913250000], [42.9031812500, -23.1688125000], [42.9497000000, -23.1463000000], [42.9962187500, -23.1237875000], [43.0427375000, -23.1012750000], [43.0892562500, -23.0787625000], [43.1357750000, -23.0562500000], [43.1822937500, -23.0337375000], [43.2288125000, -23.0112250000], [43.2753312500, -22.9887125000], [43.3218500000, -22.9662000000], [43.3683687500, -22.9436875000], [43.4148875000, -22.9211750000], [43.4614062500, -22.8986625000], [43.5079250000, -22.8761500000], [43.5544437500, -22.8536375000], [43.6009625000, -22.8311250000], [43.6474812500, -22.8086125000], [43.6940000000, -22.7861000000], [43.7520375000, -22.7546000000], [43.8100750000, -22.7231000000], [43.8681125000, -22.6916000000], [43.9261500000, -22.6601000000], [43.9841875000, -22.6286000000], [44.0422250000, -22.5971000000], [44.1002625000, -22.5656000000], [44.1583000000, -22.5341000000], [44.2350062500, -22.4928625000], [44.3117125000, -22.4516250000], [44.3884187500, -22.4103875000], [44.4651250000, -22.3691500000], [44.5418312500, -22.3279125000], [44.6185375000, -22.2866750000], [44.6952437500, -22.2454375000], [44.7719500000, -22.2042000000], [44.8486562500, -22.1629625000], [44.9253625000, -22.1217250000], [45.0020687500, -22.0804875000], [45.0787750000, -22.0392500000], [45.1554812500, -21.9980125000], [45.2321875000, -21.9567750000], [45.3088937500, -21.9155375000], [45.3856000000, -21.8743000000], [45.4360000000, -21.8458000000], [45.5145812500, -21.7967750000], [45.5931625000, -21.7477500000], [45.6717437500, -21.6987250000], [45.7503250000, -21.6497000000], [45.8289062500, -21.6006750000], [45.9074875000, -21.5516500000], [45.9860687500, -21.5026250000], [46.0646500000, -21.4536000000], [46.1432312500, -21.4045750000], [46.2218125000, -21.3555500000], [46.3003937500, -21.3065250000], [46.3789750000, -21.2575000000], [46.4575562500, -21.2084750000], [46.5361375000, -21.1594500000], [46.6147187500, -21.1104250000], [46.6933000000, -21.0614000000], [46.7664593750, -21.0161218750], [46.8396187500, -20.9708437500], [46.9127781250, -20.9255656250], [46.9859375000, -20.8802875000], [47.0590968750, -20.8350093750], [47.1322562500, -20.7897312500], [47.2054156250, -20.7444531250], [47.2785750000, -20.6991750000], [47.3517343750, -20.6538968750], [47.4248937500, -20.6086187500], [47.4980531250, -20.5633406250], [47.5712125000, -20.5180625000], [47.6443718750, -20.4727843750], [47.7175312500, -20.4275062500], [47.7906906250, -20.3822281250], [47.8638500000, -20.3369500000], [47.9370093750, -20.2916718750], [48.0101687500, -20.2463937500], [48.0833281250, -20.2011156250], [48.1564875000, -20.1558375000], [48.2296468750, -20.1105593750], [48.3028062500, -20.0652812500], [48.3759656250, -20.0200031250], [48.4491250000, -19.9747250000], [48.5222843750, -19.9294468750], [48.5954437500, -19.8841687500], [48.6686031250, -19.8388906250], [48.7417625000, -19.7936125000], [48.8149218750, -19.7483343750], [48.8880812500, -19.7030562500], [48.9612406250, -19.6577781250], [49.0344000000, -19.6125000000], [49.0401000000, -19.6086000000], [49.1106750000, -19.5590000000], [49.1812500000, -19.5094000000], [49.2518250000, -19.4598000000], [49.3224000000, -19.4102000000], [49.3762562500, -19.3723062500], [49.4301125000, -19.3344125000], [49.4839687500, -19.2965187500], [49.5378250000, -19.2586250000], [49.5916812500, -19.2207312500], [49.6455375000, -19.1828375000], [49.6993937500, -19.1449437500], [49.7532500000, -19.1070500000], [49.8071062500, -19.0691562500], [49.8609625000, -19.0312625000], [49.9148187500, -18.9933687500], [49.9686750000, -18.9554750000], [50.0225312500, -18.9175812500]]);
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
import math
import time

from stl import mesh, Dimension

from tkinter import Tk     # from tkinter import Tk for Python 3.x
from tkinter.filedialog import askopenfilename
from mpl_toolkits.mplot3d import art3d
from matplotlib import pyplot as plt
import solid
import os
import ezdxf
import shapely.geometry as sg
import subprocess
from GUI import getSCADPath



def outputSTL(From, To, PATH=getSCADPath()):
    subprocess.Popen(PATH + " -o " + To + " " + From)
    while not os.path.exists(To):
        time.sleep(1)


def get_size(i):
    x_list = [int(a) for a in str(i)]
    return len(x_list)



class Model:
    def __init__(self, model, fileName, location, layer, thickness):
        self.location = location
        self.code = None
        self.fileName = fileName
        self.stl = fileName + ".stl"
        self.layer = layer
        self.thickness = thickness
        self.maxz = (layer+1)*thickness
        self.dxf = fileName + ".dxf"
        self.scad = fileName + ".scad"
        self.model = model
        self.center = None
        self.width = 10
        self.mesh = None
        self.useable_area = None


    def get_code(self):
        max_dim = 0.05
        max_array = 6

        num = int(self.fileName)
        nums = [int(a) for a in str(num)]
        nums.reverse()
        indices = nums
        length = len(nums)

        print(indices)
        t = 0
        i = 0
        cubes = []
        x = 0
        y = 0
        width = 0.01
        while x <= max_dim:
            while y <= max_dim:
                print(indices)
                if nums == []:
                    break
                if indices[0] != 0:
                    cubes.append(solid.translate([x, y, 0])(solid.cube(size=t / 1000 + 0.001)))
                    y += max_dim / (max_array - 1)
                    nums[0] = nums[0] - 1
                else:
                    indices.pop(0)
                    t += 1
                i += 1
            x += max_dim / (max_array - 1)
            y = 0

        outside = solid.translate([-width / 2, -width / 2])(solid.cube(max_dim + (length - 1) / 1000 + 0.001 + width))
        self.code = solid.difference()(outside, cubes)
        self.code = solid.projection(cut=True)(self.code)
        solid.scad_render_to_file(self.code, self.location + "/code.scad")
        outputSTL(From=self.location+"/code.scad", To=self.location+"code.dxf", PATH=getSCADPath())
        # os.system("toSTL.sh renders/code.scad renders/code.dxf")
        return self.location+"/code.dxf"

    def download(self, type):
        if type =="stl":
            print("generating:" + self.location+"/"+ self.fileName+".stl")
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".stl")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".stl")
        elif type == "dxf":
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".dxf")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".dxf")

    def render(self):
        solid.scad_render_to_file(self.model, self.location+"/"+ self.fileName+'.scad')
        while not os.path.exists(self.location+"/"+self.fileName+".scad"):
            time.sleep(1)

    def get_points(self):
        doc = ezdxf.readfile(filename=self.location+"/"+ self.fileName+".dxf")
        msp = doc.modelspace()
        i=0
        lists = []
        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return [start, end]

        for e in msp.query("LINE"):
            line = helper(e)
            if not lists:
                lists.append([line])
            else:
                if lists[i][len(lists)-1][1] != line[0]:
                    lists.append([line])
                    i+=1
                else:
                    lists[i].append(line)

    def get_points2(self, FILE):
        doc = ezdxf.readfile(filename=FILE)
        msp = doc.modelspace()
        i = 0
        lists = []

        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return (start, end)

        for e in msp.query("LINE"):
            line = helper(e)
            if lists==[]:
                lists.append([line])
            else:
                if lists[i][len(lists[i]) - 1][1] != line[0]:
                    lists.append([line])
                    i += 1
                else:
                    lists[i].append(line)
        return lists

    def add_code(self):
        dxf = solid.projection(cut=False)(self.model)
        offset = solid.offset(r=-0.1)(dxf)
        solid.scad_render_to_file(offset, self.location+'/offset.scad')
        os.system("toSTL.sh renders/offset.scad renders/offset.dxf")
        lines = self.get_points2("renders/offset.dxf")
        x = lines[0][0][0][0]
        y = lines[0][0][0][1]
        print(x)
        print(y)
        code = solid.translate([x,y,0])(self.code)
        code = solid.linear_extrude(height=999)(code)
        save = self.model
        self.model = solid.projection()(solid.difference()(self.model, code))
        self.render()
        self.download("dxf")
        self.model = save

    def add_label(self, pos):
        # num = 12
        # minx, maxx, miny, maxy, minz, maxz = self.find_minmax()
        maxz = self.maxz
        # label = solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.5, halign="center"))
        # i=minx
        # print("x-len: " + str(maxx-minx))
        # print(i)
        # inc = (maxx-minx)/num
        # while minx <= i <= maxx:
        #     label = solid.union()(solid.translate([i, 0, maxz - 0.2])(solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.25, halign="center"))), label)
        #     i += inc
        #
        # l = label
        #
        # i =miny
        # while miny<= i <= maxy:
        #     print("y inc")
        #     l = solid.union()(solid.translate([0, i, 0])(label), l)
        #     i += 0.5
        for i in str(self.fileName):
            cur = pos[0]
            label = solid.translate([pos[0][0], pos[0][1], self.maxz-0.2])(solid.linear_extrude(height=(self.thickness)/3)(solid.text(str(i), size=0.5, halign="center", valign="center")))
            self.model = solid.difference()(self.model, label)
            pos.append(pos.pop(0))
            while abs(cur[0]-pos[0][0])<0.5 and abs(cur[1]-pos[0][1])<0.5:
                pos.append(pos.pop(0))



    def Center(self):

        volume, cog, inertia = self.mesh.get_mass_properties()
        print("Volume                                  = {0}".format(volume))
        print("Position of the center of gravity (COG) = {0}".format(cog))
        m_centered = solid.translate([-cog[0], -cog[1], 0])(
            self.model
        )
        return m_centered

    def find_minmax(self):
        minx = maxx = miny = maxy = minz = maxz = None
        for p in self.mesh.points:
            # p contains (x, y, z)
            if minx is None:
                minx = p[Dimension.X]
                maxx = p[Dimension.X]
                miny = p[Dimension.Y]
                maxy = p[Dimension.Y]
                minz = p[Dimension.Z]
                maxz = p[Dimension.Z]
            else:
                maxx = max(p[Dimension.X], maxx)
                minx = min(p[Dimension.X], minx)
                maxy = max(p[Dimension.Y], maxy)
                miny = min(p[Dimension.Y], miny)
                maxz = max(p[Dimension.Z], maxz)
                minz = min(p[Dimension.Z], minz)
        lenx = maxx - minx
        leny = maxy - miny
        lenz = maxz - minz
        return minx, maxx, miny, maxy, minz, maxz

    # def generate_Mesh(self):
    #     self.mesh = mesh.Mesh.from_file(self.location + "/" + str(int(self.fileName)//8)+ "b.stl")

    def get_top(self):
        top = solid.projection(cut=True)(solid.translate([0,0,-1*self.thickness*(self.layer+1)])(self.model))
        useable_area = solid.offset(r=-0.45)(top)
        self.useable_area = useable_area
        solid.scad_render_to_file(self.useable_area, self.location+'/' + 'toptemp.scad')
        outputSTL(From=self.location+'/' + 'toptemp.scad', To=self.location+"/top"+ self.dxf)

        # os.system("toSTL.sh out/toptemp.scad renders/" + self.fileName + ".dxf")
        dxf = DXF(self.location+"/top"+ self.dxf)
        min_p=dxf.points[0][0]
        points_ordered = dxf.points
        i=0
        while i <= len(dxf.points)+1:
            while math.sqrt((dxf.points[0][0]-dxf.points[1][0])**2+(dxf.points[0][1]-dxf.points[1][1])**2) > 0.1:
                dxf.points.insert(1, [(dxf.points[0][0]+dxf.points[1][0])/2, (dxf.points[0][1]+dxf.points[1][1])/2])
                i = i-1
            dxf.points.append(dxf.points.pop(0))
            i+=1
        for i in range(len(dxf.points)):
            dxf.points.append(dxf.points.pop(0))
            if dxf.points[0][0] < min_p:
                min_p = dxf.points[0][0]
                points_ordered = dxf.points.copy()
        dxf.points = points_ordered.copy()

        print(dxf.points)
        self.add_label(dxf.points)

class DXF:
    def __init__(self, file):
        self.file = file
        self.Lines = []
        self.points = []
        doc = ezdxf.readfile(self.file)
        msp = doc.modelspace()
        for e in msp:
            if e.dxftype() == "LINE":
                self.Lines.append(e)
                self.points.append([e.dxf.start[0], e.dxf.start[1]])
        # self.points.append([self.Lines[-1].dxf.end[0], self.Lines[-1].dxf.end[1]])
        self.area = None
        self.center = None
        self.polygon = sg.Polygon(self.points)

    def get_area(self):
        self.area = self.polygon.area
        return self.area

    def get_center(self):
        x_sum = 0
        y_sum =0
        for i in self.points:
            x_sum += i[0]
            y_sum += i[1]
        x_c = x_sum/len(self.points)
        y_c = y_sum/len(self.points)
        return (x_c, y_c)

    def split(self, maxdim):
        splits = []
        length = 0
        pieces = [[]]
        prev = self.points[0]
        for j in self.points:
            length = length + math.sqrt((prev[0]-j[0])**2+(prev[1]-j[1])**2)
            if length >= maxdim:
                pieces[-1].append(j)
                pieces.append([])
                length = 0
            pieces[-1].append(j)
            prev = j
        for j in pieces:
            j.insert(0, [0,0])
            piece = solid.linear_extrude(height=10)(solid.polygon(j))
            splits.append(piece)
        return splits
    def refine_points(self):
        i=0
        while i <= len(self.points)+1:
            while math.sqrt((self.points[0][0]-self.points[1][0])**2+(self.points[0][1]-self.points[1][1])**2) > 0.1:
                self.points.insert(1, [(self.points[0][0]+self.points[1][0])/2, (self.points[0][1]+self.points[1][1])/2])
                i = i-1
            self.points.append(self.points.pop(0))
            i+=1


if __name__== "__main__":
    test = DXF("C:/Users/Daniel/Documents/repos/Shell_Maker/output/0top_slice.dxf")
    test.refine_points()
    k = test.split(48)
    for i in range(len(k)):
        solid.scad_render_to_file(k[i], str(i) + ".scad")


 
 
************************************************/
