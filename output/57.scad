// Generated by SolidPython 1.1.3 on 2024-05-19 23:42:01


intersection() {
	difference() {
		intersection() {
			translate(v = [0, 0, 0]) {
				import(file = "CE3E3V2_Bottom_shell.stl", origin = [0, 0]);
			}
			translate(v = [-90.04029846191406, -32.690147399902344, 14]) {
				cube(size = [180.0806, 65.380295, 2]);
			}
		}
		linear_extrude(height = 999) {
			offset(r = -1) {
				import(file = "C:/Users/Daniel/Documents/repos/Shell_Maker/output/7top_slice.dxf", origin = [0, 0]);
			}
		}
	}
	translate(v = [0, 0, 14]) {
		linear_extrude(height = 10) {
			polygon(points = [[0, 0], [1.7641570312, 26.4161562500], [1.6928975781, 26.4051906250], [1.6216381250, 26.3942250000], [1.5503786719, 26.3832593750], [1.4791192188, 26.3722937500], [1.4078597656, 26.3613281250], [1.3366003125, 26.3503625000], [1.2653408594, 26.3393968750], [1.1940814063, 26.3284312500], [1.1228219531, 26.3174656250], [1.0515625000, 26.3065000000], [0.9803030469, 26.2955343750], [0.9090435938, 26.2845687500], [0.8377841406, 26.2736031250], [0.7665246875, 26.2626375000], [0.6952652344, 26.2516718750], [0.6240057813, 26.2407062500], [0.5527463281, 26.2297406250], [0.4814868750, 26.2187750000], [0.4102274219, 26.2078093750], [0.3389679688, 26.1968437500], [0.2677085156, 26.1858781250], [0.1964490625, 26.1749125000], [0.1251896094, 26.1639468750], [0.0539301563, 26.1529812500], [-0.0173292969, 26.1420156250], [-0.0885887500, 26.1310500000], [-0.1598482031, 26.1200843750], [-0.2311076562, 26.1091187500], [-0.3023671094, 26.0981531250], [-0.3736265625, 26.0871875000], [-0.4448860156, 26.0762218750], [-0.5161454687, 26.0652562500], [-0.5874049219, 26.0542906250], [-0.6586643750, 26.0433250000], [-0.7299238281, 26.0323593750], [-0.8011832812, 26.0213937500], [-0.8724427344, 26.0104281250], [-0.9437021875, 25.9994625000], [-1.0149616406, 25.9884968750], [-1.0862210937, 25.9775312500], [-1.1574805469, 25.9665656250], [-1.2287400000, 25.9556000000], [-1.2841318750, 25.9466562500], [-1.3395237500, 25.9377125000], [-1.3949156250, 25.9287687500], [-1.4503075000, 25.9198250000], [-1.5056993750, 25.9108812500], [-1.5610912500, 25.9019375000], [-1.6164831250, 25.8929937500], [-1.6718750000, 25.8840500000], [-1.7272668750, 25.8751062500], [-1.7826587500, 25.8661625000], [-1.8380506250, 25.8572187500], [-1.8934425000, 25.8482750000], [-1.9488343750, 25.8393312500], [-2.0042262500, 25.8303875000], [-2.0596181250, 25.8214437500], [-2.1150100000, 25.8125000000], [-2.2125575000, 25.7960625000], [-2.3101050000, 25.7796250000], [-2.4076525000, 25.7631875000], [-2.5052000000, 25.7467500000], [-2.6027475000, 25.7303125000], [-2.7002950000, 25.7138750000], [-2.7978425000, 25.6974375000], [-2.8953900000, 25.6810000000], [-2.9798187500, 25.6659750000], [-3.0642475000, 25.6509500000], [-3.1486762500, 25.6359250000], [-3.2331050000, 25.6209000000], [-3.3175337500, 25.6058750000], [-3.4019625000, 25.5908500000], [-3.4863912500, 25.5758250000], [-3.5708200000, 25.5608000000], [-3.6423893750, 25.5473945312], [-3.7139587500, 25.5339890625], [-3.7855281250, 25.5205835937], [-3.8570975000, 25.5071781250], [-3.9286668750, 25.4937726563], [-4.0002362500, 25.4803671875], [-4.0718056250, 25.4669617187], [-4.1433750000, 25.4535562500], [-4.2149443750, 25.4401507812], [-4.2865137500, 25.4267453125], [-4.3580831250, 25.4133398438], [-4.4296525000, 25.3999343750], [-4.5012218750, 25.3865289062], [-4.5727912500, 25.3731234375], [-4.6443606250, 25.3597179687], [-4.7159300000, 25.3463125000], [-4.7874993750, 25.3329070313], [-4.8590687500, 25.3195015625], [-4.9306381250, 25.3060960937], [-5.0022075000, 25.2926906250], [-5.0737768750, 25.2792851562], [-5.1453462500, 25.2658796875], [-5.2169156250, 25.2524742188], [-5.2884850000, 25.2390687500], [-5.3600543750, 25.2256632813], [-5.4316237500, 25.2122578125], [-5.5031931250, 25.1988523437], [-5.5747625000, 25.1854468750], [-5.6463318750, 25.1720414063], [-5.7179012500, 25.1586359375], [-5.7894706250, 25.1452304688], [-5.8610400000, 25.1318250000], [-5.9326093750, 25.1184195312], [-6.0041787500, 25.1050140625], [-6.0757481250, 25.0916085937], [-6.1473175000, 25.0782031250], [-6.2188868750, 25.0647976563], [-6.2904562500, 25.0513921875], [-6.3620256250, 25.0379867187], [-6.4335950000, 25.0245812500], [-6.5051643750, 25.0111757812], [-6.5767337500, 24.9977703125], [-6.6483031250, 24.9843648438], [-6.7198725000, 24.9709593750], [-6.7914418750, 24.9575539062], [-6.8630112500, 24.9441484375], [-6.9345806250, 24.9307429687], [-7.0061500000, 24.9173375000], [-7.0777193750, 24.9039320313], [-7.1492887500, 24.8905265625], [-7.2208581250, 24.8771210937], [-7.2924275000, 24.8637156250], [-7.3639968750, 24.8503101562], [-7.4355662500, 24.8369046875], [-7.5071356250, 24.8234992188], [-7.5787050000, 24.8100937500], [-7.6502743750, 24.7966882812], [-7.7218437500, 24.7832828125], [-7.7934131250, 24.7698773437], [-7.8649825000, 24.7564718750], [-7.9365518750, 24.7430664063], [-8.0081212500, 24.7296609375], [-8.0796906250, 24.7162554687], [-8.1512600000, 24.7028500000], [-8.2228293750, 24.6894445312], [-8.2943987500, 24.6760390625], [-8.3659681250, 24.6626335937], [-8.4375375000, 24.6492281250], [-8.5091068750, 24.6358226562], [-8.5806762500, 24.6224171875], [-8.6522456250, 24.6090117187], [-8.7238150000, 24.5956062500], [-8.7953843750, 24.5822007812], [-8.8669537500, 24.5687953125], [-8.9385231250, 24.5553898437], [-9.0100925000, 24.5419843750], [-9.0816618750, 24.5285789062], [-9.1532312500, 24.5151734375], [-9.2248006250, 24.5017679687], [-9.2963700000, 24.4883625000], [-9.3679393750, 24.4749570312], [-9.4395087500, 24.4615515625], [-9.5110781250, 24.4481460937], [-9.5826475000, 24.4347406250], [-9.6542168750, 24.4213351562], [-9.7257862500, 24.4079296875], [-9.7973556250, 24.3945242187], [-9.8689250000, 24.3811187500], [-9.9404943750, 24.3677132812], [-10.0120637500, 24.3543078125], [-10.0836331250, 24.3409023437], [-10.1552025000, 24.3274968750], [-10.2267718750, 24.3140914063], [-10.2983412500, 24.3006859375], [-10.3699106250, 24.2872804687], [-10.4414800000, 24.2738750000], [-10.5130493750, 24.2604695312], [-10.5846187500, 24.2470640625], [-10.6561881250, 24.2336585938], [-10.7277575000, 24.2202531250], [-10.7993268750, 24.2068476562], [-10.8708962500, 24.1934421875], [-10.9424656250, 24.1800367187], [-11.0140350000, 24.1666312500], [-11.0856043750, 24.1532257813], [-11.1571737500, 24.1398203125], [-11.2287431250, 24.1264148437], [-11.3003125000, 24.1130093750], [-11.3718818750, 24.0996039062], [-11.4434512500, 24.0861984375], [-11.5150206250, 24.0727929688], [-11.5865900000, 24.0593875000], [-11.6581593750, 24.0459820312], [-11.7297287500, 24.0325765625], [-11.8012981250, 24.0191710937], [-11.8728675000, 24.0057656250], [-11.9444368750, 23.9923601563], [-12.0160062500, 23.9789546875], [-12.0875756250, 23.9655492187], [-12.1591450000, 23.9521437500], [-12.2307143750, 23.9387382812], [-12.3022837500, 23.9253328125], [-12.3738531250, 23.9119273438], [-12.4454225000, 23.8985218750], [-12.5169918750, 23.8851164062], [-12.5885612500, 23.8717109375], [-12.6601306250, 23.8583054687], [-12.7317000000, 23.8449000000], [-12.8163812500, 23.8284437500], [-12.9010625000, 23.8119875000], [-12.9857437500, 23.7955312500], [-13.0704250000, 23.7790750000], [-13.1551062500, 23.7626187500], [-13.2397875000, 23.7461625000], [-13.3244687500, 23.7297062500], [-13.4091500000, 23.7132500000], [-13.4938312500, 23.6967937500], [-13.5785125000, 23.6803375000], [-13.6631937500, 23.6638812500], [-13.7478750000, 23.6474250000], [-13.8325562500, 23.6309687500], [-13.9172375000, 23.6145125000], [-14.0019187500, 23.5980562500], [-14.0866000000, 23.5816000000], [-14.1382500000, 23.5710500000], [-14.1899000000, 23.5605000000], [-14.2615062500, 23.5454203125], [-14.3331125000, 23.5303406250], [-14.4047187500, 23.5152609375], [-14.4763250000, 23.5001812500], [-14.5479312500, 23.4851015625], [-14.6195375000, 23.4700218750], [-14.6911437500, 23.4549421875], [-14.7627500000, 23.4398625000], [-14.8343562500, 23.4247828125], [-14.9059625000, 23.4097031250], [-14.9775687500, 23.3946234375], [-15.0491750000, 23.3795437500], [-15.1207812500, 23.3644640625], [-15.1923875000, 23.3493843750], [-15.2639937500, 23.3343046875], [-15.3356000000, 23.3192250000], [-15.4072062500, 23.3041453125], [-15.4788125000, 23.2890656250], [-15.5504187500, 23.2739859375], [-15.6220250000, 23.2589062500], [-15.6936312500, 23.2438265625], [-15.7652375000, 23.2287468750], [-15.8368437500, 23.2136671875], [-15.9084500000, 23.1985875000], [-15.9800562500, 23.1835078125], [-16.0516625000, 23.1684281250], [-16.1232687500, 23.1533484375], [-16.1948750000, 23.1382687500], [-16.2664812500, 23.1231890625], [-16.3380875000, 23.1081093750], [-16.4096937500, 23.0930296875], [-16.4813000000, 23.0779500000], [-16.5529062500, 23.0628703125], [-16.6245125000, 23.0477906250], [-16.6961187500, 23.0327109375], [-16.7677250000, 23.0176312500], [-16.8393312500, 23.0025515625], [-16.9109375000, 22.9874718750], [-16.9825437500, 22.9723921875], [-17.0541500000, 22.9573125000], [-17.1257562500, 22.9422328125], [-17.1973625000, 22.9271531250], [-17.2689687500, 22.9120734375], [-17.3405750000, 22.8969937500], [-17.4121812500, 22.8819140625], [-17.4837875000, 22.8668343750], [-17.5553937500, 22.8517546875], [-17.6270000000, 22.8366750000], [-17.6986062500, 22.8215953125], [-17.7702125000, 22.8065156250], [-17.8418187500, 22.7914359375], [-17.9134250000, 22.7763562500], [-17.9850312500, 22.7612765625], [-18.0566375000, 22.7461968750], [-18.1282437500, 22.7311171875], [-18.1998500000, 22.7160375000], [-18.2714562500, 22.7009578125], [-18.3430625000, 22.6858781250], [-18.4146687500, 22.6707984375], [-18.4862750000, 22.6557187500], [-18.5578812500, 22.6406390625], [-18.6294875000, 22.6255593750], [-18.7010937500, 22.6104796875], [-18.7727000000, 22.5954000000], [-18.7855000000, 22.5926000000], [-18.8568812500, 22.5759210938], [-18.9282625000, 22.5592421875], [-18.9996437500, 22.5425632813], [-19.0710250000, 22.5258843750], [-19.1424062500, 22.5092054688], [-19.2137875000, 22.4925265625], [-19.2851687500, 22.4758476563], [-19.3565500000, 22.4591687500], [-19.4279312500, 22.4424898438], [-19.4993125000, 22.4258109375], [-19.5706937500, 22.4091320313], [-19.6420750000, 22.3924531250], [-19.7134562500, 22.3757742188], [-19.7848375000, 22.3590953125], [-19.8562187500, 22.3424164063], [-19.9276000000, 22.3257375000], [-19.9989812500, 22.3090585938], [-20.0703625000, 22.2923796875], [-20.1417437500, 22.2757007813], [-20.2131250000, 22.2590218750], [-20.2845062500, 22.2423429688], [-20.3558875000, 22.2256640625], [-20.4272687500, 22.2089851563], [-20.4986500000, 22.1923062500], [-20.5700312500, 22.1756273438], [-20.6414125000, 22.1589484375], [-20.7127937500, 22.1422695313], [-20.7841750000, 22.1255906250], [-20.8555562500, 22.1089117188], [-20.9269375000, 22.0922328125], [-20.9983187500, 22.0755539063], [-21.0697000000, 22.0588750000], [-21.1410812500, 22.0421960938], [-21.2124625000, 22.0255171875], [-21.2838437500, 22.0088382813], [-21.3552250000, 21.9921593750], [-21.4266062500, 21.9754804687], [-21.4979875000, 21.9588015625], [-21.5693687500, 21.9421226562], [-21.6407500000, 21.9254437500], [-21.7121312500, 21.9087648437], [-21.7835125000, 21.8920859375], [-21.8548937500, 21.8754070312], [-21.9262750000, 21.8587281250], [-21.9976562500, 21.8420492187], [-22.0690375000, 21.8253703125], [-22.1404187500, 21.8086914062], [-22.2118000000, 21.7920125000], [-22.2831812500, 21.7753335937], [-22.3545625000, 21.7586546875], [-22.4259437500, 21.7419757812], [-22.4973250000, 21.7252968750], [-22.5687062500, 21.7086179687], [-22.6400875000, 21.6919390625], [-22.7114687500, 21.6752601562], [-22.7828500000, 21.6585812500], [-22.8542312500, 21.6419023437], [-22.9256125000, 21.6252234375], [-22.9969937500, 21.6085445312], [-23.0683750000, 21.5918656250], [-23.1397562500, 21.5751867187], [-23.2111375000, 21.5585078125], [-23.2825187500, 21.5418289062], [-23.3539000000, 21.5251500000], [-23.4252812500, 21.5084710938], [-23.4966625000, 21.4917921875], [-23.5680437500, 21.4751132813], [-23.6394250000, 21.4584343750], [-23.7108062500, 21.4417554688], [-23.7821875000, 21.4250765625], [-23.8535687500, 21.4083976563], [-23.9249500000, 21.3917187500], [-23.9963312500, 21.3750398438], [-24.0677125000, 21.3583609375], [-24.1390937500, 21.3416820313], [-24.2104750000, 21.3250031250], [-24.2818562500, 21.3083242188], [-24.3532375000, 21.2916453125], [-24.4246187500, 21.2749664063], [-24.4960000000, 21.2582875000], [-24.5673812500, 21.2416085938], [-24.6387625000, 21.2249296875], [-24.7101437500, 21.2082507813], [-24.7815250000, 21.1915718750], [-24.8529062500, 21.1748929688], [-24.9242875000, 21.1582140625], [-24.9956687500, 21.1415351563], [-25.0670500000, 21.1248562500], [-25.1384312500, 21.1081773438], [-25.2098125000, 21.0914984375], [-25.2811937500, 21.0748195313], [-25.3525750000, 21.0581406250], [-25.4239562500, 21.0414617187], [-25.4953375000, 21.0247828125], [-25.5667187500, 21.0081039062], [-25.6381000000, 20.9914250000], [-25.7094812500, 20.9747460937], [-25.7808625000, 20.9580671875], [-25.8522437500, 20.9413882812], [-25.9236250000, 20.9247093750], [-25.9950062500, 20.9080304687], [-26.0663875000, 20.8913515625], [-26.1377687500, 20.8746726562], [-26.2091500000, 20.8579937500], [-26.2805312500, 20.8413148437], [-26.3519125000, 20.8246359375], [-26.4232937500, 20.8079570312], [-26.4946750000, 20.7912781250], [-26.5660562500, 20.7745992187], [-26.6374375000, 20.7579203125], [-26.7088187500, 20.7412414062], [-26.7802000000, 20.7245625000], [-26.8515812500, 20.7078835937], [-26.9229625000, 20.6912046875], [-26.9943437500, 20.6745257812], [-27.0657250000, 20.6578468750], [-27.1371062500, 20.6411679687], [-27.2084875000, 20.6244890625], [-27.2798687500, 20.6078101562], [-27.3512500000, 20.5911312500], [-27.4226312500, 20.5744523437], [-27.4940125000, 20.5577734375], [-27.5653937500, 20.5410945312], [-27.6367750000, 20.5244156250], [-27.7081562500, 20.5077367187], [-27.7795375000, 20.4910578125], [-27.8509187500, 20.4743789062], [-27.9223000000, 20.4577000000], [-27.9942906250, 20.4408687500], [-28.0662812500, 20.4240375000], [-28.1382718750, 20.4072062500], [-28.2102625000, 20.3903750000], [-28.2822531250, 20.3735437500], [-28.3542437500, 20.3567125000], [-28.4262343750, 20.3398812500], [-28.4982250000, 20.3230500000], [-28.5702156250, 20.3062187500], [-28.6422062500, 20.2893875000], [-28.7141968750, 20.2725562500], [-28.7861875000, 20.2557250000], [-28.8581781250, 20.2388937500], [-28.9301687500, 20.2220625000], [-29.0021593750, 20.2052312500], [-29.0741500000, 20.1884000000], [-29.1461406250, 20.1715687500], [-29.2181312500, 20.1547375000], [-29.2901218750, 20.1379062500], [-29.3621125000, 20.1210750000], [-29.4341031250, 20.1042437500], [-29.5060937500, 20.0874125000], [-29.5780843750, 20.0705812500], [-29.6500750000, 20.0537500000], [-29.7220656250, 20.0369187500], [-29.7940562500, 20.0200875000], [-29.8660468750, 20.0032562500], [-29.9380375000, 19.9864250000], [-30.0100281250, 19.9695937500], [-30.0820187500, 19.9527625000], [-30.1540093750, 19.9359312500], [-30.2260000000, 19.9191000000], [-30.2919875000, 19.9021656250], [-30.3579750000, 19.8852312500], [-30.4239625000, 19.8682968750], [-30.4899500000, 19.8513625000], [-30.5559375000, 19.8344281250], [-30.6219250000, 19.8174937500], [-30.6879125000, 19.8005593750], [-30.7539000000, 19.7836250000], [-30.8198875000, 19.7666906250], [-30.8858750000, 19.7497562500], [-30.9518625000, 19.7328218750], [-31.0178500000, 19.7158875000], [-31.0838375000, 19.6989531250], [-31.1498250000, 19.6820187500], [-31.2158125000, 19.6650843750], [-31.2818000000, 19.6481500000], [-31.3477875000, 19.6312156250], [-31.4137750000, 19.6142812500], [-31.4797625000, 19.5973468750], [-31.5457500000, 19.5804125000], [-31.6117375000, 19.5634781250], [-31.6777250000, 19.5465437500], [-31.7437125000, 19.5296093750], [-31.8097000000, 19.5126750000], [-31.8756875000, 19.4957406250], [-31.9416750000, 19.4788062500], [-32.0076625000, 19.4618718750], [-32.0736500000, 19.4449375000], [-32.1396375000, 19.4280031250], [-32.2056250000, 19.4110687500], [-32.2716125000, 19.3941343750], [-32.3376000000, 19.3772000000], [-32.4035875000, 19.3602656250], [-32.4695750000, 19.3433312500], [-32.5355625000, 19.3263968750], [-32.6015500000, 19.3094625000], [-32.6675375000, 19.2925281250], [-32.7335250000, 19.2755937500], [-32.7995125000, 19.2586593750], [-32.8655000000, 19.2417250000], [-32.9314875000, 19.2247906250], [-32.9974750000, 19.2078562500], [-33.0634625000, 19.1909218750], [-33.1294500000, 19.1739875000], [-33.1954375000, 19.1570531250], [-33.2614250000, 19.1401187500], [-33.3274125000, 19.1231843750], [-33.3934000000, 19.1062500000], [-33.4593875000, 19.0893156250], [-33.5253750000, 19.0723812500], [-33.5913625000, 19.0554468750], [-33.6573500000, 19.0385125000], [-33.7233375000, 19.0215781250], [-33.7893250000, 19.0046437500], [-33.8553125000, 18.9877093750], [-33.9213000000, 18.9707750000], [-33.9872875000, 18.9538406250], [-34.0532750000, 18.9369062500], [-34.1192625000, 18.9199718750], [-34.1852500000, 18.9030375000], [-34.2512375000, 18.8861031250], [-34.3172250000, 18.8691687500], [-34.3832125000, 18.8522343750], [-34.4492000000, 18.8353000000], [-34.5234500000, 18.8157000000], [-34.5977000000, 18.7961000000], [-34.6863609375, 18.7718296875], [-34.7750218750, 18.7475593750], [-34.8636828125, 18.7232890625], [-34.9523437500, 18.6990187500], [-35.0410046875, 18.6747484375], [-35.1296656250, 18.6504781250], [-35.2183265625, 18.6262078125], [-35.3069875000, 18.6019375000], [-35.3956484375, 18.5776671875], [-35.4843093750, 18.5533968750], [-35.5729703125, 18.5291265625], [-35.6616312500, 18.5048562500], [-35.7502921875, 18.4805859375], [-35.8389531250, 18.4563156250], [-35.9276140625, 18.4320453125], [-36.0162750000, 18.4077750000], [-36.1049359375, 18.3835046875], [-36.1935968750, 18.3592343750], [-36.2822578125, 18.3349640625], [-36.3709187500, 18.3106937500], [-36.4595796875, 18.2864234375], [-36.5482406250, 18.2621531250], [-36.6369015625, 18.2378828125], [-36.7255625000, 18.2136125000], [-36.8142234375, 18.1893421875], [-36.9028843750, 18.1650718750], [-36.9915453125, 18.1408015625], [-37.0802062500, 18.1165312500], [-37.1688671875, 18.0922609375], [-37.2575281250, 18.0679906250], [-37.3461890625, 18.0437203125], [-37.4348500000, 18.0194500000], [-37.5235109375, 17.9951796875], [-37.6121718750, 17.9709093750], [-37.7008328125, 17.9466390625], [-37.7894937500, 17.9223687500], [-37.8781546875, 17.8980984375], [-37.9668156250, 17.8738281250], [-38.0554765625, 17.8495578125], [-38.1441375000, 17.8252875000], [-38.2327984375, 17.8010171875], [-38.3214593750, 17.7767468750], [-38.4101203125, 17.7524765625], [-38.4987812500, 17.7282062500], [-38.5874421875, 17.7039359375], [-38.6761031250, 17.6796656250], [-38.7647640625, 17.6553953125], [-38.8534250000, 17.6311250000], [-38.9420859375, 17.6068546875], [-39.0307468750, 17.5825843750], [-39.1194078125, 17.5583140625], [-39.2080687500, 17.5340437500], [-39.2967296875, 17.5097734375], [-39.3853906250, 17.4855031250], [-39.4740515625, 17.4612328125], [-39.5627125000, 17.4369625000], [-39.6513734375, 17.4126921875], [-39.7400343750, 17.3884218750], [-39.8286953125, 17.3641515625], [-39.9173562500, 17.3398812500], [-40.0060171875, 17.3156109375], [-40.0946781250, 17.2913406250], [-40.1833390625, 17.2670703125], [-40.2720000000, 17.2428000000], [-40.3242250000, 17.2284500000], [-40.3764500000, 17.2141000000], [-40.4286750000, 17.1997500000], [-40.4809000000, 17.1854000000], [-40.5331250000, 17.1710500000], [-40.5853500000, 17.1567000000], [-40.6375750000, 17.1423500000], [-40.6898000000, 17.1280000000], [-40.7420250000, 17.1136500000], [-40.7942500000, 17.0993000000], [-40.8464750000, 17.0849500000], [-40.8987000000, 17.0706000000], [-40.9509250000, 17.0562500000], [-41.0031500000, 17.0419000000], [-41.0553750000, 17.0275500000], [-41.1076000000, 17.0132000000], [-41.1995875000, 16.9872000000], [-41.2915750000, 16.9612000000], [-41.3835625000, 16.9352000000], [-41.4755500000, 16.9092000000], [-41.5675375000, 16.8832000000], [-41.6595250000, 16.8572000000], [-41.7515125000, 16.8312000000], [-41.8435000000, 16.8052000000], [-41.9092562500, 16.7860093750], [-41.9750125000, 16.7668187500], [-42.0407687500, 16.7476281250], [-42.1065250000, 16.7284375000], [-42.1722812500, 16.7092468750], [-42.2380375000, 16.6900562500], [-42.3037937500, 16.6708656250], [-42.3695500000, 16.6516750000], [-42.4353062500, 16.6324843750], [-42.5010625000, 16.6132937500], [-42.5668187500, 16.5941031250], [-42.6325750000, 16.5749125000], [-42.6983312500, 16.5557218750], [-42.7640875000, 16.5365312500], [-42.8298437500, 16.5173406250], [-42.8956000000, 16.4981500000], [-42.9613562500, 16.4789593750], [-43.0271125000, 16.4597687500], [-43.0928687500, 16.4405781250], [-43.1586250000, 16.4213875000], [-43.2243812500, 16.4021968750], [-43.2901375000, 16.3830062500], [-43.3558937500, 16.3638156250], [-43.4216500000, 16.3446250000], [-43.4874062500, 16.3254343750], [-43.5531625000, 16.3062437500], [-43.6189187500, 16.2870531250], [-43.6846750000, 16.2678625000], [-43.7504312500, 16.2486718750], [-43.8161875000, 16.2294812500], [-43.8819437500, 16.2102906250], [-43.9477000000, 16.1911000000], [-44.0134562500, 16.1719093750], [-44.0792125000, 16.1527187500], [-44.1449687500, 16.1335281250], [-44.2107250000, 16.1143375000], [-44.2764812500, 16.0951468750], [-44.3422375000, 16.0759562500], [-44.4079937500, 16.0567656250], [-44.4737500000, 16.0375750000], [-44.5395062500, 16.0183843750], [-44.6052625000, 15.9991937500], [-44.6710187500, 15.9800031250], [-44.7367750000, 15.9608125000], [-44.8025312500, 15.9416218750], [-44.8682875000, 15.9224312500], [-44.9340437500, 15.9032406250], [-44.9998000000, 15.8840500000], [-45.0655562500, 15.8648593750]]);
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
import math
import time

from stl import mesh, Dimension

from tkinter import Tk     # from tkinter import Tk for Python 3.x
from tkinter.filedialog import askopenfilename
from mpl_toolkits.mplot3d import art3d
from matplotlib import pyplot as plt
import solid
import os
import ezdxf
import shapely.geometry as sg
import subprocess
from GUI import getSCADPath



def outputSTL(From, To, PATH=getSCADPath()):
    subprocess.Popen(PATH + " -o " + To + " " + From)
    while not os.path.exists(To):
        time.sleep(1)


def get_size(i):
    x_list = [int(a) for a in str(i)]
    return len(x_list)



class Model:
    def __init__(self, model, fileName, location, layer, thickness):
        self.location = location
        self.code = None
        self.fileName = fileName
        self.stl = fileName + ".stl"
        self.layer = layer
        self.thickness = thickness
        self.maxz = (layer+1)*thickness
        self.dxf = fileName + ".dxf"
        self.scad = fileName + ".scad"
        self.model = model
        self.center = None
        self.width = 10
        self.mesh = None
        self.useable_area = None


    def get_code(self):
        max_dim = 0.05
        max_array = 6

        num = int(self.fileName)
        nums = [int(a) for a in str(num)]
        nums.reverse()
        indices = nums
        length = len(nums)

        print(indices)
        t = 0
        i = 0
        cubes = []
        x = 0
        y = 0
        width = 0.01
        while x <= max_dim:
            while y <= max_dim:
                print(indices)
                if nums == []:
                    break
                if indices[0] != 0:
                    cubes.append(solid.translate([x, y, 0])(solid.cube(size=t / 1000 + 0.001)))
                    y += max_dim / (max_array - 1)
                    nums[0] = nums[0] - 1
                else:
                    indices.pop(0)
                    t += 1
                i += 1
            x += max_dim / (max_array - 1)
            y = 0

        outside = solid.translate([-width / 2, -width / 2])(solid.cube(max_dim + (length - 1) / 1000 + 0.001 + width))
        self.code = solid.difference()(outside, cubes)
        self.code = solid.projection(cut=True)(self.code)
        solid.scad_render_to_file(self.code, self.location + "/code.scad")
        outputSTL(From=self.location+"/code.scad", To=self.location+"code.dxf", PATH=getSCADPath())
        # os.system("toSTL.sh renders/code.scad renders/code.dxf")
        return self.location+"/code.dxf"

    def download(self, type):
        if type =="stl":
            print("generating:" + self.location+"/"+ self.fileName+".stl")
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".stl")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".stl")
        elif type == "dxf":
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".dxf")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".dxf")

    def render(self):
        solid.scad_render_to_file(self.model, self.location+"/"+ self.fileName+'.scad')
        while not os.path.exists(self.location+"/"+self.fileName+".scad"):
            time.sleep(1)

    def get_points(self):
        doc = ezdxf.readfile(filename=self.location+"/"+ self.fileName+".dxf")
        msp = doc.modelspace()
        i=0
        lists = []
        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return [start, end]

        for e in msp.query("LINE"):
            line = helper(e)
            if not lists:
                lists.append([line])
            else:
                if lists[i][len(lists)-1][1] != line[0]:
                    lists.append([line])
                    i+=1
                else:
                    lists[i].append(line)

    def get_points2(self, FILE):
        doc = ezdxf.readfile(filename=FILE)
        msp = doc.modelspace()
        i = 0
        lists = []

        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return (start, end)

        for e in msp.query("LINE"):
            line = helper(e)
            if lists==[]:
                lists.append([line])
            else:
                if lists[i][len(lists[i]) - 1][1] != line[0]:
                    lists.append([line])
                    i += 1
                else:
                    lists[i].append(line)
        return lists

    def add_code(self):
        dxf = solid.projection(cut=False)(self.model)
        offset = solid.offset(r=-0.1)(dxf)
        solid.scad_render_to_file(offset, self.location+'/offset.scad')
        os.system("toSTL.sh renders/offset.scad renders/offset.dxf")
        lines = self.get_points2("renders/offset.dxf")
        x = lines[0][0][0][0]
        y = lines[0][0][0][1]
        print(x)
        print(y)
        code = solid.translate([x,y,0])(self.code)
        code = solid.linear_extrude(height=999)(code)
        save = self.model
        self.model = solid.projection()(solid.difference()(self.model, code))
        self.render()
        self.download("dxf")
        self.model = save

    def add_label(self, pos):
        # num = 12
        # minx, maxx, miny, maxy, minz, maxz = self.find_minmax()
        maxz = self.maxz
        # label = solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.5, halign="center"))
        # i=minx
        # print("x-len: " + str(maxx-minx))
        # print(i)
        # inc = (maxx-minx)/num
        # while minx <= i <= maxx:
        #     label = solid.union()(solid.translate([i, 0, maxz - 0.2])(solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.25, halign="center"))), label)
        #     i += inc
        #
        # l = label
        #
        # i =miny
        # while miny<= i <= maxy:
        #     print("y inc")
        #     l = solid.union()(solid.translate([0, i, 0])(label), l)
        #     i += 0.5
        for i in str(self.fileName):
            cur = pos[0]
            label = solid.translate([pos[0][0], pos[0][1], self.maxz-0.2])(solid.linear_extrude(height=(self.thickness)/3)(solid.text(str(i), size=0.5, halign="center", valign="center")))
            self.model = solid.difference()(self.model, label)
            pos.append(pos.pop(0))
            while abs(cur[0]-pos[0][0])<0.5 and abs(cur[1]-pos[0][1])<0.5:
                pos.append(pos.pop(0))



    def Center(self):

        volume, cog, inertia = self.mesh.get_mass_properties()
        print("Volume                                  = {0}".format(volume))
        print("Position of the center of gravity (COG) = {0}".format(cog))
        m_centered = solid.translate([-cog[0], -cog[1], 0])(
            self.model
        )
        return m_centered

    def find_minmax(self):
        minx = maxx = miny = maxy = minz = maxz = None
        for p in self.mesh.points:
            # p contains (x, y, z)
            if minx is None:
                minx = p[Dimension.X]
                maxx = p[Dimension.X]
                miny = p[Dimension.Y]
                maxy = p[Dimension.Y]
                minz = p[Dimension.Z]
                maxz = p[Dimension.Z]
            else:
                maxx = max(p[Dimension.X], maxx)
                minx = min(p[Dimension.X], minx)
                maxy = max(p[Dimension.Y], maxy)
                miny = min(p[Dimension.Y], miny)
                maxz = max(p[Dimension.Z], maxz)
                minz = min(p[Dimension.Z], minz)
        lenx = maxx - minx
        leny = maxy - miny
        lenz = maxz - minz
        return minx, maxx, miny, maxy, minz, maxz

    # def generate_Mesh(self):
    #     self.mesh = mesh.Mesh.from_file(self.location + "/" + str(int(self.fileName)//8)+ "b.stl")

    def get_top(self):
        top = solid.projection(cut=True)(solid.translate([0,0,-1*self.thickness*(self.layer+1)])(self.model))
        useable_area = solid.offset(r=-0.45)(top)
        self.useable_area = useable_area
        solid.scad_render_to_file(self.useable_area, self.location+'/' + 'toptemp.scad')
        outputSTL(From=self.location+'/' + 'toptemp.scad', To=self.location+"/top"+ self.dxf)

        # os.system("toSTL.sh out/toptemp.scad renders/" + self.fileName + ".dxf")
        dxf = DXF(self.location+"/top"+ self.dxf)
        min_p=dxf.points[0][0]
        points_ordered = dxf.points
        i=0
        while i <= len(dxf.points)+1:
            while math.sqrt((dxf.points[0][0]-dxf.points[1][0])**2+(dxf.points[0][1]-dxf.points[1][1])**2) > 0.1:
                dxf.points.insert(1, [(dxf.points[0][0]+dxf.points[1][0])/2, (dxf.points[0][1]+dxf.points[1][1])/2])
                i = i-1
            dxf.points.append(dxf.points.pop(0))
            i+=1
        for i in range(len(dxf.points)):
            dxf.points.append(dxf.points.pop(0))
            if dxf.points[0][0] < min_p:
                min_p = dxf.points[0][0]
                points_ordered = dxf.points.copy()
        dxf.points = points_ordered.copy()

        print(dxf.points)
        self.add_label(dxf.points)

class DXF:
    def __init__(self, file):
        self.file = file
        self.Lines = []
        self.points = []
        doc = ezdxf.readfile(self.file)
        msp = doc.modelspace()
        for e in msp:
            if e.dxftype() == "LINE":
                self.Lines.append(e)
                self.points.append([e.dxf.start[0], e.dxf.start[1]])
        # self.points.append([self.Lines[-1].dxf.end[0], self.Lines[-1].dxf.end[1]])
        self.area = None
        self.center = None
        self.polygon = sg.Polygon(self.points)

    def get_area(self):
        self.area = self.polygon.area
        return self.area

    def get_center(self):
        x_sum = 0
        y_sum =0
        for i in self.points:
            x_sum += i[0]
            y_sum += i[1]
        x_c = x_sum/len(self.points)
        y_c = y_sum/len(self.points)
        return (x_c, y_c)

    def split(self, maxdim):
        splits = []
        length = 0
        pieces = [[]]
        prev = self.points[0]
        for j in self.points:
            length = length + math.sqrt((prev[0]-j[0])**2+(prev[1]-j[1])**2)
            if length >= maxdim:
                pieces[-1].append(j)
                pieces.append([])
                length = 0
            pieces[-1].append(j)
            prev = j
        for j in pieces:
            j.insert(0, [0,0])
            piece = solid.linear_extrude(height=10)(solid.polygon(j))
            splits.append(piece)
        return splits
    def refine_points(self):
        i=0
        while i <= len(self.points)+1:
            while math.sqrt((self.points[0][0]-self.points[1][0])**2+(self.points[0][1]-self.points[1][1])**2) > 0.1:
                self.points.insert(1, [(self.points[0][0]+self.points[1][0])/2, (self.points[0][1]+self.points[1][1])/2])
                i = i-1
            self.points.append(self.points.pop(0))
            i+=1


if __name__== "__main__":
    test = DXF("C:/Users/Daniel/Documents/repos/Shell_Maker/output/0top_slice.dxf")
    test.refine_points()
    k = test.split(48)
    for i in range(len(k)):
        solid.scad_render_to_file(k[i], str(i) + ".scad")


 
 
************************************************/
