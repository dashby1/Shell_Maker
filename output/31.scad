// Generated by SolidPython 1.1.3 on 2024-05-19 23:41:37


intersection() {
	difference() {
		intersection() {
			translate(v = [0, 0, 0]) {
				import(file = "CE3E3V2_Bottom_shell.stl", origin = [0, 0]);
			}
			translate(v = [-90.04029846191406, -32.690147399902344, 6]) {
				cube(size = [180.0806, 65.380295, 2]);
			}
		}
		linear_extrude(height = 999) {
			offset(r = -1) {
				import(file = "C:/Users/Daniel/Documents/repos/Shell_Maker/output/3top_slice.dxf", origin = [0, 0]);
			}
		}
	}
	translate(v = [0, 0, 6]) {
		linear_extrude(height = 10) {
			polygon(points = [[0, 0], [-86.3724625000, -0.6582205000], [-86.3130906250, -0.6852423750], [-86.2537187500, -0.7122642500], [-86.1943468750, -0.7392861250], [-86.1349750000, -0.7663080000], [-86.0756031250, -0.7933298750], [-86.0162312500, -0.8203517500], [-85.9568593750, -0.8473736250], [-85.8974875000, -0.8743955000], [-85.8381156250, -0.9014173750], [-85.7787437500, -0.9284392500], [-85.7193718750, -0.9554611250], [-85.6600000000, -0.9824830000], [-85.5832906250, -1.0177985312], [-85.5065812500, -1.0531140625], [-85.4298718750, -1.0884295938], [-85.3531625000, -1.1237451250], [-85.2764531250, -1.1590606563], [-85.1997437500, -1.1943761875], [-85.1230343750, -1.2296917188], [-85.0463250000, -1.2650072500], [-84.9696156250, -1.3003227813], [-84.8929062500, -1.3356383125], [-84.8161968750, -1.3709538437], [-84.7394875000, -1.4062693750], [-84.6627781250, -1.4415849062], [-84.5860687500, -1.4769004375], [-84.5093593750, -1.5122159687], [-84.4326500000, -1.5475315000], [-84.3559406250, -1.5828470312], [-84.2792312500, -1.6181625625], [-84.2025218750, -1.6534780937], [-84.1258125000, -1.6887936250], [-84.0491031250, -1.7241091562], [-83.9723937500, -1.7594246875], [-83.8956843750, -1.7947402187], [-83.8189750000, -1.8300557500], [-83.7422656250, -1.8653712812], [-83.6655562500, -1.9006868125], [-83.5888468750, -1.9360023438], [-83.5121375000, -1.9713178750], [-83.4354281250, -2.0066334062], [-83.3587187500, -2.0419489375], [-83.2820093750, -2.0772644688], [-83.2053000000, -2.1125800000], [-83.1477250000, -2.1381950000], [-83.0901500000, -2.1638100000], [-83.0325750000, -2.1894250000], [-82.9750000000, -2.2150400000], [-82.9204687500, -2.2377937500], [-82.8659375000, -2.2605475000], [-82.8114062500, -2.2833012500], [-82.7568750000, -2.3060550000], [-82.7023437500, -2.3288087500], [-82.6478125000, -2.3515625000], [-82.5932812500, -2.3743162500], [-82.5387500000, -2.3970700000], [-82.4842187500, -2.4198237500], [-82.4296875000, -2.4425775000], [-82.3751562500, -2.4653312500], [-82.3206250000, -2.4880850000], [-82.2660937500, -2.5108387500], [-82.2115625000, -2.5335925000], [-82.1570312500, -2.5563462500], [-82.1025000000, -2.5791000000], [-82.0479687500, -2.6018537500], [-81.9934375000, -2.6246075000], [-81.9389062500, -2.6473612500], [-81.8843750000, -2.6701150000], [-81.8298437500, -2.6928687500], [-81.7753125000, -2.7156225000], [-81.7207812500, -2.7383762500], [-81.6662500000, -2.7611300000], [-81.6117187500, -2.7838837500], [-81.5571875000, -2.8066375000], [-81.5026562500, -2.8293912500], [-81.4481250000, -2.8521450000], [-81.3935937500, -2.8748987500], [-81.3390625000, -2.8976525000], [-81.2845312500, -2.9204062500], [-81.2300000000, -2.9431600000], [-81.1754687500, -2.9659137500], [-81.1209375000, -2.9886675000], [-81.0664062500, -3.0114212500], [-81.0118750000, -3.0341750000], [-80.9573437500, -3.0569287500], [-80.9028125000, -3.0796825000], [-80.8482812500, -3.1024362500], [-80.7937500000, -3.1251900000], [-80.7392187500, -3.1479437500], [-80.6846875000, -3.1706975000], [-80.6301562500, -3.1934512500], [-80.5756250000, -3.2162050000], [-80.5210937500, -3.2389587500], [-80.4665625000, -3.2617125000], [-80.4120312500, -3.2844662500], [-80.3575000000, -3.3072200000], [-80.3029687500, -3.3299737500], [-80.2484375000, -3.3527275000], [-80.1939062500, -3.3754812500], [-80.1393750000, -3.3982350000], [-80.0848437500, -3.4209887500], [-80.0303125000, -3.4437425000], [-79.9757812500, -3.4664962500], [-79.9212500000, -3.4892500000], [-79.8667187500, -3.5120037500], [-79.8121875000, -3.5347575000], [-79.7576562500, -3.5575112500], [-79.7031250000, -3.5802650000], [-79.6485937500, -3.6030187500], [-79.5940625000, -3.6257725000], [-79.5395312500, -3.6485262500], [-79.4850000000, -3.6712800000], [-79.4021843750, -3.7066823437], [-79.3193687500, -3.7420846875], [-79.2365531250, -3.7774870313], [-79.1537375000, -3.8128893750], [-79.0709218750, -3.8482917188], [-78.9881062500, -3.8836940625], [-78.9052906250, -3.9190964062], [-78.8224750000, -3.9544987500], [-78.7396593750, -3.9899010937], [-78.6568437500, -4.0253034375], [-78.5740281250, -4.0607057813], [-78.4912125000, -4.0961081250], [-78.4083968750, -4.1315104687], [-78.3255812500, -4.1669128125], [-78.2427656250, -4.2023151563], [-78.1599500000, -4.2377175000], [-78.0771343750, -4.2731198437], [-77.9943187500, -4.3085221875], [-77.9115031250, -4.3439245312], [-77.8286875000, -4.3793268750], [-77.7458718750, -4.4147292188], [-77.6630562500, -4.4501315625], [-77.5802406250, -4.4855339062], [-77.4974250000, -4.5209362500], [-77.4146093750, -4.5563385938], [-77.3317937500, -4.5917409375], [-77.2489781250, -4.6271432812], [-77.1661625000, -4.6625456250], [-77.0833468750, -4.6979479688], [-77.0005312500, -4.7333503125], [-76.9177156250, -4.7687526562], [-76.8349000000, -4.8041550000], [-76.7520843750, -4.8395573438], [-76.6692687500, -4.8749596875], [-76.5864531250, -4.9103620312], [-76.5036375000, -4.9457643750], [-76.4208218750, -4.9811667187], [-76.3380062500, -5.0165690625], [-76.2551906250, -5.0519714062], [-76.1723750000, -5.0873737500], [-76.0895593750, -5.1227760937], [-76.0067437500, -5.1581784375], [-75.9239281250, -5.1935807812], [-75.8411125000, -5.2289831250], [-75.7582968750, -5.2643854687], [-75.6754812500, -5.2997878125], [-75.5926656250, -5.3351901563], [-75.5098500000, -5.3705925000], [-75.4270343750, -5.4059948437], [-75.3442187500, -5.4413971875], [-75.2614031250, -5.4767995313], [-75.1785875000, -5.5122018750], [-75.0957718750, -5.5476042188], [-75.0129562500, -5.5830065625], [-74.9301406250, -5.6184089063], [-74.8473250000, -5.6538112500], [-74.7645093750, -5.6892135938], [-74.6816937500, -5.7246159375], [-74.5988781250, -5.7600182812], [-74.5160625000, -5.7954206250], [-74.4332468750, -5.8308229688], [-74.3504312500, -5.8662253125], [-74.2676156250, -5.9016276562], [-74.1848000000, -5.9370300000], [-74.1147250000, -5.9651125000], [-74.0446500000, -5.9931950000], [-73.9745750000, -6.0212775000], [-73.9045000000, -6.0493600000], [-73.8396250000, -6.0749500000], [-73.7747500000, -6.1005400000], [-73.7098750000, -6.1261300000], [-73.6450000000, -6.1517200000], [-73.5953437500, -6.1715543750], [-73.5456875000, -6.1913887500], [-73.4960312500, -6.2112231250], [-73.4463750000, -6.2310575000], [-73.3967187500, -6.2508918750], [-73.3470625000, -6.2707262500], [-73.2974062500, -6.2905606250], [-73.2477500000, -6.3103950000], [-73.1980937500, -6.3302293750], [-73.1484375000, -6.3500637500], [-73.0987812500, -6.3698981250], [-73.0491250000, -6.3897325000], [-72.9994687500, -6.4095668750], [-72.9498125000, -6.4294012500], [-72.9001562500, -6.4492356250], [-72.8505000000, -6.4690700000], [-72.8008437500, -6.4889043750], [-72.7511875000, -6.5087387500], [-72.7015312500, -6.5285731250], [-72.6518750000, -6.5484075000], [-72.6022187500, -6.5682418750], [-72.5525625000, -6.5880762500], [-72.5029062500, -6.6079106250], [-72.4532500000, -6.6277450000], [-72.4035937500, -6.6475793750], [-72.3539375000, -6.6674137500], [-72.3042812500, -6.6872481250], [-72.2546250000, -6.7070825000], [-72.2049687500, -6.7269168750], [-72.1553125000, -6.7467512500], [-72.1056562500, -6.7665856250], [-72.0560000000, -6.7864200000], [-71.9775000000, -6.8163293750], [-71.8990000000, -6.8462387500], [-71.8205000000, -6.8761481250], [-71.7420000000, -6.9060575000], [-71.6635000000, -6.9359668750], [-71.5850000000, -6.9658762500], [-71.5065000000, -6.9957856250], [-71.4280000000, -7.0256950000], [-71.3495000000, -7.0556043750], [-71.2710000000, -7.0855137500], [-71.1925000000, -7.1154231250], [-71.1140000000, -7.1453325000], [-71.0355000000, -7.1752418750], [-70.9570000000, -7.2051512500], [-70.8785000000, -7.2350606250], [-70.8000000000, -7.2649700000], [-70.7215000000, -7.2948793750], [-70.6430000000, -7.3247887500], [-70.5645000000, -7.3546981250], [-70.4860000000, -7.3846075000], [-70.4075000000, -7.4145168750], [-70.3290000000, -7.4444262500], [-70.2505000000, -7.4743356250], [-70.1720000000, -7.5042450000], [-70.0935000000, -7.5341543750], [-70.0150000000, -7.5640637500], [-69.9365000000, -7.5939731250], [-69.8580000000, -7.6238825000], [-69.7795000000, -7.6537918750], [-69.7010000000, -7.6837012500], [-69.6225000000, -7.7136106250], [-69.5440000000, -7.7435200000], [-69.4884265625, -7.7646165625], [-69.4328531250, -7.7857131250], [-69.3772796875, -7.8068096875], [-69.3217062500, -7.8279062500], [-69.2661328125, -7.8490028125], [-69.2105593750, -7.8700993750], [-69.1549859375, -7.8911959375], [-69.0994125000, -7.9122925000], [-69.0438390625, -7.9333890625], [-68.9882656250, -7.9544856250], [-68.9326921875, -7.9755821875], [-68.8771187500, -7.9966787500], [-68.8215453125, -8.0177753125], [-68.7659718750, -8.0388718750], [-68.7103984375, -8.0599684375], [-68.6548250000, -8.0810650000], [-68.5992515625, -8.1021615625], [-68.5436781250, -8.1232581250], [-68.4881046875, -8.1443546875], [-68.4325312500, -8.1654512500], [-68.3769578125, -8.1865478125], [-68.3213843750, -8.2076443750], [-68.2658109375, -8.2287409375], [-68.2102375000, -8.2498375000], [-68.1546640625, -8.2709340625], [-68.0990906250, -8.2920306250], [-68.0435171875, -8.3131271875], [-67.9879437500, -8.3342237500], [-67.9323703125, -8.3553203125], [-67.8767968750, -8.3764168750], [-67.8212234375, -8.3975134375], [-67.7656500000, -8.4186100000], [-67.7100765625, -8.4397065625], [-67.6545031250, -8.4608031250], [-67.5989296875, -8.4818996875], [-67.5433562500, -8.5029962500], [-67.4877828125, -8.5240928125], [-67.4322093750, -8.5451893750], [-67.3766359375, -8.5662859375], [-67.3210625000, -8.5873825000], [-67.2654890625, -8.6084790625], [-67.2099156250, -8.6295756250], [-67.1543421875, -8.6506721875], [-67.0987687500, -8.6717687500], [-67.0431953125, -8.6928653125], [-66.9876218750, -8.7139618750], [-66.9320484375, -8.7350584375], [-66.8764750000, -8.7561550000], [-66.8209015625, -8.7772515625], [-66.7653281250, -8.7983481250], [-66.7097546875, -8.8194446875], [-66.6541812500, -8.8405412500], [-66.5986078125, -8.8616378125], [-66.5430343750, -8.8827343750], [-66.4874609375, -8.9038309375], [-66.4318875000, -8.9249275000], [-66.3763140625, -8.9460240625], [-66.3207406250, -8.9671206250], [-66.2651671875, -8.9882171875], [-66.2095937500, -9.0093137500], [-66.1540203125, -9.0304103125], [-66.0984468750, -9.0515068750], [-66.0428734375, -9.0726034375], [-65.9873000000, -9.0937000000], [-65.9023000000, -9.1249800000], [-65.8536062500, -9.1420146875], [-65.8049125000, -9.1590493750], [-65.7562187500, -9.1760840625], [-65.7075250000, -9.1931187500], [-65.6588312500, -9.2101534375], [-65.6101375000, -9.2271881250], [-65.5614437500, -9.2442228125], [-65.5127500000, -9.2612575000], [-65.4640562500, -9.2782921875], [-65.4153625000, -9.2953268750], [-65.3666687500, -9.3123615625], [-65.3179750000, -9.3293962500], [-65.2692812500, -9.3464309375], [-65.2205875000, -9.3634656250], [-65.1718937500, -9.3805003125], [-65.1232000000, -9.3975350000], [-65.0745062500, -9.4145696875], [-65.0258125000, -9.4316043750], [-64.9771187500, -9.4486390625], [-64.9284250000, -9.4656737500], [-64.8797312500, -9.4827084375], [-64.8310375000, -9.4997431250], [-64.7823437500, -9.5167778125], [-64.7336500000, -9.5338125000], [-64.6849562500, -9.5508471875], [-64.6362625000, -9.5678818750], [-64.5875687500, -9.5849165625], [-64.5388750000, -9.6019512500], [-64.4901812500, -9.6189859375], [-64.4414875000, -9.6360206250], [-64.3927937500, -9.6530553125], [-64.3441000000, -9.6700900000], [-64.2954062500, -9.6871246875], [-64.2467125000, -9.7041593750], [-64.1980187500, -9.7211940625], [-64.1493250000, -9.7382287500], [-64.1006312500, -9.7552634375], [-64.0519375000, -9.7722981250], [-64.0032437500, -9.7893328125], [-63.9545500000, -9.8063675000], [-63.9058562500, -9.8234021875], [-63.8571625000, -9.8404368750], [-63.8084687500, -9.8574715625], [-63.7597750000, -9.8745062500], [-63.7110812500, -9.8915409375], [-63.6623875000, -9.9085756250], [-63.6136937500, -9.9256103125], [-63.5650000000, -9.9426450000], [-63.5163062500, -9.9596796875], [-63.4676125000, -9.9767143750], [-63.4189187500, -9.9937490625], [-63.3702250000, -10.0107837500], [-63.3215312500, -10.0278184375], [-63.2728375000, -10.0448531250], [-63.2241437500, -10.0618878125], [-63.1754500000, -10.0789225000], [-63.1267562500, -10.0959571875], [-63.0780625000, -10.1129918750], [-63.0293687500, -10.1300265625], [-62.9806750000, -10.1470612500], [-62.9319812500, -10.1640959375], [-62.8832875000, -10.1811306250], [-62.8345937500, -10.1981653125], [-62.7859000000, -10.2152000000], [-62.7122500000, -10.2408687500], [-62.6386000000, -10.2665375000], [-62.5649500000, -10.2922062500], [-62.4913000000, -10.3178750000], [-62.4176500000, -10.3435437500], [-62.3440000000, -10.3692125000], [-62.2703500000, -10.3948812500], [-62.1967000000, -10.4205500000], [-62.1230500000, -10.4462187500], [-62.0494000000, -10.4718875000], [-61.9757500000, -10.4975562500], [-61.9021000000, -10.5232250000], [-61.8284500000, -10.5488937500], [-61.7548000000, -10.5745625000], [-61.6811500000, -10.6002312500], [-61.6075000000, -10.6259000000], [-61.5236062500, -10.6551218750], [-61.4397125000, -10.6843437500], [-61.3558187500, -10.7135656250], [-61.2719250000, -10.7427875000], [-61.1880312500, -10.7720093750], [-61.1041375000, -10.8012312500], [-61.0202437500, -10.8304531250], [-60.9363500000, -10.8596750000], [-60.8524562500, -10.8888968750], [-60.7685625000, -10.9181187500], [-60.6846687500, -10.9473406250], [-60.6007750000, -10.9765625000], [-60.5168812500, -11.0057843750], [-60.4329875000, -11.0350062500], [-60.3490937500, -11.0642281250], [-60.2652000000, -11.0934500000], [-60.1813062500, -11.1226718750], [-60.0974125000, -11.1518937500], [-60.0135187500, -11.1811156250], [-59.9296250000, -11.2103375000], [-59.8457312500, -11.2395593750], [-59.7618375000, -11.2687812500], [-59.6779437500, -11.2980031250], [-59.5940500000, -11.3272250000], [-59.5101562500, -11.3564468750], [-59.4262625000, -11.3856687500], [-59.3423687500, -11.4148906250], [-59.2584750000, -11.4441125000], [-59.1745812500, -11.4733343750], [-59.0906875000, -11.5025562500], [-59.0067937500, -11.5317781250], [-58.9229000000, -11.5610000000], [-58.8390062500, -11.5902218750], [-58.7551125000, -11.6194437500], [-58.6712187500, -11.6486656250], [-58.5873250000, -11.6778875000], [-58.5034312500, -11.7071093750], [-58.4195375000, -11.7363312500], [-58.3356437500, -11.7655531250], [-58.2517500000, -11.7947750000], [-58.1678562500, -11.8239968750], [-58.0839625000, -11.8532187500], [-58.0000687500, -11.8824406250], [-57.9161750000, -11.9116625000], [-57.8322812500, -11.9408843750], [-57.7483875000, -11.9701062500], [-57.6644937500, -11.9993281250], [-57.5806000000, -12.0285500000], [-57.4967062500, -12.0577718750], [-57.4128125000, -12.0869937500], [-57.3289187500, -12.1162156250], [-57.2450250000, -12.1454375000], [-57.1611312500, -12.1746593750], [-57.0772375000, -12.2038812500], [-56.9933437500, -12.2331031250], [-56.9094500000, -12.2623250000], [-56.8255562500, -12.2915468750], [-56.7416625000, -12.3207687500], [-56.6577687500, -12.3499906250], [-56.5738750000, -12.3792125000], [-56.4899812500, -12.4084343750], [-56.4060875000, -12.4376562500], [-56.3221937500, -12.4668781250], [-56.2383000000, -12.4961000000], [-56.2235000000, -12.5010000000], [-56.1585625000, -12.5223000000], [-56.0936250000, -12.5436000000], [-56.0286875000, -12.5649000000], [-55.9637500000, -12.5862000000], [-55.8988125000, -12.6075000000], [-55.8338750000, -12.6288000000], [-55.7689375000, -12.6501000000], [-55.7040000000, -12.6714000000], [-55.6326000000, -12.6948125000], [-55.5612000000, -12.7182250000], [-55.4898000000, -12.7416375000], [-55.4184000000, -12.7650500000], [-55.3470000000, -12.7884625000], [-55.2756000000, -12.8118750000], [-55.2042000000, -12.8352875000], [-55.1328000000, -12.8587000000], [-55.0614000000, -12.8821125000], [-54.9900000000, -12.9055250000], [-54.9186000000, -12.9289375000], [-54.8472000000, -12.9523500000], [-54.7758000000, -12.9757625000], [-54.7044000000, -12.9991750000], [-54.6330000000, -13.0225875000], [-54.5616000000, -13.0460000000], [-54.4819812500, -13.0707125000], [-54.4023625000, -13.0954250000], [-54.3227437500, -13.1201375000], [-54.2431250000, -13.1448500000], [-54.1635062500, -13.1695625000], [-54.0838875000, -13.1942750000], [-54.0042687500, -13.2189875000], [-53.9246500000, -13.2437000000], [-53.8450312500, -13.2684125000], [-53.7654125000, -13.2931250000], [-53.6857937500, -13.3178375000], [-53.6061750000, -13.3425500000], [-53.5265562500, -13.3672625000], [-53.4469375000, -13.3919750000], [-53.3673187500, -13.4166875000], [-53.2877000000, -13.4414000000], [-53.2080812500, -13.4661125000], [-53.1284625000, -13.4908250000], [-53.0488437500, -13.5155375000], [-52.9692250000, -13.5402500000], [-52.8896062500, -13.5649625000], [-52.8099875000, -13.5896750000], [-52.7303687500, -13.6143875000], [-52.6507500000, -13.6391000000], [-52.5711312500, -13.6638125000], [-52.4915125000, -13.6885250000], [-52.4118937500, -13.7132375000], [-52.3322750000, -13.7379500000], [-52.2526562500, -13.7626625000], [-52.1730375000, -13.7873750000], [-52.0934187500, -13.8120875000], [-52.0138000000, -13.8368000000], [-51.9223203125, -13.8652328125], [-51.8308406250, -13.8936656250], [-51.7393609375, -13.9220984375], [-51.6478812500, -13.9505312500], [-51.5564015625, -13.9789640625], [-51.4649218750, -14.0073968750], [-51.3734421875, -14.0358296875], [-51.2819625000, -14.0642625000], [-51.1904828125, -14.0926953125], [-51.0990031250, -14.1211281250], [-51.0075234375, -14.1495609375], [-50.9160437500, -14.1779937500], [-50.8245640625, -14.2064265625], [-50.7330843750, -14.2348593750], [-50.6416046875, -14.2632921875], [-50.5501250000, -14.2917250000], [-50.4586453125, -14.3201578125], [-50.3671656250, -14.3485906250], [-50.2756859375, -14.3770234375], [-50.1842062500, -14.4054562500], [-50.0927265625, -14.4338890625], [-50.0012468750, -14.4623218750], [-49.9097671875, -14.4907546875], [-49.8182875000, -14.5191875000], [-49.7268078125, -14.5476203125], [-49.6353281250, -14.5760531250], [-49.5438484375, -14.6044859375], [-49.4523687500, -14.6329187500], [-49.3608890625, -14.6613515625], [-49.2694093750, -14.6897843750], [-49.1779296875, -14.7182171875], [-49.0864500000, -14.7466500000], [-48.9949703125, -14.7750828125], [-48.9034906250, -14.8035156250], [-48.8120109375, -14.8319484375], [-48.7205312500, -14.8603812500], [-48.6290515625, -14.8888140625], [-48.5375718750, -14.9172468750], [-48.4460921875, -14.9456796875], [-48.3546125000, -14.9741125000], [-48.2631328125, -15.0025453125], [-48.1716531250, -15.0309781250], [-48.0801734375, -15.0594109375], [-47.9886937500, -15.0878437500], [-47.8972140625, -15.1162765625], [-47.8057343750, -15.1447093750], [-47.7142546875, -15.1731421875], [-47.6227750000, -15.2015750000], [-47.5312953125, -15.2300078125], [-47.4398156250, -15.2584406250], [-47.3483359375, -15.2868734375], [-47.2568562500, -15.3153062500], [-47.1653765625, -15.3437390625], [-47.0738968750, -15.3721718750], [-46.9824171875, -15.4006046875], [-46.8909375000, -15.4290375000], [-46.7994578125, -15.4574703125], [-46.7079781250, -15.4859031250], [-46.6164984375, -15.5143359375], [-46.5250187500, -15.5427687500], [-46.4335390625, -15.5712015625], [-46.3420593750, -15.5996343750], [-46.2505796875, -15.6280671875], [-46.1591000000, -15.6565000000], [-46.1271000000, -15.6660000000], [-46.0685687500, -15.6829125000], [-46.0100375000, -15.6998250000], [-45.9515062500, -15.7167375000], [-45.8929750000, -15.7336500000], [-45.8344437500, -15.7505625000], [-45.7759125000, -15.7674750000], [-45.7173812500, -15.7843875000], [-45.6588500000, -15.8013000000], [-45.6003187500, -15.8182125000], [-45.5417875000, -15.8351250000], [-45.4832562500, -15.8520375000], [-45.4247250000, -15.8689500000], [-45.3661937500, -15.8858625000], [-45.3076625000, -15.9027750000], [-45.2491312500, -15.9196875000], [-45.1906000000, -15.9366000000], [-45.1320687500, -15.9535125000], [-45.0735375000, -15.9704250000], [-45.0150062500, -15.9873375000], [-44.9564750000, -16.0042500000], [-44.8979437500, -16.0211625000], [-44.8394125000, -16.0380750000], [-44.7808812500, -16.0549875000], [-44.7223500000, -16.0719000000], [-44.6638187500, -16.0888125000], [-44.6052875000, -16.1057250000], [-44.5467562500, -16.1226375000], [-44.4882250000, -16.1395500000], [-44.4296937500, -16.1564625000], [-44.3711625000, -16.1733750000], [-44.3126312500, -16.1902875000], [-44.2541000000, -16.2072000000], [-44.2033750000, -16.2213757812], [-44.1526500000, -16.2355515625], [-44.1019250000, -16.2497273437], [-44.0512000000, -16.2639031250], [-44.0004750000, -16.2780789062], [-43.9497500000, -16.2922546875], [-43.8990250000, -16.3064304688], [-43.8483000000, -16.3206062500], [-43.7975750000, -16.3347820313], [-43.7468500000, -16.3489578125], [-43.6961250000, -16.3631335938], [-43.6454000000, -16.3773093750], [-43.5946750000, -16.3914851563], [-43.5439500000, -16.4056609375], [-43.4932250000, -16.4198367188], [-43.4425000000, -16.4340125000], [-43.3917750000, -16.4481882813], [-43.3410500000, -16.4623640625], [-43.2903250000, -16.4765398438], [-43.2396000000, -16.4907156250], [-43.1888750000, -16.5048914062], [-43.1381500000, -16.5190671875], [-43.0874250000, -16.5332429687], [-43.0367000000, -16.5474187500], [-42.9859750000, -16.5615945312], [-42.9352500000, -16.5757703125], [-42.8845250000, -16.5899460937], [-42.8338000000, -16.6041218750], [-42.7830750000, -16.6182976562], [-42.7323500000, -16.6324734375], [-42.6816250000, -16.6466492187], [-42.6309000000, -16.6608250000], [-42.5801750000, -16.6750007812], [-42.5294500000, -16.6891765625], [-42.4787250000, -16.7033523438], [-42.4280000000, -16.7175281250], [-42.3772750000, -16.7317039063], [-42.3265500000, -16.7458796875], [-42.2758250000, -16.7600554688], [-42.2251000000, -16.7742312500], [-42.1743750000, -16.7884070312], [-42.1236500000, -16.8025828125], [-42.0729250000, -16.8167585937], [-42.0222000000, -16.8309343750], [-41.9714750000, -16.8451101562], [-41.9207500000, -16.8592859375], [-41.8700250000, -16.8734617187], [-41.8193000000, -16.8876375000], [-41.7685750000, -16.9018132812], [-41.7178500000, -16.9159890625], [-41.6671250000, -16.9301648437], [-41.6164000000, -16.9443406250], [-41.5656750000, -16.9585164062], [-41.5149500000, -16.9726921875], [-41.4642250000, -16.9868679687], [-41.4135000000, -17.0010437500], [-41.3627750000, -17.0152195312], [-41.3120500000, -17.0293953125], [-41.2613250000, -17.0435710937]]);
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
import math
import time

from stl import mesh, Dimension

from tkinter import Tk     # from tkinter import Tk for Python 3.x
from tkinter.filedialog import askopenfilename
from mpl_toolkits.mplot3d import art3d
from matplotlib import pyplot as plt
import solid
import os
import ezdxf
import shapely.geometry as sg
import subprocess
from GUI import getSCADPath



def outputSTL(From, To, PATH=getSCADPath()):
    subprocess.Popen(PATH + " -o " + To + " " + From)
    while not os.path.exists(To):
        time.sleep(1)


def get_size(i):
    x_list = [int(a) for a in str(i)]
    return len(x_list)



class Model:
    def __init__(self, model, fileName, location, layer, thickness):
        self.location = location
        self.code = None
        self.fileName = fileName
        self.stl = fileName + ".stl"
        self.layer = layer
        self.thickness = thickness
        self.maxz = (layer+1)*thickness
        self.dxf = fileName + ".dxf"
        self.scad = fileName + ".scad"
        self.model = model
        self.center = None
        self.width = 10
        self.mesh = None
        self.useable_area = None


    def get_code(self):
        max_dim = 0.05
        max_array = 6

        num = int(self.fileName)
        nums = [int(a) for a in str(num)]
        nums.reverse()
        indices = nums
        length = len(nums)

        print(indices)
        t = 0
        i = 0
        cubes = []
        x = 0
        y = 0
        width = 0.01
        while x <= max_dim:
            while y <= max_dim:
                print(indices)
                if nums == []:
                    break
                if indices[0] != 0:
                    cubes.append(solid.translate([x, y, 0])(solid.cube(size=t / 1000 + 0.001)))
                    y += max_dim / (max_array - 1)
                    nums[0] = nums[0] - 1
                else:
                    indices.pop(0)
                    t += 1
                i += 1
            x += max_dim / (max_array - 1)
            y = 0

        outside = solid.translate([-width / 2, -width / 2])(solid.cube(max_dim + (length - 1) / 1000 + 0.001 + width))
        self.code = solid.difference()(outside, cubes)
        self.code = solid.projection(cut=True)(self.code)
        solid.scad_render_to_file(self.code, self.location + "/code.scad")
        outputSTL(From=self.location+"/code.scad", To=self.location+"code.dxf", PATH=getSCADPath())
        # os.system("toSTL.sh renders/code.scad renders/code.dxf")
        return self.location+"/code.dxf"

    def download(self, type):
        if type =="stl":
            print("generating:" + self.location+"/"+ self.fileName+".stl")
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".stl")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".stl")
        elif type == "dxf":
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".dxf")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".dxf")

    def render(self):
        solid.scad_render_to_file(self.model, self.location+"/"+ self.fileName+'.scad')
        while not os.path.exists(self.location+"/"+self.fileName+".scad"):
            time.sleep(1)

    def get_points(self):
        doc = ezdxf.readfile(filename=self.location+"/"+ self.fileName+".dxf")
        msp = doc.modelspace()
        i=0
        lists = []
        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return [start, end]

        for e in msp.query("LINE"):
            line = helper(e)
            if not lists:
                lists.append([line])
            else:
                if lists[i][len(lists)-1][1] != line[0]:
                    lists.append([line])
                    i+=1
                else:
                    lists[i].append(line)

    def get_points2(self, FILE):
        doc = ezdxf.readfile(filename=FILE)
        msp = doc.modelspace()
        i = 0
        lists = []

        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return (start, end)

        for e in msp.query("LINE"):
            line = helper(e)
            if lists==[]:
                lists.append([line])
            else:
                if lists[i][len(lists[i]) - 1][1] != line[0]:
                    lists.append([line])
                    i += 1
                else:
                    lists[i].append(line)
        return lists

    def add_code(self):
        dxf = solid.projection(cut=False)(self.model)
        offset = solid.offset(r=-0.1)(dxf)
        solid.scad_render_to_file(offset, self.location+'/offset.scad')
        os.system("toSTL.sh renders/offset.scad renders/offset.dxf")
        lines = self.get_points2("renders/offset.dxf")
        x = lines[0][0][0][0]
        y = lines[0][0][0][1]
        print(x)
        print(y)
        code = solid.translate([x,y,0])(self.code)
        code = solid.linear_extrude(height=999)(code)
        save = self.model
        self.model = solid.projection()(solid.difference()(self.model, code))
        self.render()
        self.download("dxf")
        self.model = save

    def add_label(self, pos):
        # num = 12
        # minx, maxx, miny, maxy, minz, maxz = self.find_minmax()
        maxz = self.maxz
        # label = solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.5, halign="center"))
        # i=minx
        # print("x-len: " + str(maxx-minx))
        # print(i)
        # inc = (maxx-minx)/num
        # while minx <= i <= maxx:
        #     label = solid.union()(solid.translate([i, 0, maxz - 0.2])(solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.25, halign="center"))), label)
        #     i += inc
        #
        # l = label
        #
        # i =miny
        # while miny<= i <= maxy:
        #     print("y inc")
        #     l = solid.union()(solid.translate([0, i, 0])(label), l)
        #     i += 0.5
        for i in str(self.fileName):
            cur = pos[0]
            label = solid.translate([pos[0][0], pos[0][1], self.maxz-0.2])(solid.linear_extrude(height=(self.thickness)/3)(solid.text(str(i), size=0.5, halign="center", valign="center")))
            self.model = solid.difference()(self.model, label)
            pos.append(pos.pop(0))
            while abs(cur[0]-pos[0][0])<0.5 and abs(cur[1]-pos[0][1])<0.5:
                pos.append(pos.pop(0))



    def Center(self):

        volume, cog, inertia = self.mesh.get_mass_properties()
        print("Volume                                  = {0}".format(volume))
        print("Position of the center of gravity (COG) = {0}".format(cog))
        m_centered = solid.translate([-cog[0], -cog[1], 0])(
            self.model
        )
        return m_centered

    def find_minmax(self):
        minx = maxx = miny = maxy = minz = maxz = None
        for p in self.mesh.points:
            # p contains (x, y, z)
            if minx is None:
                minx = p[Dimension.X]
                maxx = p[Dimension.X]
                miny = p[Dimension.Y]
                maxy = p[Dimension.Y]
                minz = p[Dimension.Z]
                maxz = p[Dimension.Z]
            else:
                maxx = max(p[Dimension.X], maxx)
                minx = min(p[Dimension.X], minx)
                maxy = max(p[Dimension.Y], maxy)
                miny = min(p[Dimension.Y], miny)
                maxz = max(p[Dimension.Z], maxz)
                minz = min(p[Dimension.Z], minz)
        lenx = maxx - minx
        leny = maxy - miny
        lenz = maxz - minz
        return minx, maxx, miny, maxy, minz, maxz

    # def generate_Mesh(self):
    #     self.mesh = mesh.Mesh.from_file(self.location + "/" + str(int(self.fileName)//8)+ "b.stl")

    def get_top(self):
        top = solid.projection(cut=True)(solid.translate([0,0,-1*self.thickness*(self.layer+1)])(self.model))
        useable_area = solid.offset(r=-0.45)(top)
        self.useable_area = useable_area
        solid.scad_render_to_file(self.useable_area, self.location+'/' + 'toptemp.scad')
        outputSTL(From=self.location+'/' + 'toptemp.scad', To=self.location+"/top"+ self.dxf)

        # os.system("toSTL.sh out/toptemp.scad renders/" + self.fileName + ".dxf")
        dxf = DXF(self.location+"/top"+ self.dxf)
        min_p=dxf.points[0][0]
        points_ordered = dxf.points
        i=0
        while i <= len(dxf.points)+1:
            while math.sqrt((dxf.points[0][0]-dxf.points[1][0])**2+(dxf.points[0][1]-dxf.points[1][1])**2) > 0.1:
                dxf.points.insert(1, [(dxf.points[0][0]+dxf.points[1][0])/2, (dxf.points[0][1]+dxf.points[1][1])/2])
                i = i-1
            dxf.points.append(dxf.points.pop(0))
            i+=1
        for i in range(len(dxf.points)):
            dxf.points.append(dxf.points.pop(0))
            if dxf.points[0][0] < min_p:
                min_p = dxf.points[0][0]
                points_ordered = dxf.points.copy()
        dxf.points = points_ordered.copy()

        print(dxf.points)
        self.add_label(dxf.points)

class DXF:
    def __init__(self, file):
        self.file = file
        self.Lines = []
        self.points = []
        doc = ezdxf.readfile(self.file)
        msp = doc.modelspace()
        for e in msp:
            if e.dxftype() == "LINE":
                self.Lines.append(e)
                self.points.append([e.dxf.start[0], e.dxf.start[1]])
        # self.points.append([self.Lines[-1].dxf.end[0], self.Lines[-1].dxf.end[1]])
        self.area = None
        self.center = None
        self.polygon = sg.Polygon(self.points)

    def get_area(self):
        self.area = self.polygon.area
        return self.area

    def get_center(self):
        x_sum = 0
        y_sum =0
        for i in self.points:
            x_sum += i[0]
            y_sum += i[1]
        x_c = x_sum/len(self.points)
        y_c = y_sum/len(self.points)
        return (x_c, y_c)

    def split(self, maxdim):
        splits = []
        length = 0
        pieces = [[]]
        prev = self.points[0]
        for j in self.points:
            length = length + math.sqrt((prev[0]-j[0])**2+(prev[1]-j[1])**2)
            if length >= maxdim:
                pieces[-1].append(j)
                pieces.append([])
                length = 0
            pieces[-1].append(j)
            prev = j
        for j in pieces:
            j.insert(0, [0,0])
            piece = solid.linear_extrude(height=10)(solid.polygon(j))
            splits.append(piece)
        return splits
    def refine_points(self):
        i=0
        while i <= len(self.points)+1:
            while math.sqrt((self.points[0][0]-self.points[1][0])**2+(self.points[0][1]-self.points[1][1])**2) > 0.1:
                self.points.insert(1, [(self.points[0][0]+self.points[1][0])/2, (self.points[0][1]+self.points[1][1])/2])
                i = i-1
            self.points.append(self.points.pop(0))
            i+=1


if __name__== "__main__":
    test = DXF("C:/Users/Daniel/Documents/repos/Shell_Maker/output/0top_slice.dxf")
    test.refine_points()
    k = test.split(48)
    for i in range(len(k)):
        solid.scad_render_to_file(k[i], str(i) + ".scad")


 
 
************************************************/
