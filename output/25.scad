// Generated by SolidPython 1.1.3 on 2024-05-19 23:41:32


intersection() {
	difference() {
		intersection() {
			translate(v = [0, 0, 0]) {
				import(file = "CE3E3V2_Bottom_shell.stl", origin = [0, 0]);
			}
			translate(v = [-90.04029846191406, -32.690147399902344, 4]) {
				cube(size = [180.0806, 65.380295, 2]);
			}
		}
		linear_extrude(height = 999) {
			offset(r = -1) {
				import(file = "C:/Users/Daniel/Documents/repos/Shell_Maker/output/2top_slice.dxf", origin = [0, 0]);
			}
		}
	}
	translate(v = [0, 0, 4]) {
		linear_extrude(height = 10) {
			polygon(points = [[0, 0], [-39.6008992188, -17.5014914063], [-39.5389015625, -17.5188171875], [-39.4769039063, -17.5361429687], [-39.4149062500, -17.5534687500], [-39.3529085938, -17.5707945313], [-39.2909109375, -17.5881203125], [-39.2289132813, -17.6054460938], [-39.1669156250, -17.6227718750], [-39.1049179688, -17.6400976562], [-39.0429203125, -17.6574234375], [-38.9809226563, -17.6747492188], [-38.9189250000, -17.6920750000], [-38.8569273438, -17.7094007813], [-38.7949296875, -17.7267265625], [-38.7329320313, -17.7440523437], [-38.6709343750, -17.7613781250], [-38.6089367188, -17.7787039063], [-38.5469390625, -17.7960296875], [-38.4849414063, -17.8133554688], [-38.4229437500, -17.8306812500], [-38.3609460938, -17.8480070312], [-38.2989484375, -17.8653328125], [-38.2369507813, -17.8826585938], [-38.1749531250, -17.8999843750], [-38.1129554688, -17.9173101563], [-38.0509578125, -17.9346359375], [-37.9889601563, -17.9519617187], [-37.9269625000, -17.9692875000], [-37.8649648438, -17.9866132813], [-37.8029671875, -18.0039390625], [-37.7409695313, -18.0212648438], [-37.6789718750, -18.0385906250], [-37.6169742188, -18.0559164062], [-37.5549765625, -18.0732421875], [-37.4929789063, -18.0905679688], [-37.4309812500, -18.1078937500], [-37.3689835938, -18.1252195313], [-37.3069859375, -18.1425453125], [-37.2449882813, -18.1598710937], [-37.1829906250, -18.1771968750], [-37.1209929688, -18.1945226563], [-37.0589953125, -18.2118484375], [-36.9969976563, -18.2291742188], [-36.9350000000, -18.2465000000], [-36.8833562500, -18.2605562500], [-36.8317125000, -18.2746125000], [-36.7800687500, -18.2886687500], [-36.7284250000, -18.3027250000], [-36.6767812500, -18.3167812500], [-36.6251375000, -18.3308375000], [-36.5734937500, -18.3448937500], [-36.5218500000, -18.3589500000], [-36.4702062500, -18.3730062500], [-36.4185625000, -18.3870625000], [-36.3669187500, -18.4011187500], [-36.3152750000, -18.4151750000], [-36.2636312500, -18.4292312500], [-36.2119875000, -18.4432875000], [-36.1603437500, -18.4573437500], [-36.1087000000, -18.4714000000], [-36.0383375000, -18.4903625000], [-35.9679750000, -18.5093250000], [-35.8976125000, -18.5282875000], [-35.8272500000, -18.5472500000], [-35.7568875000, -18.5662125000], [-35.6865250000, -18.5851750000], [-35.6161625000, -18.6041375000], [-35.5458000000, -18.6231000000], [-35.4754375000, -18.6420625000], [-35.4050750000, -18.6610250000], [-35.3347125000, -18.6799875000], [-35.2643500000, -18.6989500000], [-35.1939875000, -18.7179125000], [-35.1236250000, -18.7368750000], [-35.0532625000, -18.7558375000], [-34.9829000000, -18.7748000000], [-34.8919312500, -18.7984500000], [-34.8009625000, -18.8221000000], [-34.7099937500, -18.8457500000], [-34.6190250000, -18.8694000000], [-34.5280562500, -18.8930500000], [-34.4370875000, -18.9167000000], [-34.3461187500, -18.9403500000], [-34.2551500000, -18.9640000000], [-34.1641812500, -18.9876500000], [-34.0732125000, -19.0113000000], [-33.9822437500, -19.0349500000], [-33.8912750000, -19.0586000000], [-33.8003062500, -19.0822500000], [-33.7093375000, -19.1059000000], [-33.6183687500, -19.1295500000], [-33.5274000000, -19.1532000000], [-33.4703937500, -19.1675937500], [-33.4133875000, -19.1819875000], [-33.3563812500, -19.1963812500], [-33.2993750000, -19.2107750000], [-33.2423687500, -19.2251687500], [-33.1853625000, -19.2395625000], [-33.1283562500, -19.2539562500], [-33.0713500000, -19.2683500000], [-33.0143437500, -19.2827437500], [-32.9573375000, -19.2971375000], [-32.9003312500, -19.3115312500], [-32.8433250000, -19.3259250000], [-32.7863187500, -19.3403187500], [-32.7293125000, -19.3547125000], [-32.6723062500, -19.3691062500], [-32.6153000000, -19.3835000000], [-32.5607593750, -19.3967742188], [-32.5062187500, -19.4100484375], [-32.4516781250, -19.4233226563], [-32.3971375000, -19.4365968750], [-32.3425968750, -19.4498710937], [-32.2880562500, -19.4631453125], [-32.2335156250, -19.4764195313], [-32.1789750000, -19.4896937500], [-32.1244343750, -19.5029679687], [-32.0698937500, -19.5162421875], [-32.0153531250, -19.5295164063], [-31.9608125000, -19.5427906250], [-31.9062718750, -19.5560648438], [-31.8517312500, -19.5693390625], [-31.7971906250, -19.5826132813], [-31.7426500000, -19.5958875000], [-31.6881093750, -19.6091617188], [-31.6335687500, -19.6224359375], [-31.5790281250, -19.6357101563], [-31.5244875000, -19.6489843750], [-31.4699468750, -19.6622585938], [-31.4154062500, -19.6755328125], [-31.3608656250, -19.6888070313], [-31.3063250000, -19.7020812500], [-31.2517843750, -19.7153554688], [-31.1972437500, -19.7286296875], [-31.1427031250, -19.7419039063], [-31.0881625000, -19.7551781250], [-31.0336218750, -19.7684523437], [-30.9790812500, -19.7817265625], [-30.9245406250, -19.7950007813], [-30.8700000000, -19.8082750000], [-30.8154593750, -19.8215492188], [-30.7609187500, -19.8348234375], [-30.7063781250, -19.8480976563], [-30.6518375000, -19.8613718750], [-30.5972968750, -19.8746460938], [-30.5427562500, -19.8879203125], [-30.4882156250, -19.9011945312], [-30.4336750000, -19.9144687500], [-30.3791343750, -19.9277429688], [-30.3245937500, -19.9410171875], [-30.2700531250, -19.9542914063], [-30.2155125000, -19.9675656250], [-30.1609718750, -19.9808398437], [-30.1064312500, -19.9941140625], [-30.0518906250, -20.0073882813], [-29.9973500000, -20.0206625000], [-29.9428093750, -20.0339367187], [-29.8882687500, -20.0472109375], [-29.8337281250, -20.0604851563], [-29.7791875000, -20.0737593750], [-29.7246468750, -20.0870335938], [-29.6701062500, -20.1003078125], [-29.6155656250, -20.1135820312], [-29.5610250000, -20.1268562500], [-29.5064843750, -20.1401304688], [-29.4519437500, -20.1534046875], [-29.3974031250, -20.1666789062], [-29.3428625000, -20.1799531250], [-29.2883218750, -20.1932273437], [-29.2337812500, -20.2065015625], [-29.1792406250, -20.2197757813], [-29.1247000000, -20.2330500000], [-29.0701593750, -20.2463242187], [-29.0156187500, -20.2595984375], [-28.9610781250, -20.2728726563], [-28.9065375000, -20.2861468750], [-28.8519968750, -20.2994210937], [-28.7974562500, -20.3126953125], [-28.7429156250, -20.3259695312], [-28.6883750000, -20.3392437500], [-28.6338343750, -20.3525179687], [-28.5792937500, -20.3657921875], [-28.5247531250, -20.3790664062], [-28.4702125000, -20.3923406250], [-28.4156718750, -20.4056148437], [-28.3611312500, -20.4188890625], [-28.3065906250, -20.4321632812], [-28.2520500000, -20.4454375000], [-28.1975093750, -20.4587117187], [-28.1429687500, -20.4719859375], [-28.0884281250, -20.4852601562], [-28.0338875000, -20.4985343750], [-27.9793468750, -20.5118085937], [-27.9248062500, -20.5250828125], [-27.8702656250, -20.5383570313], [-27.8157250000, -20.5516312500], [-27.7611843750, -20.5649054687], [-27.7066437500, -20.5781796875], [-27.6521031250, -20.5914539063], [-27.5975625000, -20.6047281250], [-27.5430218750, -20.6180023437], [-27.4884812500, -20.6312765625], [-27.4339406250, -20.6445507812], [-27.3794000000, -20.6578250000], [-27.3248593750, -20.6710992188], [-27.2703187500, -20.6843734375], [-27.2157781250, -20.6976476562], [-27.1612375000, -20.7109218750], [-27.1066968750, -20.7241960937], [-27.0521562500, -20.7374703125], [-26.9976156250, -20.7507445312], [-26.9430750000, -20.7640187500], [-26.8885343750, -20.7772929687], [-26.8339937500, -20.7905671875], [-26.7794531250, -20.8038414063], [-26.7249125000, -20.8171156250], [-26.6703718750, -20.8303898437], [-26.6158312500, -20.8436640625], [-26.5612906250, -20.8569382813], [-26.5067500000, -20.8702125000], [-26.4522093750, -20.8834867187], [-26.3976687500, -20.8967609375], [-26.3431281250, -20.9100351563], [-26.2885875000, -20.9233093750], [-26.2340468750, -20.9365835938], [-26.1795062500, -20.9498578125], [-26.1249656250, -20.9631320312], [-26.0704250000, -20.9764062500], [-26.0158843750, -20.9896804688], [-25.9613437500, -21.0029546875], [-25.9068031250, -21.0162289062], [-25.8522625000, -21.0295031250], [-25.7977218750, -21.0427773437], [-25.7431812500, -21.0560515625], [-25.6886406250, -21.0693257813], [-25.6341000000, -21.0826000000], [-25.5825375000, -21.0949000000], [-25.5309750000, -21.1072000000], [-25.4794125000, -21.1195000000], [-25.4278500000, -21.1318000000], [-25.3762875000, -21.1441000000], [-25.3247250000, -21.1564000000], [-25.2731625000, -21.1687000000], [-25.2216000000, -21.1810000000], [-25.1700375000, -21.1933000000], [-25.1184750000, -21.2056000000], [-25.0669125000, -21.2179000000], [-25.0153500000, -21.2302000000], [-24.9637875000, -21.2425000000], [-24.9122250000, -21.2548000000], [-24.8606625000, -21.2671000000], [-24.8091000000, -21.2794000000], [-24.7175875000, -21.3005187500], [-24.6260750000, -21.3216375000], [-24.5345625000, -21.3427562500], [-24.4430500000, -21.3638750000], [-24.3515375000, -21.3849937500], [-24.2600250000, -21.4061125000], [-24.1685125000, -21.4272312500], [-24.0770000000, -21.4483500000], [-23.9854875000, -21.4694687500], [-23.8939750000, -21.4905875000], [-23.8024625000, -21.5117062500], [-23.7109500000, -21.5328250000], [-23.6194375000, -21.5539437500], [-23.5279250000, -21.5750625000], [-23.4364125000, -21.5961812500], [-23.3449000000, -21.6173000000], [-23.2556750000, -21.6371000000], [-23.1664500000, -21.6569000000], [-23.0772250000, -21.6767000000], [-22.9880000000, -21.6965000000], [-22.8987750000, -21.7163000000], [-22.8095500000, -21.7361000000], [-22.7203250000, -21.7559000000], [-22.6311000000, -21.7757000000], [-22.5562687500, -21.7912500000], [-22.4814375000, -21.8068000000], [-22.4066062500, -21.8223500000], [-22.3317750000, -21.8379000000], [-22.2569437500, -21.8534500000], [-22.1821125000, -21.8690000000], [-22.1072812500, -21.8845500000], [-22.0324500000, -21.9001000000], [-21.9576187500, -21.9156500000], [-21.8827875000, -21.9312000000], [-21.8079562500, -21.9467500000], [-21.7331250000, -21.9623000000], [-21.6582937500, -21.9778500000], [-21.5834625000, -21.9934000000], [-21.5086312500, -22.0089500000], [-21.4338000000, -22.0245000000], [-21.3766664063, -22.0368039063], [-21.3195328125, -22.0491078125], [-21.2623992188, -22.0614117187], [-21.2052656250, -22.0737156250], [-21.1481320313, -22.0860195312], [-21.0909984375, -22.0983234375], [-21.0338648438, -22.1106273438], [-20.9767312500, -22.1229312500], [-20.9195976563, -22.1352351563], [-20.8624640625, -22.1475390625], [-20.8053304688, -22.1598429687], [-20.7481968750, -22.1721468750], [-20.6910632813, -22.1844507812], [-20.6339296875, -22.1967546875], [-20.5767960938, -22.2090585937], [-20.5196625000, -22.2213625000], [-20.4625289063, -22.2336664062], [-20.4053953125, -22.2459703125], [-20.3482617188, -22.2582742187], [-20.2911281250, -22.2705781250], [-20.2339945313, -22.2828820313], [-20.1768609375, -22.2951859375], [-20.1197273438, -22.3074898437], [-20.0625937500, -22.3197937500], [-20.0054601563, -22.3320976562], [-19.9483265625, -22.3444015625], [-19.8911929688, -22.3567054687], [-19.8340593750, -22.3690093750], [-19.7769257813, -22.3813132812], [-19.7197921875, -22.3936171875], [-19.6626585938, -22.4059210937], [-19.6055250000, -22.4182250000], [-19.5483914063, -22.4305289063], [-19.4912578125, -22.4428328125], [-19.4341242188, -22.4551367188], [-19.3769906250, -22.4674406250], [-19.3198570313, -22.4797445313], [-19.2627234375, -22.4920484375], [-19.2055898438, -22.5043523437], [-19.1484562500, -22.5166562500], [-19.0913226563, -22.5289601563], [-19.0341890625, -22.5412640625], [-18.9770554688, -22.5535679687], [-18.9199218750, -22.5658718750], [-18.8627882813, -22.5781757812], [-18.8056546875, -22.5904796875], [-18.7485210937, -22.6027835938], [-18.6913875000, -22.6150875000], [-18.6342539063, -22.6273914063], [-18.5771203125, -22.6396953125], [-18.5199867188, -22.6519992187], [-18.4628531250, -22.6643031250], [-18.4057195312, -22.6766070313], [-18.3485859375, -22.6889109375], [-18.2914523438, -22.7012148437], [-18.2343187500, -22.7135187500], [-18.1771851563, -22.7258226562], [-18.1200515625, -22.7381265625], [-18.0629179687, -22.7504304688], [-18.0057843750, -22.7627343750], [-17.9486507813, -22.7750382813], [-17.8915171875, -22.7873421875], [-17.8343835938, -22.7996460937], [-17.7772500000, -22.8119500000], [-17.7201164062, -22.8242539063], [-17.6629828125, -22.8365578125], [-17.6058492188, -22.8488617187], [-17.5487156250, -22.8611656250], [-17.4915820313, -22.8734695312], [-17.4344484375, -22.8857734375], [-17.3773148437, -22.8980773437], [-17.3201812500, -22.9103812500], [-17.2630476563, -22.9226851563], [-17.2059140625, -22.9349890625], [-17.1487804688, -22.9472929687], [-17.0916468750, -22.9595968750], [-17.0345132812, -22.9719007812], [-16.9773796875, -22.9842046875], [-16.9202460938, -22.9965085937], [-16.8631125000, -23.0088125000], [-16.8059789063, -23.0211164062], [-16.7488453125, -23.0334203125], [-16.6917117187, -23.0457242187], [-16.6345781250, -23.0580281250], [-16.5774445313, -23.0703320313], [-16.5203109375, -23.0826359375], [-16.4631773438, -23.0949398437], [-16.4060437500, -23.1072437500], [-16.3489101562, -23.1195476562], [-16.2917765625, -23.1318515625], [-16.2346429688, -23.1441554687], [-16.1775093750, -23.1564593750], [-16.1203757813, -23.1687632812], [-16.0632421875, -23.1810671875], [-16.0061085937, -23.1933710937], [-15.9489750000, -23.2056750000], [-15.8918414063, -23.2179789062], [-15.8347078125, -23.2302828125], [-15.7775742188, -23.2425867188], [-15.7204406250, -23.2548906250], [-15.6633070312, -23.2671945313], [-15.6061734375, -23.2794984375], [-15.5490398438, -23.2918023437], [-15.4919062500, -23.3041062500], [-15.4347726563, -23.3164101563], [-15.3776390625, -23.3287140625], [-15.3205054687, -23.3410179687], [-15.2633718750, -23.3533218750], [-15.2062382813, -23.3656257812], [-15.1491046875, -23.3779296875], [-15.0919710938, -23.3902335938], [-15.0348375000, -23.4025375000], [-14.9777039062, -23.4148414063], [-14.9205703125, -23.4271453125], [-14.8634367188, -23.4394492187], [-14.8063031250, -23.4517531250], [-14.7491695313, -23.4640570313], [-14.6920359375, -23.4763609375], [-14.6349023437, -23.4886648437], [-14.5777687500, -23.5009687500], [-14.5206351563, -23.5132726562], [-14.4635015625, -23.5255765625], [-14.4063679688, -23.5378804688], [-14.3492343750, -23.5501843750], [-14.2921007812, -23.5624882813], [-14.2349671875, -23.5747921875], [-14.1778335937, -23.5870960937], [-14.1207000000, -23.5994000000], [-14.0549781250, -23.6124312500], [-13.9892562500, -23.6254625000], [-13.9235343750, -23.6384937500], [-13.8578125000, -23.6515250000], [-13.7920906250, -23.6645562500], [-13.7263687500, -23.6775875000], [-13.6606468750, -23.6906187500], [-13.5949250000, -23.7036500000], [-13.5292031250, -23.7166812500], [-13.4634812500, -23.7297125000], [-13.3977593750, -23.7427437500], [-13.3320375000, -23.7557750000], [-13.2663156250, -23.7688062500], [-13.2005937500, -23.7818375000], [-13.1348718750, -23.7948687500], [-13.0691500000, -23.8079000000], [-13.0034281250, -23.8209312500], [-12.9377062500, -23.8339625000], [-12.8719843750, -23.8469937500], [-12.8062625000, -23.8600250000], [-12.7405406250, -23.8730562500], [-12.6748187500, -23.8860875000], [-12.6090968750, -23.8991187500], [-12.5433750000, -23.9121500000], [-12.4776531250, -23.9251812500], [-12.4119312500, -23.9382125000], [-12.3462093750, -23.9512437500], [-12.2804875000, -23.9642750000], [-12.2147656250, -23.9773062500], [-12.1490437500, -23.9903375000], [-12.0833218750, -24.0033687500], [-12.0176000000, -24.0164000000], [-11.9431321875, -24.0299273438], [-11.8686643750, -24.0434546875], [-11.7941965625, -24.0569820313], [-11.7197287500, -24.0705093750], [-11.6452609375, -24.0840367187], [-11.5707931250, -24.0975640625], [-11.4963253125, -24.1110914063], [-11.4218575000, -24.1246187500], [-11.3473896875, -24.1381460938], [-11.2729218750, -24.1516734375], [-11.1984540625, -24.1652007813], [-11.1239862500, -24.1787281250], [-11.0495184375, -24.1922554688], [-10.9750506250, -24.2057828125], [-10.9005828125, -24.2193101563], [-10.8261150000, -24.2328375000], [-10.7516471875, -24.2463648438], [-10.6771793750, -24.2598921875], [-10.6027115625, -24.2734195312], [-10.5282437500, -24.2869468750], [-10.4537759375, -24.3004742188], [-10.3793081250, -24.3140015625], [-10.3048403125, -24.3275289063], [-10.2303725000, -24.3410562500], [-10.1559046875, -24.3545835938], [-10.0814368750, -24.3681109375], [-10.0069690625, -24.3816382812], [-9.9325012500, -24.3951656250], [-9.8580334375, -24.4086929688], [-9.7835656250, -24.4222203125], [-9.7090978125, -24.4357476563], [-9.6346300000, -24.4492750000], [-9.5601621875, -24.4628023437], [-9.4856943750, -24.4763296875], [-9.4112265625, -24.4898570312], [-9.3367587500, -24.5033843750], [-9.2622909375, -24.5169117188], [-9.1878231250, -24.5304390625], [-9.1133553125, -24.5439664063], [-9.0388875000, -24.5574937500], [-8.9644196875, -24.5710210937], [-8.8899518750, -24.5845484375], [-8.8154840625, -24.5980757813], [-8.7410162500, -24.6116031250], [-8.6665484375, -24.6251304688], [-8.5920806250, -24.6386578125], [-8.5176128125, -24.6521851562], [-8.4431450000, -24.6657125000], [-8.3686771875, -24.6792398438], [-8.2942093750, -24.6927671875], [-8.2197415625, -24.7062945313], [-8.1452737500, -24.7198218750], [-8.0708059375, -24.7333492187], [-7.9963381250, -24.7468765625], [-7.9218703125, -24.7604039063], [-7.8474025000, -24.7739312500], [-7.7729346875, -24.7874585938], [-7.6984668750, -24.8009859375], [-7.6239990625, -24.8145132813], [-7.5495312500, -24.8280406250], [-7.4750634375, -24.8415679688], [-7.4005956250, -24.8550953125], [-7.3261278125, -24.8686226563], [-7.2516600000, -24.8821500000], [-7.1771921875, -24.8956773438], [-7.1027243750, -24.9092046875], [-7.0282565625, -24.9227320312], [-6.9537887500, -24.9362593750], [-6.8793209375, -24.9497867188], [-6.8048531250, -24.9633140625], [-6.7303853125, -24.9768414063], [-6.6559175000, -24.9903687500], [-6.5814496875, -25.0038960938], [-6.5069818750, -25.0174234375], [-6.4325140625, -25.0309507812], [-6.3580462500, -25.0444781250], [-6.2835784375, -25.0580054688], [-6.2091106250, -25.0715328125], [-6.1346428125, -25.0850601563], [-6.0601750000, -25.0985875000], [-5.9857071875, -25.1121148437], [-5.9112393750, -25.1256421875], [-5.8367715625, -25.1391695312], [-5.7623037500, -25.1526968750], [-5.6878359375, -25.1662242188], [-5.6133681250, -25.1797515625], [-5.5389003125, -25.1932789063], [-5.4644325000, -25.2068062500], [-5.3899646875, -25.2203335937], [-5.3154968750, -25.2338609375], [-5.2410290625, -25.2473882813], [-5.1665612500, -25.2609156250], [-5.0920934375, -25.2744429688], [-5.0176256250, -25.2879703125], [-4.9431578125, -25.3014976562], [-4.8686900000, -25.3150250000], [-4.7942221875, -25.3285523438], [-4.7197543750, -25.3420796875], [-4.6452865625, -25.3556070313], [-4.5708187500, -25.3691343750], [-4.4963509375, -25.3826617188], [-4.4218831250, -25.3961890625], [-4.3474153125, -25.4097164063], [-4.2729475000, -25.4232437500], [-4.1984796875, -25.4367710938], [-4.1240118750, -25.4502984375], [-4.0495440625, -25.4638257813], [-3.9750762500, -25.4773531250], [-3.9006084375, -25.4908804688], [-3.8261406250, -25.5044078125], [-3.7516728125, -25.5179351563], [-3.6772050000, -25.5314625000], [-3.6027371875, -25.5449898438], [-3.5282693750, -25.5585171875], [-3.4538015625, -25.5720445313], [-3.3793337500, -25.5855718750], [-3.3048659375, -25.5990992188], [-3.2303981250, -25.6126265625], [-3.1559303125, -25.6261539063], [-3.0814625000, -25.6396812500], [-3.0069946875, -25.6532085938], [-2.9325268750, -25.6667359375], [-2.8580590625, -25.6802632812], [-2.7835912500, -25.6937906250], [-2.7091234375, -25.7073179688], [-2.6346556250, -25.7208453125], [-2.5601878125, -25.7343726563], [-2.4857200000, -25.7479000000], [-2.3957765625, -25.7614921875], [-2.3058331250, -25.7750843750], [-2.2158896875, -25.7886765625], [-2.1259462500, -25.8022687500], [-2.0360028125, -25.8158609375], [-1.9460593750, -25.8294531250], [-1.8561159375, -25.8430453125], [-1.7661725000, -25.8566375000], [-1.6762290625, -25.8702296875], [-1.5862856250, -25.8838218750], [-1.4963421875, -25.8974140625], [-1.4063987500, -25.9110062500], [-1.3164553125, -25.9245984375], [-1.2265118750, -25.9381906250], [-1.1365684375, -25.9517828125], [-1.0466250000, -25.9653750000], [-0.9566815625, -25.9789671875], [-0.8667381250, -25.9925593750], [-0.7767946875, -26.0061515625], [-0.6868512500, -26.0197437500], [-0.5969078125, -26.0333359375], [-0.5069643750, -26.0469281250], [-0.4170209375, -26.0605203125], [-0.3270775000, -26.0741125000], [-0.2371340625, -26.0877046875], [-0.1471906250, -26.1012968750], [-0.0572471875, -26.1148890625], [0.0326962500, -26.1284812500], [0.1226396875, -26.1420734375], [0.2125831250, -26.1556656250], [0.3025265625, -26.1692578125], [0.3924700000, -26.1828500000], [0.4824134375, -26.1964421875], [0.5723568750, -26.2100343750], [0.6623003125, -26.2236265625], [0.7522437500, -26.2372187500], [0.8421871875, -26.2508109375], [0.9321306250, -26.2644031250], [1.0220740625, -26.2779953125], [1.1120175000, -26.2915875000], [1.2019609375, -26.3051796875], [1.2919043750, -26.3187718750], [1.3818478125, -26.3323640625], [1.4717912500, -26.3459562500], [1.5617346875, -26.3595484375], [1.6516781250, -26.3731406250], [1.7416215625, -26.3867328125], [1.8315650000, -26.4003250000], [1.9215084375, -26.4139171875], [2.0114518750, -26.4275093750], [2.1013953125, -26.4411015625], [2.1913387500, -26.4546937500], [2.2812821875, -26.4682859375], [2.3712256250, -26.4818781250], [2.4611690625, -26.4954703125], [2.5511125000, -26.5090625000], [2.6410559375, -26.5226546875], [2.7309993750, -26.5362468750], [2.8209428125, -26.5498390625], [2.9108862500, -26.5634312500], [3.0008296875, -26.5770234375], [3.0907731250, -26.5906156250], [3.1807165625, -26.6042078125], [3.2706600000, -26.6178000000], [3.3606034375, -26.6313921875], [3.4505468750, -26.6449843750], [3.5404903125, -26.6585765625], [3.6304337500, -26.6721687500], [3.7203771875, -26.6857609375], [3.8103206250, -26.6993531250], [3.9002640625, -26.7129453125], [3.9902075000, -26.7265375000], [4.0801509375, -26.7401296875], [4.1700943750, -26.7537218750], [4.2600378125, -26.7673140625], [4.3499812500, -26.7809062500], [4.4399246875, -26.7944984375], [4.5298681250, -26.8080906250], [4.6198115625, -26.8216828125], [4.7097550000, -26.8352750000], [4.7996984375, -26.8488671875], [4.8896418750, -26.8624593750], [4.9795853125, -26.8760515625], [5.0695287500, -26.8896437500], [5.1594721875, -26.9032359375], [5.2494156250, -26.9168281250], [5.3393590625, -26.9304203125], [5.4293025000, -26.9440125000], [5.5192459375, -26.9576046875], [5.6091893750, -26.9711968750], [5.6991328125, -26.9847890625]]);
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
import math
import time

from stl import mesh, Dimension

from tkinter import Tk     # from tkinter import Tk for Python 3.x
from tkinter.filedialog import askopenfilename
from mpl_toolkits.mplot3d import art3d
from matplotlib import pyplot as plt
import solid
import os
import ezdxf
import shapely.geometry as sg
import subprocess
from GUI import getSCADPath



def outputSTL(From, To, PATH=getSCADPath()):
    subprocess.Popen(PATH + " -o " + To + " " + From)
    while not os.path.exists(To):
        time.sleep(1)


def get_size(i):
    x_list = [int(a) for a in str(i)]
    return len(x_list)



class Model:
    def __init__(self, model, fileName, location, layer, thickness):
        self.location = location
        self.code = None
        self.fileName = fileName
        self.stl = fileName + ".stl"
        self.layer = layer
        self.thickness = thickness
        self.maxz = (layer+1)*thickness
        self.dxf = fileName + ".dxf"
        self.scad = fileName + ".scad"
        self.model = model
        self.center = None
        self.width = 10
        self.mesh = None
        self.useable_area = None


    def get_code(self):
        max_dim = 0.05
        max_array = 6

        num = int(self.fileName)
        nums = [int(a) for a in str(num)]
        nums.reverse()
        indices = nums
        length = len(nums)

        print(indices)
        t = 0
        i = 0
        cubes = []
        x = 0
        y = 0
        width = 0.01
        while x <= max_dim:
            while y <= max_dim:
                print(indices)
                if nums == []:
                    break
                if indices[0] != 0:
                    cubes.append(solid.translate([x, y, 0])(solid.cube(size=t / 1000 + 0.001)))
                    y += max_dim / (max_array - 1)
                    nums[0] = nums[0] - 1
                else:
                    indices.pop(0)
                    t += 1
                i += 1
            x += max_dim / (max_array - 1)
            y = 0

        outside = solid.translate([-width / 2, -width / 2])(solid.cube(max_dim + (length - 1) / 1000 + 0.001 + width))
        self.code = solid.difference()(outside, cubes)
        self.code = solid.projection(cut=True)(self.code)
        solid.scad_render_to_file(self.code, self.location + "/code.scad")
        outputSTL(From=self.location+"/code.scad", To=self.location+"code.dxf", PATH=getSCADPath())
        # os.system("toSTL.sh renders/code.scad renders/code.dxf")
        return self.location+"/code.dxf"

    def download(self, type):
        if type =="stl":
            print("generating:" + self.location+"/"+ self.fileName+".stl")
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".stl")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".stl")
        elif type == "dxf":
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".dxf")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".dxf")

    def render(self):
        solid.scad_render_to_file(self.model, self.location+"/"+ self.fileName+'.scad')
        while not os.path.exists(self.location+"/"+self.fileName+".scad"):
            time.sleep(1)

    def get_points(self):
        doc = ezdxf.readfile(filename=self.location+"/"+ self.fileName+".dxf")
        msp = doc.modelspace()
        i=0
        lists = []
        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return [start, end]

        for e in msp.query("LINE"):
            line = helper(e)
            if not lists:
                lists.append([line])
            else:
                if lists[i][len(lists)-1][1] != line[0]:
                    lists.append([line])
                    i+=1
                else:
                    lists[i].append(line)

    def get_points2(self, FILE):
        doc = ezdxf.readfile(filename=FILE)
        msp = doc.modelspace()
        i = 0
        lists = []

        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return (start, end)

        for e in msp.query("LINE"):
            line = helper(e)
            if lists==[]:
                lists.append([line])
            else:
                if lists[i][len(lists[i]) - 1][1] != line[0]:
                    lists.append([line])
                    i += 1
                else:
                    lists[i].append(line)
        return lists

    def add_code(self):
        dxf = solid.projection(cut=False)(self.model)
        offset = solid.offset(r=-0.1)(dxf)
        solid.scad_render_to_file(offset, self.location+'/offset.scad')
        os.system("toSTL.sh renders/offset.scad renders/offset.dxf")
        lines = self.get_points2("renders/offset.dxf")
        x = lines[0][0][0][0]
        y = lines[0][0][0][1]
        print(x)
        print(y)
        code = solid.translate([x,y,0])(self.code)
        code = solid.linear_extrude(height=999)(code)
        save = self.model
        self.model = solid.projection()(solid.difference()(self.model, code))
        self.render()
        self.download("dxf")
        self.model = save

    def add_label(self, pos):
        # num = 12
        # minx, maxx, miny, maxy, minz, maxz = self.find_minmax()
        maxz = self.maxz
        # label = solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.5, halign="center"))
        # i=minx
        # print("x-len: " + str(maxx-minx))
        # print(i)
        # inc = (maxx-minx)/num
        # while minx <= i <= maxx:
        #     label = solid.union()(solid.translate([i, 0, maxz - 0.2])(solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.25, halign="center"))), label)
        #     i += inc
        #
        # l = label
        #
        # i =miny
        # while miny<= i <= maxy:
        #     print("y inc")
        #     l = solid.union()(solid.translate([0, i, 0])(label), l)
        #     i += 0.5
        for i in str(self.fileName):
            cur = pos[0]
            label = solid.translate([pos[0][0], pos[0][1], self.maxz-0.2])(solid.linear_extrude(height=(self.thickness)/3)(solid.text(str(i), size=0.5, halign="center", valign="center")))
            self.model = solid.difference()(self.model, label)
            pos.append(pos.pop(0))
            while abs(cur[0]-pos[0][0])<0.5 and abs(cur[1]-pos[0][1])<0.5:
                pos.append(pos.pop(0))



    def Center(self):

        volume, cog, inertia = self.mesh.get_mass_properties()
        print("Volume                                  = {0}".format(volume))
        print("Position of the center of gravity (COG) = {0}".format(cog))
        m_centered = solid.translate([-cog[0], -cog[1], 0])(
            self.model
        )
        return m_centered

    def find_minmax(self):
        minx = maxx = miny = maxy = minz = maxz = None
        for p in self.mesh.points:
            # p contains (x, y, z)
            if minx is None:
                minx = p[Dimension.X]
                maxx = p[Dimension.X]
                miny = p[Dimension.Y]
                maxy = p[Dimension.Y]
                minz = p[Dimension.Z]
                maxz = p[Dimension.Z]
            else:
                maxx = max(p[Dimension.X], maxx)
                minx = min(p[Dimension.X], minx)
                maxy = max(p[Dimension.Y], maxy)
                miny = min(p[Dimension.Y], miny)
                maxz = max(p[Dimension.Z], maxz)
                minz = min(p[Dimension.Z], minz)
        lenx = maxx - minx
        leny = maxy - miny
        lenz = maxz - minz
        return minx, maxx, miny, maxy, minz, maxz

    # def generate_Mesh(self):
    #     self.mesh = mesh.Mesh.from_file(self.location + "/" + str(int(self.fileName)//8)+ "b.stl")

    def get_top(self):
        top = solid.projection(cut=True)(solid.translate([0,0,-1*self.thickness*(self.layer+1)])(self.model))
        useable_area = solid.offset(r=-0.45)(top)
        self.useable_area = useable_area
        solid.scad_render_to_file(self.useable_area, self.location+'/' + 'toptemp.scad')
        outputSTL(From=self.location+'/' + 'toptemp.scad', To=self.location+"/top"+ self.dxf)

        # os.system("toSTL.sh out/toptemp.scad renders/" + self.fileName + ".dxf")
        dxf = DXF(self.location+"/top"+ self.dxf)
        min_p=dxf.points[0][0]
        points_ordered = dxf.points
        i=0
        while i <= len(dxf.points)+1:
            while math.sqrt((dxf.points[0][0]-dxf.points[1][0])**2+(dxf.points[0][1]-dxf.points[1][1])**2) > 0.1:
                dxf.points.insert(1, [(dxf.points[0][0]+dxf.points[1][0])/2, (dxf.points[0][1]+dxf.points[1][1])/2])
                i = i-1
            dxf.points.append(dxf.points.pop(0))
            i+=1
        for i in range(len(dxf.points)):
            dxf.points.append(dxf.points.pop(0))
            if dxf.points[0][0] < min_p:
                min_p = dxf.points[0][0]
                points_ordered = dxf.points.copy()
        dxf.points = points_ordered.copy()

        print(dxf.points)
        self.add_label(dxf.points)

class DXF:
    def __init__(self, file):
        self.file = file
        self.Lines = []
        self.points = []
        doc = ezdxf.readfile(self.file)
        msp = doc.modelspace()
        for e in msp:
            if e.dxftype() == "LINE":
                self.Lines.append(e)
                self.points.append([e.dxf.start[0], e.dxf.start[1]])
        # self.points.append([self.Lines[-1].dxf.end[0], self.Lines[-1].dxf.end[1]])
        self.area = None
        self.center = None
        self.polygon = sg.Polygon(self.points)

    def get_area(self):
        self.area = self.polygon.area
        return self.area

    def get_center(self):
        x_sum = 0
        y_sum =0
        for i in self.points:
            x_sum += i[0]
            y_sum += i[1]
        x_c = x_sum/len(self.points)
        y_c = y_sum/len(self.points)
        return (x_c, y_c)

    def split(self, maxdim):
        splits = []
        length = 0
        pieces = [[]]
        prev = self.points[0]
        for j in self.points:
            length = length + math.sqrt((prev[0]-j[0])**2+(prev[1]-j[1])**2)
            if length >= maxdim:
                pieces[-1].append(j)
                pieces.append([])
                length = 0
            pieces[-1].append(j)
            prev = j
        for j in pieces:
            j.insert(0, [0,0])
            piece = solid.linear_extrude(height=10)(solid.polygon(j))
            splits.append(piece)
        return splits
    def refine_points(self):
        i=0
        while i <= len(self.points)+1:
            while math.sqrt((self.points[0][0]-self.points[1][0])**2+(self.points[0][1]-self.points[1][1])**2) > 0.1:
                self.points.insert(1, [(self.points[0][0]+self.points[1][0])/2, (self.points[0][1]+self.points[1][1])/2])
                i = i-1
            self.points.append(self.points.pop(0))
            i+=1


if __name__== "__main__":
    test = DXF("C:/Users/Daniel/Documents/repos/Shell_Maker/output/0top_slice.dxf")
    test.refine_points()
    k = test.split(48)
    for i in range(len(k)):
        solid.scad_render_to_file(k[i], str(i) + ".scad")


 
 
************************************************/
