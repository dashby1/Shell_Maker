// Generated by SolidPython 1.1.3 on 2024-05-26 01:59:20


intersection() {
	difference() {
		intersection() {
			translate(v = [0, 0, 0]) {
				import(file = "CE3E3V2_Bottom_shell.stl", origin = [0, 0]);
			}
			translate(v = [-90.04029846191406, -32.690147399902344, 8]) {
				cube(size = [180.0806, 65.380295, 2]);
			}
		}
		linear_extrude(height = 999) {
			offset(r = -1) {
				import(file = "C:/Users/Daniel/Documents/repos/Shell_Maker/output/4top_slice.dxf", origin = [0, 0]);
			}
		}
	}
	translate(v = [0, 0, 8]) {
		linear_extrude(height = 10) {
			polygon(points = [[0, 0], [50.8029750000, -18.3291500000], [50.8648625000, -18.2816750000], [50.9267500000, -18.2342000000], [50.9886375000, -18.1867250000], [51.0505250000, -18.1392500000], [51.1124125000, -18.0917750000], [51.1743000000, -18.0443000000], [51.2443062500, -17.9899375000], [51.3143125000, -17.9355750000], [51.3843187500, -17.8812125000], [51.4543250000, -17.8268500000], [51.5243312500, -17.7724875000], [51.5943375000, -17.7181250000], [51.6643437500, -17.6637625000], [51.7343500000, -17.6094000000], [51.8043562500, -17.5550375000], [51.8743625000, -17.5006750000], [51.9443687500, -17.4463125000], [52.0143750000, -17.3919500000], [52.0843812500, -17.3375875000], [52.1543875000, -17.2832250000], [52.2243937500, -17.2288625000], [52.2944000000, -17.1745000000], [52.3503000000, -17.1286000000], [52.4174187500, -17.0688937500], [52.4845375000, -17.0091875000], [52.5516562500, -16.9494812500], [52.6187750000, -16.8897750000], [52.6858937500, -16.8300687500], [52.7530125000, -16.7703625000], [52.8201312500, -16.7106562500], [52.8872500000, -16.6509500000], [52.9543687500, -16.5912437500], [53.0214875000, -16.5315375000], [53.0886062500, -16.4718312500], [53.1557250000, -16.4121250000], [53.2228437500, -16.3524187500], [53.2899625000, -16.2927125000], [53.3570812500, -16.2330062500], [53.4242000000, -16.1733000000], [53.4701468750, -16.1319406250], [53.5160937500, -16.0905812500], [53.5620406250, -16.0492218750], [53.6079875000, -16.0078625000], [53.6539343750, -15.9665031250], [53.6998812500, -15.9251437500], [53.7458281250, -15.8837843750], [53.7917750000, -15.8424250000], [53.8377218750, -15.8010656250], [53.8836687500, -15.7597062500], [53.9296156250, -15.7183468750], [53.9755625000, -15.6769875000], [54.0215093750, -15.6356281250], [54.0674562500, -15.5942687500], [54.1134031250, -15.5529093750], [54.1593500000, -15.5115500000], [54.2052968750, -15.4701906250], [54.2512437500, -15.4288312500], [54.2971906250, -15.3874718750], [54.3431375000, -15.3461125000], [54.3890843750, -15.3047531250], [54.4350312500, -15.2633937500], [54.4809781250, -15.2220343750], [54.5269250000, -15.1806750000], [54.5728718750, -15.1393156250], [54.6188187500, -15.0979562500], [54.6647656250, -15.0565968750], [54.7107125000, -15.0152375000], [54.7566593750, -14.9738781250], [54.8026062500, -14.9325187500], [54.8485531250, -14.8911593750], [54.8945000000, -14.8498000000], [54.8989000000, -14.8455000000], [54.9465750000, -14.7981500000], [54.9942500000, -14.7508000000], [55.0419250000, -14.7034500000], [55.0896000000, -14.6561000000], [55.1373250000, -14.6087750000], [55.1850500000, -14.5614500000], [55.2327750000, -14.5141250000], [55.2805000000, -14.4668000000], [55.3400375000, -14.4045750000], [55.3995750000, -14.3423500000], [55.4591125000, -14.2801250000], [55.5186500000, -14.2179000000], [55.5781875000, -14.1556750000], [55.6377250000, -14.0934500000], [55.6972625000, -14.0312250000], [55.7568000000, -13.9690000000], [55.8186437500, -13.9009125000], [55.8804875000, -13.8328250000], [55.9423312500, -13.7647375000], [56.0041750000, -13.6966500000], [56.0660187500, -13.6285625000], [56.1278625000, -13.5604750000], [56.1897062500, -13.4923875000], [56.2515500000, -13.4243000000], [56.3133937500, -13.3562125000], [56.3752375000, -13.2881250000], [56.4370812500, -13.2200375000], [56.4989250000, -13.1519500000], [56.5607687500, -13.0838625000], [56.6226125000, -13.0157750000], [56.6844562500, -12.9476875000], [56.7463000000, -12.8796000000], [56.7857250000, -12.8344500000], [56.8251500000, -12.7893000000], [56.8645750000, -12.7441500000], [56.9040000000, -12.6990000000], [56.9528625000, -12.6404375000], [57.0017250000, -12.5818750000], [57.0505875000, -12.5233125000], [57.0994500000, -12.4647500000], [57.1483125000, -12.4061875000], [57.1971750000, -12.3476250000], [57.2460375000, -12.2890625000], [57.2949000000, -12.2305000000], [57.3437625000, -12.1719375000], [57.3926250000, -12.1133750000], [57.4414875000, -12.0548125000], [57.4903500000, -11.9962500000], [57.5392125000, -11.9376875000], [57.5880750000, -11.8791250000], [57.6369375000, -11.8205625000], [57.6858000000, -11.7620000000], [57.7447000000, -11.6872000000], [57.8036000000, -11.6124000000], [57.8352562500, -11.5673812500], [57.8669125000, -11.5223625000], [57.8985687500, -11.4773437500], [57.9302250000, -11.4323250000], [57.9618812500, -11.3873062500], [57.9935375000, -11.3422875000], [58.0251937500, -11.2972687500], [58.0568500000, -11.2522500000], [58.0885062500, -11.2072312500], [58.1201625000, -11.1622125000], [58.1518187500, -11.1171937500], [58.1834750000, -11.0721750000], [58.2151312500, -11.0271562500], [58.2467875000, -10.9821375000], [58.2784437500, -10.9371187500], [58.3101000000, -10.8921000000], [58.3647375000, -10.8183268750], [58.4193750000, -10.7445537500], [58.4740125000, -10.6707806250], [58.5286500000, -10.5970075000], [58.5832875000, -10.5232343750], [58.6379250000, -10.4494612500], [58.6925625000, -10.3756881250], [58.7472000000, -10.3019150000], [58.8018375000, -10.2281418750], [58.8564750000, -10.1543687500], [58.9111125000, -10.0805956250], [58.9657500000, -10.0068225000], [59.0203875000, -9.9330493750], [59.0750250000, -9.8592762500], [59.1296625000, -9.7855031250], [59.1843000000, -9.7117300000], [59.2135500000, -9.6665225000], [59.2428000000, -9.6213150000], [59.2720500000, -9.5761075000], [59.3013000000, -9.5309000000], [59.3371625000, -9.4727987500], [59.3730250000, -9.4146975000], [59.4088875000, -9.3565962500], [59.4447500000, -9.2984950000], [59.4806125000, -9.2403937500], [59.5164750000, -9.1822925000], [59.5523375000, -9.1241912500], [59.5882000000, -9.0660900000], [59.6241875000, -9.0072862500], [59.6601750000, -8.9484825000], [59.6961625000, -8.8896787500], [59.7321500000, -8.8308750000], [59.7681375000, -8.7720712500], [59.8041250000, -8.7132675000], [59.8401125000, -8.6544637500], [59.8761000000, -8.5956600000], [59.8861000000, -8.5784300000], [59.9140750000, -8.5289950000], [59.9420500000, -8.4795600000], [59.9700250000, -8.4301250000], [59.9980000000, -8.3806900000], [60.0302187500, -8.3131881250], [60.0624375000, -8.2456862500], [60.0946562500, -8.1781843750], [60.1268750000, -8.1106825000], [60.1590937500, -8.0431806250], [60.1913125000, -7.9756787500], [60.2235312500, -7.9081768750], [60.2557500000, -7.8406750000], [60.2879687500, -7.7731731250], [60.3201875000, -7.7056712500], [60.3524062500, -7.6381693750], [60.3846250000, -7.5706675000], [60.4168437500, -7.5031656250], [60.4490625000, -7.4356637500], [60.4812812500, -7.3681618750], [60.5135000000, -7.3006600000], [60.5544687500, -7.2192218750], [60.5954375000, -7.1377837500], [60.6364062500, -7.0563456250], [60.6773750000, -6.9749075000], [60.7183437500, -6.8934693750], [60.7593125000, -6.8120312500], [60.8002812500, -6.7305931250], [60.8412500000, -6.6491550000], [60.8822187500, -6.5677168750], [60.9231875000, -6.4862787500], [60.9641562500, -6.4048406250], [61.0051250000, -6.3234025000], [61.0460937500, -6.2419643750], [61.0870625000, -6.1605262500], [61.1280312500, -6.0790881250], [61.1690000000, -5.9976500000], [61.1846000000, -5.9595300000], [61.2034000000, -5.9112525000], [61.2222000000, -5.8629750000], [61.2410000000, -5.8146975000], [61.2598000000, -5.7664200000], [61.2903750000, -5.6897550000], [61.3209500000, -5.6130900000], [61.3515250000, -5.5364250000], [61.3821000000, -5.4597600000], [61.3976187500, -5.4096787500], [61.4131375000, -5.3595975000], [61.4286562500, -5.3095162500], [61.4441750000, -5.2594350000], [61.4596937500, -5.2093537500], [61.4752125000, -5.1592725000], [61.4907312500, -5.1091912500], [61.5062500000, -5.0591100000], [61.5217687500, -5.0090287500], [61.5372875000, -4.9589475000], [61.5528062500, -4.9088662500], [61.5683250000, -4.8587850000], [61.5838437500, -4.8087037500], [61.5993625000, -4.7586225000], [61.6148812500, -4.7085412500], [61.6304000000, -4.6584600000], [61.6530687500, -4.5864425000], [61.6757375000, -4.5144250000], [61.6984062500, -4.4424075000], [61.7210750000, -4.3703900000], [61.7437437500, -4.2983725000], [61.7664125000, -4.2263550000], [61.7890812500, -4.1543375000], [61.8117500000, -4.0823200000], [61.8344187500, -4.0103025000], [61.8570875000, -3.9382850000], [61.8797562500, -3.8662675000], [61.9024250000, -3.7942500000], [61.9250937500, -3.7222325000], [61.9477625000, -3.6502150000], [61.9704312500, -3.5781975000], [61.9931000000, -3.5061800000], [61.9979000000, -3.4864700000], [62.0092500000, -3.4336150000], [62.0206000000, -3.3807600000], [62.0319500000, -3.3279050000], [62.0433000000, -3.2750500000], [62.0546500000, -3.2221950000], [62.0660000000, -3.1693400000], [62.0773500000, -3.1164850000], [62.0887000000, -3.0636300000], [62.1013375000, -3.0057575000], [62.1139750000, -2.9478850000], [62.1266125000, -2.8900125000], [62.1392500000, -2.8321400000], [62.1518875000, -2.7742675000], [62.1645250000, -2.7163950000], [62.1771625000, -2.6585225000], [62.1898000000, -2.6006500000], [62.1907000000, -2.5960100000], [62.2001750000, -2.5284387500], [62.2096500000, -2.4608675000], [62.2191250000, -2.3932962500], [62.2286000000, -2.3257250000], [62.2380750000, -2.2581537500], [62.2475500000, -2.1905825000], [62.2570250000, -2.1230112500], [62.2665000000, -2.0554400000], [62.2735625000, -2.0047006250], [62.2806250000, -1.9539612500], [62.2876875000, -1.9032218750], [62.2947500000, -1.8524825000], [62.3018125000, -1.8017431250], [62.3088750000, -1.7510037500], [62.3159375000, -1.7002643750], [62.3230000000, -1.6495250000], [62.3300625000, -1.5987856250], [62.3371250000, -1.5480462500], [62.3441875000, -1.4973068750], [62.3512500000, -1.4465675000], [62.3583125000, -1.3958281250], [62.3653750000, -1.3450887500], [62.3724375000, -1.2943493750], [62.3795000000, -1.2436100000], [62.3832500000, -1.1786395000], [62.3870000000, -1.1136690000], [62.3907500000, -1.0486985000], [62.3945000000, -0.9837280000], [62.3982500000, -0.9187575000], [62.4020000000, -0.8537870000], [62.4057500000, -0.7888165000], [62.4095000000, -0.7238460000], [62.4128750000, -0.6649471250], [62.4162500000, -0.6060482500], [62.4196250000, -0.5471493750], [62.4230000000, -0.4882505000], [62.4263750000, -0.4293516250], [62.4297500000, -0.3704527500], [62.4331250000, -0.3115538750], [62.4365000000, -0.2526550000], [62.4365000000, -0.2504430000], [62.4330687500, -0.1933922500], [62.4296375000, -0.1363415000], [62.4262062500, -0.0792907500], [62.4227750000, -0.0222400000], [62.4193437500, 0.0348107500], [62.4159125000, 0.0918615000], [62.4124812500, 0.1489122500], [62.4090500000, 0.2059630000], [62.4056187500, 0.2630137500], [62.4021875000, 0.3200645000], [62.3987562500, 0.3771152500], [62.3953250000, 0.4341660000], [62.3918937500, 0.4912167500], [62.3884625000, 0.5482675000], [62.3850312500, 0.6053182500], [62.3816000000, 0.6623690000], [62.3769000000, 0.7398072500], [62.3722000000, 0.8172455000], [62.3675000000, 0.8946837500], [62.3628000000, 0.9721220000], [62.3584562500, 1.0414243750], [62.3541125000, 1.1107267500], [62.3497687500, 1.1800291250], [62.3454250000, 1.2493315000], [62.3410812500, 1.3186338750], [62.3367375000, 1.3879362500], [62.3323937500, 1.4572386250], [62.3280500000, 1.5265410000], [62.3237062500, 1.5958433750], [62.3193625000, 1.6651457500], [62.3150187500, 1.7344481250], [62.3106750000, 1.8037505000], [62.3063312500, 1.8730528750], [62.3019875000, 1.9423552500], [62.2976437500, 2.0116576250], [62.2933000000, 2.0809600000], [62.2923000000, 2.0880400000], [62.2841500000, 2.1417850000], [62.2760000000, 2.1955300000], [62.2715000000, 2.2252200000], [62.2583250000, 2.3035500000], [62.2451500000, 2.3818800000], [62.2319750000, 2.4602100000], [62.2188000000, 2.5385400000], [62.2082000000, 2.5983900000], [62.1958500000, 2.6654975000], [62.1835000000, 2.7326050000], [62.1711500000, 2.7997125000], [62.1588000000, 2.8668200000], [62.1444500000, 2.9389350000], [62.1301000000, 3.0110500000], [62.1143437500, 3.0699706250], [62.0985875000, 3.1288912500], [62.0828312500, 3.1878118750], [62.0670750000, 3.2467325000], [62.0513187500, 3.3056531250], [62.0355625000, 3.3645737500], [62.0198062500, 3.4234943750], [62.0040500000, 3.4824150000], [61.9882937500, 3.5413356250], [61.9725375000, 3.6002562500], [61.9567812500, 3.6591768750], [61.9410250000, 3.7180975000], [61.9252687500, 3.7770181250], [61.9095125000, 3.8359387500], [61.8937562500, 3.8948593750], [61.8780000000, 3.9537800000], [61.8604875000, 4.0165425000], [61.8429750000, 4.0793050000], [61.8254625000, 4.1420675000], [61.8079500000, 4.2048300000], [61.7904375000, 4.2675925000], [61.7729250000, 4.3303550000], [61.7554125000, 4.3931175000], [61.7379000000, 4.4558800000], [61.7203875000, 4.5186425000], [61.7028750000, 4.5814050000], [61.6853625000, 4.6441675000], [61.6678500000, 4.7069300000], [61.6503375000, 4.7696925000], [61.6328250000, 4.8324550000], [61.6153125000, 4.8952175000], [61.5978000000, 4.9579800000], [61.5821000000, 5.0044300000], [61.5579562500, 5.0637443750], [61.5338125000, 5.1230587500], [61.5096687500, 5.1823731250], [61.4855250000, 5.2416875000], [61.4613812500, 5.3010018750], [61.4372375000, 5.3603162500], [61.4130937500, 5.4196306250], [61.3889500000, 5.4789450000], [61.3648062500, 5.5382593750], [61.3406625000, 5.5975737500], [61.3165187500, 5.6568881250], [61.2923750000, 5.7162025000], [61.2682312500, 5.7755168750], [61.2440875000, 5.8348312500], [61.2199437500, 5.8941456250], [61.1958000000, 5.9534600000], [61.1628875000, 6.0321543750], [61.1299750000, 6.1108487500], [61.0970625000, 6.1895431250], [61.0641500000, 6.2682375000], [61.0312375000, 6.3469318750], [60.9983250000, 6.4256262500], [60.9654125000, 6.5043206250], [60.9325000000, 6.5830150000], [60.8995875000, 6.6617093750], [60.8666750000, 6.7404037500], [60.8337625000, 6.8190981250], [60.8008500000, 6.8977925000], [60.7679375000, 6.9764868750], [60.7350250000, 7.0551812500], [60.7021125000, 7.1338756250], [60.6692000000, 7.2125700000], [60.6642000000, 7.2228400000], [60.6270000000, 7.2980650000], [60.5898000000, 7.3732900000], [60.5620500000, 7.4281450000], [60.5343000000, 7.4830000000], [60.5065500000, 7.5378550000], [60.4788000000, 7.5927100000], [60.4559000000, 7.6372400000], [60.4268625000, 7.6916825000], [60.3978250000, 7.7461250000], [60.3687875000, 7.8005675000], [60.3397500000, 7.8550100000], [60.3107125000, 7.9094525000], [60.2816750000, 7.9638950000], [60.2526375000, 8.0183375000], [60.2236000000, 8.0727800000], [60.1801000000, 8.1527100000], [60.1396250000, 8.2186425000], [60.0991500000, 8.2845750000], [60.0586750000, 8.3505075000], [60.0182000000, 8.4164400000], [59.9777250000, 8.4823725000], [59.9372500000, 8.5483050000], [59.8967750000, 8.6142375000], [59.8563000000, 8.6801700000], [59.8158250000, 8.7461025000], [59.7753500000, 8.8120350000], [59.7348750000, 8.8779675000], [59.6944000000, 8.9439000000], [59.6539250000, 9.0098325000], [59.6134500000, 9.0757650000], [59.5729750000, 9.1416975000], [59.5325000000, 9.2076300000], [59.4871750000, 9.2791575000], [59.4418500000, 9.3506850000], [59.3965250000, 9.4222125000], [59.3512000000, 9.4937400000], [59.3031812500, 9.5680000000], [59.2551625000, 9.6422600000], [59.2071437500, 9.7165200000], [59.1591250000, 9.7907800000], [59.1111062500, 9.8650400000], [59.0630875000, 9.9393000000], [59.0150687500, 10.0135600000], [58.9670500000, 10.0878200000], [58.9190312500, 10.1620800000], [58.8710125000, 10.2363400000], [58.8229937500, 10.3106000000], [58.7749750000, 10.3848600000], [58.7269562500, 10.4591200000], [58.6789375000, 10.5333800000], [58.6309187500, 10.6076400000], [58.5829000000, 10.6819000000], [58.5446000000, 10.7353000000], [58.5033250000, 10.7908250000], [58.4620500000, 10.8463500000], [58.4207750000, 10.9018750000], [58.3795000000, 10.9574000000], [58.3382250000, 11.0129250000], [58.2969500000, 11.0684500000], [58.2556750000, 11.1239750000], [58.2144000000, 11.1795000000], [58.1708875000, 11.2370000000], [58.1273750000, 11.2945000000], [58.0838625000, 11.3520000000], [58.0403500000, 11.4095000000], [57.9968375000, 11.4670000000], [57.9533250000, 11.5245000000], [57.9098125000, 11.5820000000], [57.8663000000, 11.6395000000], [57.8260250000, 11.6877625000], [57.7857500000, 11.7360250000], [57.7454750000, 11.7842875000], [57.7052000000, 11.8325500000], [57.6649250000, 11.8808125000], [57.6246500000, 11.9290750000], [57.5843750000, 11.9773375000], [57.5441000000, 12.0256000000], [57.5038250000, 12.0738625000], [57.4635500000, 12.1221250000], [57.4232750000, 12.1703875000], [57.3830000000, 12.2186500000], [57.3427250000, 12.2669125000], [57.3024500000, 12.3151750000], [57.2621750000, 12.3634375000], [57.2219000000, 12.4117000000], [57.1807375000, 12.4606750000], [57.1395750000, 12.5096500000], [57.0984125000, 12.5586250000], [57.0572500000, 12.6076000000], [57.0160875000, 12.6565750000], [56.9749250000, 12.7055500000], [56.9337625000, 12.7545250000], [56.8926000000, 12.8035000000], [56.8514375000, 12.8524750000], [56.8102750000, 12.9014500000], [56.7691125000, 12.9504250000], [56.7279500000, 12.9994000000], [56.6867875000, 13.0483750000], [56.6456250000, 13.0973500000], [56.6044625000, 13.1463250000], [56.5633000000, 13.1953000000], [56.5426000000, 13.2184000000], [56.5060000000, 13.2570750000], [56.4694000000, 13.2957500000], [56.4328000000, 13.3344250000], [56.3962000000, 13.3731000000], [56.3596000000, 13.4117750000], [56.3230000000, 13.4504500000], [56.2864000000, 13.4891250000], [56.2498000000, 13.5278000000], [56.2132000000, 13.5664750000], [56.1766000000, 13.6051500000], [56.1400000000, 13.6438250000], [56.1034000000, 13.6825000000], [56.0668000000, 13.7211750000], [56.0302000000, 13.7598500000], [55.9936000000, 13.7985250000], [55.9570000000, 13.8372000000], [55.9111312500, 13.8856687500], [55.8652625000, 13.9341375000], [55.8193937500, 13.9826062500], [55.7735250000, 14.0310750000], [55.7276562500, 14.0795437500], [55.6817875000, 14.1280125000], [55.6359187500, 14.1764812500], [55.5900500000, 14.2249500000], [55.5441812500, 14.2734187500], [55.4983125000, 14.3218875000], [55.4524437500, 14.3703562500], [55.4065750000, 14.4188250000], [55.3607062500, 14.4672937500], [55.3148375000, 14.5157625000], [55.2689687500, 14.5642312500], [55.2231000000, 14.6127000000], [55.1996000000, 14.6362000000], [55.1362062500, 14.6949125000], [55.0728125000, 14.7536250000], [55.0094187500, 14.8123375000], [54.9460250000, 14.8710500000], [54.8826312500, 14.9297625000], [54.8192375000, 14.9884750000], [54.7558437500, 15.0471875000], [54.6924500000, 15.1059000000], [54.6290562500, 15.1646125000], [54.5656625000, 15.2233250000], [54.5022687500, 15.2820375000], [54.4388750000, 15.3407500000], [54.3754812500, 15.3994625000], [54.3120875000, 15.4581750000], [54.2486937500, 15.5168875000], [54.1853000000, 15.5756000000], [54.1219125000, 15.6346812500], [54.0585250000, 15.6937625000], [53.9951375000, 15.7528437500], [53.9317500000, 15.8119250000], [53.8683625000, 15.8710062500], [53.8049750000, 15.9300875000], [53.7415875000, 15.9891687500], [53.6782000000, 16.0482500000], [53.6148125000, 16.1073312500], [53.5514250000, 16.1664125000], [53.4880375000, 16.2254937500], [53.4246500000, 16.2845750000], [53.3612625000, 16.3436562500], [53.2978750000, 16.4027375000], [53.2344875000, 16.4618187500], [53.1711000000, 16.5209000000], [53.1224625000, 16.5621625000], [53.0738250000, 16.6034250000], [53.0251875000, 16.6446875000], [52.9765500000, 16.6859500000], [52.9279125000, 16.7272125000], [52.8792750000, 16.7684750000], [52.8306375000, 16.8097375000], [52.7820000000, 16.8510000000], [52.7292625000, 16.8951125000], [52.6765250000, 16.9392250000], [52.6237875000, 16.9833375000], [52.5710500000, 17.0274500000], [52.5183125000, 17.0715625000], [52.4655750000, 17.1156750000], [52.4128375000, 17.1597875000], [52.3601000000, 17.2039000000], [52.2945000000, 17.2576000000], [52.2486500000, 17.2925125000], [52.2028000000, 17.3274250000], [52.1569500000, 17.3623375000], [52.1111000000, 17.3972500000], [52.0652500000, 17.4321625000], [52.0194000000, 17.4670750000], [51.9735500000, 17.5019875000], [51.9277000000, 17.5369000000], [51.8818500000, 17.5718125000], [51.8360000000, 17.6067250000], [51.7901500000, 17.6416375000], [51.7443000000, 17.6765500000], [51.6984500000, 17.7114625000], [51.6526000000, 17.7463750000], [51.6067500000, 17.7812875000], [51.5609000000, 17.8162000000], [51.5150500000, 17.8511125000], [51.4692000000, 17.8860250000], [51.4233500000, 17.9209375000], [51.3775000000, 17.9558500000], [51.3316500000, 17.9907625000], [51.2858000000, 18.0256750000], [51.2399500000, 18.0605875000], [51.1941000000, 18.0955000000], [51.1482500000, 18.1304125000], [51.1024000000, 18.1653250000], [51.0565500000, 18.2002375000], [51.0107000000, 18.2351500000], [50.9648500000, 18.2700625000], [50.9190000000, 18.3049750000], [50.8731500000, 18.3398875000], [50.8273000000, 18.3748000000], [50.7831000000, 18.4079875000], [50.7389000000, 18.4411750000], [50.6947000000, 18.4743625000], [50.6505000000, 18.5075500000], [50.6063000000, 18.5407375000], [50.5621000000, 18.5739250000], [50.5179000000, 18.6071125000], [50.4737000000, 18.6403000000], [50.4332531250, 18.6699625000], [50.3928062500, 18.6996250000], [50.3523593750, 18.7292875000], [50.3119125000, 18.7589500000], [50.2714656250, 18.7886125000], [50.2310187500, 18.8182750000], [50.1905718750, 18.8479375000], [50.1501250000, 18.8776000000], [50.1096781250, 18.9072625000], [50.0692312500, 18.9369250000], [50.0287843750, 18.9665875000], [49.9883375000, 18.9962500000], [49.9478906250, 19.0259125000], [49.9074437500, 19.0555750000], [49.8669968750, 19.0852375000], [49.8265500000, 19.1149000000], [49.7861031250, 19.1445625000], [49.7456562500, 19.1742250000], [49.7052093750, 19.2038875000], [49.6647625000, 19.2335500000], [49.6243156250, 19.2632125000], [49.5838687500, 19.2928750000], [49.5434218750, 19.3225375000], [49.5029750000, 19.3522000000], [49.4625281250, 19.3818625000], [49.4220812500, 19.4115250000], [49.3816343750, 19.4411875000], [49.3411875000, 19.4708500000], [49.3007406250, 19.5005125000], [49.2602937500, 19.5301750000], [49.2198468750, 19.5598375000], [49.1794000000, 19.5895000000], [49.1203500000, 19.6298000000], [49.0613000000, 19.6701000000], [49.0005250000, 19.7086500000], [48.9397500000, 19.7472000000], [48.8789750000, 19.7857500000], [48.8182000000, 19.8243000000], [48.7574250000, 19.8628500000], [48.6966500000, 19.9014000000], [48.6358750000, 19.9399500000], [48.5751000000, 19.9785000000], [48.5143250000, 20.0170500000], [48.4535500000, 20.0556000000], [48.3927750000, 20.0941500000], [48.3320000000, 20.1327000000]]);
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
import math
import time

from stl import mesh, Dimension

from tkinter import Tk     # from tkinter import Tk for Python 3.x
from tkinter.filedialog import askopenfilename
from mpl_toolkits.mplot3d import art3d
from matplotlib import pyplot as plt
import solid
import os
import ezdxf
import shapely.geometry as sg
import subprocess
from GUI import getSCADPath



def outputSTL(From, To, PATH=getSCADPath()):
    subprocess.Popen(PATH + " -o " + To + " " + From)
    while not os.path.exists(To):
        time.sleep(1)

class Model:
    def __init__(self, model, fileName, location, layer, thickness):
        self.location = location
        self.code = None
        self.fileName = fileName
        self.stl = fileName + ".stl"
        self.layer = layer
        self.thickness = thickness
        self.maxz = (layer+1)*thickness
        self.dxf = fileName + ".dxf"
        self.scad = fileName + ".scad"
        self.model = model
        self.center = None
        self.width = 10
        self.mesh = None
        self.useable_area = None


    def get_code(self):
        max_dim = 0.05
        max_array = 6

        num = int(self.fileName)
        nums = [int(a) for a in str(num)]
        nums.reverse()
        indices = nums
        length = len(nums)

        print(indices)
        t = 0
        i = 0
        cubes = []
        x = 0
        y = 0
        width = 0.01
        while x <= max_dim:
            while y <= max_dim:
                print(indices)
                if nums == []:
                    break
                if indices[0] != 0:
                    cubes.append(solid.translate([x, y, 0])(solid.cube(size=t / 1000 + 0.001)))
                    y += max_dim / (max_array - 1)
                    nums[0] = nums[0] - 1
                else:
                    indices.pop(0)
                    t += 1
                i += 1
            x += max_dim / (max_array - 1)
            y = 0

        outside = solid.translate([-width / 2, -width / 2])(solid.cube(max_dim + (length - 1) / 1000 + 0.001 + width))
        self.code = solid.difference()(outside, cubes)
        self.code = solid.projection(cut=True)(self.code)
        solid.scad_render_to_file(self.code, self.location + "/code.scad")
        outputSTL(From=self.location+"/code.scad", To=self.location+"code.dxf", PATH=getSCADPath())
        # os.system("toSTL.sh renders/code.scad renders/code.dxf")
        return self.location+"/code.dxf"

    def download(self, type):
        if type =="stl":
            print("generating:" + self.location+"/"+ self.fileName+".stl")
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".stl")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".stl")
        elif type == "dxf":
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".dxf")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".dxf")

    def render(self):
        solid.scad_render_to_file(self.model, self.location+"/"+ self.fileName+'.scad')
        while not os.path.exists(self.location+"/"+self.fileName+".scad"):
            time.sleep(1)
        # outputSTL(From= self.location+"/"+ self.fileName+'.scad', To=self.location+"/"+ self.fileName+'.stl')

    def get_points(self):
        doc = ezdxf.readfile(filename=self.location+"/"+ self.fileName+".dxf")
        msp = doc.modelspace()
        i=0
        lists = []
        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return [start, end]

        for e in msp.query("LINE"):
            line = helper(e)
            if not lists:
                lists.append([line])
            else:
                if lists[i][len(lists)-1][1] != line[0]:
                    lists.append([line])
                    i+=1
                else:
                    lists[i].append(line)

    def get_points2(self, FILE):
        doc = ezdxf.readfile(filename=FILE)
        msp = doc.modelspace()
        i = 0
        lists = []

        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return (start, end)

        for e in msp.query("LINE"):
            line = helper(e)
            if lists==[]:
                lists.append([line])
            else:
                if lists[i][len(lists[i]) - 1][1] != line[0]:
                    lists.append([line])
                    i += 1
                else:
                    lists[i].append(line)
        return lists

    def add_code(self):
        dxf = solid.projection(cut=False)(self.model)
        offset = solid.offset(r=-0.1)(dxf)
        solid.scad_render_to_file(offset, self.location+'/offset.scad')
        os.system("toSTL.sh renders/offset.scad renders/offset.dxf")
        lines = self.get_points2("renders/offset.dxf")
        x = lines[0][0][0][0]
        y = lines[0][0][0][1]
        print(x)
        print(y)
        code = solid.translate([x,y,0])(self.code)
        code = solid.linear_extrude(height=999)(code)
        save = self.model
        self.model = solid.projection()(solid.difference()(self.model, code))
        self.render()
        self.download("dxf")
        self.model = save

    def add_label(self, pos):
        # num = 12
        # minx, maxx, miny, maxy, minz, maxz = self.find_minmax()
        maxz = self.maxz
        # label = solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.5, halign="center"))
        # i=minx
        # print("x-len: " + str(maxx-minx))
        # print(i)
        # inc = (maxx-minx)/num
        # while minx <= i <= maxx:
        #     label = solid.union()(solid.translate([i, 0, maxz - 0.2])(solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.25, halign="center"))), label)
        #     i += inc
        #
        # l = label
        #
        # i =miny
        # while miny<= i <= maxy:
        #     print("y inc")
        #     l = solid.union()(solid.translate([0, i, 0])(label), l)
        #     i += 0.5
        for i in str(self.fileName):
            cur = pos[0]
            label = solid.translate([pos[0][0], pos[0][1], self.maxz-0.2])(solid.linear_extrude(height=(self.thickness)/3)(solid.text(str(i), size=0.5, halign="center", valign="center")))
            self.model = solid.difference()(self.model, label)
            pos.append(pos.pop(0))
            while abs(cur[0]-pos[0][0])<0.5 and abs(cur[1]-pos[0][1])<0.5:
                pos.append(pos.pop(0))



    def Center(self):

        volume, cog, inertia = self.mesh.get_mass_properties()
        print("Volume                                  = {0}".format(volume))
        print("Position of the center of gravity (COG) = {0}".format(cog))
        m_centered = solid.translate([-cog[0], -cog[1], 0])(
            self.model
        )
        return m_centered

    def find_minmax(self):
        minx = maxx = miny = maxy = minz = maxz = None
        for p in self.mesh.points:
            # p contains (x, y, z)
            if minx is None:
                minx = p[Dimension.X]
                maxx = p[Dimension.X]
                miny = p[Dimension.Y]
                maxy = p[Dimension.Y]
                minz = p[Dimension.Z]
                maxz = p[Dimension.Z]
            else:
                maxx = max(p[Dimension.X], maxx)
                minx = min(p[Dimension.X], minx)
                maxy = max(p[Dimension.Y], maxy)
                miny = min(p[Dimension.Y], miny)
                maxz = max(p[Dimension.Z], maxz)
                minz = min(p[Dimension.Z], minz)
        lenx = maxx - minx
        leny = maxy - miny
        lenz = maxz - minz
        return minx, maxx, miny, maxy, minz, maxz

    # def generate_Mesh(self):
    #     self.mesh = mesh.Mesh.from_file(self.location + "/" + str(int(self.fileName)//8)+ "b.stl")

    def get_top(self):
        top = solid.projection(cut=True)(solid.translate([0,0,-1*self.thickness*(self.layer+1)])(self.model))
        useable_area = solid.offset(r=-0.45)(top)
        self.useable_area = useable_area
        solid.scad_render_to_file(self.useable_area, self.location+'/' + 'toptemp.scad')
        outputSTL(From=self.location+'/' + 'toptemp.scad', To=self.location+"/top"+ self.dxf)

        # os.system("toSTL.sh out/toptemp.scad renders/" + self.fileName + ".dxf")
        dxf = DXF(self.location+"/top"+ self.dxf)
        min_p=dxf.points[0][0]
        points_ordered = dxf.points
        i=0
        while i <= len(dxf.points)+1:
            while math.sqrt((dxf.points[0][0]-dxf.points[1][0])**2+(dxf.points[0][1]-dxf.points[1][1])**2) > 0.1:
                dxf.points.insert(1, [(dxf.points[0][0]+dxf.points[1][0])/2, (dxf.points[0][1]+dxf.points[1][1])/2])
                i = i-1
            dxf.points.append(dxf.points.pop(0))
            i+=1
        for i in range(len(dxf.points)):
            dxf.points.append(dxf.points.pop(0))
            if dxf.points[0][0] < min_p:
                min_p = dxf.points[0][0]
                points_ordered = dxf.points.copy()
        dxf.points = points_ordered.copy()

        print(dxf.points)
        self.add_label(dxf.points)

class DXF:
    def __init__(self, file):
        self.file = file
        self.Lines = []
        self.points = []
        doc = ezdxf.readfile(self.file)
        msp = doc.modelspace()
        for e in msp:
            if e.dxftype() == "LINE":
                self.Lines.append(e)
                self.points.append([e.dxf.start[0], e.dxf.start[1]])
        # self.points.append([self.Lines[-1].dxf.end[0], self.Lines[-1].dxf.end[1]])
        self.area = None
        self.center = None
        self.polygon = sg.Polygon(self.points)

    def get_area(self):
        self.area = self.polygon.area
        return self.area

    def get_center(self):
        x_sum = 0
        y_sum =0
        for i in self.points:
            x_sum += i[0]
            y_sum += i[1]
        x_c = x_sum/len(self.points)
        y_c = y_sum/len(self.points)
        return (x_c, y_c)

    def split(self, maxdim):
        splits = []
        length = 0
        pieces = [[]]
        prev = self.points[-1]
        pieces[-1].append(prev)
        for j in self.points:
            length = length + math.sqrt((prev[0]-j[0])**2+(prev[1]-j[1])**2)
            if length >= maxdim:
                pieces[-1].append(j)
                pieces.append([])
                length = 0
            pieces[-1].append(j)
            prev = j
        for j in pieces:
            j.insert(0, [0,0])
            piece = solid.linear_extrude(height=10)(solid.polygon(j))
            splits.append(piece)
        return splits
    def refine_points(self):
        i=0
        while i <= len(self.points)+1:
            while math.sqrt((self.points[0][0]-self.points[1][0])**2+(self.points[0][1]-self.points[1][1])**2) > 0.1:
                self.points.insert(1, [(self.points[0][0]+self.points[1][0])/2, (self.points[0][1]+self.points[1][1])/2])
                i = i-1
            self.points.append(self.points.pop(0))
            i+=1


if __name__== "__main__":
    test = DXF("C:/Users/Daniel/Documents/repos/Shell_Maker/output/0top_slice.dxf")
    test.refine_points()
    k = test.split(48)
    for i in range(len(k)):
        solid.scad_render_to_file(k[i], str(i) + ".scad")


 
 
************************************************/
