// Generated by SolidPython 1.1.3 on 2024-05-19 23:42:09


intersection() {
	intersection() {
		translate(v = [0, 0, 0]) {
			import(file = "CE3E3V2_Bottom_shell.stl", origin = [0, 0]);
		}
		translate(v = [-90.04029846191406, -32.690147399902344, 18]) {
			cube(size = [180.0806, 65.380295, 2]);
		}
	}
	translate(v = [0, 0, 18]) {
		linear_extrude(height = 10) {
			polygon(points = [[0, 0], [-49.5633132813, 14.4823750000], [-49.6190500000, 14.4650000000], [-49.6747867187, 14.4476250000], [-49.7305234375, 14.4302500000], [-49.7862601562, 14.4128750000], [-49.8419968750, 14.3955000000], [-49.8977335938, 14.3781250000], [-49.9534703125, 14.3607500000], [-50.0092070312, 14.3433750000], [-50.0649437500, 14.3260000000], [-50.1206804687, 14.3086250000], [-50.1764171875, 14.2912500000], [-50.2321539063, 14.2738750000], [-50.2878906250, 14.2565000000], [-50.3436273438, 14.2391250000], [-50.3993640625, 14.2217500000], [-50.4551007812, 14.2043750000], [-50.5108375000, 14.1870000000], [-50.5665742188, 14.1696250000], [-50.6223109375, 14.1522500000], [-50.6780476563, 14.1348750000], [-50.7337843750, 14.1175000000], [-50.7895210937, 14.1001250000], [-50.8452578125, 14.0827500000], [-50.9009945313, 14.0653750000], [-50.9567312500, 14.0480000000], [-51.0124679688, 14.0306250000], [-51.0682046875, 14.0132500000], [-51.1239414062, 13.9958750000], [-51.1796781250, 13.9785000000], [-51.2354148438, 13.9611250000], [-51.2911515625, 13.9437500000], [-51.3468882813, 13.9263750000], [-51.4026250000, 13.9090000000], [-51.4583617187, 13.8916250000], [-51.5140984375, 13.8742500000], [-51.5698351562, 13.8568750000], [-51.6255718750, 13.8395000000], [-51.6813085938, 13.8221250000], [-51.7370453125, 13.8047500000], [-51.7927820312, 13.7873750000], [-51.8485187500, 13.7700000000], [-51.9042554687, 13.7526250000], [-51.9599921875, 13.7352500000], [-52.0157289063, 13.7178750000], [-52.0714656250, 13.7005000000], [-52.1272023437, 13.6831250000], [-52.1829390625, 13.6657500000], [-52.2386757812, 13.6483750000], [-52.2944125000, 13.6310000000], [-52.3501492188, 13.6136250000], [-52.4058859375, 13.5962500000], [-52.4616226563, 13.5788750000], [-52.5173593750, 13.5615000000], [-52.5730960937, 13.5441250000], [-52.6288328125, 13.5267500000], [-52.6845695313, 13.5093750000], [-52.7403062500, 13.4920000000], [-52.7960429688, 13.4746250000], [-52.8517796875, 13.4572500000], [-52.9075164062, 13.4398750000], [-52.9632531250, 13.4225000000], [-53.0189898438, 13.4051250000], [-53.0747265625, 13.3877500000], [-53.1304632813, 13.3703750000], [-53.1862000000, 13.3530000000], [-53.2447125000, 13.3347125000], [-53.3032250000, 13.3164250000], [-53.3617375000, 13.2981375000], [-53.4202500000, 13.2798500000], [-53.4787625000, 13.2615625000], [-53.5372750000, 13.2432750000], [-53.5957875000, 13.2249875000], [-53.6543000000, 13.2067000000], [-53.7381875000, 13.1790687500], [-53.8220750000, 13.1514375000], [-53.9059625000, 13.1238062500], [-53.9898500000, 13.0961750000], [-54.0737375000, 13.0685437500], [-54.1576250000, 13.0409125000], [-54.2415125000, 13.0132812500], [-54.3254000000, 12.9856500000], [-54.4092875000, 12.9580187500], [-54.4931750000, 12.9303875000], [-54.5770625000, 12.9027562500], [-54.6609500000, 12.8751250000], [-54.7448375000, 12.8474937500], [-54.8287250000, 12.8198625000], [-54.9126125000, 12.7922312500], [-54.9965000000, 12.7646000000], [-55.0803875000, 12.7369687500], [-55.1642750000, 12.7093375000], [-55.2481625000, 12.6817062500], [-55.3320500000, 12.6540750000], [-55.4159375000, 12.6264437500], [-55.4998250000, 12.5988125000], [-55.5837125000, 12.5711812500], [-55.6676000000, 12.5435500000], [-55.7514875000, 12.5159187500], [-55.8353750000, 12.4882875000], [-55.9192625000, 12.4606562500], [-56.0031500000, 12.4330250000], [-56.0870375000, 12.4053937500], [-56.1709250000, 12.3777625000], [-56.2548125000, 12.3501312500], [-56.3387000000, 12.3225000000], [-56.4026000000, 12.3010000000], [-56.4761531250, 12.2750448437], [-56.5497062500, 12.2490896875], [-56.6232593750, 12.2231345313], [-56.6968125000, 12.1971793750], [-56.7703656250, 12.1712242188], [-56.8439187500, 12.1452690625], [-56.9174718750, 12.1193139062], [-56.9910250000, 12.0933587500], [-57.0645781250, 12.0674035938], [-57.1381312500, 12.0414484375], [-57.2116843750, 12.0154932812], [-57.2852375000, 11.9895381250], [-57.3587906250, 11.9635829687], [-57.4323437500, 11.9376278125], [-57.5058968750, 11.9116726563], [-57.5794500000, 11.8857175000], [-57.6530031250, 11.8597623437], [-57.7265562500, 11.8338071875], [-57.8001093750, 11.8078520313], [-57.8736625000, 11.7818968750], [-57.9472156250, 11.7559417188], [-58.0207687500, 11.7299865625], [-58.0943218750, 11.7040314062], [-58.1678750000, 11.6780762500], [-58.2414281250, 11.6521210938], [-58.3149812500, 11.6261659375], [-58.3885343750, 11.6002107812], [-58.4620875000, 11.5742556250], [-58.5356406250, 11.5483004687], [-58.6091937500, 11.5223453125], [-58.6827468750, 11.4963901563], [-58.7563000000, 11.4704350000], [-58.8298531250, 11.4444798437], [-58.9034062500, 11.4185246875], [-58.9769593750, 11.3925695313], [-59.0505125000, 11.3666143750], [-59.1240656250, 11.3406592188], [-59.1976187500, 11.3147040625], [-59.2711718750, 11.2887489062], [-59.3447250000, 11.2627937500], [-59.4182781250, 11.2368385938], [-59.4918312500, 11.2108834375], [-59.5653843750, 11.1849282812], [-59.6389375000, 11.1589731250], [-59.7124906250, 11.1330179687], [-59.7860437500, 11.1070628125], [-59.8595968750, 11.0811076563], [-59.9331500000, 11.0551525000], [-60.0067031250, 11.0291973437], [-60.0802562500, 11.0032421875], [-60.1538093750, 10.9772870313], [-60.2273625000, 10.9513318750], [-60.3009156250, 10.9253767188], [-60.3744687500, 10.8994215625], [-60.4480218750, 10.8734664062], [-60.5215750000, 10.8475112500], [-60.5951281250, 10.8215560938], [-60.6686812500, 10.7956009375], [-60.7422343750, 10.7696457812], [-60.8157875000, 10.7436906250], [-60.8893406250, 10.7177354687], [-60.9628937500, 10.6917803125], [-61.0364468750, 10.6658251563], [-61.1100000000, 10.6398700000], [-61.1835531250, 10.6139148437], [-61.2571062500, 10.5879596875], [-61.3306593750, 10.5620045313], [-61.4042125000, 10.5360493750], [-61.4777656250, 10.5100942188], [-61.5513187500, 10.4841390625], [-61.6248718750, 10.4581839062], [-61.6984250000, 10.4322287500], [-61.7719781250, 10.4062735938], [-61.8455312500, 10.3803184375], [-61.9190843750, 10.3543632812], [-61.9926375000, 10.3284081250], [-62.0661906250, 10.3024529687], [-62.1397437500, 10.2764978125], [-62.2132968750, 10.2505426563], [-62.2868500000, 10.2245875000], [-62.3604031250, 10.1986323437], [-62.4339562500, 10.1726771875], [-62.5075093750, 10.1467220313], [-62.5810625000, 10.1207668750], [-62.6546156250, 10.0948117188], [-62.7281687500, 10.0688565625], [-62.8017218750, 10.0429014062], [-62.8752750000, 10.0169462500], [-62.9488281250, 9.9909910938], [-63.0223812500, 9.9650359375], [-63.0959343750, 9.9390807812], [-63.1694875000, 9.9131256250], [-63.2430406250, 9.8871704687], [-63.3165937500, 9.8612153125], [-63.3901468750, 9.8352601563], [-63.4637000000, 9.8093050000], [-63.5372531250, 9.7833498437], [-63.6108062500, 9.7573946875], [-63.6843593750, 9.7314395313], [-63.7579125000, 9.7054843750], [-63.8314656250, 9.6795292188], [-63.9050187500, 9.6535740625], [-63.9785718750, 9.6276189062], [-64.0521250000, 9.6016637500], [-64.1256781250, 9.5757085938], [-64.1992312500, 9.5497534375], [-64.2727843750, 9.5237982812], [-64.3463375000, 9.4978431250], [-64.4198906250, 9.4718879687], [-64.4934437500, 9.4459328125], [-64.5669968750, 9.4199776563], [-64.6405500000, 9.3940225000], [-64.7141031250, 9.3680673437], [-64.7876562500, 9.3421121875], [-64.8612093750, 9.3161570313], [-64.9347625000, 9.2902018750], [-65.0083156250, 9.2642467188], [-65.0818687500, 9.2382915625], [-65.1554218750, 9.2123364062], [-65.2289750000, 9.1863812500], [-65.3025281250, 9.1604260938], [-65.3760812500, 9.1344709375], [-65.4496343750, 9.1085157812], [-65.5231875000, 9.0825606250], [-65.5967406250, 9.0566054687], [-65.6702937500, 9.0306503125], [-65.7438468750, 9.0046951563], [-65.8174000000, 8.9787400000], [-65.8894375000, 8.9531862500], [-65.9614750000, 8.9276325000], [-66.0335125000, 8.9020787500], [-66.1055500000, 8.8765250000], [-66.1775875000, 8.8509712500], [-66.2496250000, 8.8254175000], [-66.3216625000, 8.7998637500], [-66.3937000000, 8.7743100000], [-66.4854000000, 8.7398800000], [-66.5550562500, 8.7132601562], [-66.6247125000, 8.6866403125], [-66.6943687500, 8.6600204687], [-66.7640250000, 8.6334006250], [-66.8336812500, 8.6067807813], [-66.9033375000, 8.5801609375], [-66.9729937500, 8.5535410937], [-67.0426500000, 8.5269212500], [-67.1123062500, 8.5003014062], [-67.1819625000, 8.4736815625], [-67.2516187500, 8.4470617187], [-67.3212750000, 8.4204418750], [-67.3909312500, 8.3938220312], [-67.4605875000, 8.3672021875], [-67.5302437500, 8.3405823437], [-67.5999000000, 8.3139625000], [-67.6695562500, 8.2873426562], [-67.7392125000, 8.2607228125], [-67.8088687500, 8.2341029687], [-67.8785250000, 8.2074831250], [-67.9481812500, 8.1808632812], [-68.0178375000, 8.1542434375], [-68.0874937500, 8.1276235938], [-68.1571500000, 8.1010037500], [-68.2268062500, 8.0743839063], [-68.2964625000, 8.0477640625], [-68.3661187500, 8.0211442188], [-68.4357750000, 7.9945243750], [-68.5054312500, 7.9679045312], [-68.5750875000, 7.9412846875], [-68.6447437500, 7.9146648437], [-68.7144000000, 7.8880450000], [-68.7840562500, 7.8614251563], [-68.8537125000, 7.8348053125], [-68.9233687500, 7.8081854688], [-68.9930250000, 7.7815656250], [-69.0626812500, 7.7549457812], [-69.1323375000, 7.7283259375], [-69.2019937500, 7.7017060937], [-69.2716500000, 7.6750862500], [-69.3413062500, 7.6484664062], [-69.4109625000, 7.6218465625], [-69.4806187500, 7.5952267188], [-69.5502750000, 7.5686068750], [-69.6199312500, 7.5419870312], [-69.6895875000, 7.5153671875], [-69.7592437500, 7.4887473437], [-69.8289000000, 7.4621275000], [-69.8985562500, 7.4355076562], [-69.9682125000, 7.4088878125], [-70.0378687500, 7.3822679687], [-70.1075250000, 7.3556481250], [-70.1771812500, 7.3290282812], [-70.2468375000, 7.3024084375], [-70.3164937500, 7.2757885937], [-70.3861500000, 7.2491687500], [-70.4558062500, 7.2225489062], [-70.5254625000, 7.1959290625], [-70.5951187500, 7.1693092187], [-70.6647750000, 7.1426893750], [-70.7344312500, 7.1160695312], [-70.8040875000, 7.0894496875], [-70.8737437500, 7.0628298438], [-70.9434000000, 7.0362100000], [-71.0206000000, 7.0068200000], [-71.0847000000, 6.9819550000], [-71.1488000000, 6.9570900000], [-71.1960437500, 6.9384075000], [-71.2432875000, 6.9197250000], [-71.2905312500, 6.9010425000], [-71.3377750000, 6.8823600000], [-71.3850187500, 6.8636775000], [-71.4322625000, 6.8449950000], [-71.4795062500, 6.8263125000], [-71.5267500000, 6.8076300000], [-71.5739937500, 6.7889475000], [-71.6212375000, 6.7702650000], [-71.6684812500, 6.7515825000], [-71.7157250000, 6.7329000000], [-71.7629687500, 6.7142175000], [-71.8102125000, 6.6955350000], [-71.8574562500, 6.6768525000], [-71.9047000000, 6.6581700000], [-71.9519437500, 6.6394875000], [-71.9991875000, 6.6208050000], [-72.0464312500, 6.6021225000], [-72.0936750000, 6.5834400000], [-72.1409187500, 6.5647575000], [-72.1881625000, 6.5460750000], [-72.2354062500, 6.5273925000], [-72.2826500000, 6.5087100000], [-72.3298937500, 6.4900275000], [-72.3771375000, 6.4713450000], [-72.4243812500, 6.4526625000], [-72.4716250000, 6.4339800000], [-72.5188687500, 6.4152975000], [-72.5661125000, 6.3966150000], [-72.6133562500, 6.3779325000], [-72.6606000000, 6.3592500000], [-72.7511750000, 6.3219000000], [-72.8417500000, 6.2845500000], [-72.9323250000, 6.2472000000], [-73.0229000000, 6.2098500000], [-73.0910000000, 6.1812188281], [-73.1591000000, 6.1525876563], [-73.2272000000, 6.1239564844], [-73.2953000000, 6.0953253125], [-73.3634000000, 6.0666941406], [-73.4315000000, 6.0380629688], [-73.4996000000, 6.0094317969], [-73.5677000000, 5.9808006250], [-73.6358000000, 5.9521694531], [-73.7039000000, 5.9235382812], [-73.7720000000, 5.8949071094], [-73.8401000000, 5.8662759375], [-73.9082000000, 5.8376447656], [-73.9763000000, 5.8090135938], [-74.0444000000, 5.7803824219], [-74.1125000000, 5.7517512500], [-74.1806000000, 5.7231200781], [-74.2487000000, 5.6944889063], [-74.3168000000, 5.6658577344], [-74.3849000000, 5.6372265625], [-74.4530000000, 5.6085953906], [-74.5211000000, 5.5799642187], [-74.5892000000, 5.5513330469], [-74.6573000000, 5.5227018750], [-74.7254000000, 5.4940707031], [-74.7935000000, 5.4654395313], [-74.8616000000, 5.4368083594], [-74.9297000000, 5.4081771875], [-74.9978000000, 5.3795460156], [-75.0659000000, 5.3509148438], [-75.1340000000, 5.3222836719], [-75.2021000000, 5.2936525000], [-75.2702000000, 5.2650213281], [-75.3383000000, 5.2363901563], [-75.4064000000, 5.2077589844], [-75.4745000000, 5.1791278125], [-75.5426000000, 5.1504966406], [-75.6107000000, 5.1218654688], [-75.6788000000, 5.0932342969], [-75.7469000000, 5.0646031250], [-75.8150000000, 5.0359719531], [-75.8831000000, 5.0073407813], [-75.9512000000, 4.9787096094], [-76.0193000000, 4.9500784375], [-76.0874000000, 4.9214472656], [-76.1555000000, 4.8928160938], [-76.2236000000, 4.8641849219], [-76.2917000000, 4.8355537500], [-76.3598000000, 4.8069225781], [-76.4279000000, 4.7782914063], [-76.4960000000, 4.7496602344], [-76.5641000000, 4.7210290625], [-76.6322000000, 4.6923978906], [-76.7003000000, 4.6637667188], [-76.7684000000, 4.6351355469], [-76.8365000000, 4.6065043750], [-76.9046000000, 4.5778732031], [-76.9727000000, 4.5492420313], [-77.0408000000, 4.5206108594], [-77.1089000000, 4.4919796875], [-77.1770000000, 4.4633485156], [-77.2451000000, 4.4347173438], [-77.3132000000, 4.4060861719], [-77.3813000000, 4.3774550000], [-77.4494000000, 4.3488238281], [-77.5175000000, 4.3201926563], [-77.5856000000, 4.2915614844], [-77.6537000000, 4.2629303125], [-77.7218000000, 4.2342991406], [-77.7899000000, 4.2056679688], [-77.8580000000, 4.1770367969], [-77.9261000000, 4.1484056250], [-77.9942000000, 4.1197744531], [-78.0623000000, 4.0911432812], [-78.1304000000, 4.0625121094], [-78.1985000000, 4.0338809375], [-78.2666000000, 4.0052497656], [-78.3347000000, 3.9766185938], [-78.4028000000, 3.9479874219], [-78.4709000000, 3.9193562500], [-78.5390000000, 3.8907250781], [-78.6071000000, 3.8620939063], [-78.6752000000, 3.8334627344], [-78.7433000000, 3.8048315625], [-78.8114000000, 3.7762003906], [-78.8795000000, 3.7475692188], [-78.9476000000, 3.7189380469], [-79.0157000000, 3.6903068750], [-79.0838000000, 3.6616757031], [-79.1519000000, 3.6330445313], [-79.2200000000, 3.6044133594], [-79.2881000000, 3.5757821875], [-79.3562000000, 3.5471510156], [-79.4243000000, 3.5185198438], [-79.4924000000, 3.4898886719], [-79.5605000000, 3.4612575000], [-79.6286000000, 3.4326263281], [-79.6967000000, 3.4039951563], [-79.7648000000, 3.3753639844], [-79.8329000000, 3.3467328125], [-79.9010000000, 3.3181016406], [-79.9691000000, 3.2894704688], [-80.0372000000, 3.2608392969], [-80.1053000000, 3.2322081250], [-80.1734000000, 3.2035769531], [-80.2415000000, 3.1749457812], [-80.3096000000, 3.1463146094], [-80.3777000000, 3.1176834375], [-80.4458000000, 3.0890522656], [-80.5139000000, 3.0604210938], [-80.5820000000, 3.0317899219], [-80.6501000000, 3.0031587500], [-80.7182000000, 2.9745275781], [-80.7863000000, 2.9458964063], [-80.8544000000, 2.9172652344], [-80.9225000000, 2.8886340625], [-80.9906000000, 2.8600028906], [-81.0587000000, 2.8313717187], [-81.1268000000, 2.8027405469], [-81.1949000000, 2.7741093750], [-81.2630000000, 2.7454782031], [-81.3311000000, 2.7168470312], [-81.3992000000, 2.6882158594], [-81.4673000000, 2.6595846875], [-81.5354000000, 2.6309535156], [-81.6035000000, 2.6023223438], [-81.6716000000, 2.5736911719], [-81.7397000000, 2.5450600000], [-81.7912500000, 2.5226525000], [-81.8428000000, 2.5002450000], [-81.8943500000, 2.4778375000], [-81.9459000000, 2.4554300000], [-82.0336187500, 2.4152235469], [-82.1213375000, 2.3750170937], [-82.2090562500, 2.3348106406], [-82.2967750000, 2.2946041875], [-82.3844937500, 2.2543977344], [-82.4722125000, 2.2141912812], [-82.5599312500, 2.1739848281], [-82.6476500000, 2.1337783750], [-82.7353687500, 2.0935719219], [-82.8230875000, 2.0533654688], [-82.9108062500, 2.0131590156], [-82.9985250000, 1.9729525625], [-83.0862437500, 1.9327461094], [-83.1739625000, 1.8925396562], [-83.2616812500, 1.8523332031], [-83.3494000000, 1.8121267500], [-83.4371187500, 1.7719202969], [-83.5248375000, 1.7317138437], [-83.6125562500, 1.6915073906], [-83.7002750000, 1.6513009375], [-83.7879937500, 1.6110944844], [-83.8757125000, 1.5708880312], [-83.9634312500, 1.5306815781], [-84.0511500000, 1.4904751250], [-84.1388687500, 1.4502686719], [-84.2265875000, 1.4100622187], [-84.3143062500, 1.3698557656], [-84.4020250000, 1.3296493125], [-84.4897437500, 1.2894428594], [-84.5774625000, 1.2492364062], [-84.6651812500, 1.2090299531], [-84.7529000000, 1.1688235000], [-84.8406187500, 1.1286170469], [-84.9283375000, 1.0884105937], [-85.0160562500, 1.0482041406], [-85.1037750000, 1.0079976875], [-85.1914937500, 0.9677912344], [-85.2792125000, 0.9275847812], [-85.3669312500, 0.8873783281], [-85.4546500000, 0.8471718750], [-85.5423687500, 0.8069654219], [-85.6300875000, 0.7667589687], [-85.7178062500, 0.7265525156], [-85.8055250000, 0.6863460625], [-85.8932437500, 0.6461396094], [-85.9809625000, 0.6059331562], [-86.0686812500, 0.5657267031], [-86.1564000000, 0.5255202500], [-86.2441187500, 0.4853137969], [-86.3318375000, 0.4451073437], [-86.4195562500, 0.4049008906], [-86.5072750000, 0.3646944375], [-86.5949937500, 0.3244879844], [-86.6827125000, 0.2842815312], [-86.7704312500, 0.2440750781], [-86.8581500000, 0.2038686250], [-86.9458687500, 0.1636621719], [-87.0335875000, 0.1234557187], [-87.1213062500, 0.0832492656], [-87.2090250000, 0.0430428125], [-87.2967437500, 0.0028363594], [-87.3844625000, -0.0373700938], [-87.4721812500, -0.0775765469], [-87.5599000000, -0.1177830000], [-87.4773312500, -0.1553629531], [-87.3947625000, -0.1929429062], [-87.3121937500, -0.2305228594], [-87.2296250000, -0.2681028125], [-87.1470562500, -0.3056827656], [-87.0644875000, -0.3432627188], [-86.9819187500, -0.3808426719], [-86.8993500000, -0.4184226250], [-86.8167812500, -0.4560025781], [-86.7342125000, -0.4935825312], [-86.6516437500, -0.5311624844], [-86.5690750000, -0.5687424375], [-86.4865062500, -0.6063223906], [-86.4039375000, -0.6439023437], [-86.3213687500, -0.6814822969], [-86.2388000000, -0.7190622500], [-86.1562312500, -0.7566422031], [-86.0736625000, -0.7942221563], [-85.9910937500, -0.8318021094], [-85.9085250000, -0.8693820625], [-85.8259562500, -0.9069620156], [-85.7433875000, -0.9445419687], [-85.6608187500, -0.9821219219], [-85.5782500000, -1.0197018750], [-85.4956812500, -1.0572818281], [-85.4131125000, -1.0948617813], [-85.3305437500, -1.1324417344], [-85.2479750000, -1.1700216875], [-85.1654062500, -1.2076016406], [-85.0828375000, -1.2451815937], [-85.0002687500, -1.2827615469], [-84.9177000000, -1.3203415000], [-84.8351312500, -1.3579214531], [-84.7525625000, -1.3955014063], [-84.6699937500, -1.4330813594], [-84.5874250000, -1.4706613125], [-84.5048562500, -1.5082412656], [-84.4222875000, -1.5458212188], [-84.3397187500, -1.5834011719], [-84.2571500000, -1.6209811250], [-84.1745812500, -1.6585610781], [-84.0920125000, -1.6961410313], [-84.0094437500, -1.7337209844], [-83.9268750000, -1.7713009375], [-83.8443062500, -1.8088808906], [-83.7617375000, -1.8464608438], [-83.6791687500, -1.8840407969], [-83.5966000000, -1.9216207500], [-83.5140312500, -1.9592007031], [-83.4314625000, -1.9967806562], [-83.3488937500, -2.0343606094], [-83.2663250000, -2.0719405625], [-83.1837562500, -2.1095205156], [-83.1011875000, -2.1471004687], [-83.0186187500, -2.1846804219], [-82.9360500000, -2.2222603750], [-82.8534812500, -2.2598403281], [-82.7709125000, -2.2974202812], [-82.6883437500, -2.3350002344], [-82.6057750000, -2.3725801875], [-82.5232062500, -2.4101601406], [-82.4406375000, -2.4477400937], [-82.3580687500, -2.4853200469], [-82.2755000000, -2.5229000000], [-82.2201250000, -2.5483900000], [-82.1647500000, -2.5738800000], [-82.1093750000, -2.5993700000], [-82.0540000000, -2.6248600000], [-81.9965000000, -2.6504600000], [-81.9390000000, -2.6760600000], [-81.8692421875, -2.7051670313], [-81.7994843750, -2.7342740625], [-81.7297265625, -2.7633810938], [-81.6599687500, -2.7924881250], [-81.5902109375, -2.8215951562], [-81.5204531250, -2.8507021875], [-81.4506953125, -2.8798092188], [-81.3809375000, -2.9089162500], [-81.3111796875, -2.9380232813], [-81.2414218750, -2.9671303125], [-81.1716640625, -2.9962373437], [-81.1019062500, -3.0253443750], [-81.0321484375, -3.0544514063], [-80.9623906250, -3.0835584375], [-80.8926328125, -3.1126654687]]);
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
import math
import time

from stl import mesh, Dimension

from tkinter import Tk     # from tkinter import Tk for Python 3.x
from tkinter.filedialog import askopenfilename
from mpl_toolkits.mplot3d import art3d
from matplotlib import pyplot as plt
import solid
import os
import ezdxf
import shapely.geometry as sg
import subprocess
from GUI import getSCADPath



def outputSTL(From, To, PATH=getSCADPath()):
    subprocess.Popen(PATH + " -o " + To + " " + From)
    while not os.path.exists(To):
        time.sleep(1)


def get_size(i):
    x_list = [int(a) for a in str(i)]
    return len(x_list)



class Model:
    def __init__(self, model, fileName, location, layer, thickness):
        self.location = location
        self.code = None
        self.fileName = fileName
        self.stl = fileName + ".stl"
        self.layer = layer
        self.thickness = thickness
        self.maxz = (layer+1)*thickness
        self.dxf = fileName + ".dxf"
        self.scad = fileName + ".scad"
        self.model = model
        self.center = None
        self.width = 10
        self.mesh = None
        self.useable_area = None


    def get_code(self):
        max_dim = 0.05
        max_array = 6

        num = int(self.fileName)
        nums = [int(a) for a in str(num)]
        nums.reverse()
        indices = nums
        length = len(nums)

        print(indices)
        t = 0
        i = 0
        cubes = []
        x = 0
        y = 0
        width = 0.01
        while x <= max_dim:
            while y <= max_dim:
                print(indices)
                if nums == []:
                    break
                if indices[0] != 0:
                    cubes.append(solid.translate([x, y, 0])(solid.cube(size=t / 1000 + 0.001)))
                    y += max_dim / (max_array - 1)
                    nums[0] = nums[0] - 1
                else:
                    indices.pop(0)
                    t += 1
                i += 1
            x += max_dim / (max_array - 1)
            y = 0

        outside = solid.translate([-width / 2, -width / 2])(solid.cube(max_dim + (length - 1) / 1000 + 0.001 + width))
        self.code = solid.difference()(outside, cubes)
        self.code = solid.projection(cut=True)(self.code)
        solid.scad_render_to_file(self.code, self.location + "/code.scad")
        outputSTL(From=self.location+"/code.scad", To=self.location+"code.dxf", PATH=getSCADPath())
        # os.system("toSTL.sh renders/code.scad renders/code.dxf")
        return self.location+"/code.dxf"

    def download(self, type):
        if type =="stl":
            print("generating:" + self.location+"/"+ self.fileName+".stl")
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".stl")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".stl")
        elif type == "dxf":
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".dxf")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".dxf")

    def render(self):
        solid.scad_render_to_file(self.model, self.location+"/"+ self.fileName+'.scad')
        while not os.path.exists(self.location+"/"+self.fileName+".scad"):
            time.sleep(1)

    def get_points(self):
        doc = ezdxf.readfile(filename=self.location+"/"+ self.fileName+".dxf")
        msp = doc.modelspace()
        i=0
        lists = []
        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return [start, end]

        for e in msp.query("LINE"):
            line = helper(e)
            if not lists:
                lists.append([line])
            else:
                if lists[i][len(lists)-1][1] != line[0]:
                    lists.append([line])
                    i+=1
                else:
                    lists[i].append(line)

    def get_points2(self, FILE):
        doc = ezdxf.readfile(filename=FILE)
        msp = doc.modelspace()
        i = 0
        lists = []

        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return (start, end)

        for e in msp.query("LINE"):
            line = helper(e)
            if lists==[]:
                lists.append([line])
            else:
                if lists[i][len(lists[i]) - 1][1] != line[0]:
                    lists.append([line])
                    i += 1
                else:
                    lists[i].append(line)
        return lists

    def add_code(self):
        dxf = solid.projection(cut=False)(self.model)
        offset = solid.offset(r=-0.1)(dxf)
        solid.scad_render_to_file(offset, self.location+'/offset.scad')
        os.system("toSTL.sh renders/offset.scad renders/offset.dxf")
        lines = self.get_points2("renders/offset.dxf")
        x = lines[0][0][0][0]
        y = lines[0][0][0][1]
        print(x)
        print(y)
        code = solid.translate([x,y,0])(self.code)
        code = solid.linear_extrude(height=999)(code)
        save = self.model
        self.model = solid.projection()(solid.difference()(self.model, code))
        self.render()
        self.download("dxf")
        self.model = save

    def add_label(self, pos):
        # num = 12
        # minx, maxx, miny, maxy, minz, maxz = self.find_minmax()
        maxz = self.maxz
        # label = solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.5, halign="center"))
        # i=minx
        # print("x-len: " + str(maxx-minx))
        # print(i)
        # inc = (maxx-minx)/num
        # while minx <= i <= maxx:
        #     label = solid.union()(solid.translate([i, 0, maxz - 0.2])(solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.25, halign="center"))), label)
        #     i += inc
        #
        # l = label
        #
        # i =miny
        # while miny<= i <= maxy:
        #     print("y inc")
        #     l = solid.union()(solid.translate([0, i, 0])(label), l)
        #     i += 0.5
        for i in str(self.fileName):
            cur = pos[0]
            label = solid.translate([pos[0][0], pos[0][1], self.maxz-0.2])(solid.linear_extrude(height=(self.thickness)/3)(solid.text(str(i), size=0.5, halign="center", valign="center")))
            self.model = solid.difference()(self.model, label)
            pos.append(pos.pop(0))
            while abs(cur[0]-pos[0][0])<0.5 and abs(cur[1]-pos[0][1])<0.5:
                pos.append(pos.pop(0))



    def Center(self):

        volume, cog, inertia = self.mesh.get_mass_properties()
        print("Volume                                  = {0}".format(volume))
        print("Position of the center of gravity (COG) = {0}".format(cog))
        m_centered = solid.translate([-cog[0], -cog[1], 0])(
            self.model
        )
        return m_centered

    def find_minmax(self):
        minx = maxx = miny = maxy = minz = maxz = None
        for p in self.mesh.points:
            # p contains (x, y, z)
            if minx is None:
                minx = p[Dimension.X]
                maxx = p[Dimension.X]
                miny = p[Dimension.Y]
                maxy = p[Dimension.Y]
                minz = p[Dimension.Z]
                maxz = p[Dimension.Z]
            else:
                maxx = max(p[Dimension.X], maxx)
                minx = min(p[Dimension.X], minx)
                maxy = max(p[Dimension.Y], maxy)
                miny = min(p[Dimension.Y], miny)
                maxz = max(p[Dimension.Z], maxz)
                minz = min(p[Dimension.Z], minz)
        lenx = maxx - minx
        leny = maxy - miny
        lenz = maxz - minz
        return minx, maxx, miny, maxy, minz, maxz

    # def generate_Mesh(self):
    #     self.mesh = mesh.Mesh.from_file(self.location + "/" + str(int(self.fileName)//8)+ "b.stl")

    def get_top(self):
        top = solid.projection(cut=True)(solid.translate([0,0,-1*self.thickness*(self.layer+1)])(self.model))
        useable_area = solid.offset(r=-0.45)(top)
        self.useable_area = useable_area
        solid.scad_render_to_file(self.useable_area, self.location+'/' + 'toptemp.scad')
        outputSTL(From=self.location+'/' + 'toptemp.scad', To=self.location+"/top"+ self.dxf)

        # os.system("toSTL.sh out/toptemp.scad renders/" + self.fileName + ".dxf")
        dxf = DXF(self.location+"/top"+ self.dxf)
        min_p=dxf.points[0][0]
        points_ordered = dxf.points
        i=0
        while i <= len(dxf.points)+1:
            while math.sqrt((dxf.points[0][0]-dxf.points[1][0])**2+(dxf.points[0][1]-dxf.points[1][1])**2) > 0.1:
                dxf.points.insert(1, [(dxf.points[0][0]+dxf.points[1][0])/2, (dxf.points[0][1]+dxf.points[1][1])/2])
                i = i-1
            dxf.points.append(dxf.points.pop(0))
            i+=1
        for i in range(len(dxf.points)):
            dxf.points.append(dxf.points.pop(0))
            if dxf.points[0][0] < min_p:
                min_p = dxf.points[0][0]
                points_ordered = dxf.points.copy()
        dxf.points = points_ordered.copy()

        print(dxf.points)
        self.add_label(dxf.points)

class DXF:
    def __init__(self, file):
        self.file = file
        self.Lines = []
        self.points = []
        doc = ezdxf.readfile(self.file)
        msp = doc.modelspace()
        for e in msp:
            if e.dxftype() == "LINE":
                self.Lines.append(e)
                self.points.append([e.dxf.start[0], e.dxf.start[1]])
        # self.points.append([self.Lines[-1].dxf.end[0], self.Lines[-1].dxf.end[1]])
        self.area = None
        self.center = None
        self.polygon = sg.Polygon(self.points)

    def get_area(self):
        self.area = self.polygon.area
        return self.area

    def get_center(self):
        x_sum = 0
        y_sum =0
        for i in self.points:
            x_sum += i[0]
            y_sum += i[1]
        x_c = x_sum/len(self.points)
        y_c = y_sum/len(self.points)
        return (x_c, y_c)

    def split(self, maxdim):
        splits = []
        length = 0
        pieces = [[]]
        prev = self.points[0]
        for j in self.points:
            length = length + math.sqrt((prev[0]-j[0])**2+(prev[1]-j[1])**2)
            if length >= maxdim:
                pieces[-1].append(j)
                pieces.append([])
                length = 0
            pieces[-1].append(j)
            prev = j
        for j in pieces:
            j.insert(0, [0,0])
            piece = solid.linear_extrude(height=10)(solid.polygon(j))
            splits.append(piece)
        return splits
    def refine_points(self):
        i=0
        while i <= len(self.points)+1:
            while math.sqrt((self.points[0][0]-self.points[1][0])**2+(self.points[0][1]-self.points[1][1])**2) > 0.1:
                self.points.insert(1, [(self.points[0][0]+self.points[1][0])/2, (self.points[0][1]+self.points[1][1])/2])
                i = i-1
            self.points.append(self.points.pop(0))
            i+=1


if __name__== "__main__":
    test = DXF("C:/Users/Daniel/Documents/repos/Shell_Maker/output/0top_slice.dxf")
    test.refine_points()
    k = test.split(48)
    for i in range(len(k)):
        solid.scad_render_to_file(k[i], str(i) + ".scad")


 
 
************************************************/
