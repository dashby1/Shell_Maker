// Generated by SolidPython 1.1.3 on 2024-05-26 01:59:28


intersection() {
	difference() {
		intersection() {
			translate(v = [0, 0, 0]) {
				import(file = "CE3E3V2_Bottom_shell.stl", origin = [0, 0]);
			}
			translate(v = [-90.04029846191406, -32.690147399902344, 10]) {
				cube(size = [180.0806, 65.380295, 2]);
			}
		}
		linear_extrude(height = 999) {
			offset(r = -1) {
				import(file = "C:/Users/Daniel/Documents/repos/Shell_Maker/output/5top_slice.dxf", origin = [0, 0]);
			}
		}
	}
	translate(v = [0, 0, 10]) {
		linear_extrude(height = 10) {
			polygon(points = [[0, 0], [-85.5267750000, -1.0431376250], [-85.4759468750, -1.0662718906], [-85.4251187500, -1.0894061562], [-85.3742906250, -1.1125404219], [-85.3234625000, -1.1356746875], [-85.2726343750, -1.1588089531], [-85.2218062500, -1.1819432187], [-85.1709781250, -1.2050774844], [-85.1201500000, -1.2282117500], [-85.0693218750, -1.2513460156], [-85.0184937500, -1.2744802813], [-84.9676656250, -1.2976145469], [-84.9168375000, -1.3207488125], [-84.8660093750, -1.3438830781], [-84.8151812500, -1.3670173438], [-84.7643531250, -1.3901516094], [-84.7135250000, -1.4132858750], [-84.6626968750, -1.4364201406], [-84.6118687500, -1.4595544063], [-84.5610406250, -1.4826886719], [-84.5102125000, -1.5058229375], [-84.4593843750, -1.5289572031], [-84.4085562500, -1.5520914688], [-84.3577281250, -1.5752257344], [-84.3069000000, -1.5983600000], [-84.2580843750, -1.6208328125], [-84.2092687500, -1.6433056250], [-84.1604531250, -1.6657784375], [-84.1116375000, -1.6882512500], [-84.0628218750, -1.7107240625], [-84.0140062500, -1.7331968750], [-83.9651906250, -1.7556696875], [-83.9163750000, -1.7781425000], [-83.8675593750, -1.8006153125], [-83.8187437500, -1.8230881250], [-83.7699281250, -1.8455609375], [-83.7211125000, -1.8680337500], [-83.6722968750, -1.8905065625], [-83.6234812500, -1.9129793750], [-83.5746656250, -1.9354521875], [-83.5258500000, -1.9579250000], [-83.4770343750, -1.9803978125], [-83.4282187500, -2.0028706250], [-83.3794031250, -2.0253434375], [-83.3305875000, -2.0478162500], [-83.2817718750, -2.0702890625], [-83.2329562500, -2.0927618750], [-83.1841406250, -2.1152346875], [-83.1353250000, -2.1377075000], [-83.0865093750, -2.1601803125], [-83.0376937500, -2.1826531250], [-82.9888781250, -2.2051259375], [-82.9400625000, -2.2275987500], [-82.8912468750, -2.2500715625], [-82.8424312500, -2.2725443750], [-82.7936156250, -2.2950171875], [-82.7448000000, -2.3174900000], [-82.6872250000, -2.3431050000], [-82.6296500000, -2.3687200000], [-82.5720750000, -2.3943350000], [-82.5145000000, -2.4199500000], [-82.4247531250, -2.4573982813], [-82.3350062500, -2.4948465625], [-82.2452593750, -2.5322948437], [-82.1555125000, -2.5697431250], [-82.0657656250, -2.6071914063], [-81.9760187500, -2.6446396875], [-81.8862718750, -2.6820879687], [-81.7965250000, -2.7195362500], [-81.7067781250, -2.7569845313], [-81.6170312500, -2.7944328125], [-81.5272843750, -2.8318810937], [-81.4375375000, -2.8693293750], [-81.3477906250, -2.9067776563], [-81.2580437500, -2.9442259375], [-81.1682968750, -2.9816742187], [-81.0785500000, -3.0191225000], [-80.9888031250, -3.0565707813], [-80.8990562500, -3.0940190625], [-80.8093093750, -3.1314673437], [-80.7195625000, -3.1689156250], [-80.6298156250, -3.2063639063], [-80.5400687500, -3.2438121875], [-80.4503218750, -3.2812604687], [-80.3605750000, -3.3187087500], [-80.2708281250, -3.3561570312], [-80.1810812500, -3.3936053125], [-80.0913343750, -3.4310535937], [-80.0015875000, -3.4685018750], [-79.9118406250, -3.5059501562], [-79.8220937500, -3.5433984375], [-79.7323468750, -3.5808467187], [-79.6426000000, -3.6182950000], [-79.5528531250, -3.6557432812], [-79.4631062500, -3.6931915625], [-79.3733593750, -3.7306398437], [-79.2836125000, -3.7680881250], [-79.1938656250, -3.8055364062], [-79.1041187500, -3.8429846875], [-79.0143718750, -3.8804329687], [-78.9246250000, -3.9178812500], [-78.8348781250, -3.9553295312], [-78.7451312500, -3.9927778125], [-78.6553843750, -4.0302260937], [-78.5656375000, -4.0676743750], [-78.4758906250, -4.1051226562], [-78.3861437500, -4.1425709375], [-78.2963968750, -4.1800192187], [-78.2066500000, -4.2174675000], [-78.1169031250, -4.2549157813], [-78.0271562500, -4.2923640625], [-77.9374093750, -4.3298123437], [-77.8476625000, -4.3672606250], [-77.7579156250, -4.4047089062], [-77.6681687500, -4.4421571875], [-77.5784218750, -4.4796054687], [-77.4886750000, -4.5170537500], [-77.3989281250, -4.5545020312], [-77.3091812500, -4.5919503125], [-77.2194343750, -4.6293985937], [-77.1296875000, -4.6668468750], [-77.0399406250, -4.7042951562], [-76.9501937500, -4.7417434375], [-76.8604468750, -4.7791917187], [-76.7707000000, -4.8166400000], [-76.7215359375, -4.8376565625], [-76.6723718750, -4.8586731250], [-76.6232078125, -4.8796896875], [-76.5740437500, -4.9007062500], [-76.5248796875, -4.9217228125], [-76.4757156250, -4.9427393750], [-76.4265515625, -4.9637559375], [-76.3773875000, -4.9847725000], [-76.3282234375, -5.0057890625], [-76.2790593750, -5.0268056250], [-76.2298953125, -5.0478221875], [-76.1807312500, -5.0688387500], [-76.1315671875, -5.0898553125], [-76.0824031250, -5.1108718750], [-76.0332390625, -5.1318884375], [-75.9840750000, -5.1529050000], [-75.9349109375, -5.1739215625], [-75.8857468750, -5.1949381250], [-75.8365828125, -5.2159546875], [-75.7874187500, -5.2369712500], [-75.7382546875, -5.2579878125], [-75.6890906250, -5.2790043750], [-75.6399265625, -5.3000209375], [-75.5907625000, -5.3210375000], [-75.5415984375, -5.3420540625], [-75.4924343750, -5.3630706250], [-75.4432703125, -5.3840871875], [-75.3941062500, -5.4051037500], [-75.3449421875, -5.4261203125], [-75.2957781250, -5.4471368750], [-75.2466140625, -5.4681534375], [-75.1974500000, -5.4891700000], [-75.1482859375, -5.5101865625], [-75.0991218750, -5.5312031250], [-75.0499578125, -5.5522196875], [-75.0007937500, -5.5732362500], [-74.9516296875, -5.5942528125], [-74.9024656250, -5.6152693750], [-74.8533015625, -5.6362859375], [-74.8041375000, -5.6573025000], [-74.7549734375, -5.6783190625], [-74.7058093750, -5.6993356250], [-74.6566453125, -5.7203521875], [-74.6074812500, -5.7413687500], [-74.5583171875, -5.7623853125], [-74.5091531250, -5.7834018750], [-74.4599890625, -5.8044184375], [-74.4108250000, -5.8254350000], [-74.3616609375, -5.8464515625], [-74.3124968750, -5.8674681250], [-74.2633328125, -5.8884846875], [-74.2141687500, -5.9095012500], [-74.1650046875, -5.9305178125], [-74.1158406250, -5.9515343750], [-74.0666765625, -5.9725509375], [-74.0175125000, -5.9935675000], [-73.9683484375, -6.0145840625], [-73.9191843750, -6.0356006250], [-73.8700203125, -6.0566171875], [-73.8208562500, -6.0776337500], [-73.7716921875, -6.0986503125], [-73.7225281250, -6.1196668750], [-73.6733640625, -6.1406834375], [-73.6242000000, -6.1617000000], [-73.5541250000, -6.1897800000], [-73.4840500000, -6.2178600000], [-73.4139750000, -6.2459400000], [-73.3439000000, -6.2740200000], [-73.2933500000, -6.2939550000], [-73.2428000000, -6.3138900000], [-73.1922500000, -6.3338250000], [-73.1417000000, -6.3537600000], [-73.0911500000, -6.3736950000], [-73.0406000000, -6.3936300000], [-72.9900500000, -6.4135650000], [-72.9395000000, -6.4335000000], [-72.8842812500, -6.4555575000], [-72.8290625000, -6.4776150000], [-72.7738437500, -6.4996725000], [-72.7186250000, -6.5217300000], [-72.6634062500, -6.5437875000], [-72.6081875000, -6.5658450000], [-72.5529687500, -6.5879025000], [-72.4977500000, -6.6099600000], [-72.4425312500, -6.6320175000], [-72.3873125000, -6.6540750000], [-72.3320937500, -6.6761325000], [-72.2768750000, -6.6981900000], [-72.2216562500, -6.7202475000], [-72.1664375000, -6.7423050000], [-72.1112187500, -6.7643625000], [-72.0560000000, -6.7864200000], [-71.9947062500, -6.8097740625], [-71.9334125000, -6.8331281250], [-71.8721187500, -6.8564821875], [-71.8108250000, -6.8798362500], [-71.7495312500, -6.9031903125], [-71.6882375000, -6.9265443750], [-71.6269437500, -6.9498984375], [-71.5656500000, -6.9732525000], [-71.5043562500, -6.9966065625], [-71.4430625000, -7.0199606250], [-71.3817687500, -7.0433146875], [-71.3204750000, -7.0666687500], [-71.2591812500, -7.0900228125], [-71.1978875000, -7.1133768750], [-71.1365937500, -7.1367309375], [-71.0753000000, -7.1600850000], [-71.0140062500, -7.1834390625], [-70.9527125000, -7.2067931250], [-70.8914187500, -7.2301471875], [-70.8301250000, -7.2535012500], [-70.7688312500, -7.2768553125], [-70.7075375000, -7.3002093750], [-70.6462437500, -7.3235634375], [-70.5849500000, -7.3469175000], [-70.5236562500, -7.3702715625], [-70.4623625000, -7.3936256250], [-70.4010687500, -7.4169796875], [-70.3397750000, -7.4403337500], [-70.2784812500, -7.4636878125], [-70.2171875000, -7.4870418750], [-70.1558937500, -7.5103959375], [-70.0946000000, -7.5337500000], [-70.0333062500, -7.5571040625], [-69.9720125000, -7.5804581250], [-69.9107187500, -7.6038121875], [-69.8494250000, -7.6271662500], [-69.7881312500, -7.6505203125], [-69.7268375000, -7.6738743750], [-69.6655437500, -7.6972284375], [-69.6042500000, -7.7205825000], [-69.5429562500, -7.7439365625], [-69.4816625000, -7.7672906250], [-69.4203687500, -7.7906446875], [-69.3590750000, -7.8139987500], [-69.2977812500, -7.8373528125], [-69.2364875000, -7.8607068750], [-69.1751937500, -7.8840609375], [-69.1139000000, -7.9074150000], [-69.0526062500, -7.9307690625], [-68.9913125000, -7.9541231250], [-68.9300187500, -7.9774771875], [-68.8687250000, -8.0008312500], [-68.8074312500, -8.0241853125], [-68.7461375000, -8.0475393750], [-68.6848437500, -8.0708934375], [-68.6235500000, -8.0942475000], [-68.5622562500, -8.1176015625], [-68.5009625000, -8.1409556250], [-68.4396687500, -8.1643096875], [-68.3783750000, -8.1876637500], [-68.3170812500, -8.2110178125], [-68.2557875000, -8.2343718750], [-68.1944937500, -8.2577259375], [-68.1332000000, -8.2810800000], [-68.0714531250, -8.3045193750], [-68.0097062500, -8.3279587500], [-67.9479593750, -8.3513981250], [-67.8862125000, -8.3748375000], [-67.8244656250, -8.3982768750], [-67.7627187500, -8.4217162500], [-67.7009718750, -8.4451556250], [-67.6392250000, -8.4685950000], [-67.5774781250, -8.4920343750], [-67.5157312500, -8.5154737500], [-67.4539843750, -8.5389131250], [-67.3922375000, -8.5623525000], [-67.3304906250, -8.5857918750], [-67.2687437500, -8.6092312500], [-67.2069968750, -8.6326706250], [-67.1452500000, -8.6561100000], [-67.0835031250, -8.6795493750], [-67.0217562500, -8.7029887500], [-66.9600093750, -8.7264281250], [-66.8982625000, -8.7498675000], [-66.8365156250, -8.7733068750], [-66.7747687500, -8.7967462500], [-66.7130218750, -8.8201856250], [-66.6512750000, -8.8436250000], [-66.5895281250, -8.8670643750], [-66.5277812500, -8.8905037500], [-66.4660343750, -8.9139431250], [-66.4042875000, -8.9373825000], [-66.3425406250, -8.9608218750], [-66.2807937500, -8.9842612500], [-66.2190468750, -9.0077006250], [-66.1573000000, -9.0311400000], [-66.0723000000, -9.0624200000], [-65.9841250000, -9.0932681250], [-65.8959500000, -9.1241162500], [-65.8077750000, -9.1549643750], [-65.7196000000, -9.1858125000], [-65.6314250000, -9.2166606250], [-65.5432500000, -9.2475087500], [-65.4550750000, -9.2783568750], [-65.3669000000, -9.3092050000], [-65.2787250000, -9.3400531250], [-65.1905500000, -9.3709012500], [-65.1023750000, -9.4017493750], [-65.0142000000, -9.4325975000], [-64.9260250000, -9.4634456250], [-64.8378500000, -9.4942937500], [-64.7496750000, -9.5251418750], [-64.6615000000, -9.5559900000], [-64.5733250000, -9.5868381250], [-64.4851500000, -9.6176862500], [-64.3969750000, -9.6485343750], [-64.3088000000, -9.6793825000], [-64.2206250000, -9.7102306250], [-64.1324500000, -9.7410787500], [-64.0442750000, -9.7719268750], [-63.9561000000, -9.8027750000], [-63.8679250000, -9.8336231250], [-63.7797500000, -9.8644712500], [-63.6915750000, -9.8953193750], [-63.6034000000, -9.9261675000], [-63.5152250000, -9.9570156250], [-63.4270500000, -9.9878637500], [-63.3388750000, -10.0187118750], [-63.2507000000, -10.0495600000], [-63.1625250000, -10.0804081250], [-63.0743500000, -10.1112562500], [-62.9861750000, -10.1421043750], [-62.8980000000, -10.1729525000], [-62.8098250000, -10.2038006250], [-62.7216500000, -10.2346487500], [-62.6334750000, -10.2654968750], [-62.5453000000, -10.2963450000], [-62.4571250000, -10.3271931250], [-62.3689500000, -10.3580412500], [-62.2807750000, -10.3888893750], [-62.1926000000, -10.4197375000], [-62.1044250000, -10.4505856250], [-62.0162500000, -10.4814337500], [-61.9280750000, -10.5122818750], [-61.8399000000, -10.5431300000], [-61.7517250000, -10.5739781250], [-61.6635500000, -10.6048262500], [-61.5753750000, -10.6356743750], [-61.4872000000, -10.6665225000], [-61.3990250000, -10.6973706250], [-61.3108500000, -10.7282187500], [-61.2226750000, -10.7590668750], [-61.1345000000, -10.7899150000], [-61.0463250000, -10.8207631250], [-60.9581500000, -10.8516112500], [-60.8699750000, -10.8824593750], [-60.7818000000, -10.9133075000], [-60.6936250000, -10.9441556250], [-60.6054500000, -10.9750037500], [-60.5172750000, -11.0058518750], [-60.4291000000, -11.0367000000], [-60.3554562500, -11.0623687500], [-60.2818125000, -11.0880375000], [-60.2081687500, -11.1137062500], [-60.1345250000, -11.1393750000], [-60.0608812500, -11.1650437500], [-59.9872375000, -11.1907125000], [-59.9135937500, -11.2163812500], [-59.8399500000, -11.2420500000], [-59.7663062500, -11.2677187500], [-59.6926625000, -11.2933875000], [-59.6190187500, -11.3190562500], [-59.5453750000, -11.3447250000], [-59.4717312500, -11.3703937500], [-59.3980875000, -11.3960625000], [-59.3244437500, -11.4217312500], [-59.2508000000, -11.4474000000], [-59.1575906250, -11.4798656250], [-59.0643812500, -11.5123312500], [-58.9711718750, -11.5447968750], [-58.8779625000, -11.5772625000], [-58.7847531250, -11.6097281250], [-58.6915437500, -11.6421937500], [-58.5983343750, -11.6746593750], [-58.5051250000, -11.7071250000], [-58.4119156250, -11.7395906250], [-58.3187062500, -11.7720562500], [-58.2254968750, -11.8045218750], [-58.1322875000, -11.8369875000], [-58.0390781250, -11.8694531250], [-57.9458687500, -11.9019187500], [-57.8526593750, -11.9343843750], [-57.7594500000, -11.9668500000], [-57.6662406250, -11.9993156250], [-57.5730312500, -12.0317812500], [-57.4798218750, -12.0642468750], [-57.3866125000, -12.0967125000], [-57.2934031250, -12.1291781250], [-57.2001937500, -12.1616437500], [-57.1069843750, -12.1941093750], [-57.0137750000, -12.2265750000], [-56.9205656250, -12.2590406250], [-56.8273562500, -12.2915062500], [-56.7341468750, -12.3239718750], [-56.6409375000, -12.3564375000], [-56.5477281250, -12.3889031250], [-56.4545187500, -12.4213687500], [-56.3613093750, -12.4538343750], [-56.2681000000, -12.4863000000], [-56.2532000000, -12.4912000000], [-56.1929062500, -12.5109750000], [-56.1326125000, -12.5307500000], [-56.0723187500, -12.5505250000], [-56.0120250000, -12.5703000000], [-55.9517312500, -12.5900750000], [-55.8914375000, -12.6098500000], [-55.8311437500, -12.6296250000], [-55.7708500000, -12.6494000000], [-55.7105562500, -12.6691750000], [-55.6502625000, -12.6889500000], [-55.5899687500, -12.7087250000], [-55.5296750000, -12.7285000000], [-55.4693812500, -12.7482750000], [-55.4090875000, -12.7680500000], [-55.3487937500, -12.7878250000], [-55.2885000000, -12.8076000000], [-55.1976250000, -12.8374000000], [-55.1067500000, -12.8672000000], [-55.0158750000, -12.8970000000], [-54.9250000000, -12.9268000000], [-54.8341250000, -12.9566000000], [-54.7432500000, -12.9864000000], [-54.6523750000, -13.0162000000], [-54.5615000000, -13.0460000000], [-54.4875140625, -13.0689656250], [-54.4135281250, -13.0919312500], [-54.3395421875, -13.1148968750], [-54.2655562500, -13.1378625000], [-54.1915703125, -13.1608281250], [-54.1175843750, -13.1837937500], [-54.0435984375, -13.2067593750], [-53.9696125000, -13.2297250000], [-53.8956265625, -13.2526906250], [-53.8216406250, -13.2756562500], [-53.7476546875, -13.2986218750], [-53.6736687500, -13.3215875000], [-53.5996828125, -13.3445531250], [-53.5256968750, -13.3675187500], [-53.4517109375, -13.3904843750], [-53.3777250000, -13.4134500000], [-53.3037390625, -13.4364156250], [-53.2297531250, -13.4593812500], [-53.1557671875, -13.4823468750], [-53.0817812500, -13.5053125000], [-53.0077953125, -13.5282781250], [-52.9338093750, -13.5512437500], [-52.8598234375, -13.5742093750], [-52.7858375000, -13.5971750000], [-52.7118515625, -13.6201406250], [-52.6378656250, -13.6431062500], [-52.5638796875, -13.6660718750], [-52.4898937500, -13.6890375000], [-52.4159078125, -13.7120031250], [-52.3419218750, -13.7349687500], [-52.2679359375, -13.7579343750], [-52.1939500000, -13.7809000000], [-52.1199640625, -13.8038656250], [-52.0459781250, -13.8268312500], [-51.9719921875, -13.8497968750], [-51.8980062500, -13.8727625000], [-51.8240203125, -13.8957281250], [-51.7500343750, -13.9186937500], [-51.6760484375, -13.9416593750], [-51.6020625000, -13.9646250000], [-51.5280765625, -13.9875906250], [-51.4540906250, -14.0105562500], [-51.3801046875, -14.0335218750], [-51.3061187500, -14.0564875000], [-51.2321328125, -14.0794531250], [-51.1581468750, -14.1024187500], [-51.0841609375, -14.1253843750], [-51.0101750000, -14.1483500000], [-50.9361890625, -14.1713156250], [-50.8622031250, -14.1942812500], [-50.7882171875, -14.2172468750], [-50.7142312500, -14.2402125000], [-50.6402453125, -14.2631781250], [-50.5662593750, -14.2861437500], [-50.4922734375, -14.3091093750], [-50.4182875000, -14.3320750000], [-50.3443015625, -14.3550406250], [-50.2703156250, -14.3780062500], [-50.1963296875, -14.4009718750], [-50.1223437500, -14.4239375000], [-50.0483578125, -14.4469031250], [-49.9743718750, -14.4698687500], [-49.9003859375, -14.4928343750], [-49.8264000000, -14.5158000000], [-49.7680984375, -14.5339203125], [-49.7097968750, -14.5520406250], [-49.6514953125, -14.5701609375], [-49.5931937500, -14.5882812500], [-49.5348921875, -14.6064015625], [-49.4765906250, -14.6245218750], [-49.4182890625, -14.6426421875], [-49.3599875000, -14.6607625000], [-49.3016859375, -14.6788828125], [-49.2433843750, -14.6970031250], [-49.1850828125, -14.7151234375], [-49.1267812500, -14.7332437500], [-49.0684796875, -14.7513640625], [-49.0101781250, -14.7694843750], [-48.9518765625, -14.7876046875], [-48.8935750000, -14.8057250000], [-48.8352734375, -14.8238453125], [-48.7769718750, -14.8419656250], [-48.7186703125, -14.8600859375], [-48.6603687500, -14.8782062500], [-48.6020671875, -14.8963265625], [-48.5437656250, -14.9144468750], [-48.4854640625, -14.9325671875], [-48.4271625000, -14.9506875000], [-48.3688609375, -14.9688078125], [-48.3105593750, -14.9869281250], [-48.2522578125, -15.0050484375], [-48.1939562500, -15.0231687500], [-48.1356546875, -15.0412890625], [-48.0773531250, -15.0594093750], [-48.0190515625, -15.0775296875], [-47.9607500000, -15.0956500000], [-47.9024484375, -15.1137703125], [-47.8441468750, -15.1318906250], [-47.7858453125, -15.1500109375], [-47.7275437500, -15.1681312500], [-47.6692421875, -15.1862515625], [-47.6109406250, -15.2043718750], [-47.5526390625, -15.2224921875], [-47.4943375000, -15.2406125000], [-47.4360359375, -15.2587328125], [-47.3777343750, -15.2768531250], [-47.3194328125, -15.2949734375], [-47.2611312500, -15.3130937500], [-47.2028296875, -15.3312140625], [-47.1445281250, -15.3493343750], [-47.0862265625, -15.3674546875], [-47.0279250000, -15.3855750000], [-46.9696234375, -15.4036953125], [-46.9113218750, -15.4218156250], [-46.8530203125, -15.4399359375], [-46.7947187500, -15.4580562500], [-46.7364171875, -15.4761765625], [-46.6781156250, -15.4942968750], [-46.6198140625, -15.5124171875], [-46.5615125000, -15.5305375000], [-46.5032109375, -15.5486578125], [-46.4449093750, -15.5667781250], [-46.3866078125, -15.5848984375], [-46.3283062500, -15.6030187500], [-46.2700046875, -15.6211390625], [-46.2117031250, -15.6392593750], [-46.1534015625, -15.6573796875], [-46.0951000000, -15.6755000000], [-46.0631000000, -15.6850000000], [-45.9680281250, -15.7124687500], [-45.8729562500, -15.7399375000], [-45.7778843750, -15.7674062500], [-45.6828125000, -15.7948750000], [-45.5877406250, -15.8223437500], [-45.4926687500, -15.8498125000], [-45.3975968750, -15.8772812500], [-45.3025250000, -15.9047500000], [-45.2074531250, -15.9322187500], [-45.1123812500, -15.9596875000], [-45.0173093750, -15.9871562500], [-44.9222375000, -16.0146250000], [-44.8271656250, -16.0420937500], [-44.7320937500, -16.0695625000], [-44.6370218750, -16.0970312500], [-44.5419500000, -16.1245000000], [-44.4468781250, -16.1519687500], [-44.3518062500, -16.1794375000], [-44.2567343750, -16.2069062500], [-44.1616625000, -16.2343750000], [-44.0665906250, -16.2618437500], [-43.9715187500, -16.2893125000], [-43.8764468750, -16.3167812500], [-43.7813750000, -16.3442500000], [-43.6863031250, -16.3717187500], [-43.5912312500, -16.3991875000], [-43.4961593750, -16.4266562500], [-43.4010875000, -16.4541250000], [-43.3060156250, -16.4815937500], [-43.2109437500, -16.5090625000], [-43.1158718750, -16.5365312500], [-43.0208000000, -16.5640000000], [-42.9644421875, -16.5797500000], [-42.9080843750, -16.5955000000], [-42.8517265625, -16.6112500000], [-42.7953687500, -16.6270000000], [-42.7390109375, -16.6427500000], [-42.6826531250, -16.6585000000], [-42.6262953125, -16.6742500000], [-42.5699375000, -16.6900000000], [-42.5135796875, -16.7057500000], [-42.4572218750, -16.7215000000], [-42.4008640625, -16.7372500000], [-42.3445062500, -16.7530000000], [-42.2881484375, -16.7687500000], [-42.2317906250, -16.7845000000], [-42.1754328125, -16.8002500000], [-42.1190750000, -16.8160000000], [-42.0627171875, -16.8317500000], [-42.0063593750, -16.8475000000], [-41.9500015625, -16.8632500000], [-41.8936437500, -16.8790000000], [-41.8372859375, -16.8947500000], [-41.7809281250, -16.9105000000], [-41.7245703125, -16.9262500000], [-41.6682125000, -16.9420000000], [-41.6118546875, -16.9577500000], [-41.5554968750, -16.9735000000], [-41.4991390625, -16.9892500000], [-41.4427812500, -17.0050000000], [-41.3864234375, -17.0207500000], [-41.3300656250, -17.0365000000], [-41.2737078125, -17.0522500000], [-41.2173500000, -17.0680000000], [-41.1609921875, -17.0837500000], [-41.1046343750, -17.0995000000], [-41.0482765625, -17.1152500000], [-40.9919187500, -17.1310000000], [-40.9355609375, -17.1467500000], [-40.8792031250, -17.1625000000], [-40.8228453125, -17.1782500000], [-40.7664875000, -17.1940000000], [-40.7101296875, -17.2097500000], [-40.6537718750, -17.2255000000], [-40.5974140625, -17.2412500000], [-40.5410562500, -17.2570000000], [-40.4846984375, -17.2727500000], [-40.4283406250, -17.2885000000], [-40.3719828125, -17.3042500000]]);
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
import math
import time

from stl import mesh, Dimension

from tkinter import Tk     # from tkinter import Tk for Python 3.x
from tkinter.filedialog import askopenfilename
from mpl_toolkits.mplot3d import art3d
from matplotlib import pyplot as plt
import solid
import os
import ezdxf
import shapely.geometry as sg
import subprocess
from GUI import getSCADPath



def outputSTL(From, To, PATH=getSCADPath()):
    subprocess.Popen(PATH + " -o " + To + " " + From)
    while not os.path.exists(To):
        time.sleep(1)

class Model:
    def __init__(self, model, fileName, location, layer, thickness):
        self.location = location
        self.code = None
        self.fileName = fileName
        self.stl = fileName + ".stl"
        self.layer = layer
        self.thickness = thickness
        self.maxz = (layer+1)*thickness
        self.dxf = fileName + ".dxf"
        self.scad = fileName + ".scad"
        self.model = model
        self.center = None
        self.width = 10
        self.mesh = None
        self.useable_area = None


    def get_code(self):
        max_dim = 0.05
        max_array = 6

        num = int(self.fileName)
        nums = [int(a) for a in str(num)]
        nums.reverse()
        indices = nums
        length = len(nums)

        print(indices)
        t = 0
        i = 0
        cubes = []
        x = 0
        y = 0
        width = 0.01
        while x <= max_dim:
            while y <= max_dim:
                print(indices)
                if nums == []:
                    break
                if indices[0] != 0:
                    cubes.append(solid.translate([x, y, 0])(solid.cube(size=t / 1000 + 0.001)))
                    y += max_dim / (max_array - 1)
                    nums[0] = nums[0] - 1
                else:
                    indices.pop(0)
                    t += 1
                i += 1
            x += max_dim / (max_array - 1)
            y = 0

        outside = solid.translate([-width / 2, -width / 2])(solid.cube(max_dim + (length - 1) / 1000 + 0.001 + width))
        self.code = solid.difference()(outside, cubes)
        self.code = solid.projection(cut=True)(self.code)
        solid.scad_render_to_file(self.code, self.location + "/code.scad")
        outputSTL(From=self.location+"/code.scad", To=self.location+"code.dxf", PATH=getSCADPath())
        # os.system("toSTL.sh renders/code.scad renders/code.dxf")
        return self.location+"/code.dxf"

    def download(self, type):
        if type =="stl":
            print("generating:" + self.location+"/"+ self.fileName+".stl")
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".stl")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".stl")
        elif type == "dxf":
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".dxf")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".dxf")

    def render(self):
        solid.scad_render_to_file(self.model, self.location+"/"+ self.fileName+'.scad')
        while not os.path.exists(self.location+"/"+self.fileName+".scad"):
            time.sleep(1)
        # outputSTL(From= self.location+"/"+ self.fileName+'.scad', To=self.location+"/"+ self.fileName+'.stl')

    def get_points(self):
        doc = ezdxf.readfile(filename=self.location+"/"+ self.fileName+".dxf")
        msp = doc.modelspace()
        i=0
        lists = []
        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return [start, end]

        for e in msp.query("LINE"):
            line = helper(e)
            if not lists:
                lists.append([line])
            else:
                if lists[i][len(lists)-1][1] != line[0]:
                    lists.append([line])
                    i+=1
                else:
                    lists[i].append(line)

    def get_points2(self, FILE):
        doc = ezdxf.readfile(filename=FILE)
        msp = doc.modelspace()
        i = 0
        lists = []

        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return (start, end)

        for e in msp.query("LINE"):
            line = helper(e)
            if lists==[]:
                lists.append([line])
            else:
                if lists[i][len(lists[i]) - 1][1] != line[0]:
                    lists.append([line])
                    i += 1
                else:
                    lists[i].append(line)
        return lists

    def add_code(self):
        dxf = solid.projection(cut=False)(self.model)
        offset = solid.offset(r=-0.1)(dxf)
        solid.scad_render_to_file(offset, self.location+'/offset.scad')
        os.system("toSTL.sh renders/offset.scad renders/offset.dxf")
        lines = self.get_points2("renders/offset.dxf")
        x = lines[0][0][0][0]
        y = lines[0][0][0][1]
        print(x)
        print(y)
        code = solid.translate([x,y,0])(self.code)
        code = solid.linear_extrude(height=999)(code)
        save = self.model
        self.model = solid.projection()(solid.difference()(self.model, code))
        self.render()
        self.download("dxf")
        self.model = save

    def add_label(self, pos):
        # num = 12
        # minx, maxx, miny, maxy, minz, maxz = self.find_minmax()
        maxz = self.maxz
        # label = solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.5, halign="center"))
        # i=minx
        # print("x-len: " + str(maxx-minx))
        # print(i)
        # inc = (maxx-minx)/num
        # while minx <= i <= maxx:
        #     label = solid.union()(solid.translate([i, 0, maxz - 0.2])(solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.25, halign="center"))), label)
        #     i += inc
        #
        # l = label
        #
        # i =miny
        # while miny<= i <= maxy:
        #     print("y inc")
        #     l = solid.union()(solid.translate([0, i, 0])(label), l)
        #     i += 0.5
        for i in str(self.fileName):
            cur = pos[0]
            label = solid.translate([pos[0][0], pos[0][1], self.maxz-0.2])(solid.linear_extrude(height=(self.thickness)/3)(solid.text(str(i), size=0.5, halign="center", valign="center")))
            self.model = solid.difference()(self.model, label)
            pos.append(pos.pop(0))
            while abs(cur[0]-pos[0][0])<0.5 and abs(cur[1]-pos[0][1])<0.5:
                pos.append(pos.pop(0))



    def Center(self):

        volume, cog, inertia = self.mesh.get_mass_properties()
        print("Volume                                  = {0}".format(volume))
        print("Position of the center of gravity (COG) = {0}".format(cog))
        m_centered = solid.translate([-cog[0], -cog[1], 0])(
            self.model
        )
        return m_centered

    def find_minmax(self):
        minx = maxx = miny = maxy = minz = maxz = None
        for p in self.mesh.points:
            # p contains (x, y, z)
            if minx is None:
                minx = p[Dimension.X]
                maxx = p[Dimension.X]
                miny = p[Dimension.Y]
                maxy = p[Dimension.Y]
                minz = p[Dimension.Z]
                maxz = p[Dimension.Z]
            else:
                maxx = max(p[Dimension.X], maxx)
                minx = min(p[Dimension.X], minx)
                maxy = max(p[Dimension.Y], maxy)
                miny = min(p[Dimension.Y], miny)
                maxz = max(p[Dimension.Z], maxz)
                minz = min(p[Dimension.Z], minz)
        lenx = maxx - minx
        leny = maxy - miny
        lenz = maxz - minz
        return minx, maxx, miny, maxy, minz, maxz

    # def generate_Mesh(self):
    #     self.mesh = mesh.Mesh.from_file(self.location + "/" + str(int(self.fileName)//8)+ "b.stl")

    def get_top(self):
        top = solid.projection(cut=True)(solid.translate([0,0,-1*self.thickness*(self.layer+1)])(self.model))
        useable_area = solid.offset(r=-0.45)(top)
        self.useable_area = useable_area
        solid.scad_render_to_file(self.useable_area, self.location+'/' + 'toptemp.scad')
        outputSTL(From=self.location+'/' + 'toptemp.scad', To=self.location+"/top"+ self.dxf)

        # os.system("toSTL.sh out/toptemp.scad renders/" + self.fileName + ".dxf")
        dxf = DXF(self.location+"/top"+ self.dxf)
        min_p=dxf.points[0][0]
        points_ordered = dxf.points
        i=0
        while i <= len(dxf.points)+1:
            while math.sqrt((dxf.points[0][0]-dxf.points[1][0])**2+(dxf.points[0][1]-dxf.points[1][1])**2) > 0.1:
                dxf.points.insert(1, [(dxf.points[0][0]+dxf.points[1][0])/2, (dxf.points[0][1]+dxf.points[1][1])/2])
                i = i-1
            dxf.points.append(dxf.points.pop(0))
            i+=1
        for i in range(len(dxf.points)):
            dxf.points.append(dxf.points.pop(0))
            if dxf.points[0][0] < min_p:
                min_p = dxf.points[0][0]
                points_ordered = dxf.points.copy()
        dxf.points = points_ordered.copy()

        print(dxf.points)
        self.add_label(dxf.points)

class DXF:
    def __init__(self, file):
        self.file = file
        self.Lines = []
        self.points = []
        doc = ezdxf.readfile(self.file)
        msp = doc.modelspace()
        for e in msp:
            if e.dxftype() == "LINE":
                self.Lines.append(e)
                self.points.append([e.dxf.start[0], e.dxf.start[1]])
        # self.points.append([self.Lines[-1].dxf.end[0], self.Lines[-1].dxf.end[1]])
        self.area = None
        self.center = None
        self.polygon = sg.Polygon(self.points)

    def get_area(self):
        self.area = self.polygon.area
        return self.area

    def get_center(self):
        x_sum = 0
        y_sum =0
        for i in self.points:
            x_sum += i[0]
            y_sum += i[1]
        x_c = x_sum/len(self.points)
        y_c = y_sum/len(self.points)
        return (x_c, y_c)

    def split(self, maxdim):
        splits = []
        length = 0
        pieces = [[]]
        prev = self.points[-1]
        pieces[-1].append(prev)
        for j in self.points:
            length = length + math.sqrt((prev[0]-j[0])**2+(prev[1]-j[1])**2)
            if length >= maxdim:
                pieces[-1].append(j)
                pieces.append([])
                length = 0
            pieces[-1].append(j)
            prev = j
        for j in pieces:
            j.insert(0, [0,0])
            piece = solid.linear_extrude(height=10)(solid.polygon(j))
            splits.append(piece)
        return splits
    def refine_points(self):
        i=0
        while i <= len(self.points)+1:
            while math.sqrt((self.points[0][0]-self.points[1][0])**2+(self.points[0][1]-self.points[1][1])**2) > 0.1:
                self.points.insert(1, [(self.points[0][0]+self.points[1][0])/2, (self.points[0][1]+self.points[1][1])/2])
                i = i-1
            self.points.append(self.points.pop(0))
            i+=1


if __name__== "__main__":
    test = DXF("C:/Users/Daniel/Documents/repos/Shell_Maker/output/0top_slice.dxf")
    test.refine_points()
    k = test.split(48)
    for i in range(len(k)):
        solid.scad_render_to_file(k[i], str(i) + ".scad")


 
 
************************************************/
