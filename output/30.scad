// Generated by SolidPython 1.1.3 on 2024-05-19 23:41:37


intersection() {
	difference() {
		intersection() {
			translate(v = [0, 0, 0]) {
				import(file = "CE3E3V2_Bottom_shell.stl", origin = [0, 0]);
			}
			translate(v = [-90.04029846191406, -32.690147399902344, 6]) {
				cube(size = [180.0806, 65.380295, 2]);
			}
		}
		linear_extrude(height = 999) {
			offset(r = -1) {
				import(file = "C:/Users/Daniel/Documents/repos/Shell_Maker/output/3top_slice.dxf", origin = [0, 0]);
			}
		}
	}
	translate(v = [0, 0, 6]) {
		linear_extrude(height = 10) {
			polygon(points = [[0, 0], [-43.8230664063, 16.2205007813], [-43.8748421875, 16.2058734375], [-43.9266179688, 16.1912460938], [-43.9783937500, 16.1766187500], [-44.0301695312, 16.1619914063], [-44.0819453125, 16.1473640625], [-44.1337210937, 16.1327367188], [-44.1854968750, 16.1181093750], [-44.2372726562, 16.1034820313], [-44.2890484375, 16.0888546875], [-44.3408242188, 16.0742273438], [-44.3926000000, 16.0596000000], [-44.4511062500, 16.0425250000], [-44.5096125000, 16.0254500000], [-44.5681187500, 16.0083750000], [-44.6266250000, 15.9913000000], [-44.6851312500, 15.9742250000], [-44.7436375000, 15.9571500000], [-44.8021437500, 15.9400750000], [-44.8606500000, 15.9230000000], [-44.9191562500, 15.9059250000], [-44.9776625000, 15.8888500000], [-45.0361687500, 15.8717750000], [-45.0946750000, 15.8547000000], [-45.1531812500, 15.8376250000], [-45.2116875000, 15.8205500000], [-45.2701937500, 15.8034750000], [-45.3287000000, 15.7864000000], [-45.3872062500, 15.7693250000], [-45.4457125000, 15.7522500000], [-45.5042187500, 15.7351750000], [-45.5627250000, 15.7181000000], [-45.6212312500, 15.7010250000], [-45.6797375000, 15.6839500000], [-45.7382437500, 15.6668750000], [-45.7967500000, 15.6498000000], [-45.8552562500, 15.6327250000], [-45.9137625000, 15.6156500000], [-45.9722687500, 15.5985750000], [-46.0307750000, 15.5815000000], [-46.0892812500, 15.5644250000], [-46.1477875000, 15.5473500000], [-46.2062937500, 15.5302750000], [-46.2648000000, 15.5132000000], [-46.3181000000, 15.4972000000], [-46.3863468750, 15.4759250000], [-46.4545937500, 15.4546500000], [-46.5228406250, 15.4333750000], [-46.5910875000, 15.4121000000], [-46.6593343750, 15.3908250000], [-46.7275812500, 15.3695500000], [-46.7958281250, 15.3482750000], [-46.8640750000, 15.3270000000], [-46.9323218750, 15.3057250000], [-47.0005687500, 15.2844500000], [-47.0688156250, 15.2631750000], [-47.1370625000, 15.2419000000], [-47.2053093750, 15.2206250000], [-47.2735562500, 15.1993500000], [-47.3418031250, 15.1780750000], [-47.4100500000, 15.1568000000], [-47.4782968750, 15.1355250000], [-47.5465437500, 15.1142500000], [-47.6147906250, 15.0929750000], [-47.6830375000, 15.0717000000], [-47.7512843750, 15.0504250000], [-47.8195312500, 15.0291500000], [-47.8877781250, 15.0078750000], [-47.9560250000, 14.9866000000], [-48.0242718750, 14.9653250000], [-48.0925187500, 14.9440500000], [-48.1607656250, 14.9227750000], [-48.2290125000, 14.9015000000], [-48.2972593750, 14.8802250000], [-48.3655062500, 14.8589500000], [-48.4337531250, 14.8376750000], [-48.5020000000, 14.8164000000], [-48.5825046875, 14.7912484375], [-48.6630093750, 14.7660968750], [-48.7435140625, 14.7409453125], [-48.8240187500, 14.7157937500], [-48.9045234375, 14.6906421875], [-48.9850281250, 14.6654906250], [-49.0655328125, 14.6403390625], [-49.1460375000, 14.6151875000], [-49.2265421875, 14.5900359375], [-49.3070468750, 14.5648843750], [-49.3875515625, 14.5397328125], [-49.4680562500, 14.5145812500], [-49.5485609375, 14.4894296875], [-49.6290656250, 14.4642781250], [-49.7095703125, 14.4391265625], [-49.7900750000, 14.4139750000], [-49.8705796875, 14.3888234375], [-49.9510843750, 14.3636718750], [-50.0315890625, 14.3385203125], [-50.1120937500, 14.3133687500], [-50.1925984375, 14.2882171875], [-50.2731031250, 14.2630656250], [-50.3536078125, 14.2379140625], [-50.4341125000, 14.2127625000], [-50.5146171875, 14.1876109375], [-50.5951218750, 14.1624593750], [-50.6756265625, 14.1373078125], [-50.7561312500, 14.1121562500], [-50.8366359375, 14.0870046875], [-50.9171406250, 14.0618531250], [-50.9976453125, 14.0367015625], [-51.0781500000, 14.0115500000], [-51.1586546875, 13.9863984375], [-51.2391593750, 13.9612468750], [-51.3196640625, 13.9360953125], [-51.4001687500, 13.9109437500], [-51.4806734375, 13.8857921875], [-51.5611781250, 13.8606406250], [-51.6416828125, 13.8354890625], [-51.7221875000, 13.8103375000], [-51.8026921875, 13.7851859375], [-51.8831968750, 13.7600343750], [-51.9637015625, 13.7348828125], [-52.0442062500, 13.7097312500], [-52.1247109375, 13.6845796875], [-52.2052156250, 13.6594281250], [-52.2857203125, 13.6342765625], [-52.3662250000, 13.6091250000], [-52.4467296875, 13.5839734375], [-52.5272343750, 13.5588218750], [-52.6077390625, 13.5336703125], [-52.6882437500, 13.5085187500], [-52.7687484375, 13.4833671875], [-52.8492531250, 13.4582156250], [-52.9297578125, 13.4330640625], [-53.0102625000, 13.4079125000], [-53.0907671875, 13.3827609375], [-53.1712718750, 13.3576093750], [-53.2517765625, 13.3324578125], [-53.3322812500, 13.3073062500], [-53.4127859375, 13.2821546875], [-53.4932906250, 13.2570031250], [-53.5737953125, 13.2318515625], [-53.6543000000, 13.2067000000], [-53.7252750000, 13.1833187500], [-53.7962500000, 13.1599375000], [-53.8672250000, 13.1365562500], [-53.9382000000, 13.1131750000], [-54.0091750000, 13.0897937500], [-54.0801500000, 13.0664125000], [-54.1511250000, 13.0430312500], [-54.2221000000, 13.0196500000], [-54.2930750000, 12.9962687500], [-54.3640500000, 12.9728875000], [-54.4350250000, 12.9495062500], [-54.5060000000, 12.9261250000], [-54.5769750000, 12.9027437500], [-54.6479500000, 12.8793625000], [-54.7189250000, 12.8559812500], [-54.7899000000, 12.8326000000], [-54.8562812500, 12.8106156250], [-54.9226625000, 12.7886312500], [-54.9890437500, 12.7666468750], [-55.0554250000, 12.7446625000], [-55.1218062500, 12.7226781250], [-55.1881875000, 12.7006937500], [-55.2545687500, 12.6787093750], [-55.3209500000, 12.6567250000], [-55.3873312500, 12.6347406250], [-55.4537125000, 12.6127562500], [-55.5200937500, 12.5907718750], [-55.5864750000, 12.5687875000], [-55.6528562500, 12.5468031250], [-55.7192375000, 12.5248187500], [-55.7856187500, 12.5028343750], [-55.8520000000, 12.4808500000], [-55.9183812500, 12.4588656250], [-55.9847625000, 12.4368812500], [-56.0511437500, 12.4148968750], [-56.1175250000, 12.3929125000], [-56.1839062500, 12.3709281250], [-56.2502875000, 12.3489437500], [-56.3166687500, 12.3269593750], [-56.3830500000, 12.3049750000], [-56.4494312500, 12.2829906250], [-56.5158125000, 12.2610062500], [-56.5821937500, 12.2390218750], [-56.6485750000, 12.2170375000], [-56.7149562500, 12.1950531250], [-56.7813375000, 12.1730687500], [-56.8477187500, 12.1510843750], [-56.9141000000, 12.1291000000], [-56.9780500000, 12.1076000000], [-57.0420000000, 12.0861000000], [-57.1360375000, 12.0529156250], [-57.2300750000, 12.0197312500], [-57.3241125000, 11.9865468750], [-57.4181500000, 11.9533625000], [-57.5121875000, 11.9201781250], [-57.6062250000, 11.8869937500], [-57.7002625000, 11.8538093750], [-57.7943000000, 11.8206250000], [-57.8883375000, 11.7874406250], [-57.9823750000, 11.7542562500], [-58.0764125000, 11.7210718750], [-58.1704500000, 11.6878875000], [-58.2644875000, 11.6547031250], [-58.3585250000, 11.6215187500], [-58.4525625000, 11.5883343750], [-58.5466000000, 11.5551500000], [-58.6406375000, 11.5219656250], [-58.7346750000, 11.4887812500], [-58.8287125000, 11.4555968750], [-58.9227500000, 11.4224125000], [-59.0167875000, 11.3892281250], [-59.1108250000, 11.3560437500], [-59.2048625000, 11.3228593750], [-59.2989000000, 11.2896750000], [-59.3929375000, 11.2564906250], [-59.4869750000, 11.2233062500], [-59.5810125000, 11.1901218750], [-59.6750500000, 11.1569375000], [-59.7690875000, 11.1237531250], [-59.8631250000, 11.0905687500], [-59.9571625000, 11.0573843750], [-60.0512000000, 11.0242000000], [-60.1232812500, 10.9986312500], [-60.1953625000, 10.9730625000], [-60.2674437500, 10.9474937500], [-60.3395250000, 10.9219250000], [-60.4116062500, 10.8963562500], [-60.4836875000, 10.8707875000], [-60.5557687500, 10.8452187500], [-60.6278500000, 10.8196500000], [-60.6999312500, 10.7940812500], [-60.7720125000, 10.7685125000], [-60.8440937500, 10.7429437500], [-60.9161750000, 10.7173750000], [-60.9882562500, 10.6918062500], [-61.0603375000, 10.6662375000], [-61.1324187500, 10.6406687500], [-61.2045000000, 10.6151000000], [-61.2984859375, 10.5814940625], [-61.3924718750, 10.5478881250], [-61.4864578125, 10.5142821875], [-61.5804437500, 10.4806762500], [-61.6744296875, 10.4470703125], [-61.7684156250, 10.4134643750], [-61.8624015625, 10.3798584375], [-61.9563875000, 10.3462525000], [-62.0503734375, 10.3126465625], [-62.1443593750, 10.2790406250], [-62.2383453125, 10.2454346875], [-62.3323312500, 10.2118287500], [-62.4263171875, 10.1782228125], [-62.5203031250, 10.1446168750], [-62.6142890625, 10.1110109375], [-62.7082750000, 10.0774050000], [-62.8022609375, 10.0437990625], [-62.8962468750, 10.0101931250], [-62.9902328125, 9.9765871875], [-63.0842187500, 9.9429812500], [-63.1782046875, 9.9093753125], [-63.2721906250, 9.8757693750], [-63.3661765625, 9.8421634375], [-63.4601625000, 9.8085575000], [-63.5541484375, 9.7749515625], [-63.6481343750, 9.7413456250], [-63.7421203125, 9.7077396875], [-63.8361062500, 9.6741337500], [-63.9300921875, 9.6405278125], [-64.0240781250, 9.6069218750], [-64.1180640625, 9.5733159375], [-64.2120500000, 9.5397100000], [-64.3060359375, 9.5061040625], [-64.4000218750, 9.4724981250], [-64.4940078125, 9.4388921875], [-64.5879937500, 9.4052862500], [-64.6819796875, 9.3716803125], [-64.7759656250, 9.3380743750], [-64.8699515625, 9.3044684375], [-64.9639375000, 9.2708625000], [-65.0579234375, 9.2372565625], [-65.1519093750, 9.2036506250], [-65.2458953125, 9.1700446875], [-65.3398812500, 9.1364387500], [-65.4338671875, 9.1028328125], [-65.5278531250, 9.0692268750], [-65.6218390625, 9.0356209375], [-65.7158250000, 9.0020150000], [-65.8098109375, 8.9684090625], [-65.9037968750, 8.9348031250], [-65.9977828125, 8.9011971875], [-66.0917687500, 8.8675912500], [-66.1857546875, 8.8339853125], [-66.2797406250, 8.8003793750], [-66.3737265625, 8.7667734375], [-66.4677125000, 8.7331675000], [-66.5616984375, 8.6995615625], [-66.6556843750, 8.6659556250], [-66.7496703125, 8.6323496875], [-66.8436562500, 8.5987437500], [-66.9376421875, 8.5651378125], [-67.0316281250, 8.5315318750], [-67.1256140625, 8.4979259375], [-67.2196000000, 8.4643200000], [-67.3114000000, 8.4298750000], [-67.4032000000, 8.3954300000], [-67.4960250000, 8.3599556250], [-67.5888500000, 8.3244812500], [-67.6816750000, 8.2890068750], [-67.7745000000, 8.2535325000], [-67.8673250000, 8.2180581250], [-67.9601500000, 8.1825837500], [-68.0529750000, 8.1471093750], [-68.1458000000, 8.1116350000], [-68.2386250000, 8.0761606250], [-68.3314500000, 8.0406862500], [-68.4242750000, 8.0052118750], [-68.5171000000, 7.9697375000], [-68.6099250000, 7.9342631250], [-68.7027500000, 7.8987887500], [-68.7955750000, 7.8633143750], [-68.8884000000, 7.8278400000], [-68.9414562500, 7.8076287500], [-68.9945125000, 7.7874175000], [-69.0475687500, 7.7672062500], [-69.1006250000, 7.7469950000], [-69.1536812500, 7.7267837500], [-69.2067375000, 7.7065725000], [-69.2597937500, 7.6863612500], [-69.3128500000, 7.6661500000], [-69.3659062500, 7.6459387500], [-69.4189625000, 7.6257275000], [-69.4720187500, 7.6055162500], [-69.5250750000, 7.5853050000], [-69.5781312500, 7.5650937500], [-69.6311875000, 7.5448825000], [-69.6842437500, 7.5246712500], [-69.7373000000, 7.5044600000], [-69.8255187500, 7.4702493750], [-69.9137375000, 7.4360387500], [-70.0019562500, 7.4018281250], [-70.0901750000, 7.3676175000], [-70.1783937500, 7.3334068750], [-70.2666125000, 7.2991962500], [-70.3548312500, 7.2649856250], [-70.4430500000, 7.2307750000], [-70.5312687500, 7.1965643750], [-70.6194875000, 7.1623537500], [-70.7077062500, 7.1281431250], [-70.7959250000, 7.0939325000], [-70.8841437500, 7.0597218750], [-70.9723625000, 7.0255112500], [-71.0605812500, 6.9913006250], [-71.1488000000, 6.9570900000], [-71.2321000000, 6.9241500000], [-71.3154000000, 6.8912100000], [-71.3987000000, 6.8582700000], [-71.4820000000, 6.8253300000], [-71.5653000000, 6.7923900000], [-71.6486000000, 6.7594500000], [-71.7319000000, 6.7265100000], [-71.8152000000, 6.6935700000], [-71.8793890625, 6.6673264062], [-71.9435781250, 6.6410828125], [-72.0077671875, 6.6148392188], [-72.0719562500, 6.5885956250], [-72.1361453125, 6.5623520313], [-72.2003343750, 6.5361084375], [-72.2645234375, 6.5098648437], [-72.3287125000, 6.4836212500], [-72.3929015625, 6.4573776563], [-72.4570906250, 6.4311340625], [-72.5212796875, 6.4048904688], [-72.5854687500, 6.3786468750], [-72.6496578125, 6.3524032812], [-72.7138468750, 6.3261596875], [-72.7780359375, 6.2999160938], [-72.8422250000, 6.2736725000], [-72.9064140625, 6.2474289063], [-72.9706031250, 6.2211853125], [-73.0347921875, 6.1949417187], [-73.0989812500, 6.1686981250], [-73.1631703125, 6.1424545313], [-73.2273593750, 6.1162109375], [-73.2915484375, 6.0899673438], [-73.3557375000, 6.0637237500], [-73.4199265625, 6.0374801563], [-73.4841156250, 6.0112365625], [-73.5483046875, 5.9849929688], [-73.6124937500, 5.9587493750], [-73.6766828125, 5.9325057813], [-73.7408718750, 5.9062621875], [-73.8050609375, 5.8800185938], [-73.8692500000, 5.8537750000], [-73.9334390625, 5.8275314063], [-73.9976281250, 5.8012878125], [-74.0618171875, 5.7750442188], [-74.1260062500, 5.7488006250], [-74.1901953125, 5.7225570313], [-74.2543843750, 5.6963134375], [-74.3185734375, 5.6700698438], [-74.3827625000, 5.6438262500], [-74.4469515625, 5.6175826563], [-74.5111406250, 5.5913390625], [-74.5753296875, 5.5650954688], [-74.6395187500, 5.5388518750], [-74.7037078125, 5.5126082813], [-74.7678968750, 5.4863646875], [-74.8320859375, 5.4601210938], [-74.8962750000, 5.4338775000], [-74.9604640625, 5.4076339063], [-75.0246531250, 5.3813903125], [-75.0888421875, 5.3551467188], [-75.1530312500, 5.3289031250], [-75.2172203125, 5.3026595313], [-75.2814093750, 5.2764159375], [-75.3455984375, 5.2501723438], [-75.4097875000, 5.2239287500], [-75.4739765625, 5.1976851563], [-75.5381656250, 5.1714415625], [-75.6023546875, 5.1451979688], [-75.6665437500, 5.1189543750], [-75.7307328125, 5.0927107813], [-75.7949218750, 5.0664671875], [-75.8591109375, 5.0402235938], [-75.9233000000, 5.0139800000], [-76.0139250000, 4.9766075000], [-76.1045500000, 4.9392350000], [-76.1951750000, 4.9018625000], [-76.2858000000, 4.8644900000], [-76.3764250000, 4.8271175000], [-76.4670500000, 4.7897450000], [-76.5576750000, 4.7523725000], [-76.6483000000, 4.7150000000], [-76.6956156250, 4.6951075000], [-76.7429312500, 4.6752150000], [-76.7902468750, 4.6553225000], [-76.8375625000, 4.6354300000], [-76.8848781250, 4.6155375000], [-76.9321937500, 4.5956450000], [-76.9795093750, 4.5757525000], [-77.0268250000, 4.5558600000], [-77.0741406250, 4.5359675000], [-77.1214562500, 4.5160750000], [-77.1687718750, 4.4961825000], [-77.2160875000, 4.4762900000], [-77.2634031250, 4.4563975000], [-77.3107187500, 4.4365050000], [-77.3580343750, 4.4166125000], [-77.4053500000, 4.3967200000], [-77.4526656250, 4.3768275000], [-77.4999812500, 4.3569350000], [-77.5472968750, 4.3370425000], [-77.5946125000, 4.3171500000], [-77.6419281250, 4.2972575000], [-77.6892437500, 4.2773650000], [-77.7365593750, 4.2574725000], [-77.7838750000, 4.2375800000], [-77.8311906250, 4.2176875000], [-77.8785062500, 4.1977950000], [-77.9258218750, 4.1779025000], [-77.9731375000, 4.1580100000], [-78.0204531250, 4.1381175000], [-78.0677687500, 4.1182250000], [-78.1150843750, 4.0983325000], [-78.1624000000, 4.0784400000], [-78.2097156250, 4.0585475000], [-78.2570312500, 4.0386550000], [-78.3043468750, 4.0187625000], [-78.3516625000, 3.9988700000], [-78.3989781250, 3.9789775000], [-78.4462937500, 3.9590850000], [-78.4936093750, 3.9391925000], [-78.5409250000, 3.9193000000], [-78.5882406250, 3.8994075000], [-78.6355562500, 3.8795150000], [-78.6828718750, 3.8596225000], [-78.7301875000, 3.8397300000], [-78.7775031250, 3.8198375000], [-78.8248187500, 3.7999450000], [-78.8721343750, 3.7800525000], [-78.9194500000, 3.7601600000], [-78.9667656250, 3.7402675000], [-79.0140812500, 3.7203750000], [-79.0613968750, 3.7004825000], [-79.1087125000, 3.6805900000], [-79.1560281250, 3.6606975000], [-79.2033437500, 3.6408050000], [-79.2506593750, 3.6209125000], [-79.2979750000, 3.6010200000], [-79.3452906250, 3.5811275000], [-79.3926062500, 3.5612350000], [-79.4399218750, 3.5413425000], [-79.4872375000, 3.5214500000], [-79.5345531250, 3.5015575000], [-79.5818687500, 3.4816650000], [-79.6291843750, 3.4617725000], [-79.6765000000, 3.4418800000], [-79.7280750000, 3.4194587500], [-79.7796500000, 3.3970375000], [-79.8312250000, 3.3746162500], [-79.8828000000, 3.3521950000], [-79.9343750000, 3.3297737500], [-79.9859500000, 3.3073525000], [-80.0375250000, 3.2849312500], [-80.0891000000, 3.2625100000], [-80.1678093750, 3.2264331250], [-80.2465187500, 3.1903562500], [-80.3252281250, 3.1542793750], [-80.4039375000, 3.1182025000], [-80.4826468750, 3.0821256250], [-80.5613562500, 3.0460487500], [-80.6400656250, 3.0099718750], [-80.7187750000, 2.9738950000], [-80.7974843750, 2.9378181250], [-80.8761937500, 2.9017412500], [-80.9549031250, 2.8656643750], [-81.0336125000, 2.8295875000], [-81.1123218750, 2.7935106250], [-81.1910312500, 2.7574337500], [-81.2697406250, 2.7213568750], [-81.3484500000, 2.6852800000], [-81.4271593750, 2.6492031250], [-81.5058687500, 2.6131262500], [-81.5845781250, 2.5770493750], [-81.6632875000, 2.5409725000], [-81.7419968750, 2.5048956250], [-81.8207062500, 2.4688187500], [-81.8994156250, 2.4327418750], [-81.9781250000, 2.3966650000], [-82.0568343750, 2.3605881250], [-82.1355437500, 2.3245112500], [-82.2142531250, 2.2884343750], [-82.2929625000, 2.2523575000], [-82.3716718750, 2.2162806250], [-82.4503812500, 2.1802037500], [-82.5290906250, 2.1441268750], [-82.6078000000, 2.1080500000], [-82.6851765625, 2.0732713594], [-82.7625531250, 2.0384927187], [-82.8399296875, 2.0037140781], [-82.9173062500, 1.9689354375], [-82.9946828125, 1.9341567969], [-83.0720593750, 1.8993781563], [-83.1494359375, 1.8645995156], [-83.2268125000, 1.8298208750], [-83.3041890625, 1.7950422344], [-83.3815656250, 1.7602635937], [-83.4589421875, 1.7254849531], [-83.5363187500, 1.6907063125], [-83.6136953125, 1.6559276719], [-83.6910718750, 1.6211490313], [-83.7684484375, 1.5863703906], [-83.8458250000, 1.5515917500], [-83.9232015625, 1.5168131094], [-84.0005781250, 1.4820344688], [-84.0779546875, 1.4472558281], [-84.1553312500, 1.4124771875], [-84.2327078125, 1.3776985469], [-84.3100843750, 1.3429199063], [-84.3874609375, 1.3081412656], [-84.4648375000, 1.2733626250], [-84.5422140625, 1.2385839844], [-84.6195906250, 1.2038053438], [-84.6969671875, 1.1690267031], [-84.7743437500, 1.1342480625], [-84.8517203125, 1.0994694219], [-84.9290968750, 1.0646907812], [-85.0064734375, 1.0299121406], [-85.0838500000, 0.9951335000], [-85.1612265625, 0.9603548594], [-85.2386031250, 0.9255762188], [-85.3159796875, 0.8907975781], [-85.3933562500, 0.8560189375], [-85.4707328125, 0.8212402969], [-85.5481093750, 0.7864616562], [-85.6254859375, 0.7516830156], [-85.7028625000, 0.7169043750], [-85.7802390625, 0.6821257344], [-85.8576156250, 0.6473470938], [-85.9349921875, 0.6125684531], [-86.0123687500, 0.5777898125], [-86.0897453125, 0.5430111719], [-86.1671218750, 0.5082325313], [-86.2444984375, 0.4734538906], [-86.3218750000, 0.4386752500], [-86.3992515625, 0.4038966094], [-86.4766281250, 0.3691179688], [-86.5540046875, 0.3343393281], [-86.6313812500, 0.2995606875], [-86.7087578125, 0.2647820469], [-86.7861343750, 0.2300034062], [-86.8635109375, 0.1952247656], [-86.9408875000, 0.1604461250], [-87.0182640625, 0.1256674844], [-87.0956406250, 0.0908888438], [-87.1730171875, 0.0561102031], [-87.2503937500, 0.0213315625], [-87.3277703125, -0.0134470781], [-87.4051468750, -0.0482257188], [-87.4825234375, -0.0830043594], [-87.5599000000, -0.1177830000], [-87.5005281250, -0.1448048750], [-87.4411562500, -0.1718267500], [-87.3817843750, -0.1988486250], [-87.3224125000, -0.2258705000], [-87.2630406250, -0.2528923750], [-87.2036687500, -0.2799142500], [-87.1442968750, -0.3069361250], [-87.0849250000, -0.3339580000], [-87.0255531250, -0.3609798750], [-86.9661812500, -0.3880017500], [-86.9068093750, -0.4150236250], [-86.8474375000, -0.4420455000], [-86.7880656250, -0.4690673750], [-86.7286937500, -0.4960892500], [-86.6693218750, -0.5231111250], [-86.6099500000, -0.5501330000], [-86.5505781250, -0.5771548750], [-86.4912062500, -0.6041767500], [-86.4318343750, -0.6311986250], [-86.3724625000, -0.6582205000]]);
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
import math
import time

from stl import mesh, Dimension

from tkinter import Tk     # from tkinter import Tk for Python 3.x
from tkinter.filedialog import askopenfilename
from mpl_toolkits.mplot3d import art3d
from matplotlib import pyplot as plt
import solid
import os
import ezdxf
import shapely.geometry as sg
import subprocess
from GUI import getSCADPath



def outputSTL(From, To, PATH=getSCADPath()):
    subprocess.Popen(PATH + " -o " + To + " " + From)
    while not os.path.exists(To):
        time.sleep(1)


def get_size(i):
    x_list = [int(a) for a in str(i)]
    return len(x_list)



class Model:
    def __init__(self, model, fileName, location, layer, thickness):
        self.location = location
        self.code = None
        self.fileName = fileName
        self.stl = fileName + ".stl"
        self.layer = layer
        self.thickness = thickness
        self.maxz = (layer+1)*thickness
        self.dxf = fileName + ".dxf"
        self.scad = fileName + ".scad"
        self.model = model
        self.center = None
        self.width = 10
        self.mesh = None
        self.useable_area = None


    def get_code(self):
        max_dim = 0.05
        max_array = 6

        num = int(self.fileName)
        nums = [int(a) for a in str(num)]
        nums.reverse()
        indices = nums
        length = len(nums)

        print(indices)
        t = 0
        i = 0
        cubes = []
        x = 0
        y = 0
        width = 0.01
        while x <= max_dim:
            while y <= max_dim:
                print(indices)
                if nums == []:
                    break
                if indices[0] != 0:
                    cubes.append(solid.translate([x, y, 0])(solid.cube(size=t / 1000 + 0.001)))
                    y += max_dim / (max_array - 1)
                    nums[0] = nums[0] - 1
                else:
                    indices.pop(0)
                    t += 1
                i += 1
            x += max_dim / (max_array - 1)
            y = 0

        outside = solid.translate([-width / 2, -width / 2])(solid.cube(max_dim + (length - 1) / 1000 + 0.001 + width))
        self.code = solid.difference()(outside, cubes)
        self.code = solid.projection(cut=True)(self.code)
        solid.scad_render_to_file(self.code, self.location + "/code.scad")
        outputSTL(From=self.location+"/code.scad", To=self.location+"code.dxf", PATH=getSCADPath())
        # os.system("toSTL.sh renders/code.scad renders/code.dxf")
        return self.location+"/code.dxf"

    def download(self, type):
        if type =="stl":
            print("generating:" + self.location+"/"+ self.fileName+".stl")
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".stl")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".stl")
        elif type == "dxf":
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".dxf")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".dxf")

    def render(self):
        solid.scad_render_to_file(self.model, self.location+"/"+ self.fileName+'.scad')
        while not os.path.exists(self.location+"/"+self.fileName+".scad"):
            time.sleep(1)

    def get_points(self):
        doc = ezdxf.readfile(filename=self.location+"/"+ self.fileName+".dxf")
        msp = doc.modelspace()
        i=0
        lists = []
        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return [start, end]

        for e in msp.query("LINE"):
            line = helper(e)
            if not lists:
                lists.append([line])
            else:
                if lists[i][len(lists)-1][1] != line[0]:
                    lists.append([line])
                    i+=1
                else:
                    lists[i].append(line)

    def get_points2(self, FILE):
        doc = ezdxf.readfile(filename=FILE)
        msp = doc.modelspace()
        i = 0
        lists = []

        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return (start, end)

        for e in msp.query("LINE"):
            line = helper(e)
            if lists==[]:
                lists.append([line])
            else:
                if lists[i][len(lists[i]) - 1][1] != line[0]:
                    lists.append([line])
                    i += 1
                else:
                    lists[i].append(line)
        return lists

    def add_code(self):
        dxf = solid.projection(cut=False)(self.model)
        offset = solid.offset(r=-0.1)(dxf)
        solid.scad_render_to_file(offset, self.location+'/offset.scad')
        os.system("toSTL.sh renders/offset.scad renders/offset.dxf")
        lines = self.get_points2("renders/offset.dxf")
        x = lines[0][0][0][0]
        y = lines[0][0][0][1]
        print(x)
        print(y)
        code = solid.translate([x,y,0])(self.code)
        code = solid.linear_extrude(height=999)(code)
        save = self.model
        self.model = solid.projection()(solid.difference()(self.model, code))
        self.render()
        self.download("dxf")
        self.model = save

    def add_label(self, pos):
        # num = 12
        # minx, maxx, miny, maxy, minz, maxz = self.find_minmax()
        maxz = self.maxz
        # label = solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.5, halign="center"))
        # i=minx
        # print("x-len: " + str(maxx-minx))
        # print(i)
        # inc = (maxx-minx)/num
        # while minx <= i <= maxx:
        #     label = solid.union()(solid.translate([i, 0, maxz - 0.2])(solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.25, halign="center"))), label)
        #     i += inc
        #
        # l = label
        #
        # i =miny
        # while miny<= i <= maxy:
        #     print("y inc")
        #     l = solid.union()(solid.translate([0, i, 0])(label), l)
        #     i += 0.5
        for i in str(self.fileName):
            cur = pos[0]
            label = solid.translate([pos[0][0], pos[0][1], self.maxz-0.2])(solid.linear_extrude(height=(self.thickness)/3)(solid.text(str(i), size=0.5, halign="center", valign="center")))
            self.model = solid.difference()(self.model, label)
            pos.append(pos.pop(0))
            while abs(cur[0]-pos[0][0])<0.5 and abs(cur[1]-pos[0][1])<0.5:
                pos.append(pos.pop(0))



    def Center(self):

        volume, cog, inertia = self.mesh.get_mass_properties()
        print("Volume                                  = {0}".format(volume))
        print("Position of the center of gravity (COG) = {0}".format(cog))
        m_centered = solid.translate([-cog[0], -cog[1], 0])(
            self.model
        )
        return m_centered

    def find_minmax(self):
        minx = maxx = miny = maxy = minz = maxz = None
        for p in self.mesh.points:
            # p contains (x, y, z)
            if minx is None:
                minx = p[Dimension.X]
                maxx = p[Dimension.X]
                miny = p[Dimension.Y]
                maxy = p[Dimension.Y]
                minz = p[Dimension.Z]
                maxz = p[Dimension.Z]
            else:
                maxx = max(p[Dimension.X], maxx)
                minx = min(p[Dimension.X], minx)
                maxy = max(p[Dimension.Y], maxy)
                miny = min(p[Dimension.Y], miny)
                maxz = max(p[Dimension.Z], maxz)
                minz = min(p[Dimension.Z], minz)
        lenx = maxx - minx
        leny = maxy - miny
        lenz = maxz - minz
        return minx, maxx, miny, maxy, minz, maxz

    # def generate_Mesh(self):
    #     self.mesh = mesh.Mesh.from_file(self.location + "/" + str(int(self.fileName)//8)+ "b.stl")

    def get_top(self):
        top = solid.projection(cut=True)(solid.translate([0,0,-1*self.thickness*(self.layer+1)])(self.model))
        useable_area = solid.offset(r=-0.45)(top)
        self.useable_area = useable_area
        solid.scad_render_to_file(self.useable_area, self.location+'/' + 'toptemp.scad')
        outputSTL(From=self.location+'/' + 'toptemp.scad', To=self.location+"/top"+ self.dxf)

        # os.system("toSTL.sh out/toptemp.scad renders/" + self.fileName + ".dxf")
        dxf = DXF(self.location+"/top"+ self.dxf)
        min_p=dxf.points[0][0]
        points_ordered = dxf.points
        i=0
        while i <= len(dxf.points)+1:
            while math.sqrt((dxf.points[0][0]-dxf.points[1][0])**2+(dxf.points[0][1]-dxf.points[1][1])**2) > 0.1:
                dxf.points.insert(1, [(dxf.points[0][0]+dxf.points[1][0])/2, (dxf.points[0][1]+dxf.points[1][1])/2])
                i = i-1
            dxf.points.append(dxf.points.pop(0))
            i+=1
        for i in range(len(dxf.points)):
            dxf.points.append(dxf.points.pop(0))
            if dxf.points[0][0] < min_p:
                min_p = dxf.points[0][0]
                points_ordered = dxf.points.copy()
        dxf.points = points_ordered.copy()

        print(dxf.points)
        self.add_label(dxf.points)

class DXF:
    def __init__(self, file):
        self.file = file
        self.Lines = []
        self.points = []
        doc = ezdxf.readfile(self.file)
        msp = doc.modelspace()
        for e in msp:
            if e.dxftype() == "LINE":
                self.Lines.append(e)
                self.points.append([e.dxf.start[0], e.dxf.start[1]])
        # self.points.append([self.Lines[-1].dxf.end[0], self.Lines[-1].dxf.end[1]])
        self.area = None
        self.center = None
        self.polygon = sg.Polygon(self.points)

    def get_area(self):
        self.area = self.polygon.area
        return self.area

    def get_center(self):
        x_sum = 0
        y_sum =0
        for i in self.points:
            x_sum += i[0]
            y_sum += i[1]
        x_c = x_sum/len(self.points)
        y_c = y_sum/len(self.points)
        return (x_c, y_c)

    def split(self, maxdim):
        splits = []
        length = 0
        pieces = [[]]
        prev = self.points[0]
        for j in self.points:
            length = length + math.sqrt((prev[0]-j[0])**2+(prev[1]-j[1])**2)
            if length >= maxdim:
                pieces[-1].append(j)
                pieces.append([])
                length = 0
            pieces[-1].append(j)
            prev = j
        for j in pieces:
            j.insert(0, [0,0])
            piece = solid.linear_extrude(height=10)(solid.polygon(j))
            splits.append(piece)
        return splits
    def refine_points(self):
        i=0
        while i <= len(self.points)+1:
            while math.sqrt((self.points[0][0]-self.points[1][0])**2+(self.points[0][1]-self.points[1][1])**2) > 0.1:
                self.points.insert(1, [(self.points[0][0]+self.points[1][0])/2, (self.points[0][1]+self.points[1][1])/2])
                i = i-1
            self.points.append(self.points.pop(0))
            i+=1


if __name__== "__main__":
    test = DXF("C:/Users/Daniel/Documents/repos/Shell_Maker/output/0top_slice.dxf")
    test.refine_points()
    k = test.split(48)
    for i in range(len(k)):
        solid.scad_render_to_file(k[i], str(i) + ".scad")


 
 
************************************************/
