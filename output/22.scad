// Generated by SolidPython 1.1.3 on 2024-05-26 01:59:02


intersection() {
	difference() {
		intersection() {
			translate(v = [0, 0, 0]) {
				import(file = "CE3E3V2_Bottom_shell.stl", origin = [0, 0]);
			}
			translate(v = [-90.04029846191406, -32.690147399902344, 4]) {
				cube(size = [180.0806, 65.380295, 2]);
			}
		}
		linear_extrude(height = 999) {
			offset(r = -1) {
				import(file = "C:/Users/Daniel/Documents/repos/Shell_Maker/output/2top_slice.dxf", origin = [0, 0]);
			}
		}
	}
	translate(v = [0, 0, 4]) {
		linear_extrude(height = 10) {
			polygon(points = [[0, 0], [1.4439649219, 26.3808781250], [1.3768645312, 26.3695687500], [1.3097641406, 26.3582593750], [1.2426637500, 26.3469500000], [1.1755633594, 26.3356406250], [1.1084629688, 26.3243312500], [1.0413625781, 26.3130218750], [0.9742621875, 26.3017125000], [0.9071617969, 26.2904031250], [0.8400614062, 26.2790937500], [0.7729610156, 26.2677843750], [0.7058606250, 26.2564750000], [0.6387602344, 26.2451656250], [0.5716598437, 26.2338562500], [0.5045594531, 26.2225468750], [0.4374590625, 26.2112375000], [0.3703586719, 26.1999281250], [0.3032582812, 26.1886187500], [0.2361578906, 26.1773093750], [0.1690575000, 26.1660000000], [0.1019571094, 26.1546906250], [0.0348567187, 26.1433812500], [-0.0322436719, 26.1320718750], [-0.0993440625, 26.1207625000], [-0.1664444531, 26.1094531250], [-0.2335448438, 26.0981437500], [-0.3006452344, 26.0868343750], [-0.3677456250, 26.0755250000], [-0.4348460156, 26.0642156250], [-0.5019464062, 26.0529062500], [-0.5690467969, 26.0415968750], [-0.6361471875, 26.0302875000], [-0.7032475781, 26.0189781250], [-0.7703479688, 26.0076687500], [-0.8374483594, 25.9963593750], [-0.9045487500, 25.9850500000], [-0.9716491406, 25.9737406250], [-1.0387495313, 25.9624312500], [-1.1058499219, 25.9511218750], [-1.1729503125, 25.9398125000], [-1.2400507031, 25.9285031250], [-1.3071510937, 25.9171937500], [-1.3742514844, 25.9058843750], [-1.4413518750, 25.8945750000], [-1.5084522656, 25.8832656250], [-1.5755526562, 25.8719562500], [-1.6426530469, 25.8606468750], [-1.7097534375, 25.8493375000], [-1.7768538281, 25.8380281250], [-1.8439542187, 25.8267187500], [-1.9110546094, 25.8154093750], [-1.9781550000, 25.8041000000], [-2.0452553906, 25.7927906250], [-2.1123557812, 25.7814812500], [-2.1794561719, 25.7701718750], [-2.2465565625, 25.7588625000], [-2.3136569531, 25.7475531250], [-2.3807573438, 25.7362437500], [-2.4478577344, 25.7249343750], [-2.5149581250, 25.7136250000], [-2.5820585156, 25.7023156250], [-2.6491589062, 25.6910062500], [-2.7162592969, 25.6796968750], [-2.7833596875, 25.6683875000], [-2.8504600781, 25.6570781250], [-2.9175604687, 25.6457687500], [-2.9846608594, 25.6344593750], [-3.0517612500, 25.6231500000], [-3.1188616406, 25.6118406250], [-3.1859620312, 25.6005312500], [-3.2530624219, 25.5892218750], [-3.3201628125, 25.5779125000], [-3.3872632031, 25.5666031250], [-3.4543635937, 25.5552937500], [-3.5214639844, 25.5439843750], [-3.5885643750, 25.5326750000], [-3.6556647656, 25.5213656250], [-3.7227651562, 25.5100562500], [-3.7898655469, 25.4987468750], [-3.8569659375, 25.4874375000], [-3.9240663281, 25.4761281250], [-3.9911667187, 25.4648187500], [-4.0582671094, 25.4535093750], [-4.1253675000, 25.4422000000], [-4.1924678906, 25.4308906250], [-4.2595682812, 25.4195812500], [-4.3266686719, 25.4082718750], [-4.3937690625, 25.3969625000], [-4.4608694531, 25.3856531250], [-4.5279698438, 25.3743437500], [-4.5950702344, 25.3630343750], [-4.6621706250, 25.3517250000], [-4.7292710156, 25.3404156250], [-4.7963714062, 25.3291062500], [-4.8634717969, 25.3177968750], [-4.9305721875, 25.3064875000], [-4.9976725781, 25.2951781250], [-5.0647729687, 25.2838687500], [-5.1318733594, 25.2725593750], [-5.1989737500, 25.2612500000], [-5.2660741406, 25.2499406250], [-5.3331745313, 25.2386312500], [-5.4002749219, 25.2273218750], [-5.4673753125, 25.2160125000], [-5.5344757031, 25.2047031250], [-5.6015760937, 25.1933937500], [-5.6686764844, 25.1820843750], [-5.7357768750, 25.1707750000], [-5.8028772656, 25.1594656250], [-5.8699776562, 25.1481562500], [-5.9370780469, 25.1368468750], [-6.0041784375, 25.1255375000], [-6.0712788281, 25.1142281250], [-6.1383792187, 25.1029187500], [-6.2054796094, 25.0916093750], [-6.2725800000, 25.0803000000], [-6.3570112500, 25.0652875000], [-6.4414425000, 25.0502750000], [-6.5258737500, 25.0352625000], [-6.6103050000, 25.0202500000], [-6.6947362500, 25.0052375000], [-6.7791675000, 24.9902250000], [-6.8635987500, 24.9752125000], [-6.9480300000, 24.9602000000], [-7.0271925000, 24.9453687500], [-7.1063550000, 24.9305375000], [-7.1855175000, 24.9157062500], [-7.2646800000, 24.9008750000], [-7.3438425000, 24.8860437500], [-7.4230050000, 24.8712125000], [-7.5021675000, 24.8563812500], [-7.5813300000, 24.8415500000], [-7.6604925000, 24.8267187500], [-7.7396550000, 24.8118875000], [-7.8188175000, 24.7970562500], [-7.8979800000, 24.7822250000], [-7.9771425000, 24.7673937500], [-8.0563050000, 24.7525625000], [-8.1354675000, 24.7377312500], [-8.2146300000, 24.7229000000], [-8.3063795313, 24.7050656250], [-8.3981290625, 24.6872312500], [-8.4898785937, 24.6693968750], [-8.5816281250, 24.6515625000], [-8.6733776563, 24.6337281250], [-8.7651271875, 24.6158937500], [-8.8568767187, 24.5980593750], [-8.9486262500, 24.5802250000], [-9.0403757813, 24.5623906250], [-9.1321253125, 24.5445562500], [-9.2238748437, 24.5267218750], [-9.3156243750, 24.5088875000], [-9.4073739063, 24.4910531250], [-9.4991234375, 24.4732187500], [-9.5908729688, 24.4553843750], [-9.6826225000, 24.4375500000], [-9.7743720313, 24.4197156250], [-9.8661215625, 24.4018812500], [-9.9578710938, 24.3840468750], [-10.0496206250, 24.3662125000], [-10.1413701563, 24.3483781250], [-10.2331196875, 24.3305437500], [-10.3248692188, 24.3127093750], [-10.4166187500, 24.2948750000], [-10.5083682813, 24.2770406250], [-10.6001178125, 24.2592062500], [-10.6918673438, 24.2413718750], [-10.7836168750, 24.2235375000], [-10.8753664063, 24.2057031250], [-10.9671159375, 24.1878687500], [-11.0588654687, 24.1700343750], [-11.1506150000, 24.1522000000], [-11.2423645313, 24.1343656250], [-11.3341140625, 24.1165312500], [-11.4258635937, 24.0986968750], [-11.5176131250, 24.0808625000], [-11.6093626562, 24.0630281250], [-11.7011121875, 24.0451937500], [-11.7928617188, 24.0273593750], [-11.8846112500, 24.0095250000], [-11.9763607812, 23.9916906250], [-12.0681103125, 23.9738562500], [-12.1598598437, 23.9560218750], [-12.2516093750, 23.9381875000], [-12.3433589062, 23.9203531250], [-12.4351084375, 23.9025187500], [-12.5268579687, 23.8846843750], [-12.6186075000, 23.8668500000], [-12.7103570313, 23.8490156250], [-12.8021065625, 23.8311812500], [-12.8938560937, 23.8133468750], [-12.9856056250, 23.7955125000], [-13.0773551563, 23.7776781250], [-13.1691046875, 23.7598437500], [-13.2608542187, 23.7420093750], [-13.3526037500, 23.7241750000], [-13.4443532813, 23.7063406250], [-13.5361028125, 23.6885062500], [-13.6278523437, 23.6706718750], [-13.7196018750, 23.6528375000], [-13.8113514063, 23.6350031250], [-13.9031009375, 23.6171687500], [-13.9948504688, 23.5993343750], [-14.0866000000, 23.5815000000], [-14.1146000000, 23.5758000000], [-14.1883812500, 23.5602625000], [-14.2621625000, 23.5447250000], [-14.3359437500, 23.5291875000], [-14.4097250000, 23.5136500000], [-14.4835062500, 23.4981125000], [-14.5572875000, 23.4825750000], [-14.6310687500, 23.4670375000], [-14.7048500000, 23.4515000000], [-14.7786312500, 23.4359625000], [-14.8524125000, 23.4204250000], [-14.9261937500, 23.4048875000], [-14.9999750000, 23.3893500000], [-15.0737562500, 23.3738125000], [-15.1475375000, 23.3582750000], [-15.2213187500, 23.3427375000], [-15.2951000000, 23.3272000000], [-15.3688812500, 23.3116625000], [-15.4426625000, 23.2961250000], [-15.5164437500, 23.2805875000], [-15.5902250000, 23.2650500000], [-15.6640062500, 23.2495125000], [-15.7377875000, 23.2339750000], [-15.8115687500, 23.2184375000], [-15.8853500000, 23.2029000000], [-15.9591312500, 23.1873625000], [-16.0329125000, 23.1718250000], [-16.1066937500, 23.1562875000], [-16.1804750000, 23.1407500000], [-16.2542562500, 23.1252125000], [-16.3280375000, 23.1096750000], [-16.4018187500, 23.0941375000], [-16.4756000000, 23.0786000000], [-16.5493812500, 23.0630625000], [-16.6231625000, 23.0475250000], [-16.6969437500, 23.0319875000], [-16.7707250000, 23.0164500000], [-16.8445062500, 23.0009125000], [-16.9182875000, 22.9853750000], [-16.9920687500, 22.9698375000], [-17.0658500000, 22.9543000000], [-17.1396312500, 22.9387625000], [-17.2134125000, 22.9232250000], [-17.2871937500, 22.9076875000], [-17.3609750000, 22.8921500000], [-17.4347562500, 22.8766125000], [-17.5085375000, 22.8610750000], [-17.5823187500, 22.8455375000], [-17.6561000000, 22.8300000000], [-17.7298812500, 22.8144625000], [-17.8036625000, 22.7989250000], [-17.8774437500, 22.7833875000], [-17.9512250000, 22.7678500000], [-18.0250062500, 22.7523125000], [-18.0987875000, 22.7367750000], [-18.1725687500, 22.7212375000], [-18.2463500000, 22.7057000000], [-18.3201312500, 22.6901625000], [-18.3939125000, 22.6746250000], [-18.4676937500, 22.6590875000], [-18.5414750000, 22.6435500000], [-18.6152562500, 22.6280125000], [-18.6890375000, 22.6124750000], [-18.7628187500, 22.5969375000], [-18.8366000000, 22.5814000000], [-18.8494000000, 22.5786000000], [-18.9365437500, 22.5582375000], [-19.0236875000, 22.5378750000], [-19.1108312500, 22.5175125000], [-19.1979750000, 22.4971500000], [-19.2851187500, 22.4767875000], [-19.3722625000, 22.4564250000], [-19.4594062500, 22.4360625000], [-19.5465500000, 22.4157000000], [-19.6336937500, 22.3953375000], [-19.7208375000, 22.3749750000], [-19.8079812500, 22.3546125000], [-19.8951250000, 22.3342500000], [-19.9822687500, 22.3138875000], [-20.0694125000, 22.2935250000], [-20.1565562500, 22.2731625000], [-20.2437000000, 22.2528000000], [-20.3396812500, 22.2303625000], [-20.4356625000, 22.2079250000], [-20.5316437500, 22.1854875000], [-20.6276250000, 22.1630500000], [-20.7236062500, 22.1406125000], [-20.8195875000, 22.1181750000], [-20.9155687500, 22.0957375000], [-21.0115500000, 22.0733000000], [-21.1075312500, 22.0508625000], [-21.2035125000, 22.0284250000], [-21.2994937500, 22.0059875000], [-21.3954750000, 21.9835500000], [-21.4914562500, 21.9611125000], [-21.5874375000, 21.9386750000], [-21.6834187500, 21.9162375000], [-21.7794000000, 21.8938000000], [-21.8454367188, 21.8783609375], [-21.9114734375, 21.8629218750], [-21.9775101562, 21.8474828125], [-22.0435468750, 21.8320437500], [-22.1095835937, 21.8166046875], [-22.1756203125, 21.8011656250], [-22.2416570312, 21.7857265625], [-22.3076937500, 21.7702875000], [-22.3737304687, 21.7548484375], [-22.4397671875, 21.7394093750], [-22.5058039063, 21.7239703125], [-22.5718406250, 21.7085312500], [-22.6378773437, 21.6930921875], [-22.7039140625, 21.6776531250], [-22.7699507813, 21.6622140625], [-22.8359875000, 21.6467750000], [-22.9020242188, 21.6313359375], [-22.9680609375, 21.6158968750], [-23.0340976563, 21.6004578125], [-23.1001343750, 21.5850187500], [-23.1661710938, 21.5695796875], [-23.2322078125, 21.5541406250], [-23.2982445312, 21.5387015625], [-23.3642812500, 21.5232625000], [-23.4303179688, 21.5078234375], [-23.4963546875, 21.4923843750], [-23.5623914063, 21.4769453125], [-23.6284281250, 21.4615062500], [-23.6944648437, 21.4460671875], [-23.7605015625, 21.4306281250], [-23.8265382813, 21.4151890625], [-23.8925750000, 21.3997500000], [-23.9586117187, 21.3843109375], [-24.0246484375, 21.3688718750], [-24.0906851563, 21.3534328125], [-24.1567218750, 21.3379937500], [-24.2227585938, 21.3225546875], [-24.2887953125, 21.3071156250], [-24.3548320312, 21.2916765625], [-24.4208687500, 21.2762375000], [-24.4869054688, 21.2607984375], [-24.5529421875, 21.2453593750], [-24.6189789062, 21.2299203125], [-24.6850156250, 21.2144812500], [-24.7510523437, 21.1990421875], [-24.8170890625, 21.1836031250], [-24.8831257813, 21.1681640625], [-24.9491625000, 21.1527250000], [-25.0151992187, 21.1372859375], [-25.0812359375, 21.1218468750], [-25.1472726563, 21.1064078125], [-25.2133093750, 21.0909687500], [-25.2793460938, 21.0755296875], [-25.3453828125, 21.0600906250], [-25.4114195312, 21.0446515625], [-25.4774562500, 21.0292125000], [-25.5434929688, 21.0137734375], [-25.6095296875, 20.9983343750], [-25.6755664062, 20.9828953125], [-25.7416031250, 20.9674562500], [-25.8076398437, 20.9520171875], [-25.8736765625, 20.9365781250], [-25.9397132813, 20.9211390625], [-26.0057500000, 20.9057000000], [-26.0717867187, 20.8902609375], [-26.1378234375, 20.8748218750], [-26.2038601563, 20.8593828125], [-26.2698968750, 20.8439437500], [-26.3359335937, 20.8285046875], [-26.4019703125, 20.8130656250], [-26.4680070312, 20.7976265625], [-26.5340437500, 20.7821875000], [-26.6000804688, 20.7667484375], [-26.6661171875, 20.7513093750], [-26.7321539062, 20.7358703125], [-26.7981906250, 20.7204312500], [-26.8642273437, 20.7049921875], [-26.9302640625, 20.6895531250], [-26.9963007812, 20.6741140625], [-27.0623375000, 20.6586750000], [-27.1283742187, 20.6432359375], [-27.1944109375, 20.6277968750], [-27.2604476563, 20.6123578125], [-27.3264843750, 20.5969187500], [-27.3925210937, 20.5814796875], [-27.4585578125, 20.5660406250], [-27.5245945312, 20.5506015625], [-27.5906312500, 20.5351625000], [-27.6566679687, 20.5197234375], [-27.7227046875, 20.5042843750], [-27.7887414062, 20.4888453125], [-27.8547781250, 20.4734062500], [-27.9208148437, 20.4579671875], [-27.9868515625, 20.4425281250], [-28.0528882812, 20.4270890625], [-28.1189250000, 20.4116500000], [-28.1849617187, 20.3962109375], [-28.2509984375, 20.3807718750], [-28.3170351563, 20.3653328125], [-28.3830718750, 20.3498937500], [-28.4491085937, 20.3344546875], [-28.5151453125, 20.3190156250], [-28.5811820312, 20.3035765625], [-28.6472187500, 20.2881375000], [-28.7132554687, 20.2726984375], [-28.7792921875, 20.2572593750], [-28.8453289062, 20.2418203125], [-28.9113656250, 20.2263812500], [-28.9774023437, 20.2109421875], [-29.0434390625, 20.1955031250], [-29.1094757812, 20.1800640625], [-29.1755125000, 20.1646250000], [-29.2415492187, 20.1491859375], [-29.3075859375, 20.1337468750], [-29.3736226562, 20.1183078125], [-29.4396593750, 20.1028687500], [-29.5056960937, 20.0874296875], [-29.5717328125, 20.0719906250], [-29.6377695313, 20.0565515625], [-29.7038062500, 20.0411125000], [-29.7698429687, 20.0256734375], [-29.8358796875, 20.0102343750], [-29.9019164063, 19.9947953125], [-29.9679531250, 19.9793562500], [-30.0339898437, 19.9639171875], [-30.1000265625, 19.9484781250], [-30.1660632812, 19.9330390625], [-30.2321000000, 19.9176000000], [-30.2979921875, 19.9006890625], [-30.3638843750, 19.8837781250], [-30.4297765625, 19.8668671875], [-30.4956687500, 19.8499562500], [-30.5615609375, 19.8330453125], [-30.6274531250, 19.8161343750], [-30.6933453125, 19.7992234375], [-30.7592375000, 19.7823125000], [-30.8251296875, 19.7654015625], [-30.8910218750, 19.7484906250], [-30.9569140625, 19.7315796875], [-31.0228062500, 19.7146687500], [-31.0886984375, 19.6977578125], [-31.1545906250, 19.6808468750], [-31.2204828125, 19.6639359375], [-31.2863750000, 19.6470250000], [-31.3522671875, 19.6301140625], [-31.4181593750, 19.6132031250], [-31.4840515625, 19.5962921875], [-31.5499437500, 19.5793812500], [-31.6158359375, 19.5624703125], [-31.6817281250, 19.5455593750], [-31.7476203125, 19.5286484375], [-31.8135125000, 19.5117375000], [-31.8794046875, 19.4948265625], [-31.9452968750, 19.4779156250], [-32.0111890625, 19.4610046875], [-32.0770812500, 19.4440937500], [-32.1429734375, 19.4271828125], [-32.2088656250, 19.4102718750], [-32.2747578125, 19.3933609375], [-32.3406500000, 19.3764500000], [-32.4065421875, 19.3595390625], [-32.4724343750, 19.3426281250], [-32.5383265625, 19.3257171875], [-32.6042187500, 19.3088062500], [-32.6701109375, 19.2918953125], [-32.7360031250, 19.2749843750], [-32.8018953125, 19.2580734375], [-32.8677875000, 19.2411625000], [-32.9336796875, 19.2242515625], [-32.9995718750, 19.2073406250], [-33.0654640625, 19.1904296875], [-33.1313562500, 19.1735187500], [-33.1972484375, 19.1566078125], [-33.2631406250, 19.1396968750], [-33.3290328125, 19.1227859375], [-33.3949250000, 19.1058750000], [-33.4608171875, 19.0889640625], [-33.5267093750, 19.0720531250], [-33.5926015625, 19.0551421875], [-33.6584937500, 19.0382312500], [-33.7243859375, 19.0213203125], [-33.7902781250, 19.0044093750], [-33.8561703125, 18.9874984375], [-33.9220625000, 18.9705875000], [-33.9879546875, 18.9536765625], [-34.0538468750, 18.9367656250], [-34.1197390625, 18.9198546875], [-34.1856312500, 18.9029437500], [-34.2515234375, 18.8860328125], [-34.3174156250, 18.8691218750], [-34.3833078125, 18.8522109375], [-34.4492000000, 18.8353000000], [-34.5296750000, 18.8140500000], [-34.6101500000, 18.7928000000], [-34.6906250000, 18.7715500000], [-34.7711000000, 18.7503000000], [-34.8515750000, 18.7290500000], [-34.9320500000, 18.7078000000], [-35.0125250000, 18.6865500000], [-35.0930000000, 18.6653000000], [-35.1555687500, 18.6481750000], [-35.2181375000, 18.6310500000], [-35.2807062500, 18.6139250000], [-35.3432750000, 18.5968000000], [-35.4058437500, 18.5796750000], [-35.4684125000, 18.5625500000], [-35.5309812500, 18.5454250000], [-35.5935500000, 18.5283000000], [-35.6561187500, 18.5111750000], [-35.7186875000, 18.4940500000], [-35.7812562500, 18.4769250000], [-35.8438250000, 18.4598000000], [-35.9063937500, 18.4426750000], [-35.9689625000, 18.4255500000], [-36.0315312500, 18.4084250000], [-36.0941000000, 18.3913000000], [-36.1463250000, 18.3769437500], [-36.1985500000, 18.3625875000], [-36.2507750000, 18.3482312500], [-36.3030000000, 18.3338750000], [-36.3552250000, 18.3195187500], [-36.4074500000, 18.3051625000], [-36.4596750000, 18.2908062500], [-36.5119000000, 18.2764500000], [-36.5641250000, 18.2620937500], [-36.6163500000, 18.2477375000], [-36.6685750000, 18.2333812500], [-36.7208000000, 18.2190250000], [-36.7730250000, 18.2046687500], [-36.8252500000, 18.1903125000], [-36.8774750000, 18.1759562500], [-36.9297000000, 18.1616000000], [-36.9929820312, 18.1437218750], [-37.0562640625, 18.1258437500], [-37.1195460938, 18.1079656250], [-37.1828281250, 18.0900875000], [-37.2461101562, 18.0722093750], [-37.3093921875, 18.0543312500], [-37.3726742187, 18.0364531250], [-37.4359562500, 18.0185750000], [-37.4992382813, 18.0006968750], [-37.5625203125, 17.9828187500], [-37.6258023437, 17.9649406250], [-37.6890843750, 17.9470625000], [-37.7523664062, 17.9291843750], [-37.8156484375, 17.9113062500], [-37.8789304687, 17.8934281250], [-37.9422125000, 17.8755500000], [-38.0054945312, 17.8576718750], [-38.0687765625, 17.8397937500], [-38.1320585938, 17.8219156250], [-38.1953406250, 17.8040375000], [-38.2586226562, 17.7861593750], [-38.3219046875, 17.7682812500], [-38.3851867187, 17.7504031250], [-38.4484687500, 17.7325250000], [-38.5117507813, 17.7146468750], [-38.5750328125, 17.6967687500], [-38.6383148437, 17.6788906250], [-38.7015968750, 17.6610125000], [-38.7648789062, 17.6431343750], [-38.8281609375, 17.6252562500], [-38.8914429687, 17.6073781250], [-38.9547250000, 17.5895000000], [-39.0180070312, 17.5716218750], [-39.0812890625, 17.5537437500], [-39.1445710938, 17.5358656250], [-39.2078531250, 17.5179875000], [-39.2711351562, 17.5001093750], [-39.3344171875, 17.4822312500], [-39.3976992187, 17.4643531250], [-39.4609812500, 17.4464750000], [-39.5242632813, 17.4285968750], [-39.5875453125, 17.4107187500], [-39.6508273437, 17.3928406250], [-39.7141093750, 17.3749625000], [-39.7773914062, 17.3570843750], [-39.8406734375, 17.3392062500], [-39.9039554687, 17.3213281250], [-39.9672375000, 17.3034500000], [-40.0305195312, 17.2855718750], [-40.0938015625, 17.2676937500], [-40.1570835938, 17.2498156250], [-40.2203656250, 17.2319375000], [-40.2836476562, 17.2140593750], [-40.3469296875, 17.1961812500], [-40.4102117187, 17.1783031250], [-40.4734937500, 17.1604250000], [-40.5367757813, 17.1425468750], [-40.6000578125, 17.1246687500], [-40.6633398437, 17.1067906250], [-40.7266218750, 17.0889125000], [-40.7899039062, 17.0710343750], [-40.8531859375, 17.0531562500], [-40.9164679687, 17.0352781250], [-40.9797500000, 17.0174000000], [-41.0430320312, 16.9995218750], [-41.1063140625, 16.9816437500], [-41.1695960938, 16.9637656250], [-41.2328781250, 16.9458875000], [-41.2961601562, 16.9280093750], [-41.3594421875, 16.9101312500], [-41.4227242187, 16.8922531250], [-41.4860062500, 16.8743750000], [-41.5492882812, 16.8564968750], [-41.6125703125, 16.8386187500], [-41.6758523437, 16.8207406250], [-41.7391343750, 16.8028625000], [-41.8024164062, 16.7849843750], [-41.8656984375, 16.7671062500], [-41.9289804687, 16.7492281250], [-41.9922625000, 16.7313500000], [-42.0555445312, 16.7134718750], [-42.1188265625, 16.6955937500], [-42.1821085938, 16.6777156250], [-42.2453906250, 16.6598375000], [-42.3086726562, 16.6419593750], [-42.3719546875, 16.6240812500], [-42.4352367187, 16.6062031250], [-42.4985187500, 16.5883250000], [-42.5618007812, 16.5704468750], [-42.6250828125, 16.5525687500], [-42.6883648437, 16.5346906250], [-42.7516468750, 16.5168125000], [-42.8149289062, 16.4989343750], [-42.8782109375, 16.4810562500], [-42.9414929687, 16.4631781250], [-43.0047750000, 16.4453000000], [-43.0680570312, 16.4274218750], [-43.1313390625, 16.4095437500], [-43.1946210938, 16.3916656250], [-43.2579031250, 16.3737875000], [-43.3211851562, 16.3559093750], [-43.3844671875, 16.3380312500], [-43.4477492187, 16.3201531250], [-43.5110312500, 16.3022750000], [-43.5743132812, 16.2843968750], [-43.6375953125, 16.2665187500], [-43.7008773437, 16.2486406250], [-43.7641593750, 16.2307625000], [-43.8274414062, 16.2128843750], [-43.8907234375, 16.1950062500], [-43.9540054687, 16.1771281250], [-44.0172875000, 16.1592500000], [-44.0805695312, 16.1413718750], [-44.1438515625, 16.1234937500], [-44.2071335938, 16.1056156250], [-44.2704156250, 16.0877375000], [-44.3336976562, 16.0698593750], [-44.3969796875, 16.0519812500], [-44.4602617188, 16.0341031250], [-44.5235437500, 16.0162250000], [-44.5868257812, 15.9983468750], [-44.6501078125, 15.9804687500], [-44.7133898438, 15.9625906250], [-44.7766718750, 15.9447125000], [-44.8399539063, 15.9268343750], [-44.9032359375, 15.9089562500], [-44.9665179687, 15.8910781250], [-45.0298000000, 15.8732000000], [-45.1103187500, 15.8497000000], [-45.1908375000, 15.8262000000], [-45.2713562500, 15.8027000000], [-45.3518750000, 15.7792000000]]);
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
import math
import time

from stl import mesh, Dimension

from tkinter import Tk     # from tkinter import Tk for Python 3.x
from tkinter.filedialog import askopenfilename
from mpl_toolkits.mplot3d import art3d
from matplotlib import pyplot as plt
import solid
import os
import ezdxf
import shapely.geometry as sg
import subprocess
from GUI import getSCADPath



def outputSTL(From, To, PATH=getSCADPath()):
    subprocess.Popen(PATH + " -o " + To + " " + From)
    while not os.path.exists(To):
        time.sleep(1)

class Model:
    def __init__(self, model, fileName, location, layer, thickness):
        self.location = location
        self.code = None
        self.fileName = fileName
        self.stl = fileName + ".stl"
        self.layer = layer
        self.thickness = thickness
        self.maxz = (layer+1)*thickness
        self.dxf = fileName + ".dxf"
        self.scad = fileName + ".scad"
        self.model = model
        self.center = None
        self.width = 10
        self.mesh = None
        self.useable_area = None


    def get_code(self):
        max_dim = 0.05
        max_array = 6

        num = int(self.fileName)
        nums = [int(a) for a in str(num)]
        nums.reverse()
        indices = nums
        length = len(nums)

        print(indices)
        t = 0
        i = 0
        cubes = []
        x = 0
        y = 0
        width = 0.01
        while x <= max_dim:
            while y <= max_dim:
                print(indices)
                if nums == []:
                    break
                if indices[0] != 0:
                    cubes.append(solid.translate([x, y, 0])(solid.cube(size=t / 1000 + 0.001)))
                    y += max_dim / (max_array - 1)
                    nums[0] = nums[0] - 1
                else:
                    indices.pop(0)
                    t += 1
                i += 1
            x += max_dim / (max_array - 1)
            y = 0

        outside = solid.translate([-width / 2, -width / 2])(solid.cube(max_dim + (length - 1) / 1000 + 0.001 + width))
        self.code = solid.difference()(outside, cubes)
        self.code = solid.projection(cut=True)(self.code)
        solid.scad_render_to_file(self.code, self.location + "/code.scad")
        outputSTL(From=self.location+"/code.scad", To=self.location+"code.dxf", PATH=getSCADPath())
        # os.system("toSTL.sh renders/code.scad renders/code.dxf")
        return self.location+"/code.dxf"

    def download(self, type):
        if type =="stl":
            print("generating:" + self.location+"/"+ self.fileName+".stl")
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".stl")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".stl")
        elif type == "dxf":
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".dxf")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".dxf")

    def render(self):
        solid.scad_render_to_file(self.model, self.location+"/"+ self.fileName+'.scad')
        while not os.path.exists(self.location+"/"+self.fileName+".scad"):
            time.sleep(1)
        # outputSTL(From= self.location+"/"+ self.fileName+'.scad', To=self.location+"/"+ self.fileName+'.stl')

    def get_points(self):
        doc = ezdxf.readfile(filename=self.location+"/"+ self.fileName+".dxf")
        msp = doc.modelspace()
        i=0
        lists = []
        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return [start, end]

        for e in msp.query("LINE"):
            line = helper(e)
            if not lists:
                lists.append([line])
            else:
                if lists[i][len(lists)-1][1] != line[0]:
                    lists.append([line])
                    i+=1
                else:
                    lists[i].append(line)

    def get_points2(self, FILE):
        doc = ezdxf.readfile(filename=FILE)
        msp = doc.modelspace()
        i = 0
        lists = []

        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return (start, end)

        for e in msp.query("LINE"):
            line = helper(e)
            if lists==[]:
                lists.append([line])
            else:
                if lists[i][len(lists[i]) - 1][1] != line[0]:
                    lists.append([line])
                    i += 1
                else:
                    lists[i].append(line)
        return lists

    def add_code(self):
        dxf = solid.projection(cut=False)(self.model)
        offset = solid.offset(r=-0.1)(dxf)
        solid.scad_render_to_file(offset, self.location+'/offset.scad')
        os.system("toSTL.sh renders/offset.scad renders/offset.dxf")
        lines = self.get_points2("renders/offset.dxf")
        x = lines[0][0][0][0]
        y = lines[0][0][0][1]
        print(x)
        print(y)
        code = solid.translate([x,y,0])(self.code)
        code = solid.linear_extrude(height=999)(code)
        save = self.model
        self.model = solid.projection()(solid.difference()(self.model, code))
        self.render()
        self.download("dxf")
        self.model = save

    def add_label(self, pos):
        # num = 12
        # minx, maxx, miny, maxy, minz, maxz = self.find_minmax()
        maxz = self.maxz
        # label = solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.5, halign="center"))
        # i=minx
        # print("x-len: " + str(maxx-minx))
        # print(i)
        # inc = (maxx-minx)/num
        # while minx <= i <= maxx:
        #     label = solid.union()(solid.translate([i, 0, maxz - 0.2])(solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.25, halign="center"))), label)
        #     i += inc
        #
        # l = label
        #
        # i =miny
        # while miny<= i <= maxy:
        #     print("y inc")
        #     l = solid.union()(solid.translate([0, i, 0])(label), l)
        #     i += 0.5
        for i in str(self.fileName):
            cur = pos[0]
            label = solid.translate([pos[0][0], pos[0][1], self.maxz-0.2])(solid.linear_extrude(height=(self.thickness)/3)(solid.text(str(i), size=0.5, halign="center", valign="center")))
            self.model = solid.difference()(self.model, label)
            pos.append(pos.pop(0))
            while abs(cur[0]-pos[0][0])<0.5 and abs(cur[1]-pos[0][1])<0.5:
                pos.append(pos.pop(0))



    def Center(self):

        volume, cog, inertia = self.mesh.get_mass_properties()
        print("Volume                                  = {0}".format(volume))
        print("Position of the center of gravity (COG) = {0}".format(cog))
        m_centered = solid.translate([-cog[0], -cog[1], 0])(
            self.model
        )
        return m_centered

    def find_minmax(self):
        minx = maxx = miny = maxy = minz = maxz = None
        for p in self.mesh.points:
            # p contains (x, y, z)
            if minx is None:
                minx = p[Dimension.X]
                maxx = p[Dimension.X]
                miny = p[Dimension.Y]
                maxy = p[Dimension.Y]
                minz = p[Dimension.Z]
                maxz = p[Dimension.Z]
            else:
                maxx = max(p[Dimension.X], maxx)
                minx = min(p[Dimension.X], minx)
                maxy = max(p[Dimension.Y], maxy)
                miny = min(p[Dimension.Y], miny)
                maxz = max(p[Dimension.Z], maxz)
                minz = min(p[Dimension.Z], minz)
        lenx = maxx - minx
        leny = maxy - miny
        lenz = maxz - minz
        return minx, maxx, miny, maxy, minz, maxz

    # def generate_Mesh(self):
    #     self.mesh = mesh.Mesh.from_file(self.location + "/" + str(int(self.fileName)//8)+ "b.stl")

    def get_top(self):
        top = solid.projection(cut=True)(solid.translate([0,0,-1*self.thickness*(self.layer+1)])(self.model))
        useable_area = solid.offset(r=-0.45)(top)
        self.useable_area = useable_area
        solid.scad_render_to_file(self.useable_area, self.location+'/' + 'toptemp.scad')
        outputSTL(From=self.location+'/' + 'toptemp.scad', To=self.location+"/top"+ self.dxf)

        # os.system("toSTL.sh out/toptemp.scad renders/" + self.fileName + ".dxf")
        dxf = DXF(self.location+"/top"+ self.dxf)
        min_p=dxf.points[0][0]
        points_ordered = dxf.points
        i=0
        while i <= len(dxf.points)+1:
            while math.sqrt((dxf.points[0][0]-dxf.points[1][0])**2+(dxf.points[0][1]-dxf.points[1][1])**2) > 0.1:
                dxf.points.insert(1, [(dxf.points[0][0]+dxf.points[1][0])/2, (dxf.points[0][1]+dxf.points[1][1])/2])
                i = i-1
            dxf.points.append(dxf.points.pop(0))
            i+=1
        for i in range(len(dxf.points)):
            dxf.points.append(dxf.points.pop(0))
            if dxf.points[0][0] < min_p:
                min_p = dxf.points[0][0]
                points_ordered = dxf.points.copy()
        dxf.points = points_ordered.copy()

        print(dxf.points)
        self.add_label(dxf.points)

class DXF:
    def __init__(self, file):
        self.file = file
        self.Lines = []
        self.points = []
        doc = ezdxf.readfile(self.file)
        msp = doc.modelspace()
        for e in msp:
            if e.dxftype() == "LINE":
                self.Lines.append(e)
                self.points.append([e.dxf.start[0], e.dxf.start[1]])
        # self.points.append([self.Lines[-1].dxf.end[0], self.Lines[-1].dxf.end[1]])
        self.area = None
        self.center = None
        self.polygon = sg.Polygon(self.points)

    def get_area(self):
        self.area = self.polygon.area
        return self.area

    def get_center(self):
        x_sum = 0
        y_sum =0
        for i in self.points:
            x_sum += i[0]
            y_sum += i[1]
        x_c = x_sum/len(self.points)
        y_c = y_sum/len(self.points)
        return (x_c, y_c)

    def split(self, maxdim):
        splits = []
        length = 0
        pieces = [[]]
        prev = self.points[-1]
        pieces[-1].append(prev)
        for j in self.points:
            length = length + math.sqrt((prev[0]-j[0])**2+(prev[1]-j[1])**2)
            if length >= maxdim:
                pieces[-1].append(j)
                pieces.append([])
                length = 0
            pieces[-1].append(j)
            prev = j
        for j in pieces:
            j.insert(0, [0,0])
            piece = solid.linear_extrude(height=10)(solid.polygon(j))
            splits.append(piece)
        return splits
    def refine_points(self):
        i=0
        while i <= len(self.points)+1:
            while math.sqrt((self.points[0][0]-self.points[1][0])**2+(self.points[0][1]-self.points[1][1])**2) > 0.1:
                self.points.insert(1, [(self.points[0][0]+self.points[1][0])/2, (self.points[0][1]+self.points[1][1])/2])
                i = i-1
            self.points.append(self.points.pop(0))
            i+=1


if __name__== "__main__":
    test = DXF("C:/Users/Daniel/Documents/repos/Shell_Maker/output/0top_slice.dxf")
    test.refine_points()
    k = test.split(48)
    for i in range(len(k)):
        solid.scad_render_to_file(k[i], str(i) + ".scad")


 
 
************************************************/
