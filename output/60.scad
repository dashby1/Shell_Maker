// Generated by SolidPython 1.1.3 on 2024-05-19 23:42:02


intersection() {
	difference() {
		intersection() {
			translate(v = [0, 0, 0]) {
				import(file = "CE3E3V2_Bottom_shell.stl", origin = [0, 0]);
			}
			translate(v = [-90.04029846191406, -32.690147399902344, 14]) {
				cube(size = [180.0806, 65.380295, 2]);
			}
		}
		linear_extrude(height = 999) {
			offset(r = -1) {
				import(file = "C:/Users/Daniel/Documents/repos/Shell_Maker/output/7top_slice.dxf", origin = [0, 0]);
			}
		}
	}
	translate(v = [0, 0, 14]) {
		linear_extrude(height = 10) {
			polygon(points = [[0, 0], [-40.0409187500, -17.4009093750], [-39.9910984375, -17.4143367188], [-39.9412781250, -17.4277640625], [-39.8914578125, -17.4411914063], [-39.8416375000, -17.4546187500], [-39.7918171875, -17.4680460938], [-39.7419968750, -17.4814734375], [-39.6921765625, -17.4949007813], [-39.6423562500, -17.5083281250], [-39.5925359375, -17.5217554688], [-39.5427156250, -17.5351828125], [-39.4928953125, -17.5486101563], [-39.4430750000, -17.5620375000], [-39.3932546875, -17.5754648438], [-39.3434343750, -17.5888921875], [-39.2936140625, -17.6023195313], [-39.2437937500, -17.6157468750], [-39.1939734375, -17.6291742188], [-39.1441531250, -17.6426015625], [-39.0943328125, -17.6560289063], [-39.0445125000, -17.6694562500], [-38.9946921875, -17.6828835938], [-38.9448718750, -17.6963109375], [-38.8950515625, -17.7097382813], [-38.8452312500, -17.7231656250], [-38.7954109375, -17.7365929687], [-38.7455906250, -17.7500203125], [-38.6957703125, -17.7634476563], [-38.6459500000, -17.7768750000], [-38.5961296875, -17.7903023437], [-38.5463093750, -17.8037296875], [-38.4964890625, -17.8171570313], [-38.4466687500, -17.8305843750], [-38.3968484375, -17.8440117188], [-38.3470281250, -17.8574390625], [-38.2972078125, -17.8708664062], [-38.2473875000, -17.8842937500], [-38.1975671875, -17.8977210937], [-38.1477468750, -17.9111484375], [-38.0979265625, -17.9245757812], [-38.0481062500, -17.9380031250], [-37.9982859375, -17.9514304687], [-37.9484656250, -17.9648578125], [-37.8986453125, -17.9782851562], [-37.8488250000, -17.9917125000], [-37.7990046875, -18.0051398437], [-37.7491843750, -18.0185671875], [-37.6993640625, -18.0319945312], [-37.6495437500, -18.0454218750], [-37.5997234375, -18.0588492187], [-37.5499031250, -18.0722765625], [-37.5000828125, -18.0857039063], [-37.4502625000, -18.0991312500], [-37.4004421875, -18.1125585937], [-37.3506218750, -18.1259859375], [-37.3008015625, -18.1394132813], [-37.2509812500, -18.1528406250], [-37.2011609375, -18.1662679687], [-37.1513406250, -18.1796953125], [-37.1015203125, -18.1931226563], [-37.0517000000, -18.2065500000], [-37.0018796875, -18.2199773437], [-36.9520593750, -18.2334046875], [-36.9022390625, -18.2468320313], [-36.8524187500, -18.2602593750], [-36.8025984375, -18.2736867187], [-36.7527781250, -18.2871140625], [-36.7029578125, -18.3005414063], [-36.6531375000, -18.3139687500], [-36.6033171875, -18.3273960938], [-36.5534968750, -18.3408234375], [-36.5036765625, -18.3542507813], [-36.4538562500, -18.3676781250], [-36.4040359375, -18.3811054688], [-36.3542156250, -18.3945328125], [-36.3043953125, -18.4079601563], [-36.2545750000, -18.4213875000], [-36.2047546875, -18.4348148438], [-36.1549343750, -18.4482421875], [-36.1051140625, -18.4616695313], [-36.0552937500, -18.4750968750], [-36.0054734375, -18.4885242188], [-35.9556531250, -18.5019515625], [-35.9058328125, -18.5153789063], [-35.8560125000, -18.5288062500], [-35.8061921875, -18.5422335938], [-35.7563718750, -18.5556609375], [-35.7065515625, -18.5690882812], [-35.6567312500, -18.5825156250], [-35.6069109375, -18.5959429687], [-35.5570906250, -18.6093703125], [-35.5072703125, -18.6227976563], [-35.4574500000, -18.6362250000], [-35.4076296875, -18.6496523437], [-35.3578093750, -18.6630796875], [-35.3079890625, -18.6765070313], [-35.2581687500, -18.6899343750], [-35.2083484375, -18.7033617187], [-35.1585281250, -18.7167890625], [-35.1087078125, -18.7302164062], [-35.0588875000, -18.7436437500], [-35.0090671875, -18.7570710937], [-34.9592468750, -18.7704984375], [-34.9094265625, -18.7839257812], [-34.8596062500, -18.7973531250], [-34.8097859375, -18.8107804687], [-34.7599656250, -18.8242078125], [-34.7101453125, -18.8376351562], [-34.6603250000, -18.8510625000], [-34.6105046875, -18.8644898437], [-34.5606843750, -18.8779171875], [-34.5108640625, -18.8913445312], [-34.4610437500, -18.9047718750], [-34.4112234375, -18.9181992187], [-34.3614031250, -18.9316265625], [-34.3115828125, -18.9450539062], [-34.2617625000, -18.9584812500], [-34.2119421875, -18.9719085937], [-34.1621218750, -18.9853359375], [-34.1123015625, -18.9987632812], [-34.0624812500, -19.0121906250], [-34.0126609375, -19.0256179687], [-33.9628406250, -19.0390453125], [-33.9130203125, -19.0524726562], [-33.8632000000, -19.0659000000], [-33.7792500000, -19.0877250000], [-33.6953000000, -19.1095500000], [-33.6113500000, -19.1313750000], [-33.5274000000, -19.1532000000], [-33.4784343750, -19.1655625000], [-33.4294687500, -19.1779250000], [-33.3805031250, -19.1902875000], [-33.3315375000, -19.2026500000], [-33.2825718750, -19.2150125000], [-33.2336062500, -19.2273750000], [-33.1846406250, -19.2397375000], [-33.1356750000, -19.2521000000], [-33.0867093750, -19.2644625000], [-33.0377437500, -19.2768250000], [-32.9887781250, -19.2891875000], [-32.9398125000, -19.3015500000], [-32.8908468750, -19.3139125000], [-32.8418812500, -19.3262750000], [-32.7929156250, -19.3386375000], [-32.7439500000, -19.3510000000], [-32.6949843750, -19.3633625000], [-32.6460187500, -19.3757250000], [-32.5970531250, -19.3880875000], [-32.5480875000, -19.4004500000], [-32.4991218750, -19.4128125000], [-32.4501562500, -19.4251750000], [-32.4011906250, -19.4375375000], [-32.3522250000, -19.4499000000], [-32.3032593750, -19.4622625000], [-32.2542937500, -19.4746250000], [-32.2053281250, -19.4869875000], [-32.1563625000, -19.4993500000], [-32.1073968750, -19.5117125000], [-32.0584312500, -19.5240750000], [-32.0094656250, -19.5364375000], [-31.9605000000, -19.5488000000], [-31.9115343750, -19.5611625000], [-31.8625687500, -19.5735250000], [-31.8136031250, -19.5858875000], [-31.7646375000, -19.5982500000], [-31.7156718750, -19.6106125000], [-31.6667062500, -19.6229750000], [-31.6177406250, -19.6353375000], [-31.5687750000, -19.6477000000], [-31.5198093750, -19.6600625000], [-31.4708437500, -19.6724250000], [-31.4218781250, -19.6847875000], [-31.3729125000, -19.6971500000], [-31.3239468750, -19.7095125000], [-31.2749812500, -19.7218750000], [-31.2260156250, -19.7342375000], [-31.1770500000, -19.7466000000], [-31.1280843750, -19.7589625000], [-31.0791187500, -19.7713250000], [-31.0301531250, -19.7836875000], [-30.9811875000, -19.7960500000], [-30.9322218750, -19.8084125000], [-30.8832562500, -19.8207750000], [-30.8342906250, -19.8331375000], [-30.7853250000, -19.8455000000], [-30.7363593750, -19.8578625000], [-30.6873937500, -19.8702250000], [-30.6384281250, -19.8825875000], [-30.5894625000, -19.8949500000], [-30.5404968750, -19.9073125000], [-30.4915312500, -19.9196750000], [-30.4425656250, -19.9320375000], [-30.3936000000, -19.9444000000], [-30.3143125000, -19.9637000000], [-30.2350250000, -19.9830000000], [-30.1557375000, -20.0023000000], [-30.0764500000, -20.0216000000], [-29.9971625000, -20.0409000000], [-29.9178750000, -20.0602000000], [-29.8385875000, -20.0795000000], [-29.7593000000, -20.0988000000], [-29.7077375000, -20.1111000000], [-29.6561750000, -20.1234000000], [-29.6046125000, -20.1357000000], [-29.5530500000, -20.1480000000], [-29.5014875000, -20.1603000000], [-29.4499250000, -20.1726000000], [-29.3983625000, -20.1849000000], [-29.3468000000, -20.1972000000], [-29.2952375000, -20.2095000000], [-29.2436750000, -20.2218000000], [-29.1921125000, -20.2341000000], [-29.1405500000, -20.2464000000], [-29.0889875000, -20.2587000000], [-29.0374250000, -20.2710000000], [-28.9858625000, -20.2833000000], [-28.9343000000, -20.2956000000], [-28.8627492188, -20.3121132812], [-28.7911984375, -20.3286265625], [-28.7196476563, -20.3451398437], [-28.6480968750, -20.3616531250], [-28.5765460938, -20.3781664063], [-28.5049953125, -20.3946796875], [-28.4334445313, -20.4111929688], [-28.3618937500, -20.4277062500], [-28.2903429688, -20.4442195312], [-28.2187921875, -20.4607328125], [-28.1472414063, -20.4772460937], [-28.0756906250, -20.4937593750], [-28.0041398437, -20.5102726563], [-27.9325890625, -20.5267859375], [-27.8610382812, -20.5432992188], [-27.7894875000, -20.5598125000], [-27.7179367187, -20.5763257812], [-27.6463859375, -20.5928390625], [-27.5748351562, -20.6093523437], [-27.5032843750, -20.6258656250], [-27.4317335937, -20.6423789063], [-27.3601828125, -20.6588921875], [-27.2886320312, -20.6754054688], [-27.2170812500, -20.6919187500], [-27.1455304687, -20.7084320312], [-27.0739796875, -20.7249453125], [-27.0024289062, -20.7414585937], [-26.9308781250, -20.7579718750], [-26.8593273437, -20.7744851563], [-26.7877765625, -20.7909984375], [-26.7162257812, -20.8075117187], [-26.6446750000, -20.8240250000], [-26.5731242187, -20.8405382812], [-26.5015734375, -20.8570515625], [-26.4300226562, -20.8735648437], [-26.3584718750, -20.8900781250], [-26.2869210937, -20.9065914063], [-26.2153703125, -20.9231046875], [-26.1438195312, -20.9396179687], [-26.0722687500, -20.9561312500], [-26.0007179687, -20.9726445312], [-25.9291671875, -20.9891578125], [-25.8576164062, -21.0056710937], [-25.7860656250, -21.0221843750], [-25.7145148437, -21.0386976563], [-25.6429640625, -21.0552109375], [-25.5714132812, -21.0717242187], [-25.4998625000, -21.0882375000], [-25.4283117187, -21.1047507812], [-25.3567609375, -21.1212640625], [-25.2852101562, -21.1377773437], [-25.2136593750, -21.1542906250], [-25.1421085937, -21.1708039063], [-25.0705578125, -21.1873171875], [-24.9990070312, -21.2038304687], [-24.9274562500, -21.2203437500], [-24.8559054687, -21.2368570312], [-24.7843546875, -21.2533703125], [-24.7128039062, -21.2698835938], [-24.6412531250, -21.2863968750], [-24.5697023437, -21.3029101563], [-24.4981515625, -21.3194234375], [-24.4266007812, -21.3359367187], [-24.3550500000, -21.3524500000], [-24.2834992187, -21.3689632813], [-24.2119484375, -21.3854765625], [-24.1403976562, -21.4019898438], [-24.0688468750, -21.4185031250], [-23.9972960937, -21.4350164062], [-23.9257453125, -21.4515296875], [-23.8541945312, -21.4680429688], [-23.7826437500, -21.4845562500], [-23.7110929687, -21.5010695313], [-23.6395421875, -21.5175828125], [-23.5679914062, -21.5340960938], [-23.4964406250, -21.5506093750], [-23.4248898437, -21.5671226563], [-23.3533390625, -21.5836359375], [-23.2817882812, -21.6001492188], [-23.2102375000, -21.6166625000], [-23.1386867187, -21.6331757813], [-23.0671359375, -21.6496890625], [-22.9955851562, -21.6662023438], [-22.9240343750, -21.6827156250], [-22.8524835937, -21.6992289063], [-22.7809328125, -21.7157421875], [-22.7093820312, -21.7322554688], [-22.6378312500, -21.7487687500], [-22.5662804687, -21.7652820313], [-22.4947296875, -21.7817953125], [-22.4231789062, -21.7983085938], [-22.3516281250, -21.8148218750], [-22.2800773437, -21.8313351563], [-22.2085265625, -21.8478484375], [-22.1369757812, -21.8643617188], [-22.0654250000, -21.8808750000], [-21.9938742187, -21.8973882813], [-21.9223234375, -21.9139015625], [-21.8507726562, -21.9304148438], [-21.7792218750, -21.9469281250], [-21.7076710937, -21.9634414063], [-21.6361203125, -21.9799546875], [-21.5645695312, -21.9964679688], [-21.4930187500, -22.0129812500], [-21.4214679687, -22.0294945313], [-21.3499171875, -22.0460078125], [-21.2783664062, -22.0625210938], [-21.2068156250, -22.0790343750], [-21.1352648437, -22.0955476563], [-21.0637140625, -22.1120609375], [-20.9921632812, -22.1285742188], [-20.9206125000, -22.1450875000], [-20.8490617187, -22.1616007813], [-20.7775109375, -22.1781140625], [-20.7059601562, -22.1946273437], [-20.6344093750, -22.2111406250], [-20.5628585937, -22.2276539063], [-20.4913078125, -22.2441671875], [-20.4197570312, -22.2606804688], [-20.3482062500, -22.2771937500], [-20.2766554687, -22.2937070313], [-20.2051046875, -22.3102203125], [-20.1335539062, -22.3267335937], [-20.0620031250, -22.3432468750], [-19.9904523437, -22.3597601563], [-19.9189015625, -22.3762734375], [-19.8473507813, -22.3927867188], [-19.7758000000, -22.4093000000], [-19.6865750000, -22.4291000000], [-19.5973500000, -22.4489000000], [-19.5081250000, -22.4687000000], [-19.4189000000, -22.4885000000], [-19.3296750000, -22.5083000000], [-19.2404500000, -22.5281000000], [-19.1512250000, -22.5479000000], [-19.0620000000, -22.5677000000], [-18.9953609375, -22.5815468750], [-18.9287218750, -22.5953937500], [-18.8620828125, -22.6092406250], [-18.7954437500, -22.6230875000], [-18.7288046875, -22.6369343750], [-18.6621656250, -22.6507812500], [-18.5955265625, -22.6646281250], [-18.5288875000, -22.6784750000], [-18.4622484375, -22.6923218750], [-18.3956093750, -22.7061687500], [-18.3289703125, -22.7200156250], [-18.2623312500, -22.7338625000], [-18.1956921875, -22.7477093750], [-18.1290531250, -22.7615562500], [-18.0624140625, -22.7754031250], [-17.9957750000, -22.7892500000], [-17.9291359375, -22.8030968750], [-17.8624968750, -22.8169437500], [-17.7958578125, -22.8307906250], [-17.7292187500, -22.8446375000], [-17.6625796875, -22.8584843750], [-17.5959406250, -22.8723312500], [-17.5293015625, -22.8861781250], [-17.4626625000, -22.9000250000], [-17.3960234375, -22.9138718750], [-17.3293843750, -22.9277187500], [-17.2627453125, -22.9415656250], [-17.1961062500, -22.9554125000], [-17.1294671875, -22.9692593750], [-17.0628281250, -22.9831062500], [-16.9961890625, -22.9969531250], [-16.9295500000, -23.0108000000], [-16.8629109375, -23.0246468750], [-16.7962718750, -23.0384937500], [-16.7296328125, -23.0523406250], [-16.6629937500, -23.0661875000], [-16.5963546875, -23.0800343750], [-16.5297156250, -23.0938812500], [-16.4630765625, -23.1077281250], [-16.3964375000, -23.1215750000], [-16.3297984375, -23.1354218750], [-16.2631593750, -23.1492687500], [-16.1965203125, -23.1631156250], [-16.1298812500, -23.1769625000], [-16.0632421875, -23.1908093750], [-15.9966031250, -23.2046562500], [-15.9299640625, -23.2185031250], [-15.8633250000, -23.2323500000], [-15.7966859375, -23.2461968750], [-15.7300468750, -23.2600437500], [-15.6634078125, -23.2738906250], [-15.5967687500, -23.2877375000], [-15.5301296875, -23.3015843750], [-15.4634906250, -23.3154312500], [-15.3968515625, -23.3292781250], [-15.3302125000, -23.3431250000], [-15.2635734375, -23.3569718750], [-15.1969343750, -23.3708187500], [-15.1302953125, -23.3846656250], [-15.0636562500, -23.3985125000], [-14.9970171875, -23.4123593750], [-14.9303781250, -23.4262062500], [-14.8637390625, -23.4400531250], [-14.7971000000, -23.4539000000], [-14.7138125000, -23.4718375000], [-14.6305250000, -23.4897750000], [-14.5472375000, -23.5077125000], [-14.4639500000, -23.5256500000], [-14.3806625000, -23.5435875000], [-14.2973750000, -23.5615250000], [-14.2140875000, -23.5794625000], [-14.1308000000, -23.5974000000], [-14.0647593750, -23.6104937500], [-13.9987187500, -23.6235875000], [-13.9326781250, -23.6366812500], [-13.8666375000, -23.6497750000], [-13.8005968750, -23.6628687500], [-13.7345562500, -23.6759625000], [-13.6685156250, -23.6890562500], [-13.6024750000, -23.7021500000], [-13.5364343750, -23.7152437500], [-13.4703937500, -23.7283375000], [-13.4043531250, -23.7414312500], [-13.3383125000, -23.7545250000], [-13.2722718750, -23.7676187500], [-13.2062312500, -23.7807125000], [-13.1401906250, -23.7938062500], [-13.0741500000, -23.8069000000], [-13.0081093750, -23.8199937500], [-12.9420687500, -23.8330875000], [-12.8760281250, -23.8461812500], [-12.8099875000, -23.8592750000], [-12.7439468750, -23.8723687500], [-12.6779062500, -23.8854625000], [-12.6118656250, -23.8985562500], [-12.5458250000, -23.9116500000], [-12.4797843750, -23.9247437500], [-12.4137437500, -23.9378375000], [-12.3477031250, -23.9509312500], [-12.2816625000, -23.9640250000], [-12.2156218750, -23.9771187500], [-12.1495812500, -23.9902125000], [-12.0835406250, -24.0033062500], [-12.0175000000, -24.0164000000], [-11.9430525000, -24.0299242188], [-11.8686050000, -24.0434484375], [-11.7941575000, -24.0569726563], [-11.7197100000, -24.0704968750], [-11.6452625000, -24.0840210938], [-11.5708150000, -24.0975453125], [-11.4963675000, -24.1110695313], [-11.4219200000, -24.1245937500], [-11.3474725000, -24.1381179688], [-11.2730250000, -24.1516421875], [-11.1985775000, -24.1651664063], [-11.1241300000, -24.1786906250], [-11.0496825000, -24.1922148438], [-10.9752350000, -24.2057390625], [-10.9007875000, -24.2192632813], [-10.8263400000, -24.2327875000], [-10.7518925000, -24.2463117188], [-10.6774450000, -24.2598359375], [-10.6029975000, -24.2733601562], [-10.5285500000, -24.2868843750], [-10.4541025000, -24.3004085937], [-10.3796550000, -24.3139328125], [-10.3052075000, -24.3274570312], [-10.2307600000, -24.3409812500], [-10.1563125000, -24.3545054687], [-10.0818650000, -24.3680296875], [-10.0074175000, -24.3815539062], [-9.9329700000, -24.3950781250], [-9.8585225000, -24.4086023437], [-9.7840750000, -24.4221265625], [-9.7096275000, -24.4356507812], [-9.6351800000, -24.4491750000], [-9.5607325000, -24.4626992188], [-9.4862850000, -24.4762234375], [-9.4118375000, -24.4897476563], [-9.3373900000, -24.5032718750], [-9.2629425000, -24.5167960938], [-9.1884950000, -24.5303203125], [-9.1140475000, -24.5438445313], [-9.0396000000, -24.5573687500], [-8.9651525000, -24.5708929688], [-8.8907050000, -24.5844171875], [-8.8162575000, -24.5979414063], [-8.7418100000, -24.6114656250], [-8.6673625000, -24.6249898438], [-8.5929150000, -24.6385140625], [-8.5184675000, -24.6520382813], [-8.4440200000, -24.6655625000], [-8.3695725000, -24.6790867187], [-8.2951250000, -24.6926109375], [-8.2206775000, -24.7061351562], [-8.1462300000, -24.7196593750], [-8.0717825000, -24.7331835937], [-7.9973350000, -24.7467078125], [-7.9228875000, -24.7602320312], [-7.8484400000, -24.7737562500], [-7.7739925000, -24.7872804687], [-7.6995450000, -24.8008046875], [-7.6250975000, -24.8143289062], [-7.5506500000, -24.8278531250], [-7.4762025000, -24.8413773437], [-7.4017550000, -24.8549015625], [-7.3273075000, -24.8684257812], [-7.2528600000, -24.8819500000], [-7.1784125000, -24.8954742188], [-7.1039650000, -24.9089984375], [-7.0295175000, -24.9225226563], [-6.9550700000, -24.9360468750], [-6.8806225000, -24.9495710938], [-6.8061750000, -24.9630953125], [-6.7317275000, -24.9766195313], [-6.6572800000, -24.9901437500], [-6.5828325000, -25.0036679688], [-6.5083850000, -25.0171921875], [-6.4339375000, -25.0307164063], [-6.3594900000, -25.0442406250], [-6.2850425000, -25.0577648438], [-6.2105950000, -25.0712890625], [-6.1361475000, -25.0848132812], [-6.0617000000, -25.0983375000], [-5.9872525000, -25.1118617187], [-5.9128050000, -25.1253859375], [-5.8383575000, -25.1389101562], [-5.7639100000, -25.1524343750], [-5.6894625000, -25.1659585937], [-5.6150150000, -25.1794828125], [-5.5405675000, -25.1930070312], [-5.4661200000, -25.2065312500], [-5.3916725000, -25.2200554687], [-5.3172250000, -25.2335796875], [-5.2427775000, -25.2471039062], [-5.1683300000, -25.2606281250], [-5.0938825000, -25.2741523437], [-5.0194350000, -25.2876765625], [-4.9449875000, -25.3012007812], [-4.8705400000, -25.3147250000], [-4.7960925000, -25.3282492188], [-4.7216450000, -25.3417734375], [-4.6471975000, -25.3552976563], [-4.5727500000, -25.3688218750], [-4.4983025000, -25.3823460938], [-4.4238550000, -25.3958703125], [-4.3494075000, -25.4093945313], [-4.2749600000, -25.4229187500], [-4.2005125000, -25.4364429688], [-4.1260650000, -25.4499671875], [-4.0516175000, -25.4634914063], [-3.9771700000, -25.4770156250], [-3.9027225000, -25.4905398437], [-3.8282750000, -25.5040640625], [-3.7538275000, -25.5175882812], [-3.6793800000, -25.5311125000], [-3.6049325000, -25.5446367187], [-3.5304850000, -25.5581609375], [-3.4560375000, -25.5716851562], [-3.3815900000, -25.5852093750], [-3.3071425000, -25.5987335937], [-3.2326950000, -25.6122578125], [-3.1582475000, -25.6257820312], [-3.0838000000, -25.6393062500], [-3.0093525000, -25.6528304687], [-2.9349050000, -25.6663546875], [-2.8604575000, -25.6798789062], [-2.7860100000, -25.6934031250], [-2.7115625000, -25.7069273437], [-2.6371150000, -25.7204515625], [-2.5626675000, -25.7339757812], [-2.4882200000, -25.7475000000], [-2.3982570313, -25.7610953125], [-2.3082940625, -25.7746906250], [-2.2183310937, -25.7882859375], [-2.1283681250, -25.8018812500], [-2.0384051563, -25.8154765625], [-1.9484421875, -25.8290718750], [-1.8584792188, -25.8426671875], [-1.7685162500, -25.8562625000], [-1.6785532813, -25.8698578125], [-1.5885903125, -25.8834531250], [-1.4986273438, -25.8970484375], [-1.4086643750, -25.9106437500], [-1.3187014063, -25.9242390625], [-1.2287384375, -25.9378343750], [-1.1387754688, -25.9514296875], [-1.0488125000, -25.9650250000], [-0.9588495313, -25.9786203125], [-0.8688865625, -25.9922156250], [-0.7789235938, -26.0058109375], [-0.6889606250, -26.0194062500], [-0.5989976563, -26.0330015625], [-0.5090346875, -26.0465968750], [-0.4190717188, -26.0601921875], [-0.3291087500, -26.0737875000], [-0.2391457813, -26.0873828125], [-0.1491828125, -26.1009781250], [-0.0592198438, -26.1145734375], [0.0307431250, -26.1281687500], [0.1207060937, -26.1417640625], [0.2106690625, -26.1553593750], [0.3006320312, -26.1689546875], [0.3905950000, -26.1825500000], [0.4805579687, -26.1961453125], [0.5705209375, -26.2097406250], [0.6604839062, -26.2233359375], [0.7504468750, -26.2369312500], [0.8404098437, -26.2505265625], [0.9303728125, -26.2641218750], [1.0203357812, -26.2777171875], [1.1102987500, -26.2913125000], [1.2002617187, -26.3049078125], [1.2902246875, -26.3185031250], [1.3801876562, -26.3320984375], [1.4701506250, -26.3456937500], [1.5601135937, -26.3592890625], [1.6500765625, -26.3728843750], [1.7400395312, -26.3864796875], [1.8300025000, -26.4000750000], [1.9199654687, -26.4136703125], [2.0099284375, -26.4272656250], [2.0998914062, -26.4408609375], [2.1898543750, -26.4544562500], [2.2798173437, -26.4680515625], [2.3697803125, -26.4816468750], [2.4597432812, -26.4952421875], [2.5497062500, -26.5088375000], [2.6396692187, -26.5224328125], [2.7296321875, -26.5360281250], [2.8195951563, -26.5496234375], [2.9095581250, -26.5632187500], [2.9995210937, -26.5768140625], [3.0894840625, -26.5904093750], [3.1794470312, -26.6040046875], [3.2694100000, -26.6176000000], [3.3593729687, -26.6311953125], [3.4493359375, -26.6447906250], [3.5392989062, -26.6583859375], [3.6292618750, -26.6719812500], [3.7192248438, -26.6855765625], [3.8091878125, -26.6991718750], [3.8991507813, -26.7127671875], [3.9891137500, -26.7263625000], [4.0790767187, -26.7399578125], [4.1690396875, -26.7535531250], [4.2590026562, -26.7671484375], [4.3489656250, -26.7807437500], [4.4389285938, -26.7943390625], [4.5288915625, -26.8079343750], [4.6188545313, -26.8215296875], [4.7088175000, -26.8351250000], [4.7987804688, -26.8487203125], [4.8887434375, -26.8623156250], [4.9787064063, -26.8759109375], [5.0686693750, -26.8895062500], [5.1586323438, -26.9031015625], [5.2485953125, -26.9166968750]]);
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
import math
import time

from stl import mesh, Dimension

from tkinter import Tk     # from tkinter import Tk for Python 3.x
from tkinter.filedialog import askopenfilename
from mpl_toolkits.mplot3d import art3d
from matplotlib import pyplot as plt
import solid
import os
import ezdxf
import shapely.geometry as sg
import subprocess
from GUI import getSCADPath



def outputSTL(From, To, PATH=getSCADPath()):
    subprocess.Popen(PATH + " -o " + To + " " + From)
    while not os.path.exists(To):
        time.sleep(1)


def get_size(i):
    x_list = [int(a) for a in str(i)]
    return len(x_list)



class Model:
    def __init__(self, model, fileName, location, layer, thickness):
        self.location = location
        self.code = None
        self.fileName = fileName
        self.stl = fileName + ".stl"
        self.layer = layer
        self.thickness = thickness
        self.maxz = (layer+1)*thickness
        self.dxf = fileName + ".dxf"
        self.scad = fileName + ".scad"
        self.model = model
        self.center = None
        self.width = 10
        self.mesh = None
        self.useable_area = None


    def get_code(self):
        max_dim = 0.05
        max_array = 6

        num = int(self.fileName)
        nums = [int(a) for a in str(num)]
        nums.reverse()
        indices = nums
        length = len(nums)

        print(indices)
        t = 0
        i = 0
        cubes = []
        x = 0
        y = 0
        width = 0.01
        while x <= max_dim:
            while y <= max_dim:
                print(indices)
                if nums == []:
                    break
                if indices[0] != 0:
                    cubes.append(solid.translate([x, y, 0])(solid.cube(size=t / 1000 + 0.001)))
                    y += max_dim / (max_array - 1)
                    nums[0] = nums[0] - 1
                else:
                    indices.pop(0)
                    t += 1
                i += 1
            x += max_dim / (max_array - 1)
            y = 0

        outside = solid.translate([-width / 2, -width / 2])(solid.cube(max_dim + (length - 1) / 1000 + 0.001 + width))
        self.code = solid.difference()(outside, cubes)
        self.code = solid.projection(cut=True)(self.code)
        solid.scad_render_to_file(self.code, self.location + "/code.scad")
        outputSTL(From=self.location+"/code.scad", To=self.location+"code.dxf", PATH=getSCADPath())
        # os.system("toSTL.sh renders/code.scad renders/code.dxf")
        return self.location+"/code.dxf"

    def download(self, type):
        if type =="stl":
            print("generating:" + self.location+"/"+ self.fileName+".stl")
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".stl")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".stl")
        elif type == "dxf":
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".dxf")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".dxf")

    def render(self):
        solid.scad_render_to_file(self.model, self.location+"/"+ self.fileName+'.scad')
        while not os.path.exists(self.location+"/"+self.fileName+".scad"):
            time.sleep(1)

    def get_points(self):
        doc = ezdxf.readfile(filename=self.location+"/"+ self.fileName+".dxf")
        msp = doc.modelspace()
        i=0
        lists = []
        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return [start, end]

        for e in msp.query("LINE"):
            line = helper(e)
            if not lists:
                lists.append([line])
            else:
                if lists[i][len(lists)-1][1] != line[0]:
                    lists.append([line])
                    i+=1
                else:
                    lists[i].append(line)

    def get_points2(self, FILE):
        doc = ezdxf.readfile(filename=FILE)
        msp = doc.modelspace()
        i = 0
        lists = []

        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return (start, end)

        for e in msp.query("LINE"):
            line = helper(e)
            if lists==[]:
                lists.append([line])
            else:
                if lists[i][len(lists[i]) - 1][1] != line[0]:
                    lists.append([line])
                    i += 1
                else:
                    lists[i].append(line)
        return lists

    def add_code(self):
        dxf = solid.projection(cut=False)(self.model)
        offset = solid.offset(r=-0.1)(dxf)
        solid.scad_render_to_file(offset, self.location+'/offset.scad')
        os.system("toSTL.sh renders/offset.scad renders/offset.dxf")
        lines = self.get_points2("renders/offset.dxf")
        x = lines[0][0][0][0]
        y = lines[0][0][0][1]
        print(x)
        print(y)
        code = solid.translate([x,y,0])(self.code)
        code = solid.linear_extrude(height=999)(code)
        save = self.model
        self.model = solid.projection()(solid.difference()(self.model, code))
        self.render()
        self.download("dxf")
        self.model = save

    def add_label(self, pos):
        # num = 12
        # minx, maxx, miny, maxy, minz, maxz = self.find_minmax()
        maxz = self.maxz
        # label = solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.5, halign="center"))
        # i=minx
        # print("x-len: " + str(maxx-minx))
        # print(i)
        # inc = (maxx-minx)/num
        # while minx <= i <= maxx:
        #     label = solid.union()(solid.translate([i, 0, maxz - 0.2])(solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.25, halign="center"))), label)
        #     i += inc
        #
        # l = label
        #
        # i =miny
        # while miny<= i <= maxy:
        #     print("y inc")
        #     l = solid.union()(solid.translate([0, i, 0])(label), l)
        #     i += 0.5
        for i in str(self.fileName):
            cur = pos[0]
            label = solid.translate([pos[0][0], pos[0][1], self.maxz-0.2])(solid.linear_extrude(height=(self.thickness)/3)(solid.text(str(i), size=0.5, halign="center", valign="center")))
            self.model = solid.difference()(self.model, label)
            pos.append(pos.pop(0))
            while abs(cur[0]-pos[0][0])<0.5 and abs(cur[1]-pos[0][1])<0.5:
                pos.append(pos.pop(0))



    def Center(self):

        volume, cog, inertia = self.mesh.get_mass_properties()
        print("Volume                                  = {0}".format(volume))
        print("Position of the center of gravity (COG) = {0}".format(cog))
        m_centered = solid.translate([-cog[0], -cog[1], 0])(
            self.model
        )
        return m_centered

    def find_minmax(self):
        minx = maxx = miny = maxy = minz = maxz = None
        for p in self.mesh.points:
            # p contains (x, y, z)
            if minx is None:
                minx = p[Dimension.X]
                maxx = p[Dimension.X]
                miny = p[Dimension.Y]
                maxy = p[Dimension.Y]
                minz = p[Dimension.Z]
                maxz = p[Dimension.Z]
            else:
                maxx = max(p[Dimension.X], maxx)
                minx = min(p[Dimension.X], minx)
                maxy = max(p[Dimension.Y], maxy)
                miny = min(p[Dimension.Y], miny)
                maxz = max(p[Dimension.Z], maxz)
                minz = min(p[Dimension.Z], minz)
        lenx = maxx - minx
        leny = maxy - miny
        lenz = maxz - minz
        return minx, maxx, miny, maxy, minz, maxz

    # def generate_Mesh(self):
    #     self.mesh = mesh.Mesh.from_file(self.location + "/" + str(int(self.fileName)//8)+ "b.stl")

    def get_top(self):
        top = solid.projection(cut=True)(solid.translate([0,0,-1*self.thickness*(self.layer+1)])(self.model))
        useable_area = solid.offset(r=-0.45)(top)
        self.useable_area = useable_area
        solid.scad_render_to_file(self.useable_area, self.location+'/' + 'toptemp.scad')
        outputSTL(From=self.location+'/' + 'toptemp.scad', To=self.location+"/top"+ self.dxf)

        # os.system("toSTL.sh out/toptemp.scad renders/" + self.fileName + ".dxf")
        dxf = DXF(self.location+"/top"+ self.dxf)
        min_p=dxf.points[0][0]
        points_ordered = dxf.points
        i=0
        while i <= len(dxf.points)+1:
            while math.sqrt((dxf.points[0][0]-dxf.points[1][0])**2+(dxf.points[0][1]-dxf.points[1][1])**2) > 0.1:
                dxf.points.insert(1, [(dxf.points[0][0]+dxf.points[1][0])/2, (dxf.points[0][1]+dxf.points[1][1])/2])
                i = i-1
            dxf.points.append(dxf.points.pop(0))
            i+=1
        for i in range(len(dxf.points)):
            dxf.points.append(dxf.points.pop(0))
            if dxf.points[0][0] < min_p:
                min_p = dxf.points[0][0]
                points_ordered = dxf.points.copy()
        dxf.points = points_ordered.copy()

        print(dxf.points)
        self.add_label(dxf.points)

class DXF:
    def __init__(self, file):
        self.file = file
        self.Lines = []
        self.points = []
        doc = ezdxf.readfile(self.file)
        msp = doc.modelspace()
        for e in msp:
            if e.dxftype() == "LINE":
                self.Lines.append(e)
                self.points.append([e.dxf.start[0], e.dxf.start[1]])
        # self.points.append([self.Lines[-1].dxf.end[0], self.Lines[-1].dxf.end[1]])
        self.area = None
        self.center = None
        self.polygon = sg.Polygon(self.points)

    def get_area(self):
        self.area = self.polygon.area
        return self.area

    def get_center(self):
        x_sum = 0
        y_sum =0
        for i in self.points:
            x_sum += i[0]
            y_sum += i[1]
        x_c = x_sum/len(self.points)
        y_c = y_sum/len(self.points)
        return (x_c, y_c)

    def split(self, maxdim):
        splits = []
        length = 0
        pieces = [[]]
        prev = self.points[0]
        for j in self.points:
            length = length + math.sqrt((prev[0]-j[0])**2+(prev[1]-j[1])**2)
            if length >= maxdim:
                pieces[-1].append(j)
                pieces.append([])
                length = 0
            pieces[-1].append(j)
            prev = j
        for j in pieces:
            j.insert(0, [0,0])
            piece = solid.linear_extrude(height=10)(solid.polygon(j))
            splits.append(piece)
        return splits
    def refine_points(self):
        i=0
        while i <= len(self.points)+1:
            while math.sqrt((self.points[0][0]-self.points[1][0])**2+(self.points[0][1]-self.points[1][1])**2) > 0.1:
                self.points.insert(1, [(self.points[0][0]+self.points[1][0])/2, (self.points[0][1]+self.points[1][1])/2])
                i = i-1
            self.points.append(self.points.pop(0))
            i+=1


if __name__== "__main__":
    test = DXF("C:/Users/Daniel/Documents/repos/Shell_Maker/output/0top_slice.dxf")
    test.refine_points()
    k = test.split(48)
    for i in range(len(k)):
        solid.scad_render_to_file(k[i], str(i) + ".scad")


 
 
************************************************/
