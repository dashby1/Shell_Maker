// Generated by SolidPython 1.1.3 on 2024-05-26 01:59:11


intersection() {
	difference() {
		intersection() {
			translate(v = [0, 0, 0]) {
				import(file = "CE3E3V2_Bottom_shell.stl", origin = [0, 0]);
			}
			translate(v = [-90.04029846191406, -32.690147399902344, 6]) {
				cube(size = [180.0806, 65.380295, 2]);
			}
		}
		linear_extrude(height = 999) {
			offset(r = -1) {
				import(file = "C:/Users/Daniel/Documents/repos/Shell_Maker/output/3top_slice.dxf", origin = [0, 0]);
			}
		}
	}
	translate(v = [0, 0, 6]) {
		linear_extrude(height = 10) {
			polygon(points = [[0, 0], [49.1794000000, 19.5895000000], [49.1348625000, 19.6177562500], [49.0903250000, 19.6460125000], [49.0457875000, 19.6742687500], [49.0012500000, 19.7025250000], [48.9567125000, 19.7307812500], [48.9121750000, 19.7590375000], [48.8676375000, 19.7872937500], [48.8231000000, 19.8155500000], [48.7785625000, 19.8438062500], [48.7340250000, 19.8720625000], [48.6894875000, 19.9003187500], [48.6449500000, 19.9285750000], [48.6004125000, 19.9568312500], [48.5558750000, 19.9850875000], [48.5113375000, 20.0133437500], [48.4668000000, 20.0416000000], [48.4136625000, 20.0761000000], [48.3605250000, 20.1106000000], [48.3073875000, 20.1451000000], [48.2542500000, 20.1796000000], [48.2011125000, 20.2141000000], [48.1479750000, 20.2486000000], [48.0948375000, 20.2831000000], [48.0417000000, 20.3176000000], [47.9885625000, 20.3521000000], [47.9354250000, 20.3866000000], [47.8822875000, 20.4211000000], [47.8291500000, 20.4556000000], [47.7760125000, 20.4901000000], [47.7228750000, 20.5246000000], [47.6697375000, 20.5591000000], [47.6166000000, 20.5936000000], [47.5634625000, 20.6281000000], [47.5103250000, 20.6626000000], [47.4571875000, 20.6971000000], [47.4040500000, 20.7316000000], [47.3509125000, 20.7661000000], [47.2977750000, 20.8006000000], [47.2446375000, 20.8351000000], [47.1915000000, 20.8696000000], [47.1383625000, 20.9041000000], [47.0852250000, 20.9386000000], [47.0320875000, 20.9731000000], [46.9789500000, 21.0076000000], [46.9258125000, 21.0421000000], [46.8726750000, 21.0766000000], [46.8195375000, 21.1111000000], [46.7664000000, 21.1456000000], [46.7118625000, 21.1780500000], [46.6573250000, 21.2105000000], [46.6027875000, 21.2429500000], [46.5482500000, 21.2754000000], [46.4937125000, 21.3078500000], [46.4391750000, 21.3403000000], [46.3846375000, 21.3727500000], [46.3301000000, 21.4052000000], [46.2748375000, 21.4370000000], [46.2195750000, 21.4688000000], [46.1643125000, 21.5006000000], [46.1090500000, 21.5324000000], [46.0537875000, 21.5642000000], [45.9985250000, 21.5960000000], [45.9432625000, 21.6278000000], [45.8880000000, 21.6596000000], [45.8434000000, 21.6848750000], [45.7988000000, 21.7101500000], [45.7542000000, 21.7354250000], [45.7096000000, 21.7607000000], [45.6483375000, 21.7938218750], [45.5870750000, 21.8269437500], [45.5258125000, 21.8600656250], [45.4645500000, 21.8931875000], [45.4032875000, 21.9263093750], [45.3420250000, 21.9594312500], [45.2807625000, 21.9925531250], [45.2195000000, 22.0256750000], [45.1582375000, 22.0587968750], [45.0969750000, 22.0919187500], [45.0357125000, 22.1250406250], [44.9744500000, 22.1581625000], [44.9131875000, 22.1912843750], [44.8519250000, 22.2244062500], [44.7906625000, 22.2575281250], [44.7294000000, 22.2906500000], [44.6681375000, 22.3237718750], [44.6068750000, 22.3568937500], [44.5456125000, 22.3900156250], [44.4843500000, 22.4231375000], [44.4230875000, 22.4562593750], [44.3618250000, 22.4893812500], [44.3005625000, 22.5225031250], [44.2393000000, 22.5556250000], [44.1780375000, 22.5887468750], [44.1167750000, 22.6218687500], [44.0555125000, 22.6549906250], [43.9942500000, 22.6881125000], [43.9329875000, 22.7212343750], [43.8717250000, 22.7543562500], [43.8104625000, 22.7874781250], [43.7492000000, 22.8206000000], [43.6716375000, 22.8613375000], [43.5940750000, 22.9020750000], [43.5165125000, 22.9428125000], [43.4389500000, 22.9835500000], [43.3613875000, 23.0242875000], [43.2838250000, 23.0650250000], [43.2062625000, 23.1057625000], [43.1287000000, 23.1465000000], [43.1017000000, 23.1600000000], [43.0460312500, 23.1852875000], [42.9903625000, 23.2105750000], [42.9346937500, 23.2358625000], [42.8790250000, 23.2611500000], [42.8233562500, 23.2864375000], [42.7676875000, 23.3117250000], [42.7120187500, 23.3370125000], [42.6563500000, 23.3623000000], [42.6006812500, 23.3875875000], [42.5450125000, 23.4128750000], [42.4893437500, 23.4381625000], [42.4336750000, 23.4634500000], [42.3780062500, 23.4887375000], [42.3223375000, 23.5140250000], [42.2666687500, 23.5393125000], [42.2110000000, 23.5646000000], [42.1252468750, 23.6033375000], [42.0394937500, 23.6420750000], [41.9537406250, 23.6808125000], [41.8679875000, 23.7195500000], [41.7822343750, 23.7582875000], [41.6964812500, 23.7970250000], [41.6107281250, 23.8357625000], [41.5249750000, 23.8745000000], [41.4392218750, 23.9132375000], [41.3534687500, 23.9519750000], [41.2677156250, 23.9907125000], [41.1819625000, 24.0294500000], [41.0962093750, 24.0681875000], [41.0104562500, 24.1069250000], [40.9247031250, 24.1456625000], [40.8389500000, 24.1844000000], [40.7531968750, 24.2231375000], [40.6674437500, 24.2618750000], [40.5816906250, 24.3006125000], [40.4959375000, 24.3393500000], [40.4101843750, 24.3780875000], [40.3244312500, 24.4168250000], [40.2386781250, 24.4555625000], [40.1529250000, 24.4943000000], [40.0671718750, 24.5330375000], [39.9814187500, 24.5717750000], [39.8956656250, 24.6105125000], [39.8099125000, 24.6492500000], [39.7241593750, 24.6879875000], [39.6384062500, 24.7267250000], [39.5526531250, 24.7654625000], [39.4669000000, 24.8042000000], [39.4281000000, 24.8199000000], [39.3525500000, 24.8502500000], [39.2770000000, 24.8806000000], [39.2014500000, 24.9109500000], [39.1259000000, 24.9413000000], [39.0732000000, 24.9624000000], [39.0155812500, 24.9830375000], [38.9579625000, 25.0036750000], [38.9003437500, 25.0243125000], [38.8427250000, 25.0449500000], [38.7851062500, 25.0655875000], [38.7274875000, 25.0862250000], [38.6698687500, 25.1068625000], [38.6122500000, 25.1275000000], [38.5546312500, 25.1481375000], [38.4970125000, 25.1687750000], [38.4393937500, 25.1894125000], [38.3817750000, 25.2100500000], [38.3241562500, 25.2306875000], [38.2665375000, 25.2513250000], [38.2089187500, 25.2719625000], [38.1513000000, 25.2926000000], [38.0890125000, 25.3146375000], [38.0267250000, 25.3366750000], [37.9644375000, 25.3587125000], [37.9021500000, 25.3807500000], [37.8398625000, 25.4027875000], [37.7775750000, 25.4248250000], [37.7152875000, 25.4468625000], [37.6530000000, 25.4689000000], [37.5709812500, 25.4973312500], [37.4889625000, 25.5257625000], [37.4069437500, 25.5541937500], [37.3249250000, 25.5826250000], [37.2429062500, 25.6110562500], [37.1608875000, 25.6394875000], [37.0788687500, 25.6679187500], [36.9968500000, 25.6963500000], [36.9148312500, 25.7247812500], [36.8328125000, 25.7532125000], [36.7507937500, 25.7816437500], [36.6687750000, 25.8100750000], [36.5867562500, 25.8385062500], [36.5047375000, 25.8669375000], [36.4227187500, 25.8953687500], [36.3407000000, 25.9238000000], [36.2586812500, 25.9522312500], [36.1766625000, 25.9806625000], [36.0946437500, 26.0090937500], [36.0126250000, 26.0375250000], [35.9306062500, 26.0659562500], [35.8485875000, 26.0943875000], [35.7665687500, 26.1228187500], [35.6845500000, 26.1512500000], [35.6025312500, 26.1796812500], [35.5205125000, 26.2081125000], [35.4384937500, 26.2365437500], [35.3564750000, 26.2649750000], [35.2744562500, 26.2934062500], [35.1924375000, 26.3218375000], [35.1104187500, 26.3502687500], [35.0284000000, 26.3787000000], [34.9435000000, 26.4046000000], [34.8945250000, 26.4179562500], [34.8455500000, 26.4313125000], [34.7965750000, 26.4446687500], [34.7476000000, 26.4580250000], [34.6986250000, 26.4713812500], [34.6496500000, 26.4847375000], [34.6006750000, 26.4980937500], [34.5517000000, 26.5114500000], [34.5027250000, 26.5248062500], [34.4537500000, 26.5381625000], [34.4047750000, 26.5515187500], [34.3558000000, 26.5648750000], [34.3068250000, 26.5782312500], [34.2578500000, 26.5915875000], [34.2088750000, 26.6049437500], [34.1599000000, 26.6183000000], [34.0933156250, 26.6359812500], [34.0267312500, 26.6536625000], [33.9601468750, 26.6713437500], [33.8935625000, 26.6890250000], [33.8269781250, 26.7067062500], [33.7603937500, 26.7243875000], [33.6938093750, 26.7420687500], [33.6272250000, 26.7597500000], [33.5606406250, 26.7774312500], [33.4940562500, 26.7951125000], [33.4274718750, 26.8127937500], [33.3608875000, 26.8304750000], [33.2943031250, 26.8481562500], [33.2277187500, 26.8658375000], [33.1611343750, 26.8835187500], [33.0945500000, 26.9012000000], [33.0279656250, 26.9188812500], [32.9613812500, 26.9365625000], [32.8947968750, 26.9542437500], [32.8282125000, 26.9719250000], [32.7616281250, 26.9896062500], [32.6950437500, 27.0072875000], [32.6284593750, 27.0249687500], [32.5618750000, 27.0426500000], [32.4952906250, 27.0603312500], [32.4287062500, 27.0780125000], [32.3621218750, 27.0956937500], [32.2955375000, 27.1133750000], [32.2289531250, 27.1310562500], [32.1623687500, 27.1487375000], [32.0957843750, 27.1664187500], [32.0292000000, 27.1841000000], [31.9704250000, 27.1973500000], [31.9116500000, 27.2106000000], [31.8528750000, 27.2238500000], [31.7941000000, 27.2371000000], [31.7368625000, 27.2494437500], [31.6796250000, 27.2617875000], [31.6223875000, 27.2741312500], [31.5651500000, 27.2864750000], [31.5079125000, 27.2988187500], [31.4506750000, 27.3111625000], [31.3934375000, 27.3235062500], [31.3362000000, 27.3358500000], [31.2789625000, 27.3481937500], [31.2217250000, 27.3605375000], [31.1644875000, 27.3728812500], [31.1072500000, 27.3852250000], [31.0500125000, 27.3975687500], [30.9927750000, 27.4099125000], [30.9355375000, 27.4222562500], [30.8783000000, 27.4346000000], [30.8208500000, 27.4465500000], [30.7634000000, 27.4585000000], [30.6839500000, 27.4732000000], [30.6045000000, 27.4879000000], [30.5250500000, 27.5026000000], [30.4456000000, 27.5173000000], [30.3661500000, 27.5320000000], [30.2867000000, 27.5467000000], [30.2072500000, 27.5614000000], [30.1278000000, 27.5761000000], [30.0603000000, 27.5879250000], [29.9928000000, 27.5997500000], [29.9253000000, 27.6115750000], [29.8578000000, 27.6234000000], [29.7800593750, 27.6352562500], [29.7023187500, 27.6471125000], [29.6245781250, 27.6589687500], [29.5468375000, 27.6708250000], [29.4690968750, 27.6826812500], [29.3913562500, 27.6945375000], [29.3136156250, 27.7063937500], [29.2358750000, 27.7182500000], [29.1581343750, 27.7301062500], [29.0803937500, 27.7419625000], [29.0026531250, 27.7538187500], [28.9249125000, 27.7656750000], [28.8471718750, 27.7775312500], [28.7694312500, 27.7893875000], [28.6916906250, 27.8012437500], [28.6139500000, 27.8131000000], [28.5362093750, 27.8249562500], [28.4584687500, 27.8368125000], [28.3807281250, 27.8486687500], [28.3029875000, 27.8605250000], [28.2252468750, 27.8723812500], [28.1475062500, 27.8842375000], [28.0697656250, 27.8960937500], [27.9920250000, 27.9079500000], [27.9142843750, 27.9198062500], [27.8365437500, 27.9316625000], [27.7588031250, 27.9435187500], [27.6810625000, 27.9553750000], [27.6033218750, 27.9672312500], [27.5255812500, 27.9790875000], [27.4478406250, 27.9909437500], [27.3701000000, 28.0028000000], [27.2993750000, 28.0120500000], [27.2286500000, 28.0213000000], [27.1579250000, 28.0305500000], [27.0872000000, 28.0398000000], [27.0342875000, 28.0458250000], [26.9813750000, 28.0518500000], [26.9284625000, 28.0578750000], [26.8755500000, 28.0639000000], [26.8226375000, 28.0699250000], [26.7697250000, 28.0759500000], [26.7168125000, 28.0819750000], [26.6639000000, 28.0880000000], [26.6109875000, 28.0940250000], [26.5580750000, 28.1000500000], [26.5051625000, 28.1060750000], [26.4522500000, 28.1121000000], [26.3993375000, 28.1181250000], [26.3464250000, 28.1241500000], [26.2935125000, 28.1301750000], [26.2406000000, 28.1362000000], [26.1841625000, 28.1417000000], [26.1277250000, 28.1472000000], [26.0712875000, 28.1527000000], [26.0148500000, 28.1582000000], [25.9584125000, 28.1637000000], [25.9019750000, 28.1692000000], [25.8455375000, 28.1747000000], [25.7891000000, 28.1802000000], [25.7326625000, 28.1857000000], [25.6762250000, 28.1912000000], [25.6197875000, 28.1967000000], [25.5633500000, 28.2022000000], [25.5069125000, 28.2077000000], [25.4504750000, 28.2132000000], [25.3940375000, 28.2187000000], [25.3376000000, 28.2242000000], [25.2469500000, 28.2315750000], [25.1563000000, 28.2389500000], [25.0656500000, 28.2463250000], [24.9750000000, 28.2537000000], [24.9190250000, 28.2576750000], [24.8630500000, 28.2616500000], [24.8070750000, 28.2656250000], [24.7511000000, 28.2696000000], [24.7003593750, 28.2722812500], [24.6496187500, 28.2749625000], [24.5988781250, 28.2776437500], [24.5481375000, 28.2803250000], [24.4973968750, 28.2830062500], [24.4466562500, 28.2856875000], [24.3959156250, 28.2883687500], [24.3451750000, 28.2910500000], [24.2944343750, 28.2937312500], [24.2436937500, 28.2964125000], [24.1929531250, 28.2990937500], [24.1422125000, 28.3017750000], [24.0914718750, 28.3044562500], [24.0407312500, 28.3071375000], [23.9899906250, 28.3098187500], [23.9392500000, 28.3125000000], [23.8885093750, 28.3151812500], [23.8377687500, 28.3178625000], [23.7870281250, 28.3205437500], [23.7362875000, 28.3232250000], [23.6855468750, 28.3259062500], [23.6348062500, 28.3285875000], [23.5840656250, 28.3312687500], [23.5333250000, 28.3339500000], [23.4825843750, 28.3366312500], [23.4318437500, 28.3393125000], [23.3811031250, 28.3419937500], [23.3303625000, 28.3446750000], [23.2796218750, 28.3473562500], [23.2288812500, 28.3500375000], [23.1781406250, 28.3527187500], [23.1274000000, 28.3554000000], [23.0583000000, 28.3586750000], [22.9892000000, 28.3619500000], [22.9201000000, 28.3652250000], [22.8510000000, 28.3685000000], [22.7782000000, 28.3700437500], [22.7054000000, 28.3715875000], [22.6326000000, 28.3731312500], [22.5598000000, 28.3746750000], [22.4870000000, 28.3762187500], [22.4142000000, 28.3777625000], [22.3414000000, 28.3793062500], [22.2686000000, 28.3808500000], [22.1958000000, 28.3823937500], [22.1230000000, 28.3839375000], [22.0502000000, 28.3854812500], [21.9774000000, 28.3870250000], [21.9046000000, 28.3885687500], [21.8318000000, 28.3901125000], [21.7590000000, 28.3916562500], [21.6862000000, 28.3932000000], [21.6327125000, 28.3934375000], [21.5792250000, 28.3936750000], [21.5257375000, 28.3939125000], [21.4722500000, 28.3941500000], [21.4187625000, 28.3943875000], [21.3652750000, 28.3946250000], [21.3117875000, 28.3948625000], [21.2583000000, 28.3951000000], [21.1728468750, 28.3946250000], [21.0873937500, 28.3941500000], [21.0019406250, 28.3936750000], [20.9164875000, 28.3932000000], [20.8310343750, 28.3927250000], [20.7455812500, 28.3922500000], [20.6601281250, 28.3917750000], [20.5746750000, 28.3913000000], [20.4892218750, 28.3908250000], [20.4037687500, 28.3903500000], [20.3183156250, 28.3898750000], [20.2328625000, 28.3894000000], [20.1474093750, 28.3889250000], [20.0619562500, 28.3884500000], [19.9765031250, 28.3879750000], [19.8910500000, 28.3875000000], [19.8055968750, 28.3870250000], [19.7201437500, 28.3865500000], [19.6346906250, 28.3860750000], [19.5492375000, 28.3856000000], [19.4637843750, 28.3851250000], [19.3783312500, 28.3846500000], [19.2928781250, 28.3841750000], [19.2074250000, 28.3837000000], [19.1219718750, 28.3832250000], [19.0365187500, 28.3827500000], [18.9510656250, 28.3822750000], [18.8656125000, 28.3818000000], [18.7801593750, 28.3813250000], [18.6947062500, 28.3808500000], [18.6092531250, 28.3803750000], [18.5238000000, 28.3799000000], [18.4338500000, 28.3772500000], [18.3439000000, 28.3746000000], [18.2445500000, 28.3713750000], [18.1452000000, 28.3681500000], [18.0458500000, 28.3649250000], [17.9465000000, 28.3617000000], [17.8653500000, 28.3583000000], [17.7842000000, 28.3549000000], [17.7030500000, 28.3515000000], [17.6219000000, 28.3481000000], [17.5348250000, 28.3420500000], [17.4477500000, 28.3360000000], [17.3606750000, 28.3299500000], [17.2736000000, 28.3239000000], [17.1865250000, 28.3178500000], [17.0994500000, 28.3118000000], [17.0123750000, 28.3057500000], [16.9253000000, 28.2997000000], [16.8382250000, 28.2936500000], [16.7511500000, 28.2876000000], [16.6640750000, 28.2815500000], [16.5770000000, 28.2755000000], [16.4899250000, 28.2694500000], [16.4028500000, 28.2634000000], [16.3157750000, 28.2573500000], [16.2287000000, 28.2513000000], [16.1491531250, 28.2456218750], [16.0696062500, 28.2399437500], [15.9900593750, 28.2342656250], [15.9105125000, 28.2285875000], [15.8309656250, 28.2229093750], [15.7514187500, 28.2172312500], [15.6718718750, 28.2115531250], [15.5923250000, 28.2058750000], [15.5127781250, 28.2001968750], [15.4332312500, 28.1945187500], [15.3536843750, 28.1888406250], [15.2741375000, 28.1831625000], [15.1945906250, 28.1774843750], [15.1150437500, 28.1718062500], [15.0354968750, 28.1661281250], [14.9559500000, 28.1604500000], [14.8764031250, 28.1547718750], [14.7968562500, 28.1490937500], [14.7173093750, 28.1434156250], [14.6377625000, 28.1377375000], [14.5582156250, 28.1320593750], [14.4786687500, 28.1263812500], [14.3991218750, 28.1207031250], [14.3195750000, 28.1150250000], [14.2400281250, 28.1093468750], [14.1604812500, 28.1036687500], [14.0809343750, 28.0979906250], [14.0013875000, 28.0923125000], [13.9218406250, 28.0866343750], [13.8422937500, 28.0809562500], [13.7627468750, 28.0752781250], [13.6832000000, 28.0696000000], [13.6404000000, 28.0656000000], [13.5684812500, 28.0571875000], [13.4965625000, 28.0487750000], [13.4246437500, 28.0403625000], [13.3527250000, 28.0319500000], [13.2808062500, 28.0235375000], [13.2088875000, 28.0151250000], [13.1369687500, 28.0067125000], [13.0650500000, 27.9983000000], [12.9931312500, 27.9898875000], [12.9212125000, 27.9814750000], [12.8492937500, 27.9730625000], [12.7773750000, 27.9646500000], [12.7054562500, 27.9562375000], [12.6335375000, 27.9478250000], [12.5616187500, 27.9394125000], [12.4897000000, 27.9310000000], [12.4344370312, 27.9244578125], [12.3791740625, 27.9179156250], [12.3239110937, 27.9113734375], [12.2686481250, 27.9048312500], [12.2133851562, 27.8982890625], [12.1581221875, 27.8917468750], [12.1028592187, 27.8852046875], [12.0475962500, 27.8786625000], [11.9923332813, 27.8721203125], [11.9370703125, 27.8655781250], [11.8818073438, 27.8590359375], [11.8265443750, 27.8524937500], [11.7712814063, 27.8459515625], [11.7160184375, 27.8394093750], [11.6607554688, 27.8328671875], [11.6054925000, 27.8263250000], [11.5502295313, 27.8197828125], [11.4949665625, 27.8132406250], [11.4397035938, 27.8066984375], [11.3844406250, 27.8001562500], [11.3291776562, 27.7936140625], [11.2739146875, 27.7870718750], [11.2186517187, 27.7805296875], [11.1633887500, 27.7739875000], [11.1081257812, 27.7674453125], [11.0528628125, 27.7609031250], [10.9975998437, 27.7543609375], [10.9423368750, 27.7478187500], [10.8870739062, 27.7412765625], [10.8318109375, 27.7347343750], [10.7765479687, 27.7281921875], [10.7212850000, 27.7216500000], [10.6660220313, 27.7151078125], [10.6107590625, 27.7085656250], [10.5554960938, 27.7020234375], [10.5002331250, 27.6954812500], [10.4449701563, 27.6889390625], [10.3897071875, 27.6823968750], [10.3344442188, 27.6758546875], [10.2791812500, 27.6693125000], [10.2239182813, 27.6627703125], [10.1686553125, 27.6562281250], [10.1133923438, 27.6496859375], [10.0581293750, 27.6431437500], [10.0028664062, 27.6366015625], [9.9476034375, 27.6300593750], [9.8923404687, 27.6235171875], [9.8370775000, 27.6169750000], [9.7818145312, 27.6104328125], [9.7265515625, 27.6038906250], [9.6712885937, 27.5973484375], [9.6160256250, 27.5908062500], [9.5607626562, 27.5842640625], [9.5054996875, 27.5777218750], [9.4502367187, 27.5711796875], [9.3949737500, 27.5646375000], [9.3397107813, 27.5580953125], [9.2844478125, 27.5515531250], [9.2291848438, 27.5450109375], [9.1739218750, 27.5384687500], [9.1186589063, 27.5319265625], [9.0633959375, 27.5253843750], [9.0081329688, 27.5188421875], [8.9528700000, 27.5123000000], [8.8921098438, 27.5035265625], [8.8313496875, 27.4947531250], [8.7705895313, 27.4859796875], [8.7098293750, 27.4772062500], [8.6490692188, 27.4684328125], [8.5883090625, 27.4596593750], [8.5275489063, 27.4508859375], [8.4667887500, 27.4421125000], [8.4060285938, 27.4333390625], [8.3452684375, 27.4245656250], [8.2845082812, 27.4157921875], [8.2237481250, 27.4070187500], [8.1629879688, 27.3982453125], [8.1022278125, 27.3894718750], [8.0414676563, 27.3806984375], [7.9807075000, 27.3719250000], [7.9199473437, 27.3631515625], [7.8591871875, 27.3543781250], [7.7984270313, 27.3456046875], [7.7376668750, 27.3368312500], [7.6769067188, 27.3280578125], [7.6161465625, 27.3192843750], [7.5553864062, 27.3105109375], [7.4946262500, 27.3017375000], [7.4338660937, 27.2929640625], [7.3731059375, 27.2841906250], [7.3123457813, 27.2754171875], [7.2515856250, 27.2666437500], [7.1908254687, 27.2578703125], [7.1300653125, 27.2490968750], [7.0693051562, 27.2403234375], [7.0085450000, 27.2315500000], [6.9477848438, 27.2227765625], [6.8870246875, 27.2140031250], [6.8262645313, 27.2052296875], [6.7655043750, 27.1964562500], [6.7047442187, 27.1876828125], [6.6439840625, 27.1789093750], [6.5832239062, 27.1701359375], [6.5224637500, 27.1613625000], [6.4617035938, 27.1525890625], [6.4009434375, 27.1438156250], [6.3401832813, 27.1350421875], [6.2794231250, 27.1262687500], [6.2186629687, 27.1174953125], [6.1579028125, 27.1087218750], [6.0971426562, 27.0999484375], [6.0363825000, 27.0911750000], [5.9756223438, 27.0824015625], [5.9148621875, 27.0736281250], [5.8541020313, 27.0648546875], [5.7933418750, 27.0560812500], [5.7325817187, 27.0473078125], [5.6718215625, 27.0385343750], [5.6110614063, 27.0297609375], [5.5503012500, 27.0209875000], [5.4895410938, 27.0122140625], [5.4287809375, 27.0034406250], [5.3680207812, 26.9946671875], [5.3072606250, 26.9858937500], [5.2465004687, 26.9771203125], [5.1857403125, 26.9683468750], [5.1249801563, 26.9595734375], [5.0642200000, 26.9508000000], [4.9783465625, 26.9375843750], [4.8924731250, 26.9243687500], [4.8065996875, 26.9111531250], [4.7207262500, 26.8979375000], [4.6348528125, 26.8847218750], [4.5489793750, 26.8715062500], [4.4631059375, 26.8582906250], [4.3772325000, 26.8450750000], [4.2913590625, 26.8318593750], [4.2054856250, 26.8186437500], [4.1196121875, 26.8054281250], [4.0337387500, 26.7922125000], [3.9478653125, 26.7789968750], [3.8619918750, 26.7657812500], [3.7761184375, 26.7525656250], [3.6902450000, 26.7393500000], [3.6043715625, 26.7261343750], [3.5184981250, 26.7129187500], [3.4326246875, 26.6997031250], [3.3467512500, 26.6864875000], [3.2608778125, 26.6732718750], [3.1750043750, 26.6600562500], [3.0891309375, 26.6468406250], [3.0032575000, 26.6336250000]]);
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
import math
import time

from stl import mesh, Dimension

from tkinter import Tk     # from tkinter import Tk for Python 3.x
from tkinter.filedialog import askopenfilename
from mpl_toolkits.mplot3d import art3d
from matplotlib import pyplot as plt
import solid
import os
import ezdxf
import shapely.geometry as sg
import subprocess
from GUI import getSCADPath



def outputSTL(From, To, PATH=getSCADPath()):
    subprocess.Popen(PATH + " -o " + To + " " + From)
    while not os.path.exists(To):
        time.sleep(1)

class Model:
    def __init__(self, model, fileName, location, layer, thickness):
        self.location = location
        self.code = None
        self.fileName = fileName
        self.stl = fileName + ".stl"
        self.layer = layer
        self.thickness = thickness
        self.maxz = (layer+1)*thickness
        self.dxf = fileName + ".dxf"
        self.scad = fileName + ".scad"
        self.model = model
        self.center = None
        self.width = 10
        self.mesh = None
        self.useable_area = None


    def get_code(self):
        max_dim = 0.05
        max_array = 6

        num = int(self.fileName)
        nums = [int(a) for a in str(num)]
        nums.reverse()
        indices = nums
        length = len(nums)

        print(indices)
        t = 0
        i = 0
        cubes = []
        x = 0
        y = 0
        width = 0.01
        while x <= max_dim:
            while y <= max_dim:
                print(indices)
                if nums == []:
                    break
                if indices[0] != 0:
                    cubes.append(solid.translate([x, y, 0])(solid.cube(size=t / 1000 + 0.001)))
                    y += max_dim / (max_array - 1)
                    nums[0] = nums[0] - 1
                else:
                    indices.pop(0)
                    t += 1
                i += 1
            x += max_dim / (max_array - 1)
            y = 0

        outside = solid.translate([-width / 2, -width / 2])(solid.cube(max_dim + (length - 1) / 1000 + 0.001 + width))
        self.code = solid.difference()(outside, cubes)
        self.code = solid.projection(cut=True)(self.code)
        solid.scad_render_to_file(self.code, self.location + "/code.scad")
        outputSTL(From=self.location+"/code.scad", To=self.location+"code.dxf", PATH=getSCADPath())
        # os.system("toSTL.sh renders/code.scad renders/code.dxf")
        return self.location+"/code.dxf"

    def download(self, type):
        if type =="stl":
            print("generating:" + self.location+"/"+ self.fileName+".stl")
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".stl")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".stl")
        elif type == "dxf":
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".dxf")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".dxf")

    def render(self):
        solid.scad_render_to_file(self.model, self.location+"/"+ self.fileName+'.scad')
        while not os.path.exists(self.location+"/"+self.fileName+".scad"):
            time.sleep(1)
        # outputSTL(From= self.location+"/"+ self.fileName+'.scad', To=self.location+"/"+ self.fileName+'.stl')

    def get_points(self):
        doc = ezdxf.readfile(filename=self.location+"/"+ self.fileName+".dxf")
        msp = doc.modelspace()
        i=0
        lists = []
        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return [start, end]

        for e in msp.query("LINE"):
            line = helper(e)
            if not lists:
                lists.append([line])
            else:
                if lists[i][len(lists)-1][1] != line[0]:
                    lists.append([line])
                    i+=1
                else:
                    lists[i].append(line)

    def get_points2(self, FILE):
        doc = ezdxf.readfile(filename=FILE)
        msp = doc.modelspace()
        i = 0
        lists = []

        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return (start, end)

        for e in msp.query("LINE"):
            line = helper(e)
            if lists==[]:
                lists.append([line])
            else:
                if lists[i][len(lists[i]) - 1][1] != line[0]:
                    lists.append([line])
                    i += 1
                else:
                    lists[i].append(line)
        return lists

    def add_code(self):
        dxf = solid.projection(cut=False)(self.model)
        offset = solid.offset(r=-0.1)(dxf)
        solid.scad_render_to_file(offset, self.location+'/offset.scad')
        os.system("toSTL.sh renders/offset.scad renders/offset.dxf")
        lines = self.get_points2("renders/offset.dxf")
        x = lines[0][0][0][0]
        y = lines[0][0][0][1]
        print(x)
        print(y)
        code = solid.translate([x,y,0])(self.code)
        code = solid.linear_extrude(height=999)(code)
        save = self.model
        self.model = solid.projection()(solid.difference()(self.model, code))
        self.render()
        self.download("dxf")
        self.model = save

    def add_label(self, pos):
        # num = 12
        # minx, maxx, miny, maxy, minz, maxz = self.find_minmax()
        maxz = self.maxz
        # label = solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.5, halign="center"))
        # i=minx
        # print("x-len: " + str(maxx-minx))
        # print(i)
        # inc = (maxx-minx)/num
        # while minx <= i <= maxx:
        #     label = solid.union()(solid.translate([i, 0, maxz - 0.2])(solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.25, halign="center"))), label)
        #     i += inc
        #
        # l = label
        #
        # i =miny
        # while miny<= i <= maxy:
        #     print("y inc")
        #     l = solid.union()(solid.translate([0, i, 0])(label), l)
        #     i += 0.5
        for i in str(self.fileName):
            cur = pos[0]
            label = solid.translate([pos[0][0], pos[0][1], self.maxz-0.2])(solid.linear_extrude(height=(self.thickness)/3)(solid.text(str(i), size=0.5, halign="center", valign="center")))
            self.model = solid.difference()(self.model, label)
            pos.append(pos.pop(0))
            while abs(cur[0]-pos[0][0])<0.5 and abs(cur[1]-pos[0][1])<0.5:
                pos.append(pos.pop(0))



    def Center(self):

        volume, cog, inertia = self.mesh.get_mass_properties()
        print("Volume                                  = {0}".format(volume))
        print("Position of the center of gravity (COG) = {0}".format(cog))
        m_centered = solid.translate([-cog[0], -cog[1], 0])(
            self.model
        )
        return m_centered

    def find_minmax(self):
        minx = maxx = miny = maxy = minz = maxz = None
        for p in self.mesh.points:
            # p contains (x, y, z)
            if minx is None:
                minx = p[Dimension.X]
                maxx = p[Dimension.X]
                miny = p[Dimension.Y]
                maxy = p[Dimension.Y]
                minz = p[Dimension.Z]
                maxz = p[Dimension.Z]
            else:
                maxx = max(p[Dimension.X], maxx)
                minx = min(p[Dimension.X], minx)
                maxy = max(p[Dimension.Y], maxy)
                miny = min(p[Dimension.Y], miny)
                maxz = max(p[Dimension.Z], maxz)
                minz = min(p[Dimension.Z], minz)
        lenx = maxx - minx
        leny = maxy - miny
        lenz = maxz - minz
        return minx, maxx, miny, maxy, minz, maxz

    # def generate_Mesh(self):
    #     self.mesh = mesh.Mesh.from_file(self.location + "/" + str(int(self.fileName)//8)+ "b.stl")

    def get_top(self):
        top = solid.projection(cut=True)(solid.translate([0,0,-1*self.thickness*(self.layer+1)])(self.model))
        useable_area = solid.offset(r=-0.45)(top)
        self.useable_area = useable_area
        solid.scad_render_to_file(self.useable_area, self.location+'/' + 'toptemp.scad')
        outputSTL(From=self.location+'/' + 'toptemp.scad', To=self.location+"/top"+ self.dxf)

        # os.system("toSTL.sh out/toptemp.scad renders/" + self.fileName + ".dxf")
        dxf = DXF(self.location+"/top"+ self.dxf)
        min_p=dxf.points[0][0]
        points_ordered = dxf.points
        i=0
        while i <= len(dxf.points)+1:
            while math.sqrt((dxf.points[0][0]-dxf.points[1][0])**2+(dxf.points[0][1]-dxf.points[1][1])**2) > 0.1:
                dxf.points.insert(1, [(dxf.points[0][0]+dxf.points[1][0])/2, (dxf.points[0][1]+dxf.points[1][1])/2])
                i = i-1
            dxf.points.append(dxf.points.pop(0))
            i+=1
        for i in range(len(dxf.points)):
            dxf.points.append(dxf.points.pop(0))
            if dxf.points[0][0] < min_p:
                min_p = dxf.points[0][0]
                points_ordered = dxf.points.copy()
        dxf.points = points_ordered.copy()

        print(dxf.points)
        self.add_label(dxf.points)

class DXF:
    def __init__(self, file):
        self.file = file
        self.Lines = []
        self.points = []
        doc = ezdxf.readfile(self.file)
        msp = doc.modelspace()
        for e in msp:
            if e.dxftype() == "LINE":
                self.Lines.append(e)
                self.points.append([e.dxf.start[0], e.dxf.start[1]])
        # self.points.append([self.Lines[-1].dxf.end[0], self.Lines[-1].dxf.end[1]])
        self.area = None
        self.center = None
        self.polygon = sg.Polygon(self.points)

    def get_area(self):
        self.area = self.polygon.area
        return self.area

    def get_center(self):
        x_sum = 0
        y_sum =0
        for i in self.points:
            x_sum += i[0]
            y_sum += i[1]
        x_c = x_sum/len(self.points)
        y_c = y_sum/len(self.points)
        return (x_c, y_c)

    def split(self, maxdim):
        splits = []
        length = 0
        pieces = [[]]
        prev = self.points[-1]
        pieces[-1].append(prev)
        for j in self.points:
            length = length + math.sqrt((prev[0]-j[0])**2+(prev[1]-j[1])**2)
            if length >= maxdim:
                pieces[-1].append(j)
                pieces.append([])
                length = 0
            pieces[-1].append(j)
            prev = j
        for j in pieces:
            j.insert(0, [0,0])
            piece = solid.linear_extrude(height=10)(solid.polygon(j))
            splits.append(piece)
        return splits
    def refine_points(self):
        i=0
        while i <= len(self.points)+1:
            while math.sqrt((self.points[0][0]-self.points[1][0])**2+(self.points[0][1]-self.points[1][1])**2) > 0.1:
                self.points.insert(1, [(self.points[0][0]+self.points[1][0])/2, (self.points[0][1]+self.points[1][1])/2])
                i = i-1
            self.points.append(self.points.pop(0))
            i+=1


if __name__== "__main__":
    test = DXF("C:/Users/Daniel/Documents/repos/Shell_Maker/output/0top_slice.dxf")
    test.refine_points()
    k = test.split(48)
    for i in range(len(k)):
        solid.scad_render_to_file(k[i], str(i) + ".scad")


 
 
************************************************/
