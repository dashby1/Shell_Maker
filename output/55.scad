// Generated by SolidPython 1.1.3 on 2024-05-19 23:42:01


intersection() {
	difference() {
		intersection() {
			translate(v = [0, 0, 0]) {
				import(file = "CE3E3V2_Bottom_shell.stl", origin = [0, 0]);
			}
			translate(v = [-90.04029846191406, -32.690147399902344, 14]) {
				cube(size = [180.0806, 65.380295, 2]);
			}
		}
		linear_extrude(height = 999) {
			offset(r = -1) {
				import(file = "C:/Users/Daniel/Documents/repos/Shell_Maker/output/7top_slice.dxf", origin = [0, 0]);
			}
		}
	}
	translate(v = [0, 0, 14]) {
		linear_extrude(height = 10) {
			polygon(points = [[0, 0], [51.0196468750, -18.1629312500], [51.0753500000, -18.1202000000], [51.1310531250, -18.0774687500], [51.1867562500, -18.0347375000], [51.2424593750, -17.9920062500], [51.2981625000, -17.9492750000], [51.3538656250, -17.9065437500], [51.4095687500, -17.8638125000], [51.4652718750, -17.8210812500], [51.5209750000, -17.7783500000], [51.5766781250, -17.7356187500], [51.6323812500, -17.6928875000], [51.6880843750, -17.6501562500], [51.7437875000, -17.6074250000], [51.7994906250, -17.5646937500], [51.8551937500, -17.5219625000], [51.9108968750, -17.4792312500], [51.9666000000, -17.4365000000], [52.0065750000, -17.4054500000], [52.0465500000, -17.3744000000], [52.0865250000, -17.3433500000], [52.1265000000, -17.3123000000], [52.1825000000, -17.2664000000], [52.2523468750, -17.2042625000], [52.3221937500, -17.1421250000], [52.3920406250, -17.0799875000], [52.4618875000, -17.0178500000], [52.5317343750, -16.9557125000], [52.6015812500, -16.8935750000], [52.6714281250, -16.8314375000], [52.7412750000, -16.7693000000], [52.8111218750, -16.7071625000], [52.8809687500, -16.6450250000], [52.9508156250, -16.5828875000], [53.0206625000, -16.5207500000], [53.0905093750, -16.4586125000], [53.1603562500, -16.3964750000], [53.2302031250, -16.3343375000], [53.3000500000, -16.2722000000], [53.3698968750, -16.2100625000], [53.4397437500, -16.1479250000], [53.5095906250, -16.0857875000], [53.5794375000, -16.0236500000], [53.6492843750, -15.9615125000], [53.7191312500, -15.8993750000], [53.7889781250, -15.8372375000], [53.8588250000, -15.7751000000], [53.9286718750, -15.7129625000], [53.9985187500, -15.6508250000], [54.0683656250, -15.5886875000], [54.1382125000, -15.5265500000], [54.2080593750, -15.4644125000], [54.2779062500, -15.4022750000], [54.3477531250, -15.3401375000], [54.4176000000, -15.2780000000], [54.4788625000, -15.2228625000], [54.5401250000, -15.1677250000], [54.6013875000, -15.1125875000], [54.6626500000, -15.0574500000], [54.7239125000, -15.0023125000], [54.7851750000, -14.9471750000], [54.8464375000, -14.8920375000], [54.9077000000, -14.8369000000], [54.9121000000, -14.8326000000], [54.9547375000, -14.7902500000], [54.9973750000, -14.7479000000], [55.0400125000, -14.7055500000], [55.0826500000, -14.6632000000], [55.1252875000, -14.6208500000], [55.1679250000, -14.5785000000], [55.2105625000, -14.5361500000], [55.2532000000, -14.4938000000], [55.2805000000, -14.4668000000], [55.3337187500, -14.4111812500], [55.3869375000, -14.3555625000], [55.4401562500, -14.2999437500], [55.4933750000, -14.2443250000], [55.5465937500, -14.1887062500], [55.5998125000, -14.1330875000], [55.6530312500, -14.0774687500], [55.7062500000, -14.0218500000], [55.7594687500, -13.9662312500], [55.8126875000, -13.9106125000], [55.8659062500, -13.8549937500], [55.9191250000, -13.7993750000], [55.9723437500, -13.7437562500], [56.0255625000, -13.6881375000], [56.0787812500, -13.6325187500], [56.1320000000, -13.5769000000], [56.1673250000, -13.5380250000], [56.2026500000, -13.4991500000], [56.2379750000, -13.4602750000], [56.2733000000, -13.4214000000], [56.3127250000, -13.3762500000], [56.3521500000, -13.3311000000], [56.3915750000, -13.2859500000], [56.4310000000, -13.2408000000], [56.4812593750, -13.1805625000], [56.5315187500, -13.1203250000], [56.5817781250, -13.0600875000], [56.6320375000, -12.9998500000], [56.6822968750, -12.9396125000], [56.7325562500, -12.8793750000], [56.7828156250, -12.8191375000], [56.8330750000, -12.7589000000], [56.8833343750, -12.6986625000], [56.9335937500, -12.6384250000], [56.9838531250, -12.5781875000], [57.0341125000, -12.5179500000], [57.0843718750, -12.4577125000], [57.1346312500, -12.3974750000], [57.1848906250, -12.3372375000], [57.2351500000, -12.2770000000], [57.2854093750, -12.2167625000], [57.3356687500, -12.1565250000], [57.3859281250, -12.0962875000], [57.4361875000, -12.0360500000], [57.4864468750, -11.9758125000], [57.5367062500, -11.9155750000], [57.5869656250, -11.8553375000], [57.6372250000, -11.7951000000], [57.6874843750, -11.7348625000], [57.7377437500, -11.6746250000], [57.7880031250, -11.6143875000], [57.8382625000, -11.5541500000], [57.8885218750, -11.4939125000], [57.9387812500, -11.4336750000], [57.9890406250, -11.3734375000], [58.0393000000, -11.3132000000], [58.0982000000, -11.2383500000], [58.1571000000, -11.1635000000], [58.2134875000, -11.0833156250], [58.2698750000, -11.0031312500], [58.3262625000, -10.9229468750], [58.3826500000, -10.8427625000], [58.4390375000, -10.7625781250], [58.4954250000, -10.6823937500], [58.5518125000, -10.6022093750], [58.6082000000, -10.5220250000], [58.6645875000, -10.4418406250], [58.7209750000, -10.3616562500], [58.7773625000, -10.2814718750], [58.8337500000, -10.2012875000], [58.8901375000, -10.1211031250], [58.9465250000, -10.0409187500], [59.0029125000, -9.9607343750], [59.0593000000, -9.8805500000], [59.0905500000, -9.8383450000], [59.1218000000, -9.7961400000], [59.1530500000, -9.7539350000], [59.1843000000, -9.7117300000], [59.2233000000, -9.6514600000], [59.2599812500, -9.5920412500], [59.2966625000, -9.5326225000], [59.3333437500, -9.4732037500], [59.3700250000, -9.4137850000], [59.4067062500, -9.3543662500], [59.4433875000, -9.2949475000], [59.4800687500, -9.2355287500], [59.5167500000, -9.1761100000], [59.5534312500, -9.1166912500], [59.5901125000, -9.0572725000], [59.6267937500, -8.9978537500], [59.6634750000, -8.9384350000], [59.7001562500, -8.8790162500], [59.7368375000, -8.8195975000], [59.7735187500, -8.7601787500], [59.8102000000, -8.7007600000], [59.8582000000, -8.6223700000], [59.9062000000, -8.5439800000], [59.9162000000, -8.5267500000], [59.9410000000, -8.4829100000], [59.9658000000, -8.4390700000], [59.9906000000, -8.3952300000], [60.0154000000, -8.3513900000], [60.0402000000, -8.3075500000], [60.0650000000, -8.2637100000], [60.0898000000, -8.2198700000], [60.1146000000, -8.1760300000], [60.1447625000, -8.1128384375], [60.1749250000, -8.0496468750], [60.2050875000, -7.9864553125], [60.2352500000, -7.9232637500], [60.2654125000, -7.8600721875], [60.2955750000, -7.7968806250], [60.3257375000, -7.7336890625], [60.3559000000, -7.6704975000], [60.3860625000, -7.6073059375], [60.4162250000, -7.5441143750], [60.4463875000, -7.4809228125], [60.4765500000, -7.4177312500], [60.5067125000, -7.3545396875], [60.5368750000, -7.2913481250], [60.5670375000, -7.2281565625], [60.5972000000, -7.1649650000], [60.6273625000, -7.1017734375], [60.6575250000, -7.0385818750], [60.6876875000, -6.9753903125], [60.7178500000, -6.9121987500], [60.7480125000, -6.8490071875], [60.7781750000, -6.7858156250], [60.8083375000, -6.7226240625], [60.8385000000, -6.6594325000], [60.8686625000, -6.5962409375], [60.8988250000, -6.5330493750], [60.9289875000, -6.4698578125], [60.9591500000, -6.4066662500], [60.9893125000, -6.3434746875], [61.0194750000, -6.2802831250], [61.0496375000, -6.2170915625], [61.0798000000, -6.1539000000], [61.1138250000, -6.0862550000], [61.1478500000, -6.0186100000], [61.1818750000, -5.9509650000], [61.2159000000, -5.8833200000], [61.2316000000, -5.8452000000], [61.2648500000, -5.7597850000], [61.2981000000, -5.6743700000], [61.3313500000, -5.5889550000], [61.3646000000, -5.5035400000], [61.3821000000, -5.4597600000], [61.3979000000, -5.4087725000], [61.4137000000, -5.3577850000], [61.4295000000, -5.3067975000], [61.4453000000, -5.2558100000], [61.4611000000, -5.2048225000], [61.4769000000, -5.1538350000], [61.4927000000, -5.1028475000], [61.5085000000, -5.0518600000], [61.5243000000, -5.0008725000], [61.5401000000, -4.9498850000], [61.5559000000, -4.8988975000], [61.5717000000, -4.8479100000], [61.5875000000, -4.7969225000], [61.6033000000, -4.7459350000], [61.6191000000, -4.6949475000], [61.6349000000, -4.6439600000], [61.6507000000, -4.5929725000], [61.6665000000, -4.5419850000], [61.6823000000, -4.4909975000], [61.6981000000, -4.4400100000], [61.7139000000, -4.3890225000], [61.7297000000, -4.3380350000], [61.7455000000, -4.2870475000], [61.7613000000, -4.2360600000], [61.7771000000, -4.1850725000], [61.7929000000, -4.1340850000], [61.8087000000, -4.0830975000], [61.8245000000, -4.0321100000], [61.8403000000, -3.9811225000], [61.8561000000, -3.9301350000], [61.8719000000, -3.8791475000], [61.8877000000, -3.8281600000], [61.9176750000, -3.7328875000], [61.9476500000, -3.6376150000], [61.9776250000, -3.5423425000], [62.0076000000, -3.4470700000], [62.0125000000, -3.4273500000], [62.0325375000, -3.3340137500], [62.0525750000, -3.2406775000], [62.0726125000, -3.1473412500], [62.0926500000, -3.0540050000], [62.1126875000, -2.9606687500], [62.1327250000, -2.8673325000], [62.1527625000, -2.7739962500], [62.1728000000, -2.6806600000], [62.1872000000, -2.6145500000], [62.1881000000, -2.6099200000], [62.1977062500, -2.5414362500], [62.2073125000, -2.4729525000], [62.2169187500, -2.4044687500], [62.2265250000, -2.3359850000], [62.2361312500, -2.2675012500], [62.2457375000, -2.1990175000], [62.2553437500, -2.1305337500], [62.2649500000, -2.0620500000], [62.2745562500, -1.9935662500], [62.2841625000, -1.9250825000], [62.2937687500, -1.8565987500], [62.3033750000, -1.7881150000], [62.3129812500, -1.7196312500], [62.3225875000, -1.6511475000], [62.3321937500, -1.5826637500], [62.3418000000, -1.5141800000], [62.3512250000, -1.4465375000], [62.3606500000, -1.3788950000], [62.3700750000, -1.3112525000], [62.3795000000, -1.2436100000], [62.3828125000, -1.1862939375], [62.3861250000, -1.1289778750], [62.3894375000, -1.0716618125], [62.3927500000, -1.0143457500], [62.3960625000, -0.9570296875], [62.3993750000, -0.8997136250], [62.4026875000, -0.8423975625], [62.4060000000, -0.7850815000], [62.4093125000, -0.7277654375], [62.4126250000, -0.6704493750], [62.4159375000, -0.6131333125], [62.4192500000, -0.5558172500], [62.4225625000, -0.4985011875], [62.4258750000, -0.4411851250], [62.4291875000, -0.3838690625], [62.4325000000, -0.3265530000], [62.4363000000, -0.2592770000], [62.4364000000, -0.2570800000], [62.4329218750, -0.1993078125], [62.4294437500, -0.1415356250], [62.4259656250, -0.0837634375], [62.4224875000, -0.0259912500], [62.4190093750, 0.0317809375], [62.4155312500, 0.0895531250], [62.4120531250, 0.1473253125], [62.4085750000, 0.2050975000], [62.4050968750, 0.2628696875], [62.4016187500, 0.3206418750], [62.3981406250, 0.3784140625], [62.3946625000, 0.4361862500], [62.3911843750, 0.4939584375], [62.3877062500, 0.5517306250], [62.3842281250, 0.6095028125], [62.3807500000, 0.6672750000], [62.3772718750, 0.7250471875], [62.3737937500, 0.7828193750], [62.3703156250, 0.8405915625], [62.3668375000, 0.8983637500], [62.3633593750, 0.9561359375], [62.3598812500, 1.0139081250], [62.3564031250, 1.0716803125], [62.3529250000, 1.1294525000], [62.3494468750, 1.1872246875], [62.3459687500, 1.2449968750], [62.3424906250, 1.3027690625], [62.3390125000, 1.3605412500], [62.3355343750, 1.4183134375], [62.3320562500, 1.4760856250], [62.3285781250, 1.5338578125], [62.3251000000, 1.5916300000], [62.3204000000, 1.6690675000], [62.3157000000, 1.7465050000], [62.3110000000, 1.8239425000], [62.3063000000, 1.9013800000], [62.3013500000, 1.9805450000], [62.2964000000, 2.0597100000], [62.2954000000, 2.0667900000], [62.2871500000, 2.1212400000], [62.2789000000, 2.1756900000], [62.2706500000, 2.2301400000], [62.2624000000, 2.2845900000], [62.2579000000, 2.3142900000], [62.2503000000, 2.3590200000], [62.2398000000, 2.4188500000], [62.2272875000, 2.4868662500], [62.2147750000, 2.5548825000], [62.2022625000, 2.6228987500], [62.1897500000, 2.6909150000], [62.1772375000, 2.7589312500], [62.1647250000, 2.8269475000], [62.1522125000, 2.8949637500], [62.1397000000, 2.9629800000], [62.1301000000, 3.0110500000], [62.1161906250, 3.0630556250], [62.1022812500, 3.1150612500], [62.0883718750, 3.1670668750], [62.0744625000, 3.2190725000], [62.0605531250, 3.2710781250], [62.0466437500, 3.3230837500], [62.0327343750, 3.3750893750], [62.0188250000, 3.4270950000], [62.0049156250, 3.4791006250], [61.9910062500, 3.5311062500], [61.9770968750, 3.5831118750], [61.9631875000, 3.6351175000], [61.9492781250, 3.6871231250], [61.9353687500, 3.7391287500], [61.9214593750, 3.7911343750], [61.9075500000, 3.8431400000], [61.8936406250, 3.8951456250], [61.8797312500, 3.9471512500], [61.8658218750, 3.9991568750], [61.8519125000, 4.0511625000], [61.8380031250, 4.1031681250], [61.8240937500, 4.1551737500], [61.8101843750, 4.2071793750], [61.7962750000, 4.2591850000], [61.7823656250, 4.3111906250], [61.7684562500, 4.3631962500], [61.7545468750, 4.4152018750], [61.7406375000, 4.4672075000], [61.7267281250, 4.5192131250], [61.7128187500, 4.5712187500], [61.6989093750, 4.6232243750], [61.6850000000, 4.6752300000], [61.6650000000, 4.7469250000], [61.6450000000, 4.8186200000], [61.6293000000, 4.8650700000], [61.6047812500, 4.9253153125], [61.5802625000, 4.9855606250], [61.5557437500, 5.0458059375], [61.5312250000, 5.1060512500], [61.5067062500, 5.1662965625], [61.4821875000, 5.2265418750], [61.4576687500, 5.2867871875], [61.4331500000, 5.3470325000], [61.4086312500, 5.4072778125], [61.3841125000, 5.4675231250], [61.3595937500, 5.5277684375], [61.3350750000, 5.5880137500], [61.3105562500, 5.6482590625], [61.2860375000, 5.7085043750], [61.2615187500, 5.7687496875], [61.2370000000, 5.8289950000], [61.2124812500, 5.8892403125], [61.1879625000, 5.9494856250], [61.1634437500, 6.0097309375], [61.1389250000, 6.0699762500], [61.1144062500, 6.1302215625], [61.0898875000, 6.1904668750], [61.0653687500, 6.2507121875], [61.0408500000, 6.3109575000], [61.0163312500, 6.3712028125], [60.9918125000, 6.4314481250], [60.9672937500, 6.4916934375], [60.9427750000, 6.5519387500], [60.9182562500, 6.6121840625], [60.8937375000, 6.6724293750], [60.8692187500, 6.7326746875], [60.8447000000, 6.7929200000], [60.8227625000, 6.8453762500], [60.8008250000, 6.8978325000], [60.7788875000, 6.9502887500], [60.7569500000, 7.0027450000], [60.7350125000, 7.0552012500], [60.7130750000, 7.1076575000], [60.6911375000, 7.1601137500], [60.6692000000, 7.2125700000], [60.6604000000, 7.2307400000], [60.6365000000, 7.2791300000], [60.6082000000, 7.3350262500], [60.5799000000, 7.3909225000], [60.5516000000, 7.4468187500], [60.5233000000, 7.5027150000], [60.4950000000, 7.5586112500], [60.4667000000, 7.6145075000], [60.4384000000, 7.6704037500], [60.4101000000, 7.7263000000], [60.3872000000, 7.7708300000], [60.3541000000, 7.8330200000], [60.3106000000, 7.9129500000], [60.2692906250, 7.9802328125], [60.2279812500, 8.0475156250], [60.1866718750, 8.1147984375], [60.1453625000, 8.1820812500], [60.1040531250, 8.2493640625], [60.0627437500, 8.3166468750], [60.0214343750, 8.3839296875], [59.9801250000, 8.4512125000], [59.9388156250, 8.5184953125], [59.8975062500, 8.5857781250], [59.8561968750, 8.6530609375], [59.8148875000, 8.7203437500], [59.7735781250, 8.7876265625], [59.7322687500, 8.8549093750], [59.6909593750, 8.9221921875], [59.6496500000, 8.9894750000], [59.6083406250, 9.0567578125], [59.5670312500, 9.1240406250], [59.5257218750, 9.1913234375], [59.4844125000, 9.2586062500], [59.4431031250, 9.3258890625], [59.4017937500, 9.3931718750], [59.3604843750, 9.4604546875], [59.3191750000, 9.5277375000], [59.2778656250, 9.5950203125], [59.2365562500, 9.6623031250], [59.1952468750, 9.7295859375], [59.1539375000, 9.7968687500], [59.1126281250, 9.8641515625], [59.0713187500, 9.9314343750], [59.0300093750, 9.9987171875], [58.9887000000, 10.0660000000], [58.9434000000, 10.1375250000], [58.8981000000, 10.2090500000], [58.8528000000, 10.2805750000], [58.8075000000, 10.3521000000], [58.7800750000, 10.3945250000], [58.7526500000, 10.4369500000], [58.7252250000, 10.4793750000], [58.6978000000, 10.5218000000], [58.6595000000, 10.5751000000], [58.6171750000, 10.6320437500], [58.5748500000, 10.6889875000], [58.5325250000, 10.7459312500], [58.4902000000, 10.8028750000], [58.4478750000, 10.8598187500], [58.4055500000, 10.9167625000], [58.3632250000, 10.9737062500], [58.3209000000, 11.0306500000], [58.2785750000, 11.0875937500], [58.2362500000, 11.1445375000], [58.1939250000, 11.2014812500], [58.1516000000, 11.2584250000], [58.1092750000, 11.3153687500], [58.0669500000, 11.3723125000], [58.0246250000, 11.4292562500], [57.9823000000, 11.4862000000], [57.9243000000, 11.5628500000], [57.8663000000, 11.6395000000], [57.8304562500, 11.6824562500], [57.7946125000, 11.7254125000], [57.7587687500, 11.7683687500], [57.7229250000, 11.8113250000], [57.6870812500, 11.8542812500], [57.6512375000, 11.8972375000], [57.6153937500, 11.9401937500], [57.5795500000, 11.9831500000], [57.5437062500, 12.0261062500], [57.5078625000, 12.0690625000], [57.4720187500, 12.1120187500], [57.4361750000, 12.1549750000], [57.4003312500, 12.1979312500], [57.3644875000, 12.2408875000], [57.3286437500, 12.2838437500], [57.2928000000, 12.3268000000], [57.2569562500, 12.3697562500], [57.2211125000, 12.4127125000], [57.1852687500, 12.4556687500], [57.1494250000, 12.4986250000], [57.1135812500, 12.5415812500], [57.0777375000, 12.5845375000], [57.0418937500, 12.6274937500], [57.0060500000, 12.6704500000], [56.9702062500, 12.7134062500], [56.9343625000, 12.7563625000], [56.8985187500, 12.7993187500], [56.8626750000, 12.8422750000], [56.8268312500, 12.8852312500], [56.7909875000, 12.9281875000], [56.7551437500, 12.9711437500], [56.7193000000, 13.0141000000], [56.6723000000, 13.0700000000], [56.6253000000, 13.1259000000], [56.6046000000, 13.1491000000], [56.5668656250, 13.1889656250], [56.5291312500, 13.2288312500], [56.4913968750, 13.2686968750], [56.4536625000, 13.3085625000], [56.4159281250, 13.3484281250], [56.3781937500, 13.3882937500], [56.3404593750, 13.4281593750], [56.3027250000, 13.4680250000], [56.2649906250, 13.5078906250], [56.2272562500, 13.5477562500], [56.1895218750, 13.5876218750], [56.1517875000, 13.6274875000], [56.1140531250, 13.6673531250], [56.0763187500, 13.7072187500], [56.0385843750, 13.7470843750], [56.0008500000, 13.7869500000], [55.9631156250, 13.8268156250], [55.9253812500, 13.8666812500], [55.8876468750, 13.9065468750], [55.8499125000, 13.9464125000], [55.8121781250, 13.9862781250], [55.7744437500, 14.0261437500], [55.7367093750, 14.0660093750], [55.6989750000, 14.1058750000], [55.6612406250, 14.1457406250], [55.6235062500, 14.1856062500], [55.5857718750, 14.2254718750], [55.5480375000, 14.2653375000], [55.5103031250, 14.3052031250], [55.4725687500, 14.3450687500], [55.4348343750, 14.3849343750], [55.3971000000, 14.4248000000], [55.3359500000, 14.4894000000], [55.2748000000, 14.5540000000], [55.2136500000, 14.6186000000], [55.1525000000, 14.6832000000], [55.1290000000, 14.7067000000], [55.0723406250, 14.7591750000], [55.0156812500, 14.8116500000], [54.9590218750, 14.8641250000], [54.9023625000, 14.9166000000], [54.8457031250, 14.9690750000], [54.7890437500, 15.0215500000], [54.7323843750, 15.0740250000], [54.6757250000, 15.1265000000], [54.6190656250, 15.1789750000], [54.5624062500, 15.2314500000], [54.5057468750, 15.2839250000], [54.4490875000, 15.3364000000], [54.3924281250, 15.3888750000], [54.3357687500, 15.4413500000], [54.2791093750, 15.4938250000], [54.2224500000, 15.5463000000], [54.1657906250, 15.5987750000], [54.1091312500, 15.6512500000], [54.0524718750, 15.7037250000], [53.9958125000, 15.7562000000], [53.9391531250, 15.8086750000], [53.8824937500, 15.8611500000], [53.8258343750, 15.9136250000], [53.7691750000, 15.9661000000], [53.7125156250, 16.0185750000], [53.6558562500, 16.0710500000], [53.5991968750, 16.1235250000], [53.5425375000, 16.1760000000], [53.4858781250, 16.2284750000], [53.4292187500, 16.2809500000], [53.3725593750, 16.3334250000], [53.3159000000, 16.3859000000], [53.2435000000, 16.4534000000], [53.1711000000, 16.5209000000], [53.1062500000, 16.5759000000], [53.0414000000, 16.6309000000], [52.9865187500, 16.6767937500], [52.9316375000, 16.7226875000], [52.8767562500, 16.7685812500], [52.8218750000, 16.8144750000], [52.7669937500, 16.8603687500], [52.7121125000, 16.9062625000], [52.6572312500, 16.9521562500], [52.6023500000, 16.9980500000], [52.5474687500, 17.0439437500], [52.4925875000, 17.0898375000], [52.4377062500, 17.1357312500], [52.3828250000, 17.1816250000], [52.3279437500, 17.2275187500], [52.2730625000, 17.2734125000], [52.2181812500, 17.3193062500], [52.1633000000, 17.3652000000], [52.0978000000, 17.4190000000], [52.0454250000, 17.4588750000], [51.9930500000, 17.4987500000], [51.9406750000, 17.5386250000], [51.8883000000, 17.5785000000], [51.8440875000, 17.6116875000], [51.7998750000, 17.6448750000], [51.7556625000, 17.6780625000], [51.7114500000, 17.7112500000], [51.6672375000, 17.7444375000], [51.6230250000, 17.7776250000], [51.5788125000, 17.8108125000], [51.5346000000, 17.8440000000], [51.4922625000, 17.8750500000], [51.4499250000, 17.9061000000], [51.4075875000, 17.9371500000], [51.3652500000, 17.9682000000], [51.3229125000, 17.9992500000], [51.2805750000, 18.0303000000], [51.2382375000, 18.0613500000], [51.1959000000, 18.0924000000], [51.1535625000, 18.1234500000], [51.1112250000, 18.1545000000], [51.0688875000, 18.1855500000], [51.0265500000, 18.2166000000], [50.9842125000, 18.2476500000], [50.9418750000, 18.2787000000], [50.8995375000, 18.3097500000], [50.8572000000, 18.3408000000], [50.8148625000, 18.3718500000], [50.7725250000, 18.4029000000], [50.7301875000, 18.4339500000], [50.6878500000, 18.4650000000], [50.6455125000, 18.4960500000], [50.6031750000, 18.5271000000], [50.5608375000, 18.5581500000], [50.5185000000, 18.5892000000], [50.4761625000, 18.6202500000], [50.4338250000, 18.6513000000], [50.3914875000, 18.6823500000], [50.3491500000, 18.7134000000], [50.3068125000, 18.7444500000], [50.2644750000, 18.7755000000], [50.2221375000, 18.8065500000], [50.1798000000, 18.8376000000], [50.1374625000, 18.8686500000], [50.0951250000, 18.8997000000], [50.0527875000, 18.9307500000], [50.0104500000, 18.9618000000], [49.9681125000, 18.9928500000], [49.9257750000, 19.0239000000], [49.8834375000, 19.0549500000], [49.8411000000, 19.0860000000], [49.7987625000, 19.1170500000], [49.7564250000, 19.1481000000], [49.7140875000, 19.1791500000], [49.6717500000, 19.2102000000], [49.6294125000, 19.2412500000], [49.5870750000, 19.2723000000], [49.5447375000, 19.3033500000], [49.5024000000, 19.3344000000], [49.4600625000, 19.3654500000], [49.4177250000, 19.3965000000], [49.3753875000, 19.4275500000], [49.3330500000, 19.4586000000], [49.2907125000, 19.4896500000], [49.2483750000, 19.5207000000], [49.2060375000, 19.5517500000], [49.1637000000, 19.5828000000], [49.1213625000, 19.6138500000], [49.0790250000, 19.6449000000], [49.0366875000, 19.6759500000], [48.9943500000, 19.7070000000], [48.9520125000, 19.7380500000], [48.9096750000, 19.7691000000], [48.8673375000, 19.8001500000], [48.8250000000, 19.8312000000], [48.7659500000, 19.8714500000], [48.7069000000, 19.9117000000], [48.6521593750, 19.9464281250], [48.5974187500, 19.9811562500], [48.5426781250, 20.0158843750], [48.4879375000, 20.0506125000], [48.4331968750, 20.0853406250], [48.3784562500, 20.1200687500], [48.3237156250, 20.1547968750], [48.2689750000, 20.1895250000], [48.2142343750, 20.2242531250], [48.1594937500, 20.2589812500], [48.1047531250, 20.2937093750]]);
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
import math
import time

from stl import mesh, Dimension

from tkinter import Tk     # from tkinter import Tk for Python 3.x
from tkinter.filedialog import askopenfilename
from mpl_toolkits.mplot3d import art3d
from matplotlib import pyplot as plt
import solid
import os
import ezdxf
import shapely.geometry as sg
import subprocess
from GUI import getSCADPath



def outputSTL(From, To, PATH=getSCADPath()):
    subprocess.Popen(PATH + " -o " + To + " " + From)
    while not os.path.exists(To):
        time.sleep(1)


def get_size(i):
    x_list = [int(a) for a in str(i)]
    return len(x_list)



class Model:
    def __init__(self, model, fileName, location, layer, thickness):
        self.location = location
        self.code = None
        self.fileName = fileName
        self.stl = fileName + ".stl"
        self.layer = layer
        self.thickness = thickness
        self.maxz = (layer+1)*thickness
        self.dxf = fileName + ".dxf"
        self.scad = fileName + ".scad"
        self.model = model
        self.center = None
        self.width = 10
        self.mesh = None
        self.useable_area = None


    def get_code(self):
        max_dim = 0.05
        max_array = 6

        num = int(self.fileName)
        nums = [int(a) for a in str(num)]
        nums.reverse()
        indices = nums
        length = len(nums)

        print(indices)
        t = 0
        i = 0
        cubes = []
        x = 0
        y = 0
        width = 0.01
        while x <= max_dim:
            while y <= max_dim:
                print(indices)
                if nums == []:
                    break
                if indices[0] != 0:
                    cubes.append(solid.translate([x, y, 0])(solid.cube(size=t / 1000 + 0.001)))
                    y += max_dim / (max_array - 1)
                    nums[0] = nums[0] - 1
                else:
                    indices.pop(0)
                    t += 1
                i += 1
            x += max_dim / (max_array - 1)
            y = 0

        outside = solid.translate([-width / 2, -width / 2])(solid.cube(max_dim + (length - 1) / 1000 + 0.001 + width))
        self.code = solid.difference()(outside, cubes)
        self.code = solid.projection(cut=True)(self.code)
        solid.scad_render_to_file(self.code, self.location + "/code.scad")
        outputSTL(From=self.location+"/code.scad", To=self.location+"code.dxf", PATH=getSCADPath())
        # os.system("toSTL.sh renders/code.scad renders/code.dxf")
        return self.location+"/code.dxf"

    def download(self, type):
        if type =="stl":
            print("generating:" + self.location+"/"+ self.fileName+".stl")
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".stl")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".stl")
        elif type == "dxf":
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".dxf")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".dxf")

    def render(self):
        solid.scad_render_to_file(self.model, self.location+"/"+ self.fileName+'.scad')
        while not os.path.exists(self.location+"/"+self.fileName+".scad"):
            time.sleep(1)

    def get_points(self):
        doc = ezdxf.readfile(filename=self.location+"/"+ self.fileName+".dxf")
        msp = doc.modelspace()
        i=0
        lists = []
        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return [start, end]

        for e in msp.query("LINE"):
            line = helper(e)
            if not lists:
                lists.append([line])
            else:
                if lists[i][len(lists)-1][1] != line[0]:
                    lists.append([line])
                    i+=1
                else:
                    lists[i].append(line)

    def get_points2(self, FILE):
        doc = ezdxf.readfile(filename=FILE)
        msp = doc.modelspace()
        i = 0
        lists = []

        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return (start, end)

        for e in msp.query("LINE"):
            line = helper(e)
            if lists==[]:
                lists.append([line])
            else:
                if lists[i][len(lists[i]) - 1][1] != line[0]:
                    lists.append([line])
                    i += 1
                else:
                    lists[i].append(line)
        return lists

    def add_code(self):
        dxf = solid.projection(cut=False)(self.model)
        offset = solid.offset(r=-0.1)(dxf)
        solid.scad_render_to_file(offset, self.location+'/offset.scad')
        os.system("toSTL.sh renders/offset.scad renders/offset.dxf")
        lines = self.get_points2("renders/offset.dxf")
        x = lines[0][0][0][0]
        y = lines[0][0][0][1]
        print(x)
        print(y)
        code = solid.translate([x,y,0])(self.code)
        code = solid.linear_extrude(height=999)(code)
        save = self.model
        self.model = solid.projection()(solid.difference()(self.model, code))
        self.render()
        self.download("dxf")
        self.model = save

    def add_label(self, pos):
        # num = 12
        # minx, maxx, miny, maxy, minz, maxz = self.find_minmax()
        maxz = self.maxz
        # label = solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.5, halign="center"))
        # i=minx
        # print("x-len: " + str(maxx-minx))
        # print(i)
        # inc = (maxx-minx)/num
        # while minx <= i <= maxx:
        #     label = solid.union()(solid.translate([i, 0, maxz - 0.2])(solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.25, halign="center"))), label)
        #     i += inc
        #
        # l = label
        #
        # i =miny
        # while miny<= i <= maxy:
        #     print("y inc")
        #     l = solid.union()(solid.translate([0, i, 0])(label), l)
        #     i += 0.5
        for i in str(self.fileName):
            cur = pos[0]
            label = solid.translate([pos[0][0], pos[0][1], self.maxz-0.2])(solid.linear_extrude(height=(self.thickness)/3)(solid.text(str(i), size=0.5, halign="center", valign="center")))
            self.model = solid.difference()(self.model, label)
            pos.append(pos.pop(0))
            while abs(cur[0]-pos[0][0])<0.5 and abs(cur[1]-pos[0][1])<0.5:
                pos.append(pos.pop(0))



    def Center(self):

        volume, cog, inertia = self.mesh.get_mass_properties()
        print("Volume                                  = {0}".format(volume))
        print("Position of the center of gravity (COG) = {0}".format(cog))
        m_centered = solid.translate([-cog[0], -cog[1], 0])(
            self.model
        )
        return m_centered

    def find_minmax(self):
        minx = maxx = miny = maxy = minz = maxz = None
        for p in self.mesh.points:
            # p contains (x, y, z)
            if minx is None:
                minx = p[Dimension.X]
                maxx = p[Dimension.X]
                miny = p[Dimension.Y]
                maxy = p[Dimension.Y]
                minz = p[Dimension.Z]
                maxz = p[Dimension.Z]
            else:
                maxx = max(p[Dimension.X], maxx)
                minx = min(p[Dimension.X], minx)
                maxy = max(p[Dimension.Y], maxy)
                miny = min(p[Dimension.Y], miny)
                maxz = max(p[Dimension.Z], maxz)
                minz = min(p[Dimension.Z], minz)
        lenx = maxx - minx
        leny = maxy - miny
        lenz = maxz - minz
        return minx, maxx, miny, maxy, minz, maxz

    # def generate_Mesh(self):
    #     self.mesh = mesh.Mesh.from_file(self.location + "/" + str(int(self.fileName)//8)+ "b.stl")

    def get_top(self):
        top = solid.projection(cut=True)(solid.translate([0,0,-1*self.thickness*(self.layer+1)])(self.model))
        useable_area = solid.offset(r=-0.45)(top)
        self.useable_area = useable_area
        solid.scad_render_to_file(self.useable_area, self.location+'/' + 'toptemp.scad')
        outputSTL(From=self.location+'/' + 'toptemp.scad', To=self.location+"/top"+ self.dxf)

        # os.system("toSTL.sh out/toptemp.scad renders/" + self.fileName + ".dxf")
        dxf = DXF(self.location+"/top"+ self.dxf)
        min_p=dxf.points[0][0]
        points_ordered = dxf.points
        i=0
        while i <= len(dxf.points)+1:
            while math.sqrt((dxf.points[0][0]-dxf.points[1][0])**2+(dxf.points[0][1]-dxf.points[1][1])**2) > 0.1:
                dxf.points.insert(1, [(dxf.points[0][0]+dxf.points[1][0])/2, (dxf.points[0][1]+dxf.points[1][1])/2])
                i = i-1
            dxf.points.append(dxf.points.pop(0))
            i+=1
        for i in range(len(dxf.points)):
            dxf.points.append(dxf.points.pop(0))
            if dxf.points[0][0] < min_p:
                min_p = dxf.points[0][0]
                points_ordered = dxf.points.copy()
        dxf.points = points_ordered.copy()

        print(dxf.points)
        self.add_label(dxf.points)

class DXF:
    def __init__(self, file):
        self.file = file
        self.Lines = []
        self.points = []
        doc = ezdxf.readfile(self.file)
        msp = doc.modelspace()
        for e in msp:
            if e.dxftype() == "LINE":
                self.Lines.append(e)
                self.points.append([e.dxf.start[0], e.dxf.start[1]])
        # self.points.append([self.Lines[-1].dxf.end[0], self.Lines[-1].dxf.end[1]])
        self.area = None
        self.center = None
        self.polygon = sg.Polygon(self.points)

    def get_area(self):
        self.area = self.polygon.area
        return self.area

    def get_center(self):
        x_sum = 0
        y_sum =0
        for i in self.points:
            x_sum += i[0]
            y_sum += i[1]
        x_c = x_sum/len(self.points)
        y_c = y_sum/len(self.points)
        return (x_c, y_c)

    def split(self, maxdim):
        splits = []
        length = 0
        pieces = [[]]
        prev = self.points[0]
        for j in self.points:
            length = length + math.sqrt((prev[0]-j[0])**2+(prev[1]-j[1])**2)
            if length >= maxdim:
                pieces[-1].append(j)
                pieces.append([])
                length = 0
            pieces[-1].append(j)
            prev = j
        for j in pieces:
            j.insert(0, [0,0])
            piece = solid.linear_extrude(height=10)(solid.polygon(j))
            splits.append(piece)
        return splits
    def refine_points(self):
        i=0
        while i <= len(self.points)+1:
            while math.sqrt((self.points[0][0]-self.points[1][0])**2+(self.points[0][1]-self.points[1][1])**2) > 0.1:
                self.points.insert(1, [(self.points[0][0]+self.points[1][0])/2, (self.points[0][1]+self.points[1][1])/2])
                i = i-1
            self.points.append(self.points.pop(0))
            i+=1


if __name__== "__main__":
    test = DXF("C:/Users/Daniel/Documents/repos/Shell_Maker/output/0top_slice.dxf")
    test.refine_points()
    k = test.split(48)
    for i in range(len(k)):
        solid.scad_render_to_file(k[i], str(i) + ".scad")


 
 
************************************************/
