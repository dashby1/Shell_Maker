// Generated by SolidPython 1.1.3 on 2024-05-19 23:35:49


linear_extrude(height = 1) {
	polygon(points = [[0, 0], [-83.0891695313, 1.8917038359], [-83.1579500000, 1.8607885000], [-83.2267304687, 1.8298731641], [-83.2955109375, 1.7989578281], [-83.3642914063, 1.7680424922], [-83.4330718750, 1.7371271563], [-83.5018523437, 1.7062118203], [-83.5706328125, 1.6752964844], [-83.6394132813, 1.6443811484], [-83.7081937500, 1.6134658125], [-83.7769742187, 1.5825504766], [-83.8457546875, 1.5516351406], [-83.9145351562, 1.5207198047], [-83.9833156250, 1.4898044688], [-84.0520960937, 1.4588891328], [-84.1208765625, 1.4279737969], [-84.1896570312, 1.3970584609], [-84.2584375000, 1.3661431250], [-84.3272179688, 1.3352277891], [-84.3959984375, 1.3043124531], [-84.4647789063, 1.2733971172], [-84.5335593750, 1.2424817813], [-84.6023398438, 1.2115664453], [-84.6711203125, 1.1806511094], [-84.7399007813, 1.1497357734], [-84.8086812500, 1.1188204375], [-84.8774617187, 1.0879051016], [-84.9462421875, 1.0569897656], [-85.0150226563, 1.0260744297], [-85.0838031250, 0.9951590938], [-85.1525835937, 0.9642437578], [-85.2213640625, 0.9333284219], [-85.2901445313, 0.9024130859], [-85.3589250000, 0.8714977500], [-85.4277054687, 0.8405824141], [-85.4964859375, 0.8096670781], [-85.5652664063, 0.7787517422], [-85.6340468750, 0.7478364063], [-85.7028273437, 0.7169210703], [-85.7716078125, 0.6860057344], [-85.8403882813, 0.6550903984], [-85.9091687500, 0.6241750625], [-85.9779492187, 0.5932597266], [-86.0467296875, 0.5623443906], [-86.1155101562, 0.5314290547], [-86.1842906250, 0.5005137187], [-86.2530710937, 0.4695983828], [-86.3218515625, 0.4386830469], [-86.3906320312, 0.4077677109], [-86.4594125000, 0.3768523750], [-86.5281929688, 0.3459370391], [-86.5969734375, 0.3150217031], [-86.6657539063, 0.2841063672], [-86.7345343750, 0.2531910313], [-86.8033148438, 0.2222756953], [-86.8720953125, 0.1913603594], [-86.9408757813, 0.1604450234], [-87.0096562500, 0.1295296875], [-87.0784367187, 0.0986143516], [-87.1472171875, 0.0676990156], [-87.2159976563, 0.0367836797], [-87.2847781250, 0.0058683438], [-87.3535585937, -0.0250469922], [-87.4223390625, -0.0559623281], [-87.4911195313, -0.0868776641], [-87.5599000000, -0.1177930000], [-87.5078000000, -0.1415062500], [-87.4557000000, -0.1652195000], [-87.4036000000, -0.1889327500], [-87.3515000000, -0.2126460000], [-87.2957093750, -0.2383304375], [-87.2399187500, -0.2640148750], [-87.1841281250, -0.2896993125], [-87.1283375000, -0.3153837500], [-87.0725468750, -0.3410681875], [-87.0167562500, -0.3667526250], [-86.9609656250, -0.3924370625], [-86.9051750000, -0.4181215000], [-86.8493843750, -0.4438059375], [-86.7935937500, -0.4694903750], [-86.7378031250, -0.4951748125], [-86.6820125000, -0.5208592500], [-86.6262218750, -0.5465436875], [-86.5704312500, -0.5722281250], [-86.5146406250, -0.5979125625], [-86.4588500000, -0.6235970000], [-86.4030593750, -0.6492814375], [-86.3472687500, -0.6749658750], [-86.2914781250, -0.7006503125], [-86.2356875000, -0.7263347500], [-86.1798968750, -0.7520191875], [-86.1241062500, -0.7777036250], [-86.0683156250, -0.8033880625], [-86.0125250000, -0.8290725000], [-85.9567343750, -0.8547569375], [-85.9009437500, -0.8804413750], [-85.8451531250, -0.9061258125], [-85.7893625000, -0.9318102500], [-85.7335718750, -0.9574946875], [-85.6777812500, -0.9831791250], [-85.6219906250, -1.0088635625], [-85.5662000000, -1.0345480000], [-85.5104093750, -1.0602324375], [-85.4546187500, -1.0859168750], [-85.3988281250, -1.1116013125], [-85.3430375000, -1.1372857500], [-85.2872468750, -1.1629701875], [-85.2314562500, -1.1886546250], [-85.1756656250, -1.2143390625], [-85.1198750000, -1.2400235000], [-85.0640843750, -1.2657079375], [-85.0082937500, -1.2913923750], [-84.9525031250, -1.3170768125], [-84.8967125000, -1.3427612500], [-84.8409218750, -1.3684456875], [-84.7851312500, -1.3941301250], [-84.7293406250, -1.4198145625], [-84.6735500000, -1.4454990000], [-84.6177593750, -1.4711834375], [-84.5619687500, -1.4968678750], [-84.5061781250, -1.5225523125], [-84.4503875000, -1.5482367500], [-84.3945968750, -1.5739211875], [-84.3388062500, -1.5996056250], [-84.2830156250, -1.6252900625], [-84.2272250000, -1.6509745000], [-84.1714343750, -1.6766589375], [-84.1156437500, -1.7023433750], [-84.0598531250, -1.7280278125], [-84.0040625000, -1.7537122500], [-83.9482718750, -1.7793966875], [-83.8924812500, -1.8050811250], [-83.8366906250, -1.8307655625], [-83.7809000000, -1.8564500000], [-83.7114750000, -1.8854125000], [-83.6420500000, -1.9143750000], [-83.5726250000, -1.9433375000], [-83.5032000000, -1.9723000000], [-83.4358750000, -2.0010806250], [-83.3685500000, -2.0298612500], [-83.3012250000, -2.0586418750], [-83.2339000000, -2.0874225000], [-83.1665750000, -2.1162031250], [-83.0992500000, -2.1449837500], [-83.0319250000, -2.1737643750], [-82.9646000000, -2.2025450000], [-82.8972750000, -2.2313256250], [-82.8299500000, -2.2601062500], [-82.7626250000, -2.2888868750], [-82.6953000000, -2.3176675000], [-82.6279750000, -2.3464481250], [-82.5606500000, -2.3752287500], [-82.4933250000, -2.4040093750], [-82.4260000000, -2.4327900000], [-82.3586750000, -2.4615706250], [-82.2913500000, -2.4903512500], [-82.2240250000, -2.5191318750], [-82.1567000000, -2.5479125000], [-82.0893750000, -2.5766931250], [-82.0220500000, -2.6054737500], [-81.9547250000, -2.6342543750], [-81.8874000000, -2.6630350000], [-81.8200750000, -2.6918156250], [-81.7527500000, -2.7205962500], [-81.6854250000, -2.7493768750], [-81.6181000000, -2.7781575000], [-81.5507750000, -2.8069381250], [-81.4834500000, -2.8357187500], [-81.4161250000, -2.8644993750], [-81.3488000000, -2.8932800000], [-81.2814750000, -2.9220606250], [-81.2141500000, -2.9508412500], [-81.1468250000, -2.9796218750], [-81.0795000000, -3.0084025000], [-81.0121750000, -3.0371831250], [-80.9448500000, -3.0659637500], [-80.8775250000, -3.0947443750], [-80.8102000000, -3.1235250000], [-80.7428750000, -3.1523056250], [-80.6755500000, -3.1810862500], [-80.6082250000, -3.2098668750], [-80.5409000000, -3.2386475000], [-80.4735750000, -3.2674281250], [-80.4062500000, -3.2962087500], [-80.3389250000, -3.3249893750], [-80.2716000000, -3.3537700000], [-80.2042750000, -3.3825506250], [-80.1369500000, -3.4113312500], [-80.0696250000, -3.4401118750], [-80.0023000000, -3.4688925000], [-79.9349750000, -3.4976731250], [-79.8676500000, -3.5264537500], [-79.8003250000, -3.5552343750], [-79.7330000000, -3.5840150000], [-79.6656750000, -3.6127956250], [-79.5983500000, -3.6415762500], [-79.5310250000, -3.6703568750], [-79.4637000000, -3.6991375000], [-79.3963750000, -3.7279181250], [-79.3290500000, -3.7566987500], [-79.2617250000, -3.7854793750], [-79.1944000000, -3.8142600000], [-79.1270750000, -3.8430406250], [-79.0597500000, -3.8718212500], [-78.9924250000, -3.9006018750], [-78.9251000000, -3.9293825000], [-78.8577750000, -3.9581631250], [-78.7904500000, -3.9869437500], [-78.7231250000, -4.0157243750], [-78.6558000000, -4.0445050000], [-78.5884750000, -4.0732856250], [-78.5211500000, -4.1020662500], [-78.4538250000, -4.1308468750], [-78.3865000000, -4.1596275000], [-78.3191750000, -4.1884081250], [-78.2518500000, -4.2171887500], [-78.1845250000, -4.2459693750], [-78.1172000000, -4.2747500000], [-78.0498750000, -4.3035306250], [-77.9825500000, -4.3323112500], [-77.9152250000, -4.3610918750], [-77.8479000000, -4.3898725000], [-77.7805750000, -4.4186531250], [-77.7132500000, -4.4474337500], [-77.6459250000, -4.4762143750], [-77.5786000000, -4.5049950000], [-77.5112750000, -4.5337756250], [-77.4439500000, -4.5625562500], [-77.3766250000, -4.5913368750], [-77.3093000000, -4.6201175000], [-77.2419750000, -4.6488981250], [-77.1746500000, -4.6776787500], [-77.1073250000, -4.7064593750], [-77.0400000000, -4.7352400000], [-76.9726750000, -4.7640206250], [-76.9053500000, -4.7928012500], [-76.8380250000, -4.8215818750], [-76.7707000000, -4.8503625000], [-76.7033750000, -4.8791431250], [-76.6360500000, -4.9079237500], [-76.5687250000, -4.9367043750], [-76.5014000000, -4.9654850000], [-76.4340750000, -4.9942656250], [-76.3667500000, -5.0230462500], [-76.2994250000, -5.0518268750], [-76.2321000000, -5.0806075000], [-76.1647750000, -5.1093881250], [-76.0974500000, -5.1381687500], [-76.0301250000, -5.1669493750], [-75.9628000000, -5.1957300000], [-75.8954750000, -5.2245106250], [-75.8281500000, -5.2532912500], [-75.7608250000, -5.2820718750], [-75.6935000000, -5.3108525000], [-75.6261750000, -5.3396331250], [-75.5588500000, -5.3684137500], [-75.4915250000, -5.3971943750], [-75.4242000000, -5.4259750000], [-75.3568750000, -5.4547556250], [-75.2895500000, -5.4835362500], [-75.2222250000, -5.5123168750], [-75.1549000000, -5.5410975000], [-75.0875750000, -5.5698781250], [-75.0202500000, -5.5986587500], [-74.9529250000, -5.6274393750], [-74.8856000000, -5.6562200000], [-74.8780000000, -5.6592000000], [-74.7898125000, -5.6944259375], [-74.7016250000, -5.7296518750], [-74.6134375000, -5.7648778125], [-74.5252500000, -5.8001037500], [-74.4370625000, -5.8353296875], [-74.3488750000, -5.8705556250], [-74.2606875000, -5.9057815625], [-74.1725000000, -5.9410075000], [-74.0843125000, -5.9762334375], [-73.9961250000, -6.0114593750], [-73.9079375000, -6.0466853125], [-73.8197500000, -6.0819112500], [-73.7315625000, -6.1171371875], [-73.6433750000, -6.1523631250], [-73.5551875000, -6.1875890625], [-73.4670000000, -6.2228150000], [-73.3788125000, -6.2580409375], [-73.2906250000, -6.2932668750], [-73.2024375000, -6.3284928125], [-73.1142500000, -6.3637187500], [-73.0260625000, -6.3989446875], [-72.9378750000, -6.4341706250], [-72.8496875000, -6.4693965625], [-72.7615000000, -6.5046225000], [-72.6733125000, -6.5398484375], [-72.5851250000, -6.5750743750], [-72.4969375000, -6.6103003125], [-72.4087500000, -6.6455262500], [-72.3205625000, -6.6807521875], [-72.2323750000, -6.7159781250], [-72.1441875000, -6.7512040625], [-72.0560000000, -6.7864300000], [-72.0130000000, -6.8028000000], [-71.9493640625, -6.8269568750], [-71.8857281250, -6.8511137500], [-71.8220921875, -6.8752706250], [-71.7584562500, -6.8994275000], [-71.6948203125, -6.9235843750], [-71.6311843750, -6.9477412500], [-71.5675484375, -6.9718981250], [-71.5039125000, -6.9960550000], [-71.4402765625, -7.0202118750], [-71.3766406250, -7.0443687500], [-71.3130046875, -7.0685256250], [-71.2493687500, -7.0926825000], [-71.1857328125, -7.1168393750], [-71.1220968750, -7.1409962500], [-71.0584609375, -7.1651531250], [-70.9948250000, -7.1893100000], [-70.9311890625, -7.2134668750], [-70.8675531250, -7.2376237500], [-70.8039171875, -7.2617806250], [-70.7402812500, -7.2859375000], [-70.6766453125, -7.3100943750], [-70.6130093750, -7.3342512500], [-70.5493734375, -7.3584081250], [-70.4857375000, -7.3825650000], [-70.4221015625, -7.4067218750], [-70.3584656250, -7.4308787500], [-70.2948296875, -7.4550356250], [-70.2311937500, -7.4791925000], [-70.1675578125, -7.5033493750], [-70.1039218750, -7.5275062500], [-70.0402859375, -7.5516631250], [-69.9766500000, -7.5758200000], [-69.9130140625, -7.5999768750], [-69.8493781250, -7.6241337500], [-69.7857421875, -7.6482906250], [-69.7221062500, -7.6724475000], [-69.6584703125, -7.6966043750], [-69.5948343750, -7.7207612500], [-69.5311984375, -7.7449181250], [-69.4675625000, -7.7690750000], [-69.4039265625, -7.7932318750], [-69.3402906250, -7.8173887500], [-69.2766546875, -7.8415456250], [-69.2130187500, -7.8657025000], [-69.1493828125, -7.8898593750], [-69.0857468750, -7.9140162500], [-69.0221109375, -7.9381731250], [-68.9584750000, -7.9623300000], [-68.8948390625, -7.9864868750], [-68.8312031250, -8.0106437500], [-68.7675671875, -8.0348006250], [-68.7039312500, -8.0589575000], [-68.6402953125, -8.0831143750], [-68.5766593750, -8.1072712500], [-68.5130234375, -8.1314281250], [-68.4493875000, -8.1555850000], [-68.3857515625, -8.1797418750], [-68.3221156250, -8.2038987500], [-68.2584796875, -8.2280556250], [-68.1948437500, -8.2522125000], [-68.1312078125, -8.2763693750], [-68.0675718750, -8.3005262500], [-68.0039359375, -8.3246831250], [-67.9403000000, -8.3488400000], [-67.9390703125, -8.4064143750], [-67.9378406250, -8.4639887500], [-67.9366109375, -8.5215631250], [-67.9353812500, -8.5791375000], [-67.9341515625, -8.6367118750], [-67.9329218750, -8.6942862500], [-67.9316921875, -8.7518606250], [-67.9304625000, -8.8094350000], [-67.9292328125, -8.8670093750], [-67.9280031250, -8.9245837500], [-67.9267734375, -8.9821581250], [-67.9255437500, -9.0397325000], [-67.9243140625, -9.0973068750], [-67.9230843750, -9.1548812500], [-67.9218546875, -9.2124556250], [-67.9206250000, -9.2700300000], [-67.9193953125, -9.3276043750], [-67.9181656250, -9.3851787500], [-67.9169359375, -9.4427531250], [-67.9157062500, -9.5003275000], [-67.9144765625, -9.5579018750], [-67.9132468750, -9.6154762500], [-67.9120171875, -9.6730506250], [-67.9107875000, -9.7306250000], [-67.9095578125, -9.7881993750], [-67.9083281250, -9.8457737500], [-67.9070984375, -9.9033481250], [-67.9058687500, -9.9609225000], [-67.9046390625, -10.0184968750], [-67.9034093750, -10.0760712500], [-67.9021796875, -10.1336456250], [-67.9009500000, -10.1912200000], [-67.8997203125, -10.2487943750], [-67.8984906250, -10.3063687500], [-67.8972609375, -10.3639431250], [-67.8960312500, -10.4215175000], [-67.8948015625, -10.4790918750], [-67.8935718750, -10.5366662500], [-67.8923421875, -10.5942406250], [-67.8911125000, -10.6518150000], [-67.8898828125, -10.7093893750], [-67.8886531250, -10.7669637500], [-67.8874234375, -10.8245381250], [-67.8861937500, -10.8821125000], [-67.8849640625, -10.9396868750], [-67.8837343750, -10.9972612500], [-67.8825046875, -11.0548356250], [-67.8812750000, -11.1124100000], [-67.8800453125, -11.1699843750], [-67.8788156250, -11.2275587500], [-67.8775859375, -11.2851331250], [-67.8763562500, -11.3427075000], [-67.8751265625, -11.4002818750], [-67.8738968750, -11.4578562500], [-67.8726671875, -11.5154306250], [-67.8714375000, -11.5730050000], [-67.8702078125, -11.6305793750], [-67.8689781250, -11.6881537500], [-67.8677484375, -11.7457281250], [-67.8665187500, -11.8033025000], [-67.8652890625, -11.8608768750], [-67.8640593750, -11.9184512500], [-67.8628296875, -11.9760256250], [-67.8616000000, -12.0336000000], [-67.8619257812, -12.1041386719], [-67.8622515625, -12.1746773437], [-67.8625773438, -12.2452160156], [-67.8629031250, -12.3157546875], [-67.8632289063, -12.3862933594], [-67.8635546875, -12.4568320313], [-67.8638804687, -12.5273707031], [-67.8642062500, -12.5979093750], [-67.8645320312, -12.6684480469], [-67.8648578125, -12.7389867188], [-67.8651835938, -12.8095253906], [-67.8655093750, -12.8800640625], [-67.8658351563, -12.9506027344], [-67.8661609375, -13.0211414063], [-67.8664867188, -13.0916800781], [-67.8668125000, -13.1622187500], [-67.8671382813, -13.2327574219], [-67.8674640625, -13.3032960938], [-67.8677898438, -13.3738347656], [-67.8681156250, -13.4443734375], [-67.8684414062, -13.5149121094], [-67.8687671875, -13.5854507813], [-67.8690929688, -13.6559894531], [-67.8694187500, -13.7265281250], [-67.8697445313, -13.7970667969], [-67.8700703125, -13.8676054688], [-67.8703960938, -13.9381441406], [-67.8707218750, -14.0086828125], [-67.8710476563, -14.0792214844], [-67.8713734375, -14.1497601563], [-67.8716992188, -14.2202988281], [-67.8720250000, -14.2908375000], [-67.8723507813, -14.3613761719], [-67.8726765625, -14.4319148438], [-67.8730023438, -14.5024535156], [-67.8733281250, -14.5729921875], [-67.8736539062, -14.6435308594], [-67.8739796875, -14.7140695312], [-67.8743054688, -14.7846082031], [-67.8746312500, -14.8551468750], [-67.8749570313, -14.9256855469], [-67.8752828125, -14.9962242187], [-67.8756085938, -15.0667628906], [-67.8759343750, -15.1373015625], [-67.8762601563, -15.2078402344], [-67.8765859375, -15.2783789062], [-67.8769117188, -15.3489175781], [-67.8772375000, -15.4194562500], [-67.8775632813, -15.4899949219], [-67.8778890625, -15.5605335937], [-67.8782148438, -15.6310722656], [-67.8785406250, -15.7016109375], [-67.8788664062, -15.7721496094], [-67.8791921875, -15.8426882813], [-67.8795179688, -15.9132269531], [-67.8798437500, -15.9837656250], [-67.8801695313, -16.0543042969], [-67.8804953125, -16.1248429688], [-67.8808210938, -16.1953816406], [-67.8811468750, -16.2659203125], [-67.8814726563, -16.3364589844], [-67.8817984375, -16.4069976562], [-67.8821242188, -16.4775363281], [-67.8824500000, -16.5480750000], [-67.8827757813, -16.6186136719], [-67.8831015625, -16.6891523438], [-67.8834273438, -16.7596910156], [-67.8837531250, -16.8302296875], [-67.8840789062, -16.9007683594], [-67.8844046875, -16.9713070312], [-67.8847304688, -17.0418457031], [-67.8850562500, -17.1123843750], [-67.8853820313, -17.1829230469], [-67.8857078125, -17.2534617187], [-67.8860335938, -17.3240003906], [-67.8863593750, -17.3945390625], [-67.8866851563, -17.4650777344], [-67.8870109375, -17.5356164062], [-67.8873367188, -17.6061550781], [-67.8876625000, -17.6766937500], [-67.8879882813, -17.7472324219], [-67.8883140625, -17.8177710937], [-67.8886398437, -17.8883097656], [-67.8889656250, -17.9588484375], [-67.8892914062, -18.0293871094], [-67.8896171875, -18.0999257813], [-67.8899429688, -18.1704644531], [-67.8902687500, -18.2410031250], [-67.8905945313, -18.3115417969], [-67.8909203125, -18.3820804687], [-67.8912460938, -18.4526191406], [-67.8915718750, -18.5231578125], [-67.8918976563, -18.5936964844], [-67.8922234375, -18.6642351563], [-67.8925492188, -18.7347738281], [-67.8928750000, -18.8053125000], [-67.8932007813, -18.8758511719], [-67.8935265625, -18.9463898437], [-67.8938523437, -19.0169285156], [-67.8941781250, -19.0874671875], [-67.8945039062, -19.1580058594], [-67.8948296875, -19.2285445313], [-67.8951554688, -19.2990832031], [-67.8954812500, -19.3696218750], [-67.8958070313, -19.4401605469], [-67.8961328125, -19.5106992187], [-67.8964585938, -19.5812378906], [-67.8967843750, -19.6517765625], [-67.8971101563, -19.7223152344], [-67.8974359375, -19.7928539063], [-67.8977617188, -19.8633925781], [-67.8980875000, -19.9339312500], [-67.8984132813, -20.0044699219], [-67.8987390625, -20.0750085937], [-67.8990648437, -20.1455472656], [-67.8993906250, -20.2160859375], [-67.8997164062, -20.2866246094], [-67.9000421875, -20.3571632813], [-67.9003679688, -20.4277019531], [-67.9006937500, -20.4982406250], [-67.9010195313, -20.5687792969], [-67.9013453125, -20.6393179687], [-67.9016710938, -20.7098566406], [-67.9019968750, -20.7803953125], [-67.9023226563, -20.8509339844], [-67.9026484375, -20.9214726563], [-67.9029742188, -20.9920113281], [-67.9033000000, -21.0625500000], [-67.9036257812, -21.1330886719], [-67.9039515625, -21.2036273438], [-67.9042773437, -21.2741660156], [-67.9046031250, -21.3447046875], [-67.9049289062, -21.4152433594], [-67.9052546875, -21.4857820313], [-67.9055804688, -21.5563207031], [-67.9059062500, -21.6268593750], [-67.9062320312, -21.6973980469], [-67.9065578125, -21.7679367188], [-67.9068835938, -21.8384753906], [-67.9072093750, -21.9090140625], [-67.9075351563, -21.9795527344], [-67.9078609375, -22.0500914063], [-67.9081867188, -22.1206300781], [-67.9085125000, -22.1911687500], [-67.9088382812, -22.2617074219], [-67.9091640625, -22.3322460938], [-67.9094898437, -22.4027847656], [-67.9098156250, -22.4733234375], [-67.9101414062, -22.5438621094], [-67.9104671875, -22.6144007813], [-67.9107929688, -22.6849394531], [-67.9111187500, -22.7554781250], [-67.9114445312, -22.8260167969], [-67.9117703125, -22.8965554688], [-67.9120960938, -22.9670941406], [-67.9124218750, -23.0376328125], [-67.9127476563, -23.1081714844], [-67.9130734375, -23.1787101562], [-67.9133992188, -23.2492488281], [-67.9137250000, -23.3197875000], [-67.9140507812, -23.3903261719], [-67.9143765625, -23.4608648438], [-67.9147023437, -23.5314035156], [-67.9150281250, -23.6019421875], [-67.9153539062, -23.6724808594], [-67.9156796875, -23.7430195312], [-67.9160054688, -23.8135582031], [-67.9163312500, -23.8840968750], [-67.9166570312, -23.9546355469], [-67.9169828125, -24.0251742187], [-67.9173085938, -24.0957128906], [-67.9176343750, -24.1662515625], [-67.9179601563, -24.2367902344], [-67.9182859375, -24.3073289062], [-67.9186117188, -24.3778675781], [-67.9189375000, -24.4484062500], [-67.9192632812, -24.5189449219], [-67.9195890625, -24.5894835937], [-67.9199148437, -24.6600222656], [-67.9202406250, -24.7305609375], [-67.9205664062, -24.8010996094], [-67.9208921875, -24.8716382813], [-67.9212179687, -24.9421769531], [-67.9215437500, -25.0127156250], [-67.9218695312, -25.0832542969], [-67.9221953125, -25.1537929687], [-67.9225210938, -25.2243316406], [-67.9228468750, -25.2948703125], [-67.9231726563, -25.3654089844], [-67.9234984375, -25.4359476563], [-67.9238242187, -25.5064863281], [-67.9241500000, -25.5770250000], [-67.9244757812, -25.6475636719], [-67.9248015625, -25.7181023437], [-67.9251273437, -25.7886410156], [-67.9254531250, -25.8591796875], [-67.9257789062, -25.9297183594], [-67.9261046875, -26.0002570313], [-67.9264304687, -26.0707957031], [-67.9267562500, -26.1413343750], [-67.9270820312, -26.2118730469], [-67.9274078125, -26.2824117187], [-67.9277335938, -26.3529503906], [-67.9280593750, -26.4234890625], [-67.9283851563, -26.4940277344], [-67.9287109375, -26.5645664063], [-67.9290367187, -26.6351050781], [-67.9293625000, -26.7056437500], [-67.9296882812, -26.7761824219], [-67.9300140625, -26.8467210937], [-67.9303398437, -26.9172597656], [-67.9306656250, -26.9877984375], [-67.9309914062, -27.0583371094], [-67.9313171875, -27.1288757813], [-67.9316429687, -27.1994144531], [-67.9319687500, -27.2699531250], [-67.9322945312, -27.3404917969], [-67.9326203125, -27.4110304687], [-67.9329460938, -27.4815691406], [-67.9332718750, -27.5521078125], [-67.9335976563, -27.6226464844], [-67.9339234375, -27.6931851563], [-67.9342492187, -27.7637238281], [-67.9345750000, -27.8342625000], [-67.9349007812, -27.9048011719], [-67.9352265625, -27.9753398437], [-67.9355523437, -28.0458785156], [-67.9358781250, -28.1164171875], [-67.9362039062, -28.1869558594], [-67.9365296875, -28.2574945313], [-67.9368554687, -28.3280332031], [-67.9371812500, -28.3985718750], [-67.9375070312, -28.4691105469], [-67.9378328125, -28.5396492188], [-67.9381585938, -28.6101878906], [-67.9384843750, -28.6807265625], [-67.9388101562, -28.7512652344], [-67.9391359375, -28.8218039063], [-67.9394617187, -28.8923425781], [-67.9397875000, -28.9628812500], [-67.9401132812, -29.0334199219], [-67.9404390625, -29.1039585938], [-67.9407648437, -29.1744972656], [-67.9410906250, -29.2450359375], [-67.9414164062, -29.3155746094], [-67.9417421875, -29.3861132813], [-67.9420679687, -29.4566519531], [-67.9423937500, -29.5271906250], [-67.9427195312, -29.5977292969], [-67.9430453125, -29.6682679688], [-67.9433710938, -29.7388066406], [-67.9436968750, -29.8093453125], [-67.9440226562, -29.8798839844], [-67.9443484375, -29.9504226562], [-67.9446742187, -30.0209613281], [-67.9450000000, -30.0915000000], [-67.9427000000, -30.0918000000], [-67.8885125000, -30.0982421875], [-67.8343250000, -30.1046843750]]);
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
import math
import time

from stl import mesh, Dimension

from tkinter import Tk     # from tkinter import Tk for Python 3.x
from tkinter.filedialog import askopenfilename
from mpl_toolkits.mplot3d import art3d
from matplotlib import pyplot as plt
import solid
import os
import ezdxf
import shapely.geometry as sg
import subprocess
from GUI import getSCADPath



def outputSTL(From, To, PATH=getSCADPath()):
    subprocess.Popen(PATH + " -o " + To + " " + From)
    while not os.path.exists(To):
        time.sleep(1)


def get_size(i):
    x_list = [int(a) for a in str(i)]
    return len(x_list)



class Model:
    def __init__(self, model, fileName, location, layer, thickness):
        self.location = location
        self.code = None
        self.fileName = fileName
        self.stl = fileName + ".stl"
        self.layer = layer
        self.thickness = thickness
        self.maxz = (layer+1)*thickness
        self.dxf = fileName + ".dxf"
        self.scad = fileName + ".scad"
        self.model = model
        self.center = None
        self.width = 10
        self.mesh = None
        self.useable_area = None


    def get_code(self):
        max_dim = 0.05
        max_array = 6

        num = int(self.fileName)
        nums = [int(a) for a in str(num)]
        nums.reverse()
        indices = nums
        length = len(nums)

        print(indices)
        t = 0
        i = 0
        cubes = []
        x = 0
        y = 0
        width = 0.01
        while x <= max_dim:
            while y <= max_dim:
                print(indices)
                if nums == []:
                    break
                if indices[0] != 0:
                    cubes.append(solid.translate([x, y, 0])(solid.cube(size=t / 1000 + 0.001)))
                    y += max_dim / (max_array - 1)
                    nums[0] = nums[0] - 1
                else:
                    indices.pop(0)
                    t += 1
                i += 1
            x += max_dim / (max_array - 1)
            y = 0

        outside = solid.translate([-width / 2, -width / 2])(solid.cube(max_dim + (length - 1) / 1000 + 0.001 + width))
        self.code = solid.difference()(outside, cubes)
        self.code = solid.projection(cut=True)(self.code)
        solid.scad_render_to_file(self.code, self.location + "/code.scad")
        outputSTL(From=self.location+"/code.scad", To=self.location+"code.dxf", PATH=getSCADPath())
        # os.system("toSTL.sh renders/code.scad renders/code.dxf")
        return self.location+"/code.dxf"

    def download(self, type):
        if type =="stl":
            print("generating:" + self.location+"/"+ self.fileName+".stl")
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".stl")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".stl")
        elif type == "dxf":
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".dxf")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".dxf")

    def render(self):
        solid.scad_render_to_file(self.model, self.location+"/"+ self.fileName+'.scad')
        while not os.path.exists(self.location+"/"+self.fileName+".scad"):
            time.sleep(1)

    def get_points(self):
        doc = ezdxf.readfile(filename=self.location+"/"+ self.fileName+".dxf")
        msp = doc.modelspace()
        i=0
        lists = []
        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return [start, end]

        for e in msp.query("LINE"):
            line = helper(e)
            if not lists:
                lists.append([line])
            else:
                if lists[i][len(lists)-1][1] != line[0]:
                    lists.append([line])
                    i+=1
                else:
                    lists[i].append(line)

    def get_points2(self, FILE):
        doc = ezdxf.readfile(filename=FILE)
        msp = doc.modelspace()
        i = 0
        lists = []

        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return (start, end)

        for e in msp.query("LINE"):
            line = helper(e)
            if lists==[]:
                lists.append([line])
            else:
                if lists[i][len(lists[i]) - 1][1] != line[0]:
                    lists.append([line])
                    i += 1
                else:
                    lists[i].append(line)
        return lists

    def add_code(self):
        dxf = solid.projection(cut=False)(self.model)
        offset = solid.offset(r=-0.1)(dxf)
        solid.scad_render_to_file(offset, self.location+'/offset.scad')
        os.system("toSTL.sh renders/offset.scad renders/offset.dxf")
        lines = self.get_points2("renders/offset.dxf")
        x = lines[0][0][0][0]
        y = lines[0][0][0][1]
        print(x)
        print(y)
        code = solid.translate([x,y,0])(self.code)
        code = solid.linear_extrude(height=999)(code)
        save = self.model
        self.model = solid.projection()(solid.difference()(self.model, code))
        self.render()
        self.download("dxf")
        self.model = save

    def add_label(self, pos):
        # num = 12
        # minx, maxx, miny, maxy, minz, maxz = self.find_minmax()
        maxz = self.maxz
        # label = solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.5, halign="center"))
        # i=minx
        # print("x-len: " + str(maxx-minx))
        # print(i)
        # inc = (maxx-minx)/num
        # while minx <= i <= maxx:
        #     label = solid.union()(solid.translate([i, 0, maxz - 0.2])(solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.25, halign="center"))), label)
        #     i += inc
        #
        # l = label
        #
        # i =miny
        # while miny<= i <= maxy:
        #     print("y inc")
        #     l = solid.union()(solid.translate([0, i, 0])(label), l)
        #     i += 0.5
        for i in str(self.fileName):
            cur = pos[0]
            label = solid.translate([pos[0][0], pos[0][1], self.maxz-0.2])(solid.linear_extrude(height=(self.thickness)/3)(solid.text(str(i), size=0.5, halign="center", valign="center")))
            self.model = solid.difference()(self.model, label)
            pos.append(pos.pop(0))
            while abs(cur[0]-pos[0][0])<0.5 and abs(cur[1]-pos[0][1])<0.5:
                pos.append(pos.pop(0))



    def Center(self):

        volume, cog, inertia = self.mesh.get_mass_properties()
        print("Volume                                  = {0}".format(volume))
        print("Position of the center of gravity (COG) = {0}".format(cog))
        m_centered = solid.translate([-cog[0], -cog[1], 0])(
            self.model
        )
        return m_centered

    def find_minmax(self):
        minx = maxx = miny = maxy = minz = maxz = None
        for p in self.mesh.points:
            # p contains (x, y, z)
            if minx is None:
                minx = p[Dimension.X]
                maxx = p[Dimension.X]
                miny = p[Dimension.Y]
                maxy = p[Dimension.Y]
                minz = p[Dimension.Z]
                maxz = p[Dimension.Z]
            else:
                maxx = max(p[Dimension.X], maxx)
                minx = min(p[Dimension.X], minx)
                maxy = max(p[Dimension.Y], maxy)
                miny = min(p[Dimension.Y], miny)
                maxz = max(p[Dimension.Z], maxz)
                minz = min(p[Dimension.Z], minz)
        lenx = maxx - minx
        leny = maxy - miny
        lenz = maxz - minz
        return minx, maxx, miny, maxy, minz, maxz

    # def generate_Mesh(self):
    #     self.mesh = mesh.Mesh.from_file(self.location + "/" + str(int(self.fileName)//8)+ "b.stl")

    def get_top(self):
        top = solid.projection(cut=True)(solid.translate([0,0,-1*self.thickness*(self.layer+1)])(self.model))
        useable_area = solid.offset(r=-0.45)(top)
        self.useable_area = useable_area
        solid.scad_render_to_file(self.useable_area, self.location+'/' + 'toptemp.scad')
        outputSTL(From=self.location+'/' + 'toptemp.scad', To=self.location+"/top"+ self.dxf)

        # os.system("toSTL.sh out/toptemp.scad renders/" + self.fileName + ".dxf")
        dxf = DXF(self.location+"/top"+ self.dxf)
        min_p=dxf.points[0][0]
        points_ordered = dxf.points
        i=0
        while i <= len(dxf.points)+1:
            while math.sqrt((dxf.points[0][0]-dxf.points[1][0])**2+(dxf.points[0][1]-dxf.points[1][1])**2) > 0.1:
                dxf.points.insert(1, [(dxf.points[0][0]+dxf.points[1][0])/2, (dxf.points[0][1]+dxf.points[1][1])/2])
                i = i-1
            dxf.points.append(dxf.points.pop(0))
            i+=1
        for i in range(len(dxf.points)):
            dxf.points.append(dxf.points.pop(0))
            if dxf.points[0][0] < min_p:
                min_p = dxf.points[0][0]
                points_ordered = dxf.points.copy()
        dxf.points = points_ordered.copy()

        print(dxf.points)
        self.add_label(dxf.points)

class DXF:
    def __init__(self, file):
        self.file = file
        self.Lines = []
        self.points = []
        doc = ezdxf.readfile(self.file)
        msp = doc.modelspace()
        for e in msp:
            if e.dxftype() == "LINE":
                self.Lines.append(e)
                self.points.append([e.dxf.start[0], e.dxf.start[1]])
        # self.points.append([self.Lines[-1].dxf.end[0], self.Lines[-1].dxf.end[1]])
        self.area = None
        self.center = None
        self.polygon = sg.Polygon(self.points)

    def get_area(self):
        self.area = self.polygon.area
        return self.area

    def get_center(self):
        x_sum = 0
        y_sum =0
        for i in self.points:
            x_sum += i[0]
            y_sum += i[1]
        x_c = x_sum/len(self.points)
        y_c = y_sum/len(self.points)
        return (x_c, y_c)

    def split(self, maxdim):
        splits = []
        length = 0
        pieces = [[]]
        prev = self.points[0]
        for j in self.points:
            length = length + math.sqrt((prev[0]-j[0])**2+(prev[1]-j[1])**2)
            if length >= maxdim:
                pieces[-1].append(j)
                pieces.append([])
                length = 0
            pieces[-1].append(j)
            prev = j
        for j in pieces:
            j.insert(0, [0,0])
            piece = solid.linear_extrude(height=1)(solid.polygon(j))
            splits.append(piece)
        return splits
    def refine_points(self):
        i=0
        while i <= len(self.points)+1:
            while math.sqrt((self.points[0][0]-self.points[1][0])**2+(self.points[0][1]-self.points[1][1])**2) > 0.1:
                self.points.insert(1, [(self.points[0][0]+self.points[1][0])/2, (self.points[0][1]+self.points[1][1])/2])
                i = i-1
            self.points.append(self.points.pop(0))
            i+=1


if __name__== "__main__":
    test = DXF("C:/Users/Daniel/Documents/repos/Shell_Maker/output/0top_slice.dxf")
    test.refine_points()
    k = test.split(48)
    for i in range(len(k)):
        solid.scad_render_to_file(k[i], str(i) + ".scad")


 
 
************************************************/
