// Generated by SolidPython 1.1.3 on 2024-05-19 23:35:49


linear_extrude(height = 1) {
	polygon(points = [[0, 0], [28.2246843750, -32.4156218750], [28.3038128906, -32.4150144531], [28.3829414063, -32.4144070313], [28.4620699219, -32.4137996094], [28.5411984375, -32.4131921875], [28.6203269531, -32.4125847656], [28.6994554688, -32.4119773438], [28.7785839844, -32.4113699219], [28.8577125000, -32.4107625000], [28.9368410156, -32.4101550781], [29.0159695313, -32.4095476563], [29.0950980469, -32.4089402344], [29.1742265625, -32.4083328125], [29.2533550781, -32.4077253906], [29.3324835938, -32.4071179688], [29.4116121094, -32.4065105469], [29.4907406250, -32.4059031250], [29.5698691406, -32.4052957031], [29.6489976563, -32.4046882813], [29.7281261719, -32.4040808594], [29.8072546875, -32.4034734375], [29.8863832031, -32.4028660156], [29.9655117188, -32.4022585937], [30.0446402344, -32.4016511719], [30.1237687500, -32.4010437500], [30.2028972656, -32.4004363281], [30.2820257813, -32.3998289063], [30.3611542969, -32.3992214844], [30.4402828125, -32.3986140625], [30.5194113281, -32.3980066406], [30.5985398438, -32.3973992188], [30.6776683594, -32.3967917969], [30.7567968750, -32.3961843750], [30.8359253906, -32.3955769531], [30.9150539063, -32.3949695313], [30.9941824219, -32.3943621094], [31.0733109375, -32.3937546875], [31.1524394531, -32.3931472656], [31.2315679688, -32.3925398438], [31.3106964844, -32.3919324219], [31.3898250000, -32.3913250000], [31.4689535156, -32.3907175781], [31.5480820313, -32.3901101563], [31.6272105469, -32.3895027344], [31.7063390625, -32.3888953125], [31.7854675781, -32.3882878906], [31.8645960937, -32.3876804687], [31.9437246094, -32.3870730469], [32.0228531250, -32.3864656250], [32.1019816406, -32.3858582031], [32.1811101562, -32.3852507813], [32.2602386719, -32.3846433594], [32.3393671875, -32.3840359375], [32.4184957031, -32.3834285156], [32.4976242188, -32.3828210938], [32.5767527344, -32.3822136719], [32.6558812500, -32.3816062500], [32.7350097656, -32.3809988281], [32.8141382812, -32.3803914063], [32.8932667969, -32.3797839844], [32.9723953125, -32.3791765625], [33.0515238281, -32.3785691406], [33.1306523438, -32.3779617188], [33.2097808594, -32.3773542969], [33.2889093750, -32.3767468750], [33.3680378906, -32.3761394531], [33.4471664063, -32.3755320313], [33.5262949219, -32.3749246094], [33.6054234375, -32.3743171875], [33.6845519531, -32.3737097656], [33.7636804687, -32.3731023437], [33.8428089844, -32.3724949219], [33.9219375000, -32.3718875000], [34.0010660156, -32.3712800781], [34.0801945313, -32.3706726563], [34.1593230469, -32.3700652344], [34.2384515625, -32.3694578125], [34.3175800781, -32.3688503906], [34.3967085938, -32.3682429688], [34.4758371094, -32.3676355469], [34.5549656250, -32.3670281250], [34.6340941406, -32.3664207031], [34.7132226562, -32.3658132813], [34.7923511719, -32.3652058594], [34.8714796875, -32.3645984375], [34.9506082031, -32.3639910156], [35.0297367188, -32.3633835938], [35.1088652344, -32.3627761719], [35.1879937500, -32.3621687500], [35.2671222656, -32.3615613281], [35.3462507813, -32.3609539063], [35.4253792969, -32.3603464844], [35.5045078125, -32.3597390625], [35.5836363281, -32.3591316406], [35.6627648437, -32.3585242187], [35.7418933594, -32.3579167969], [35.8210218750, -32.3573093750], [35.9001503906, -32.3567019531], [35.9792789063, -32.3560945313], [36.0584074219, -32.3554871094], [36.1375359375, -32.3548796875], [36.2166644531, -32.3542722656], [36.2957929688, -32.3536648438], [36.3749214844, -32.3530574219], [36.4540500000, -32.3524500000], [36.5331785156, -32.3518425781], [36.6123070312, -32.3512351563], [36.6914355469, -32.3506277344], [36.7705640625, -32.3500203125], [36.8496925781, -32.3494128906], [36.9288210938, -32.3488054688], [37.0079496094, -32.3481980469], [37.0870781250, -32.3475906250], [37.1662066406, -32.3469832031], [37.2453351563, -32.3463757813], [37.3244636719, -32.3457683594], [37.4035921875, -32.3451609375], [37.4827207031, -32.3445535156], [37.5618492187, -32.3439460937], [37.6409777344, -32.3433386719], [37.7201062500, -32.3427312500], [37.7992347656, -32.3421238281], [37.8783632813, -32.3415164063], [37.9574917969, -32.3409089844], [38.0366203125, -32.3403015625], [38.1157488281, -32.3396941406], [38.1948773438, -32.3390867188], [38.2740058594, -32.3384792969], [38.3531343750, -32.3378718750], [38.4322628906, -32.3372644531], [38.5113914062, -32.3366570313], [38.5905199219, -32.3360496094], [38.6696484375, -32.3354421875], [38.7487769531, -32.3348347656], [38.8279054688, -32.3342273438], [38.9070339844, -32.3336199219], [38.9861625000, -32.3330125000], [39.0652910156, -32.3324050781], [39.1444195313, -32.3317976563], [39.2235480469, -32.3311902344], [39.3026765625, -32.3305828125], [39.3818050781, -32.3299753906], [39.4609335937, -32.3293679687], [39.5400621094, -32.3287605469], [39.6191906250, -32.3281531250], [39.6983191406, -32.3275457031], [39.7774476563, -32.3269382813], [39.8565761719, -32.3263308594], [39.9357046875, -32.3257234375], [40.0148332031, -32.3251160156], [40.0939617188, -32.3245085938], [40.1730902344, -32.3239011719], [40.2522187500, -32.3232937500], [40.3313472656, -32.3226863281], [40.4104757812, -32.3220789063], [40.4896042969, -32.3214714844], [40.5687328125, -32.3208640625], [40.6478613281, -32.3202566406], [40.7269898438, -32.3196492188], [40.8061183594, -32.3190417969], [40.8852468750, -32.3184343750], [40.9643753906, -32.3178269531], [41.0435039063, -32.3172195313], [41.1226324219, -32.3166121094], [41.2017609375, -32.3160046875], [41.2808894531, -32.3153972656], [41.3600179688, -32.3147898437], [41.4391464844, -32.3141824219], [41.5182750000, -32.3135750000], [41.5974035156, -32.3129675781], [41.6765320313, -32.3123601563], [41.7556605469, -32.3117527344], [41.8347890625, -32.3111453125], [41.9139175781, -32.3105378906], [41.9930460937, -32.3099304688], [42.0721746094, -32.3093230469], [42.1513031250, -32.3087156250], [42.2304316406, -32.3081082031], [42.3095601563, -32.3075007813], [42.3886886719, -32.3068933594], [42.4678171875, -32.3062859375], [42.5469457031, -32.3056785156], [42.6260742188, -32.3050710938], [42.7052027344, -32.3044636719], [42.7843312500, -32.3038562500], [42.8634597656, -32.3032488281], [42.9425882812, -32.3026414063], [43.0217167969, -32.3020339844], [43.1008453125, -32.3014265625], [43.1799738281, -32.3008191406], [43.2591023438, -32.3002117187], [43.3382308594, -32.2996042969], [43.4173593750, -32.2989968750], [43.4964878906, -32.2983894531], [43.5756164063, -32.2977820313], [43.6547449219, -32.2971746094], [43.7338734375, -32.2965671875], [43.8130019531, -32.2959597656], [43.8921304687, -32.2953523438], [43.9712589844, -32.2947449219], [44.0503875000, -32.2941375000], [44.1295160156, -32.2935300781], [44.2086445313, -32.2929226563], [44.2877730469, -32.2923152344], [44.3669015625, -32.2917078125], [44.4460300781, -32.2911003906], [44.5251585938, -32.2904929688], [44.6042871094, -32.2898855469], [44.6834156250, -32.2892781250], [44.7625441406, -32.2886707031], [44.8416726562, -32.2880632813], [44.9208011719, -32.2874558594], [44.9999296875, -32.2868484375], [45.0790582031, -32.2862410156], [45.1581867188, -32.2856335937], [45.2373152344, -32.2850261719], [45.3164437500, -32.2844187500], [45.3955722656, -32.2838113281], [45.4747007813, -32.2832039063], [45.5538292969, -32.2825964844], [45.6329578125, -32.2819890625], [45.7120863281, -32.2813816406], [45.7912148437, -32.2807742188], [45.8703433594, -32.2801667969], [45.9494718750, -32.2795593750], [46.0286003906, -32.2789519531], [46.1077289063, -32.2783445313], [46.1868574219, -32.2777371094], [46.2659859375, -32.2771296875], [46.3451144531, -32.2765222656], [46.4242429688, -32.2759148438], [46.5033714844, -32.2753074219], [46.5825000000, -32.2747000000], [46.6598500000, -32.2741062500], [46.7372000000, -32.2735125000], [46.8145500000, -32.2729187500], [46.8919000000, -32.2723250000], [46.9692500000, -32.2717312500], [47.0466000000, -32.2711375000], [47.1239500000, -32.2705437500], [47.2013000000, -32.2699500000], [47.2786500000, -32.2693562500], [47.3560000000, -32.2687625000], [47.4333500000, -32.2681687500], [47.5107000000, -32.2675750000], [47.5880500000, -32.2669812500], [47.6654000000, -32.2663875000], [47.7427500000, -32.2657937500], [47.8201000000, -32.2652000000], [47.9144859375, -32.2620242187], [48.0088718750, -32.2588484375], [48.1032578125, -32.2556726563], [48.1976437500, -32.2524968750], [48.2920296875, -32.2493210938], [48.3864156250, -32.2461453125], [48.4808015625, -32.2429695313], [48.5751875000, -32.2397937500], [48.6695734375, -32.2366179688], [48.7639593750, -32.2334421875], [48.8583453125, -32.2302664063], [48.9527312500, -32.2270906250], [49.0471171875, -32.2239148438], [49.1415031250, -32.2207390625], [49.2358890625, -32.2175632813], [49.3302750000, -32.2143875000], [49.4246609375, -32.2112117188], [49.5190468750, -32.2080359375], [49.6134328125, -32.2048601562], [49.7078187500, -32.2016843750], [49.8022046875, -32.1985085937], [49.8965906250, -32.1953328125], [49.9909765625, -32.1921570312], [50.0853625000, -32.1889812500], [50.1797484375, -32.1858054687], [50.2741343750, -32.1826296875], [50.3685203125, -32.1794539062], [50.4629062500, -32.1762781250], [50.5572921875, -32.1731023437], [50.6516781250, -32.1699265625], [50.7460640625, -32.1667507812], [50.8404500000, -32.1635750000], [50.9348359375, -32.1603992187], [51.0292218750, -32.1572234375], [51.1236078125, -32.1540476562], [51.2179937500, -32.1508718750], [51.3123796875, -32.1476960937], [51.4067656250, -32.1445203125], [51.5011515625, -32.1413445312], [51.5955375000, -32.1381687500], [51.6899234375, -32.1349929687], [51.7843093750, -32.1318171875], [51.8786953125, -32.1286414062], [51.9730812500, -32.1254656250], [52.0674671875, -32.1222898437], [52.1618531250, -32.1191140625], [52.2562390625, -32.1159382812], [52.3506250000, -32.1127625000], [52.4450109375, -32.1095867187], [52.5393968750, -32.1064109375], [52.6337828125, -32.1032351563], [52.7281687500, -32.1000593750], [52.8225546875, -32.0968835938], [52.9169406250, -32.0937078125], [53.0113265625, -32.0905320312], [53.1057125000, -32.0873562500], [53.2000984375, -32.0841804687], [53.2944843750, -32.0810046875], [53.3888703125, -32.0778289062], [53.4832562500, -32.0746531250], [53.5776421875, -32.0714773437], [53.6720281250, -32.0683015625], [53.7664140625, -32.0651257812], [53.8608000000, -32.0619500000], [53.9551859375, -32.0587742187], [54.0495718750, -32.0555984375], [54.1439578125, -32.0524226562], [54.2383437500, -32.0492468750], [54.3327296875, -32.0460710937], [54.4271156250, -32.0428953125], [54.5215015625, -32.0397195312], [54.6158875000, -32.0365437500], [54.7102734375, -32.0333679687], [54.8046593750, -32.0301921875], [54.8990453125, -32.0270164062], [54.9934312500, -32.0238406250], [55.0878171875, -32.0206648437], [55.1822031250, -32.0174890625], [55.2765890625, -32.0143132812], [55.3709750000, -32.0111375000], [55.4653609375, -32.0079617187], [55.5597468750, -32.0047859375], [55.6541328125, -32.0016101562], [55.7485187500, -31.9984343750], [55.8429046875, -31.9952585937], [55.9372906250, -31.9920828125], [56.0316765625, -31.9889070312], [56.1260625000, -31.9857312500], [56.2204484375, -31.9825554688], [56.3148343750, -31.9793796875], [56.4092203125, -31.9762039062], [56.5036062500, -31.9730281250], [56.5979921875, -31.9698523437], [56.6923781250, -31.9666765625], [56.7867640625, -31.9635007812], [56.8811500000, -31.9603250000], [56.9755359375, -31.9571492187], [57.0699218750, -31.9539734375], [57.1643078125, -31.9507976562], [57.2586937500, -31.9476218750], [57.3530796875, -31.9444460937], [57.4474656250, -31.9412703125], [57.5418515625, -31.9380945312], [57.6362375000, -31.9349187500], [57.7306234375, -31.9317429688], [57.8250093750, -31.9285671875], [57.9193953125, -31.9253914063], [58.0137812500, -31.9222156250], [58.1081671875, -31.9190398437], [58.2025531250, -31.9158640625], [58.2969390625, -31.9126882812], [58.3913250000, -31.9095125000], [58.4857109375, -31.9063367187], [58.5800968750, -31.9031609375], [58.6744828125, -31.8999851562], [58.7688687500, -31.8968093750], [58.8632546875, -31.8936335937], [58.9576406250, -31.8904578125], [59.0520265625, -31.8872820312], [59.1464125000, -31.8841062500], [59.2407984375, -31.8809304688], [59.3351843750, -31.8777546875], [59.4295703125, -31.8745789063], [59.5239562500, -31.8714031250], [59.6183421875, -31.8682273438], [59.7127281250, -31.8650515625], [59.8071140625, -31.8618757812], [59.9015000000, -31.8587000000], [59.9970562500, -31.8554875000], [60.0926125000, -31.8522750000], [60.1881687500, -31.8490625000], [60.2837250000, -31.8458500000], [60.3792812500, -31.8426375000], [60.4748375000, -31.8394250000], [60.5703937500, -31.8362125000], [60.6659500000, -31.8330000000], [60.7615062500, -31.8297875000], [60.8570625000, -31.8265750000], [60.9526187500, -31.8233625000], [61.0481750000, -31.8201500000], [61.1437312500, -31.8169375000], [61.2392875000, -31.8137250000], [61.3348437500, -31.8105125000], [61.4304000000, -31.8073000000], [61.5259562500, -31.8040875000], [61.6215125000, -31.8008750000], [61.7170687500, -31.7976625000], [61.8126250000, -31.7944500000], [61.9081812500, -31.7912375000], [62.0037375000, -31.7880250000], [62.0992937500, -31.7848125000], [62.1948500000, -31.7816000000], [62.2904062500, -31.7783875000], [62.3859625000, -31.7751750000], [62.4815187500, -31.7719625000], [62.5770750000, -31.7687500000], [62.6726312500, -31.7655375000], [62.7681875000, -31.7623250000], [62.8637437500, -31.7591125000], [62.9593000000, -31.7559000000], [63.0493953125, -31.7495718750], [63.1394906250, -31.7432437500], [63.2295859375, -31.7369156250], [63.3196812500, -31.7305875000], [63.4097765625, -31.7242593750], [63.4998718750, -31.7179312500], [63.5899671875, -31.7116031250], [63.6800625000, -31.7052750000], [63.7701578125, -31.6989468750], [63.8602531250, -31.6926187500], [63.9503484375, -31.6862906250], [64.0404437500, -31.6799625000], [64.1305390625, -31.6736343750], [64.2206343750, -31.6673062500], [64.3107296875, -31.6609781250], [64.4008250000, -31.6546500000], [64.4909203125, -31.6483218750], [64.5810156250, -31.6419937500], [64.6711109375, -31.6356656250], [64.7612062500, -31.6293375000], [64.8513015625, -31.6230093750], [64.9413968750, -31.6166812500], [65.0314921875, -31.6103531250], [65.1215875000, -31.6040250000], [65.2116828125, -31.5976968750], [65.3017781250, -31.5913687500], [65.3918734375, -31.5850406250], [65.4819687500, -31.5787125000], [65.5720640625, -31.5723843750], [65.6621593750, -31.5660562500], [65.7522546875, -31.5597281250], [65.8423500000, -31.5534000000], [65.9324453125, -31.5470718750], [66.0225406250, -31.5407437500], [66.1126359375, -31.5344156250], [66.2027312500, -31.5280875000], [66.2928265625, -31.5217593750], [66.3829218750, -31.5154312500], [66.4730171875, -31.5091031250], [66.5631125000, -31.5027750000], [66.6532078125, -31.4964468750], [66.7433031250, -31.4901187500], [66.8333984375, -31.4837906250], [66.9234937500, -31.4774625000], [67.0135890625, -31.4711343750], [67.1036843750, -31.4648062500], [67.1937796875, -31.4584781250], [67.2838750000, -31.4521500000], [67.3739703125, -31.4458218750], [67.4640656250, -31.4394937500], [67.5541609375, -31.4331656250], [67.6442562500, -31.4268375000], [67.7343515625, -31.4205093750], [67.8244468750, -31.4141812500], [67.9145421875, -31.4078531250], [68.0046375000, -31.4015250000], [68.0947328125, -31.3951968750], [68.1848281250, -31.3888687500], [68.2749234375, -31.3825406250], [68.3650187500, -31.3762125000], [68.4551140625, -31.3698843750], [68.5452093750, -31.3635562500], [68.6353046875, -31.3572281250], [68.7254000000, -31.3509000000], [68.8049750000, -31.3453109375], [68.8845500000, -31.3397218750], [68.9641250000, -31.3341328125], [69.0437000000, -31.3285437500], [69.1232750000, -31.3229546875], [69.2028500000, -31.3173656250], [69.2824250000, -31.3117765625], [69.3620000000, -31.3061875000], [69.4415750000, -31.3005984375], [69.5211500000, -31.2950093750], [69.6007250000, -31.2894203125], [69.6803000000, -31.2838312500], [69.7598750000, -31.2782421875], [69.8394500000, -31.2726531250], [69.9190250000, -31.2670640625], [69.9986000000, -31.2614750000], [70.0781750000, -31.2558859375], [70.1577500000, -31.2502968750], [70.2373250000, -31.2447078125], [70.3169000000, -31.2391187500], [70.3964750000, -31.2335296875], [70.4760500000, -31.2279406250], [70.5556250000, -31.2223515625], [70.6352000000, -31.2167625000], [70.7147750000, -31.2111734375], [70.7943500000, -31.2055843750], [70.8739250000, -31.1999953125], [70.9535000000, -31.1944062500], [71.0330750000, -31.1888171875], [71.1126500000, -31.1832281250], [71.1922250000, -31.1776390625], [71.2718000000, -31.1720500000], [71.3513750000, -31.1664609375], [71.4309500000, -31.1608718750], [71.5105250000, -31.1552828125], [71.5901000000, -31.1496937500], [71.6696750000, -31.1441046875], [71.7492500000, -31.1385156250], [71.8288250000, -31.1329265625], [71.9084000000, -31.1273375000], [71.9879750000, -31.1217484375], [72.0675500000, -31.1161593750], [72.1471250000, -31.1105703125], [72.2267000000, -31.1049812500], [72.3062750000, -31.0993921875], [72.3858500000, -31.0938031250], [72.4654250000, -31.0882140625], [72.5450000000, -31.0826250000], [72.6245750000, -31.0770359375], [72.7041500000, -31.0714468750], [72.7837250000, -31.0658578125], [72.8633000000, -31.0602687500], [72.9428750000, -31.0546796875], [73.0224500000, -31.0490906250], [73.1020250000, -31.0435015625], [73.1816000000, -31.0379125000], [73.2611750000, -31.0323234375], [73.3407500000, -31.0267343750], [73.4203250000, -31.0211453125], [73.4999000000, -31.0155562500], [73.5794750000, -31.0099671875], [73.6590500000, -31.0043781250], [73.7386250000, -30.9987890625], [73.8182000000, -30.9932000000], [73.8795750000, -30.9859250000], [73.9409500000, -30.9786500000], [74.0023250000, -30.9713750000], [74.0637000000, -30.9641000000], [74.1212375000, -30.9572875000], [74.1787750000, -30.9504750000], [74.2363125000, -30.9436625000], [74.2938500000, -30.9368500000], [74.3513875000, -30.9300375000], [74.4089250000, -30.9232250000], [74.4664625000, -30.9164125000], [74.5240000000, -30.9096000000], [74.6106375000, -30.8943187500], [74.6972750000, -30.8790375000], [74.7839125000, -30.8637562500], [74.8705500000, -30.8484750000], [74.9571875000, -30.8331937500], [75.0438250000, -30.8179125000], [75.1304625000, -30.8026312500], [75.2171000000, -30.7873500000], [75.3037375000, -30.7720687500], [75.3903750000, -30.7567875000], [75.4770125000, -30.7415062500], [75.5636500000, -30.7262250000], [75.6502875000, -30.7109437500], [75.7369250000, -30.6956625000], [75.8235625000, -30.6803812500], [75.9102000000, -30.6651000000], [75.9655187500, -30.6553375000], [76.0208375000, -30.6455750000], [76.0761562500, -30.6358125000], [76.1314750000, -30.6260500000], [76.1867937500, -30.6162875000]]);
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
import math
import time

from stl import mesh, Dimension

from tkinter import Tk     # from tkinter import Tk for Python 3.x
from tkinter.filedialog import askopenfilename
from mpl_toolkits.mplot3d import art3d
from matplotlib import pyplot as plt
import solid
import os
import ezdxf
import shapely.geometry as sg
import subprocess
from GUI import getSCADPath



def outputSTL(From, To, PATH=getSCADPath()):
    subprocess.Popen(PATH + " -o " + To + " " + From)
    while not os.path.exists(To):
        time.sleep(1)


def get_size(i):
    x_list = [int(a) for a in str(i)]
    return len(x_list)



class Model:
    def __init__(self, model, fileName, location, layer, thickness):
        self.location = location
        self.code = None
        self.fileName = fileName
        self.stl = fileName + ".stl"
        self.layer = layer
        self.thickness = thickness
        self.maxz = (layer+1)*thickness
        self.dxf = fileName + ".dxf"
        self.scad = fileName + ".scad"
        self.model = model
        self.center = None
        self.width = 10
        self.mesh = None
        self.useable_area = None


    def get_code(self):
        max_dim = 0.05
        max_array = 6

        num = int(self.fileName)
        nums = [int(a) for a in str(num)]
        nums.reverse()
        indices = nums
        length = len(nums)

        print(indices)
        t = 0
        i = 0
        cubes = []
        x = 0
        y = 0
        width = 0.01
        while x <= max_dim:
            while y <= max_dim:
                print(indices)
                if nums == []:
                    break
                if indices[0] != 0:
                    cubes.append(solid.translate([x, y, 0])(solid.cube(size=t / 1000 + 0.001)))
                    y += max_dim / (max_array - 1)
                    nums[0] = nums[0] - 1
                else:
                    indices.pop(0)
                    t += 1
                i += 1
            x += max_dim / (max_array - 1)
            y = 0

        outside = solid.translate([-width / 2, -width / 2])(solid.cube(max_dim + (length - 1) / 1000 + 0.001 + width))
        self.code = solid.difference()(outside, cubes)
        self.code = solid.projection(cut=True)(self.code)
        solid.scad_render_to_file(self.code, self.location + "/code.scad")
        outputSTL(From=self.location+"/code.scad", To=self.location+"code.dxf", PATH=getSCADPath())
        # os.system("toSTL.sh renders/code.scad renders/code.dxf")
        return self.location+"/code.dxf"

    def download(self, type):
        if type =="stl":
            print("generating:" + self.location+"/"+ self.fileName+".stl")
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".stl")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".stl")
        elif type == "dxf":
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".dxf")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".dxf")

    def render(self):
        solid.scad_render_to_file(self.model, self.location+"/"+ self.fileName+'.scad')
        while not os.path.exists(self.location+"/"+self.fileName+".scad"):
            time.sleep(1)

    def get_points(self):
        doc = ezdxf.readfile(filename=self.location+"/"+ self.fileName+".dxf")
        msp = doc.modelspace()
        i=0
        lists = []
        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return [start, end]

        for e in msp.query("LINE"):
            line = helper(e)
            if not lists:
                lists.append([line])
            else:
                if lists[i][len(lists)-1][1] != line[0]:
                    lists.append([line])
                    i+=1
                else:
                    lists[i].append(line)

    def get_points2(self, FILE):
        doc = ezdxf.readfile(filename=FILE)
        msp = doc.modelspace()
        i = 0
        lists = []

        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return (start, end)

        for e in msp.query("LINE"):
            line = helper(e)
            if lists==[]:
                lists.append([line])
            else:
                if lists[i][len(lists[i]) - 1][1] != line[0]:
                    lists.append([line])
                    i += 1
                else:
                    lists[i].append(line)
        return lists

    def add_code(self):
        dxf = solid.projection(cut=False)(self.model)
        offset = solid.offset(r=-0.1)(dxf)
        solid.scad_render_to_file(offset, self.location+'/offset.scad')
        os.system("toSTL.sh renders/offset.scad renders/offset.dxf")
        lines = self.get_points2("renders/offset.dxf")
        x = lines[0][0][0][0]
        y = lines[0][0][0][1]
        print(x)
        print(y)
        code = solid.translate([x,y,0])(self.code)
        code = solid.linear_extrude(height=999)(code)
        save = self.model
        self.model = solid.projection()(solid.difference()(self.model, code))
        self.render()
        self.download("dxf")
        self.model = save

    def add_label(self, pos):
        # num = 12
        # minx, maxx, miny, maxy, minz, maxz = self.find_minmax()
        maxz = self.maxz
        # label = solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.5, halign="center"))
        # i=minx
        # print("x-len: " + str(maxx-minx))
        # print(i)
        # inc = (maxx-minx)/num
        # while minx <= i <= maxx:
        #     label = solid.union()(solid.translate([i, 0, maxz - 0.2])(solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.25, halign="center"))), label)
        #     i += inc
        #
        # l = label
        #
        # i =miny
        # while miny<= i <= maxy:
        #     print("y inc")
        #     l = solid.union()(solid.translate([0, i, 0])(label), l)
        #     i += 0.5
        for i in str(self.fileName):
            cur = pos[0]
            label = solid.translate([pos[0][0], pos[0][1], self.maxz-0.2])(solid.linear_extrude(height=(self.thickness)/3)(solid.text(str(i), size=0.5, halign="center", valign="center")))
            self.model = solid.difference()(self.model, label)
            pos.append(pos.pop(0))
            while abs(cur[0]-pos[0][0])<0.5 and abs(cur[1]-pos[0][1])<0.5:
                pos.append(pos.pop(0))



    def Center(self):

        volume, cog, inertia = self.mesh.get_mass_properties()
        print("Volume                                  = {0}".format(volume))
        print("Position of the center of gravity (COG) = {0}".format(cog))
        m_centered = solid.translate([-cog[0], -cog[1], 0])(
            self.model
        )
        return m_centered

    def find_minmax(self):
        minx = maxx = miny = maxy = minz = maxz = None
        for p in self.mesh.points:
            # p contains (x, y, z)
            if minx is None:
                minx = p[Dimension.X]
                maxx = p[Dimension.X]
                miny = p[Dimension.Y]
                maxy = p[Dimension.Y]
                minz = p[Dimension.Z]
                maxz = p[Dimension.Z]
            else:
                maxx = max(p[Dimension.X], maxx)
                minx = min(p[Dimension.X], minx)
                maxy = max(p[Dimension.Y], maxy)
                miny = min(p[Dimension.Y], miny)
                maxz = max(p[Dimension.Z], maxz)
                minz = min(p[Dimension.Z], minz)
        lenx = maxx - minx
        leny = maxy - miny
        lenz = maxz - minz
        return minx, maxx, miny, maxy, minz, maxz

    # def generate_Mesh(self):
    #     self.mesh = mesh.Mesh.from_file(self.location + "/" + str(int(self.fileName)//8)+ "b.stl")

    def get_top(self):
        top = solid.projection(cut=True)(solid.translate([0,0,-1*self.thickness*(self.layer+1)])(self.model))
        useable_area = solid.offset(r=-0.45)(top)
        self.useable_area = useable_area
        solid.scad_render_to_file(self.useable_area, self.location+'/' + 'toptemp.scad')
        outputSTL(From=self.location+'/' + 'toptemp.scad', To=self.location+"/top"+ self.dxf)

        # os.system("toSTL.sh out/toptemp.scad renders/" + self.fileName + ".dxf")
        dxf = DXF(self.location+"/top"+ self.dxf)
        min_p=dxf.points[0][0]
        points_ordered = dxf.points
        i=0
        while i <= len(dxf.points)+1:
            while math.sqrt((dxf.points[0][0]-dxf.points[1][0])**2+(dxf.points[0][1]-dxf.points[1][1])**2) > 0.1:
                dxf.points.insert(1, [(dxf.points[0][0]+dxf.points[1][0])/2, (dxf.points[0][1]+dxf.points[1][1])/2])
                i = i-1
            dxf.points.append(dxf.points.pop(0))
            i+=1
        for i in range(len(dxf.points)):
            dxf.points.append(dxf.points.pop(0))
            if dxf.points[0][0] < min_p:
                min_p = dxf.points[0][0]
                points_ordered = dxf.points.copy()
        dxf.points = points_ordered.copy()

        print(dxf.points)
        self.add_label(dxf.points)

class DXF:
    def __init__(self, file):
        self.file = file
        self.Lines = []
        self.points = []
        doc = ezdxf.readfile(self.file)
        msp = doc.modelspace()
        for e in msp:
            if e.dxftype() == "LINE":
                self.Lines.append(e)
                self.points.append([e.dxf.start[0], e.dxf.start[1]])
        # self.points.append([self.Lines[-1].dxf.end[0], self.Lines[-1].dxf.end[1]])
        self.area = None
        self.center = None
        self.polygon = sg.Polygon(self.points)

    def get_area(self):
        self.area = self.polygon.area
        return self.area

    def get_center(self):
        x_sum = 0
        y_sum =0
        for i in self.points:
            x_sum += i[0]
            y_sum += i[1]
        x_c = x_sum/len(self.points)
        y_c = y_sum/len(self.points)
        return (x_c, y_c)

    def split(self, maxdim):
        splits = []
        length = 0
        pieces = [[]]
        prev = self.points[0]
        for j in self.points:
            length = length + math.sqrt((prev[0]-j[0])**2+(prev[1]-j[1])**2)
            if length >= maxdim:
                pieces[-1].append(j)
                pieces.append([])
                length = 0
            pieces[-1].append(j)
            prev = j
        for j in pieces:
            j.insert(0, [0,0])
            piece = solid.linear_extrude(height=1)(solid.polygon(j))
            splits.append(piece)
        return splits
    def refine_points(self):
        i=0
        while i <= len(self.points)+1:
            while math.sqrt((self.points[0][0]-self.points[1][0])**2+(self.points[0][1]-self.points[1][1])**2) > 0.1:
                self.points.insert(1, [(self.points[0][0]+self.points[1][0])/2, (self.points[0][1]+self.points[1][1])/2])
                i = i-1
            self.points.append(self.points.pop(0))
            i+=1


if __name__== "__main__":
    test = DXF("C:/Users/Daniel/Documents/repos/Shell_Maker/output/0top_slice.dxf")
    test.refine_points()
    k = test.split(48)
    for i in range(len(k)):
        solid.scad_render_to_file(k[i], str(i) + ".scad")


 
 
************************************************/
