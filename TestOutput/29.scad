// Generated by SolidPython 1.1.3 on 2024-05-26 02:00:37


intersection() {
	difference() {
		intersection() {
			translate(v = [0, 0, 0]) {
				import(file = "CE3E3V2_Bottom_shell.stl", origin = [0, 0]);
			}
			translate(v = [-90.04029846191406, -32.690147399902344, 6]) {
				cube(size = [180.0806, 65.380295, 2]);
			}
		}
		linear_extrude(height = 999) {
			offset(r = -1) {
				import(file = "C:/Users/Daniel/Documents/repos/Shell_Maker/TestOutput/3top_slice.dxf", origin = [0, 0]);
			}
		}
	}
	translate(v = [0, 0, 6]) {
		linear_extrude(height = 10) {
			polygon(points = [[0, 0], [3.0032575000, 26.6336250000], [2.9173840625, 26.6204093750], [2.8315106250, 26.6071937500], [2.7456371875, 26.5939781250], [2.6597637500, 26.5807625000], [2.5738903125, 26.5675468750], [2.4880168750, 26.5543312500], [2.4021434375, 26.5411156250], [2.3162700000, 26.5279000000], [2.2608793750, 26.5189562500], [2.2054887500, 26.5100125000], [2.1500981250, 26.5010687500], [2.0947075000, 26.4921250000], [2.0393168750, 26.4831812500], [1.9839262500, 26.4742375000], [1.9285356250, 26.4652937500], [1.8731450000, 26.4563500000], [1.8177543750, 26.4474062500], [1.7623637500, 26.4384625000], [1.7069731250, 26.4295187500], [1.6515825000, 26.4205750000], [1.5961918750, 26.4116312500], [1.5408012500, 26.4026875000], [1.4854106250, 26.3937437500], [1.4300200000, 26.3848000000], [1.3751203125, 26.3755468750], [1.3202206250, 26.3662937500], [1.2653209375, 26.3570406250], [1.2104212500, 26.3477875000], [1.1555215625, 26.3385343750], [1.1006218750, 26.3292812500], [1.0457221875, 26.3200281250], [0.9908225000, 26.3107750000], [0.9359228125, 26.3015218750], [0.8810231250, 26.2922687500], [0.8261234375, 26.2830156250], [0.7712237500, 26.2737625000], [0.7163240625, 26.2645093750], [0.6614243750, 26.2552562500], [0.6065246875, 26.2460031250], [0.5516250000, 26.2367500000], [0.4967253125, 26.2274968750], [0.4418256250, 26.2182437500], [0.3869259375, 26.2089906250], [0.3320262500, 26.1997375000], [0.2771265625, 26.1904843750], [0.2222268750, 26.1812312500], [0.1673271875, 26.1719781250], [0.1124275000, 26.1627250000], [0.0575278125, 26.1534718750], [0.0026281250, 26.1442187500], [-0.0522715625, 26.1349656250], [-0.1071712500, 26.1257125000], [-0.1620709375, 26.1164593750], [-0.2169706250, 26.1072062500], [-0.2718703125, 26.0979531250], [-0.3267700000, 26.0887000000], [-0.3816696875, 26.0794468750], [-0.4365693750, 26.0701937500], [-0.4914690625, 26.0609406250], [-0.5463687500, 26.0516875000], [-0.6012684375, 26.0424343750], [-0.6561681250, 26.0331812500], [-0.7110678125, 26.0239281250], [-0.7659675000, 26.0146750000], [-0.8208671875, 26.0054218750], [-0.8757668750, 25.9961687500], [-0.9306665625, 25.9869156250], [-0.9855662500, 25.9776625000], [-1.0404659375, 25.9684093750], [-1.0953656250, 25.9591562500], [-1.1502653125, 25.9499031250], [-1.2051650000, 25.9406500000], [-1.2600646875, 25.9313968750], [-1.3149643750, 25.9221437500], [-1.3698640625, 25.9128906250], [-1.4247637500, 25.9036375000], [-1.4796634375, 25.8943843750], [-1.5345631250, 25.8851312500], [-1.5894628125, 25.8758781250], [-1.6443625000, 25.8666250000], [-1.6992621875, 25.8573718750], [-1.7541618750, 25.8481187500], [-1.8090615625, 25.8388656250], [-1.8639612500, 25.8296125000], [-1.9188609375, 25.8203593750], [-1.9737606250, 25.8111062500], [-2.0286603125, 25.8018531250], [-2.0835600000, 25.7926000000], [-2.1384596875, 25.7833468750], [-2.1933593750, 25.7740937500], [-2.2482590625, 25.7648406250], [-2.3031587500, 25.7555875000], [-2.3580584375, 25.7463343750], [-2.4129581250, 25.7370812500], [-2.4678578125, 25.7278281250], [-2.5227575000, 25.7185750000], [-2.5776571875, 25.7093218750], [-2.6325568750, 25.7000687500], [-2.6874565625, 25.6908156250], [-2.7423562500, 25.6815625000], [-2.7972559375, 25.6723093750], [-2.8521556250, 25.6630562500], [-2.9070553125, 25.6538031250], [-2.9619550000, 25.6445500000], [-3.0168546875, 25.6352968750], [-3.0717543750, 25.6260437500], [-3.1266540625, 25.6167906250], [-3.1815537500, 25.6075375000], [-3.2364534375, 25.5982843750], [-3.2913531250, 25.5890312500], [-3.3462528125, 25.5797781250], [-3.4011525000, 25.5705250000], [-3.4560521875, 25.5612718750], [-3.5109518750, 25.5520187500], [-3.5658515625, 25.5427656250], [-3.6207512500, 25.5335125000], [-3.6756509375, 25.5242593750], [-3.7305506250, 25.5150062500], [-3.7854503125, 25.5057531250], [-3.8403500000, 25.4965000000], [-3.8952496875, 25.4872468750], [-3.9501493750, 25.4779937500], [-4.0050490625, 25.4687406250], [-4.0599487500, 25.4594875000], [-4.1148484375, 25.4502343750], [-4.1697481250, 25.4409812500], [-4.2246478125, 25.4317281250], [-4.2795475000, 25.4224750000], [-4.3344471875, 25.4132218750], [-4.3893468750, 25.4039687500], [-4.4442465625, 25.3947156250], [-4.4991462500, 25.3854625000], [-4.5540459375, 25.3762093750], [-4.6089456250, 25.3669562500], [-4.6638453125, 25.3577031250], [-4.7187450000, 25.3484500000], [-4.7736446875, 25.3391968750], [-4.8285443750, 25.3299437500], [-4.8834440625, 25.3206906250], [-4.9383437500, 25.3114375000], [-4.9932434375, 25.3021843750], [-5.0481431250, 25.2929312500], [-5.1030428125, 25.2836781250], [-5.1579425000, 25.2744250000], [-5.2128421875, 25.2651718750], [-5.2677418750, 25.2559187500], [-5.3226415625, 25.2466656250], [-5.3775412500, 25.2374125000], [-5.4324409375, 25.2281593750], [-5.4873406250, 25.2189062500], [-5.5422403125, 25.2096531250], [-5.5971400000, 25.2004000000], [-5.6815700000, 25.1853875000], [-5.7660000000, 25.1703750000], [-5.8504300000, 25.1553625000], [-5.9348600000, 25.1403500000], [-6.0192900000, 25.1253375000], [-6.1037200000, 25.1103250000], [-6.1881500000, 25.0953125000], [-6.2725800000, 25.0803000000], [-6.3615006250, 25.0636437500], [-6.4504212500, 25.0469875000], [-6.5393418750, 25.0303312500], [-6.6282625000, 25.0136750000], [-6.7171831250, 24.9970187500], [-6.8061037500, 24.9803625000], [-6.8950243750, 24.9637062500], [-6.9839450000, 24.9470500000], [-7.0728656250, 24.9303937500], [-7.1617862500, 24.9137375000], [-7.2507068750, 24.8970812500], [-7.3396275000, 24.8804250000], [-7.4285481250, 24.8637687500], [-7.5174687500, 24.8471125000], [-7.6063893750, 24.8304562500], [-7.6953100000, 24.8138000000], [-7.7842306250, 24.7971437500], [-7.8731512500, 24.7804875000], [-7.9620718750, 24.7638312500], [-8.0509925000, 24.7471750000], [-8.1399131250, 24.7305187500], [-8.2288337500, 24.7138625000], [-8.3177543750, 24.6972062500], [-8.4066750000, 24.6805500000], [-8.4955956250, 24.6638937500], [-8.5845162500, 24.6472375000], [-8.6734368750, 24.6305812500], [-8.7623575000, 24.6139250000], [-8.8512781250, 24.5972687500], [-8.9401987500, 24.5806125000], [-9.0291193750, 24.5639562500], [-9.1180400000, 24.5473000000], [-9.1956737500, 24.5322093750], [-9.2733075000, 24.5171187500], [-9.3509412500, 24.5020281250], [-9.4285750000, 24.4869375000], [-9.5062087500, 24.4718468750], [-9.5838425000, 24.4567562500], [-9.6614762500, 24.4416656250], [-9.7391100000, 24.4265750000], [-9.8167437500, 24.4114843750], [-9.8943775000, 24.3963937500], [-9.9720112500, 24.3813031250], [-10.0496450000, 24.3662125000], [-10.1272787500, 24.3511218750], [-10.2049125000, 24.3360312500], [-10.2825462500, 24.3209406250], [-10.3601800000, 24.3058500000], [-10.4378137500, 24.2907593750], [-10.5154475000, 24.2756687500], [-10.5930812500, 24.2605781250], [-10.6707150000, 24.2454875000], [-10.7483487500, 24.2303968750], [-10.8259825000, 24.2153062500], [-10.9036162500, 24.2002156250], [-10.9812500000, 24.1851250000], [-11.0588837500, 24.1700343750], [-11.1365175000, 24.1549437500], [-11.2141512500, 24.1398531250], [-11.2917850000, 24.1247625000], [-11.3694187500, 24.1096718750], [-11.4470525000, 24.0945812500], [-11.5246862500, 24.0794906250], [-11.6023200000, 24.0644000000], [-11.6799537500, 24.0493093750], [-11.7575875000, 24.0342187500], [-11.8352212500, 24.0191281250], [-11.9128550000, 24.0040375000], [-11.9904887500, 23.9889468750], [-12.0681225000, 23.9738562500], [-12.1457562500, 23.9587656250], [-12.2233900000, 23.9436750000], [-12.3010237500, 23.9285843750], [-12.3786575000, 23.9134937500], [-12.4562912500, 23.8984031250], [-12.5339250000, 23.8833125000], [-12.6115587500, 23.8682218750], [-12.6891925000, 23.8531312500], [-12.7668262500, 23.8380406250], [-12.8444600000, 23.8229500000], [-12.9220937500, 23.8078593750], [-12.9997275000, 23.7927687500], [-13.0773612500, 23.7776781250], [-13.1549950000, 23.7625875000], [-13.2326287500, 23.7474968750], [-13.3102625000, 23.7324062500], [-13.3878962500, 23.7173156250], [-13.4655300000, 23.7022250000], [-13.5431637500, 23.6871343750], [-13.6207975000, 23.6720437500], [-13.6984312500, 23.6569531250], [-13.7760650000, 23.6418625000], [-13.8536987500, 23.6267718750], [-13.9313325000, 23.6116812500], [-14.0089662500, 23.5965906250], [-14.0866000000, 23.5815000000], [-14.1296000000, 23.5728000000], [-14.2029468750, 23.5573531250], [-14.2762937500, 23.5419062500], [-14.3496406250, 23.5264593750], [-14.4229875000, 23.5110125000], [-14.4963343750, 23.4955656250], [-14.5696812500, 23.4801187500], [-14.6430281250, 23.4646718750], [-14.7163750000, 23.4492250000], [-14.7897218750, 23.4337781250], [-14.8630687500, 23.4183312500], [-14.9364156250, 23.4028843750], [-15.0097625000, 23.3874375000], [-15.0831093750, 23.3719906250], [-15.1564562500, 23.3565437500], [-15.2298031250, 23.3410968750], [-15.3031500000, 23.3256500000], [-15.3764968750, 23.3102031250], [-15.4498437500, 23.2947562500], [-15.5231906250, 23.2793093750], [-15.5965375000, 23.2638625000], [-15.6698843750, 23.2484156250], [-15.7432312500, 23.2329687500], [-15.8165781250, 23.2175218750], [-15.8899250000, 23.2020750000], [-15.9632718750, 23.1866281250], [-16.0366187500, 23.1711812500], [-16.1099656250, 23.1557343750], [-16.1833125000, 23.1402875000], [-16.2566593750, 23.1248406250], [-16.3300062500, 23.1093937500], [-16.4033531250, 23.0939468750], [-16.4767000000, 23.0785000000], [-16.5500468750, 23.0630531250], [-16.6233937500, 23.0476062500], [-16.6967406250, 23.0321593750], [-16.7700875000, 23.0167125000], [-16.8434343750, 23.0012656250], [-16.9167812500, 22.9858187500], [-16.9901281250, 22.9703718750], [-17.0634750000, 22.9549250000], [-17.1368218750, 22.9394781250], [-17.2101687500, 22.9240312500], [-17.2835156250, 22.9085843750], [-17.3568625000, 22.8931375000], [-17.4302093750, 22.8776906250], [-17.5035562500, 22.8622437500], [-17.5769031250, 22.8467968750], [-17.6502500000, 22.8313500000], [-17.7235968750, 22.8159031250], [-17.7969437500, 22.8004562500], [-17.8702906250, 22.7850093750], [-17.9436375000, 22.7695625000], [-18.0169843750, 22.7541156250], [-18.0903312500, 22.7386687500], [-18.1636781250, 22.7232218750], [-18.2370250000, 22.7077750000], [-18.3103718750, 22.6923281250], [-18.3837187500, 22.6768812500], [-18.4570656250, 22.6614343750], [-18.5304125000, 22.6459875000], [-18.6037593750, 22.6305406250], [-18.6771062500, 22.6150937500], [-18.7504531250, 22.5996468750], [-18.8238000000, 22.5842000000], [-18.8366000000, 22.5814000000], [-18.9285625000, 22.5599125000], [-19.0205250000, 22.5384250000], [-19.1124875000, 22.5169375000], [-19.2044500000, 22.4954500000], [-19.2964125000, 22.4739625000], [-19.3883750000, 22.4524750000], [-19.4803375000, 22.4309875000], [-19.5723000000, 22.4095000000], [-19.6642625000, 22.3880125000], [-19.7562250000, 22.3665250000], [-19.8481875000, 22.3450375000], [-19.9401500000, 22.3235500000], [-20.0321125000, 22.3020625000], [-20.1240750000, 22.2805750000], [-20.2160375000, 22.2590875000], [-20.3080000000, 22.2376000000], [-20.3999625000, 22.2161125000], [-20.4919250000, 22.1946250000], [-20.5838875000, 22.1731375000], [-20.6758500000, 22.1516500000], [-20.7678125000, 22.1301625000], [-20.8597750000, 22.1086750000], [-20.9517375000, 22.0871875000], [-21.0437000000, 22.0657000000], [-21.1356625000, 22.0442125000], [-21.2276250000, 22.0227250000], [-21.3195875000, 22.0012375000], [-21.4115500000, 21.9797500000], [-21.5035125000, 21.9582625000], [-21.5954750000, 21.9367750000], [-21.6874375000, 21.9152875000], [-21.7794000000, 21.8938000000], [-21.8454265625, 21.8783632812], [-21.9114531250, 21.8629265625], [-21.9774796875, 21.8474898437], [-22.0435062500, 21.8320531250], [-22.1095328125, 21.8166164062], [-22.1755593750, 21.8011796875], [-22.2415859375, 21.7857429687], [-22.3076125000, 21.7703062500], [-22.3736390625, 21.7548695312], [-22.4396656250, 21.7394328125], [-22.5056921875, 21.7239960937], [-22.5717187500, 21.7085593750], [-22.6377453125, 21.6931226563], [-22.7037718750, 21.6776859375], [-22.7697984375, 21.6622492187], [-22.8358250000, 21.6468125000], [-22.9018515625, 21.6313757813], [-22.9678781250, 21.6159390625], [-23.0339046875, 21.6005023437], [-23.0999312500, 21.5850656250], [-23.1659578125, 21.5696289062], [-23.2319843750, 21.5541921875], [-23.2980109375, 21.5387554688], [-23.3640375000, 21.5233187500], [-23.4300640625, 21.5078820313], [-23.4960906250, 21.4924453125], [-23.5621171875, 21.4770085937], [-23.6281437500, 21.4615718750], [-23.6941703125, 21.4461351563], [-23.7601968750, 21.4306984375], [-23.8262234375, 21.4152617187], [-23.8922500000, 21.3998250000], [-23.9582765625, 21.3843882813], [-24.0243031250, 21.3689515625], [-24.0903296875, 21.3535148437], [-24.1563562500, 21.3380781250], [-24.2223828125, 21.3226414062], [-24.2884093750, 21.3072046875], [-24.3544359375, 21.2917679687], [-24.4204625000, 21.2763312500], [-24.4864890625, 21.2608945312], [-24.5525156250, 21.2454578125], [-24.6185421875, 21.2300210938], [-24.6845687500, 21.2145843750], [-24.7505953125, 21.1991476563], [-24.8166218750, 21.1837109375], [-24.8826484375, 21.1682742187], [-24.9486750000, 21.1528375000], [-25.0147015625, 21.1374007813], [-25.0807281250, 21.1219640625], [-25.1467546875, 21.1065273437], [-25.2127812500, 21.0910906250], [-25.2788078125, 21.0756539063], [-25.3448343750, 21.0602171875], [-25.4108609375, 21.0447804688], [-25.4768875000, 21.0293437500], [-25.5429140625, 21.0139070313], [-25.6089406250, 20.9984703125], [-25.6749671875, 20.9830335938], [-25.7409937500, 20.9675968750], [-25.8070203125, 20.9521601563], [-25.8730468750, 20.9367234375], [-25.9390734375, 20.9212867188], [-26.0051000000, 20.9058500000], [-26.0711265625, 20.8904132813], [-26.1371531250, 20.8749765625], [-26.2031796875, 20.8595398437], [-26.2692062500, 20.8441031250], [-26.3352328125, 20.8286664063], [-26.4012593750, 20.8132296875], [-26.4672859375, 20.7977929687], [-26.5333125000, 20.7823562500], [-26.5993390625, 20.7669195313], [-26.6653656250, 20.7514828125], [-26.7313921875, 20.7360460938], [-26.7974187500, 20.7206093750], [-26.8634453125, 20.7051726563], [-26.9294718750, 20.6897359375], [-26.9954984375, 20.6742992188], [-27.0615250000, 20.6588625000], [-27.1275515625, 20.6434257813], [-27.1935781250, 20.6279890625], [-27.2596046875, 20.6125523438], [-27.3256312500, 20.5971156250], [-27.3916578125, 20.5816789063], [-27.4576843750, 20.5662421875], [-27.5237109375, 20.5508054688], [-27.5897375000, 20.5353687500], [-27.6557640625, 20.5199320313], [-27.7217906250, 20.5044953125], [-27.7878171875, 20.4890585938], [-27.8538437500, 20.4736218750], [-27.9198703125, 20.4581851563], [-27.9858968750, 20.4427484375], [-28.0519234375, 20.4273117188], [-28.1179500000, 20.4118750000], [-28.1839765625, 20.3964382813], [-28.2500031250, 20.3810015625], [-28.3160296875, 20.3655648438], [-28.3820562500, 20.3501281250], [-28.4480828125, 20.3346914063], [-28.5141093750, 20.3192546875], [-28.5801359375, 20.3038179687], [-28.6461625000, 20.2883812500], [-28.7121890625, 20.2729445313], [-28.7782156250, 20.2575078125], [-28.8442421875, 20.2420710937], [-28.9102687500, 20.2266343750], [-28.9762953125, 20.2111976563], [-29.0423218750, 20.1957609375], [-29.1083484375, 20.1803242187], [-29.1743750000, 20.1648875000], [-29.2404015625, 20.1494507812], [-29.3064281250, 20.1340140625], [-29.3724546875, 20.1185773437], [-29.4384812500, 20.1031406250], [-29.5045078125, 20.0877039062], [-29.5705343750, 20.0722671875], [-29.6365609375, 20.0568304687], [-29.7025875000, 20.0413937500], [-29.7686140625, 20.0259570312], [-29.8346406250, 20.0105203125], [-29.9006671875, 19.9950835937], [-29.9666937500, 19.9796468750], [-30.0327203125, 19.9642101563], [-30.0987468750, 19.9487734375], [-30.1647734375, 19.9333367187], [-30.2308000000, 19.9179000000], [-30.2967125000, 19.9009843750], [-30.3626250000, 19.8840687500], [-30.4285375000, 19.8671531250], [-30.4944500000, 19.8502375000], [-30.5603625000, 19.8333218750], [-30.6262750000, 19.8164062500], [-30.6921875000, 19.7994906250], [-30.7581000000, 19.7825750000], [-30.8240125000, 19.7656593750], [-30.8899250000, 19.7487437500], [-30.9558375000, 19.7318281250], [-31.0217500000, 19.7149125000], [-31.0876625000, 19.6979968750], [-31.1535750000, 19.6810812500], [-31.2194875000, 19.6641656250], [-31.2854000000, 19.6472500000], [-31.3513125000, 19.6303343750], [-31.4172250000, 19.6134187500], [-31.4831375000, 19.5965031250], [-31.5490500000, 19.5795875000], [-31.6149625000, 19.5626718750], [-31.6808750000, 19.5457562500], [-31.7467875000, 19.5288406250], [-31.8127000000, 19.5119250000], [-31.8786125000, 19.4950093750], [-31.9445250000, 19.4780937500], [-32.0104375000, 19.4611781250], [-32.0763500000, 19.4442625000], [-32.1422625000, 19.4273468750], [-32.2081750000, 19.4104312500], [-32.2740875000, 19.3935156250], [-32.3400000000, 19.3766000000], [-32.4059125000, 19.3596843750], [-32.4718250000, 19.3427687500], [-32.5377375000, 19.3258531250], [-32.6036500000, 19.3089375000], [-32.6695625000, 19.2920218750], [-32.7354750000, 19.2751062500], [-32.8013875000, 19.2581906250], [-32.8673000000, 19.2412750000], [-32.9332125000, 19.2243593750], [-32.9991250000, 19.2074437500], [-33.0650375000, 19.1905281250], [-33.1309500000, 19.1736125000], [-33.1968625000, 19.1566968750], [-33.2627750000, 19.1397812500], [-33.3286875000, 19.1228656250], [-33.3946000000, 19.1059500000], [-33.4605125000, 19.0890343750], [-33.5264250000, 19.0721187500], [-33.5923375000, 19.0552031250], [-33.6582500000, 19.0382875000], [-33.7241625000, 19.0213718750], [-33.7900750000, 19.0044562500], [-33.8559875000, 18.9875406250], [-33.9219000000, 18.9706250000], [-33.9878125000, 18.9537093750], [-34.0537250000, 18.9367937500], [-34.1196375000, 18.9198781250], [-34.1855500000, 18.9029625000], [-34.2514625000, 18.8860468750], [-34.3173750000, 18.8691312500], [-34.3832875000, 18.8522156250], [-34.4492000000, 18.8353000000], [-34.5172875000, 18.8173250000], [-34.5853750000, 18.7993500000], [-34.6534625000, 18.7813750000], [-34.7215500000, 18.7634000000], [-34.7896375000, 18.7454250000], [-34.8577250000, 18.7274500000], [-34.9258125000, 18.7094750000], [-34.9939000000, 18.6915000000], [-35.0543937500, 18.6749406250], [-35.1148875000, 18.6583812500], [-35.1753812500, 18.6418218750], [-35.2358750000, 18.6252625000], [-35.2963687500, 18.6087031250], [-35.3568625000, 18.5921437500], [-35.4173562500, 18.5755843750], [-35.4778500000, 18.5590250000], [-35.5383437500, 18.5424656250], [-35.5988375000, 18.5259062500], [-35.6593312500, 18.5093468750], [-35.7198250000, 18.4927875000], [-35.7803187500, 18.4762281250], [-35.8408125000, 18.4596687500], [-35.9013062500, 18.4431093750], [-35.9618000000, 18.4265500000], [-36.0222937500, 18.4099906250], [-36.0827875000, 18.3934312500], [-36.1432812500, 18.3768718750], [-36.2037750000, 18.3603125000], [-36.2642687500, 18.3437531250], [-36.3247625000, 18.3271937500], [-36.3852562500, 18.3106343750], [-36.4457500000, 18.2940750000], [-36.5062437500, 18.2775156250], [-36.5667375000, 18.2609562500], [-36.6272312500, 18.2443968750], [-36.6877250000, 18.2278375000], [-36.7482187500, 18.2112781250], [-36.8087125000, 18.1947187500], [-36.8692062500, 18.1781593750], [-36.9297000000, 18.1616000000], [-36.9819250000, 18.1472437500], [-37.0341500000, 18.1328875000], [-37.0863750000, 18.1185312500], [-37.1386000000, 18.1041750000], [-37.1908250000, 18.0898187500], [-37.2430500000, 18.0754625000], [-37.2952750000, 18.0611062500], [-37.3475000000, 18.0467500000], [-37.3997250000, 18.0323937500], [-37.4519500000, 18.0180375000], [-37.5041750000, 18.0036812500], [-37.5564000000, 17.9893250000], [-37.6086250000, 17.9749687500], [-37.6608500000, 17.9606125000], [-37.7130750000, 17.9462562500], [-37.7653000000, 17.9319000000], [-37.8170757812, 17.9172726562], [-37.8688515625, 17.9026453125], [-37.9206273437, 17.8880179687], [-37.9724031250, 17.8733906250], [-38.0241789063, 17.8587632812], [-38.0759546875, 17.8441359375], [-38.1277304688, 17.8295085937], [-38.1795062500, 17.8148812500], [-38.2312820313, 17.8002539062], [-38.2830578125, 17.7856265625], [-38.3348335938, 17.7709992187], [-38.3866093750, 17.7563718750], [-38.4383851563, 17.7417445312], [-38.4901609375, 17.7271171875], [-38.5419367188, 17.7124898437], [-38.5937125000, 17.6978625000], [-38.6454882813, 17.6832351562], [-38.6972640625, 17.6686078125], [-38.7490398438, 17.6539804687], [-38.8008156250, 17.6393531250], [-38.8525914063, 17.6247257812], [-38.9043671875, 17.6100984375], [-38.9561429688, 17.5954710937], [-39.0079187500, 17.5808437500], [-39.0596945313, 17.5662164062], [-39.1114703125, 17.5515890625], [-39.1632460938, 17.5369617187], [-39.2150218750, 17.5223343750], [-39.2667976563, 17.5077070312], [-39.3185734375, 17.4930796875], [-39.3703492188, 17.4784523437], [-39.4221250000, 17.4638250000], [-39.4739007813, 17.4491976562], [-39.5256765625, 17.4345703125], [-39.5774523438, 17.4199429688], [-39.6292281250, 17.4053156250], [-39.6810039063, 17.3906882813], [-39.7327796875, 17.3760609375], [-39.7845554688, 17.3614335938], [-39.8363312500, 17.3468062500], [-39.8881070313, 17.3321789063], [-39.9398828125, 17.3175515625], [-39.9916585938, 17.3029242188], [-40.0434343750, 17.2882968750], [-40.0952101563, 17.2736695313], [-40.1469859375, 17.2590421875], [-40.1987617188, 17.2444148438], [-40.2505375000, 17.2297875000], [-40.3023132813, 17.2151601563], [-40.3540890625, 17.2005328125], [-40.4058648438, 17.1859054688], [-40.4576406250, 17.1712781250], [-40.5094164063, 17.1566507813], [-40.5611921875, 17.1420234375], [-40.6129679688, 17.1273960938], [-40.6647437500, 17.1127687500], [-40.7165195313, 17.0981414063], [-40.7682953125, 17.0835140625], [-40.8200710938, 17.0688867188], [-40.8718468750, 17.0542593750], [-40.9236226563, 17.0396320313], [-40.9753984375, 17.0250046875], [-41.0271742188, 17.0103773438], [-41.0789500000, 16.9957500000], [-41.1307257813, 16.9811226563], [-41.1825015625, 16.9664953125], [-41.2342773438, 16.9518679688], [-41.2860531250, 16.9372406250], [-41.3378289063, 16.9226132813], [-41.3896046875, 16.9079859375], [-41.4413804688, 16.8933585938], [-41.4931562500, 16.8787312500], [-41.5449320312, 16.8641039063], [-41.5967078125, 16.8494765625], [-41.6484835938, 16.8348492188], [-41.7002593750, 16.8202218750], [-41.7520351563, 16.8055945313], [-41.8038109375, 16.7909671875], [-41.8555867188, 16.7763398438], [-41.9073625000, 16.7617125000], [-41.9591382813, 16.7470851563], [-42.0109140625, 16.7324578125], [-42.0626898438, 16.7178304688], [-42.1144656250, 16.7032031250], [-42.1662414063, 16.6885757813], [-42.2180171875, 16.6739484375], [-42.2697929688, 16.6593210938], [-42.3215687500, 16.6446937500], [-42.3733445312, 16.6300664063], [-42.4251203125, 16.6154390625], [-42.4768960937, 16.6008117188], [-42.5286718750, 16.5861843750], [-42.5804476563, 16.5715570313], [-42.6322234375, 16.5569296875], [-42.6839992188, 16.5423023438], [-42.7357750000, 16.5276750000], [-42.7875507813, 16.5130476563], [-42.8393265625, 16.4984203125], [-42.8911023438, 16.4837929688], [-42.9428781250, 16.4691656250], [-42.9946539063, 16.4545382813], [-43.0464296875, 16.4399109375], [-43.0982054688, 16.4252835938], [-43.1499812500, 16.4106562500], [-43.2017570312, 16.3960289063], [-43.2535328125, 16.3814015625], [-43.3053085937, 16.3667742188], [-43.3570843750, 16.3521468750], [-43.4088601563, 16.3375195313], [-43.4606359375, 16.3228921875], [-43.5124117188, 16.3082648438], [-43.5641875000, 16.2936375000], [-43.6159632813, 16.2790101563], [-43.6677390625, 16.2643828125], [-43.7195148438, 16.2497554688], [-43.7712906250, 16.2351281250], [-43.8230664063, 16.2205007813]]);
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
import math
import time

from stl import mesh, Dimension

from tkinter import Tk     # from tkinter import Tk for Python 3.x
from tkinter.filedialog import askopenfilename
from mpl_toolkits.mplot3d import art3d
from matplotlib import pyplot as plt
import solid
import os
import ezdxf
import shapely.geometry as sg
import subprocess
from GUI import getSCADPath



def outputSTL(From, To, PATH=getSCADPath()):
    subprocess.Popen(PATH + " -o " + To + " " + From)
    while not os.path.exists(To):
        time.sleep(1)

class Model:
    def __init__(self, model, fileName, location, layer, thickness):
        self.location = location
        self.code = None
        self.fileName = fileName
        self.stl = fileName + ".stl"
        self.layer = layer
        self.thickness = thickness
        self.maxz = (layer+1)*thickness
        self.dxf = fileName + ".dxf"
        self.scad = fileName + ".scad"
        self.model = model
        self.center = None
        self.width = 10
        self.mesh = None
        self.useable_area = None


    def get_code(self):
        max_dim = 0.05
        max_array = 6

        num = int(self.fileName)
        nums = [int(a) for a in str(num)]
        nums.reverse()
        indices = nums
        length = len(nums)

        print(indices)
        t = 0
        i = 0
        cubes = []
        x = 0
        y = 0
        width = 0.01
        while x <= max_dim:
            while y <= max_dim:
                print(indices)
                if nums == []:
                    break
                if indices[0] != 0:
                    cubes.append(solid.translate([x, y, 0])(solid.cube(size=t / 1000 + 0.001)))
                    y += max_dim / (max_array - 1)
                    nums[0] = nums[0] - 1
                else:
                    indices.pop(0)
                    t += 1
                i += 1
            x += max_dim / (max_array - 1)
            y = 0

        outside = solid.translate([-width / 2, -width / 2])(solid.cube(max_dim + (length - 1) / 1000 + 0.001 + width))
        self.code = solid.difference()(outside, cubes)
        self.code = solid.projection(cut=True)(self.code)
        solid.scad_render_to_file(self.code, self.location + "/code.scad")
        outputSTL(From=self.location+"/code.scad", To=self.location+"code.dxf", PATH=getSCADPath())
        # os.system("toSTL.sh renders/code.scad renders/code.dxf")
        return self.location+"/code.dxf"

    def download(self, type):
        if type =="stl":
            print("generating:" + self.location+"/"+ self.fileName+".stl")
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".stl")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".stl")
        elif type == "dxf":
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".dxf")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".dxf")

    def render(self):
        solid.scad_render_to_file(self.model, self.location+"/"+ self.fileName+'.scad')
        while not os.path.exists(self.location+"/"+self.fileName+".scad"):
            time.sleep(1)
        # outputSTL(From= self.location+"/"+ self.fileName+'.scad', To=self.location+"/"+ self.fileName+'.stl')

    def get_points(self):
        doc = ezdxf.readfile(filename=self.location+"/"+ self.fileName+".dxf")
        msp = doc.modelspace()
        i=0
        lists = []
        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return [start, end]

        for e in msp.query("LINE"):
            line = helper(e)
            if not lists:
                lists.append([line])
            else:
                if lists[i][len(lists)-1][1] != line[0]:
                    lists.append([line])
                    i+=1
                else:
                    lists[i].append(line)

    def get_points2(self, FILE):
        doc = ezdxf.readfile(filename=FILE)
        msp = doc.modelspace()
        i = 0
        lists = []

        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return (start, end)

        for e in msp.query("LINE"):
            line = helper(e)
            if lists==[]:
                lists.append([line])
            else:
                if lists[i][len(lists[i]) - 1][1] != line[0]:
                    lists.append([line])
                    i += 1
                else:
                    lists[i].append(line)
        return lists

    def add_code(self):
        dxf = solid.projection(cut=False)(self.model)
        offset = solid.offset(r=-0.1)(dxf)
        solid.scad_render_to_file(offset, self.location+'/offset.scad')
        os.system("toSTL.sh renders/offset.scad renders/offset.dxf")
        lines = self.get_points2("renders/offset.dxf")
        x = lines[0][0][0][0]
        y = lines[0][0][0][1]
        print(x)
        print(y)
        code = solid.translate([x,y,0])(self.code)
        code = solid.linear_extrude(height=999)(code)
        save = self.model
        self.model = solid.projection()(solid.difference()(self.model, code))
        self.render()
        self.download("dxf")
        self.model = save

    def add_label(self, pos):
        # num = 12
        # minx, maxx, miny, maxy, minz, maxz = self.find_minmax()
        maxz = self.maxz
        # label = solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.5, halign="center"))
        # i=minx
        # print("x-len: " + str(maxx-minx))
        # print(i)
        # inc = (maxx-minx)/num
        # while minx <= i <= maxx:
        #     label = solid.union()(solid.translate([i, 0, maxz - 0.2])(solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.25, halign="center"))), label)
        #     i += inc
        #
        # l = label
        #
        # i =miny
        # while miny<= i <= maxy:
        #     print("y inc")
        #     l = solid.union()(solid.translate([0, i, 0])(label), l)
        #     i += 0.5
        for i in str(self.fileName):
            cur = pos[0]
            label = solid.translate([pos[0][0], pos[0][1], self.maxz-0.2])(solid.linear_extrude(height=(self.thickness)/3)(solid.text(str(i), size=0.5, halign="center", valign="center")))
            self.model = solid.difference()(self.model, label)
            pos.append(pos.pop(0))
            while abs(cur[0]-pos[0][0])<0.5 and abs(cur[1]-pos[0][1])<0.5:
                pos.append(pos.pop(0))



    def Center(self):

        volume, cog, inertia = self.mesh.get_mass_properties()
        print("Volume                                  = {0}".format(volume))
        print("Position of the center of gravity (COG) = {0}".format(cog))
        m_centered = solid.translate([-cog[0], -cog[1], 0])(
            self.model
        )
        return m_centered

    def find_minmax(self):
        minx = maxx = miny = maxy = minz = maxz = None
        for p in self.mesh.points:
            # p contains (x, y, z)
            if minx is None:
                minx = p[Dimension.X]
                maxx = p[Dimension.X]
                miny = p[Dimension.Y]
                maxy = p[Dimension.Y]
                minz = p[Dimension.Z]
                maxz = p[Dimension.Z]
            else:
                maxx = max(p[Dimension.X], maxx)
                minx = min(p[Dimension.X], minx)
                maxy = max(p[Dimension.Y], maxy)
                miny = min(p[Dimension.Y], miny)
                maxz = max(p[Dimension.Z], maxz)
                minz = min(p[Dimension.Z], minz)
        lenx = maxx - minx
        leny = maxy - miny
        lenz = maxz - minz
        return minx, maxx, miny, maxy, minz, maxz

    # def generate_Mesh(self):
    #     self.mesh = mesh.Mesh.from_file(self.location + "/" + str(int(self.fileName)//8)+ "b.stl")

    def get_top(self):
        top = solid.projection(cut=True)(solid.translate([0,0,-1*self.thickness*(self.layer+1)])(self.model))
        useable_area = solid.offset(r=-0.45)(top)
        self.useable_area = useable_area
        solid.scad_render_to_file(self.useable_area, self.location+'/' + 'toptemp.scad')
        outputSTL(From=self.location+'/' + 'toptemp.scad', To=self.location+"/top"+ self.dxf)

        # os.system("toSTL.sh out/toptemp.scad renders/" + self.fileName + ".dxf")
        dxf = DXF(self.location+"/top"+ self.dxf)
        min_p=dxf.points[0][0]
        points_ordered = dxf.points
        i=0
        while i <= len(dxf.points)+1:
            while math.sqrt((dxf.points[0][0]-dxf.points[1][0])**2+(dxf.points[0][1]-dxf.points[1][1])**2) > 0.1:
                dxf.points.insert(1, [(dxf.points[0][0]+dxf.points[1][0])/2, (dxf.points[0][1]+dxf.points[1][1])/2])
                i = i-1
            dxf.points.append(dxf.points.pop(0))
            i+=1
        for i in range(len(dxf.points)):
            dxf.points.append(dxf.points.pop(0))
            if dxf.points[0][0] < min_p:
                min_p = dxf.points[0][0]
                points_ordered = dxf.points.copy()
        dxf.points = points_ordered.copy()

        print(dxf.points)
        self.add_label(dxf.points)

class DXF:
    def __init__(self, file):
        self.file = file
        self.Lines = []
        self.points = []
        doc = ezdxf.readfile(self.file)
        msp = doc.modelspace()
        for e in msp:
            if e.dxftype() == "LINE":
                self.Lines.append(e)
                self.points.append([e.dxf.start[0], e.dxf.start[1]])
        # self.points.append([self.Lines[-1].dxf.end[0], self.Lines[-1].dxf.end[1]])
        self.area = None
        self.center = None
        self.polygon = sg.Polygon(self.points)

    def get_area(self):
        self.area = self.polygon.area
        return self.area

    def get_center(self):
        x_sum = 0
        y_sum =0
        for i in self.points:
            x_sum += i[0]
            y_sum += i[1]
        x_c = x_sum/len(self.points)
        y_c = y_sum/len(self.points)
        return (x_c, y_c)

    def split(self, maxdim):
        splits = []
        length = 0
        pieces = [[]]
        prev = self.points[-1]
        pieces[-1].append(prev)
        for j in self.points:
            length = length + math.sqrt((prev[0]-j[0])**2+(prev[1]-j[1])**2)
            if length >= maxdim:
                pieces[-1].append(j)
                pieces.append([])
                length = 0
            pieces[-1].append(j)
            prev = j
        for j in pieces:
            j.insert(0, [0,0])
            piece = solid.linear_extrude(height=10)(solid.polygon(j))
            splits.append(piece)
        return splits
    def refine_points(self):
        i=0
        while i <= len(self.points)+1:
            while math.sqrt((self.points[0][0]-self.points[1][0])**2+(self.points[0][1]-self.points[1][1])**2) > 0.1:
                self.points.insert(1, [(self.points[0][0]+self.points[1][0])/2, (self.points[0][1]+self.points[1][1])/2])
                i = i-1
            self.points.append(self.points.pop(0))
            i+=1


if __name__== "__main__":
    test = DXF("C:/Users/Daniel/Documents/repos/Shell_Maker/output/0top_slice.dxf")
    test.refine_points()
    k = test.split(48)
    for i in range(len(k)):
        solid.scad_render_to_file(k[i], str(i) + ".scad")


 
 
************************************************/
