// Generated by SolidPython 1.1.3 on 2024-05-26 02:00:23


intersection() {
	difference() {
		intersection() {
			translate(v = [0, 0, 0]) {
				import(file = "CE3E3V2_Bottom_shell.stl", origin = [0, 0]);
			}
			translate(v = [-90.04029846191406, -32.690147399902344, 2]) {
				cube(size = [180.0806, 65.380295, 2]);
			}
		}
		linear_extrude(height = 999) {
			offset(r = -1) {
				import(file = "C:/Users/Daniel/Documents/repos/Shell_Maker/TestOutput/1top_slice.dxf", origin = [0, 0]);
			}
		}
	}
	translate(v = [0, 0, 2]) {
		linear_extrude(height = 10) {
			polygon(points = [[0, 0], [-72.7838218750, 6.2924899219], [-72.8301812500, 6.2735357812], [-72.8765406250, 6.2545816406], [-72.9229000000, 6.2356275000], [-72.9692593750, 6.2166733594], [-73.0156187500, 6.1977192187], [-73.0619781250, 6.1787650781], [-73.1083375000, 6.1598109375], [-73.1546968750, 6.1408567969], [-73.2010562500, 6.1219026562], [-73.2474156250, 6.1029485156], [-73.2937750000, 6.0839943750], [-73.3401343750, 6.0650402344], [-73.3864937500, 6.0460860937], [-73.4328531250, 6.0271319531], [-73.4792125000, 6.0081778125], [-73.5255718750, 5.9892236719], [-73.5719312500, 5.9702695312], [-73.6182906250, 5.9513153906], [-73.6646500000, 5.9323612500], [-73.7110093750, 5.9134071094], [-73.7573687500, 5.8944529687], [-73.8037281250, 5.8754988281], [-73.8500875000, 5.8565446875], [-73.8964468750, 5.8375905469], [-73.9428062500, 5.8186364062], [-73.9891656250, 5.7996822656], [-74.0355250000, 5.7807281250], [-74.0818843750, 5.7617739844], [-74.1282437500, 5.7428198437], [-74.1746031250, 5.7238657031], [-74.2209625000, 5.7049115625], [-74.2673218750, 5.6859574219], [-74.3136812500, 5.6670032812], [-74.3600406250, 5.6480491406], [-74.4064000000, 5.6290950000], [-74.4527593750, 5.6101408594], [-74.4991187500, 5.5911867187], [-74.5454781250, 5.5722325781], [-74.5918375000, 5.5532784375], [-74.6381968750, 5.5343242969], [-74.6845562500, 5.5153701562], [-74.7309156250, 5.4964160156], [-74.7772750000, 5.4774618750], [-74.8236343750, 5.4585077344], [-74.8699937500, 5.4395535937], [-74.9163531250, 5.4205994531], [-74.9627125000, 5.4016453125], [-75.0090718750, 5.3826911719], [-75.0554312500, 5.3637370312], [-75.1017906250, 5.3447828906], [-75.1481500000, 5.3258287500], [-75.1945093750, 5.3068746094], [-75.2408687500, 5.2879204687], [-75.2872281250, 5.2689663281], [-75.3335875000, 5.2500121875], [-75.3799468750, 5.2310580469], [-75.4263062500, 5.2121039062], [-75.4726656250, 5.1931497656], [-75.5190250000, 5.1741956250], [-75.5653843750, 5.1552414844], [-75.6117437500, 5.1362873437], [-75.6581031250, 5.1173332031], [-75.7044625000, 5.0983790625], [-75.7508218750, 5.0794249219], [-75.7971812500, 5.0604707812], [-75.8435406250, 5.0415166406], [-75.8899000000, 5.0225625000], [-75.9362593750, 5.0036083594], [-75.9826187500, 4.9846542187], [-76.0289781250, 4.9657000781], [-76.0753375000, 4.9467459375], [-76.1216968750, 4.9277917969], [-76.1680562500, 4.9088376562], [-76.2144156250, 4.8898835156], [-76.2607750000, 4.8709293750], [-76.3071343750, 4.8519752344], [-76.3534937500, 4.8330210937], [-76.3998531250, 4.8140669531], [-76.4462125000, 4.7951128125], [-76.4925718750, 4.7761586719], [-76.5389312500, 4.7572045312], [-76.5852906250, 4.7382503906], [-76.6316500000, 4.7192962500], [-76.6780093750, 4.7003421094], [-76.7243687500, 4.6813879687], [-76.7707281250, 4.6624338281], [-76.8170875000, 4.6434796875], [-76.8634468750, 4.6245255469], [-76.9098062500, 4.6055714062], [-76.9561656250, 4.5866172656], [-77.0025250000, 4.5676631250], [-77.0488843750, 4.5487089844], [-77.0952437500, 4.5297548437], [-77.1416031250, 4.5108007031], [-77.1879625000, 4.4918465625], [-77.2343218750, 4.4728924219], [-77.2806812500, 4.4539382813], [-77.3270406250, 4.4349841406], [-77.3734000000, 4.4160300000], [-77.4640375000, 4.3786575000], [-77.5546750000, 4.3412850000], [-77.6453125000, 4.3039125000], [-77.7359500000, 4.2665400000], [-77.8265875000, 4.2291675000], [-77.9172250000, 4.1917950000], [-78.0078625000, 4.1544225000], [-78.0985000000, 4.1170500000], [-78.1455437500, 4.0972725000], [-78.1925875000, 4.0774950000], [-78.2396312500, 4.0577175000], [-78.2866750000, 4.0379400000], [-78.3337187500, 4.0181625000], [-78.3807625000, 3.9983850000], [-78.4278062500, 3.9786075000], [-78.4748500000, 3.9588300000], [-78.5218937500, 3.9390525000], [-78.5689375000, 3.9192750000], [-78.6159812500, 3.8994975000], [-78.6630250000, 3.8797200000], [-78.7100687500, 3.8599425000], [-78.7571125000, 3.8401650000], [-78.8041562500, 3.8203875000], [-78.8512000000, 3.8006100000], [-78.9027750000, 3.7781900000], [-78.9543500000, 3.7557700000], [-79.0059250000, 3.7333500000], [-79.0575000000, 3.7109300000], [-79.1090750000, 3.6885100000], [-79.1606500000, 3.6660900000], [-79.2122250000, 3.6436700000], [-79.2638000000, 3.6212500000], [-79.3352375000, 3.5885075000], [-79.4066750000, 3.5557650000], [-79.4781125000, 3.5230225000], [-79.5495500000, 3.4902800000], [-79.6209875000, 3.4575375000], [-79.6924250000, 3.4247950000], [-79.7638625000, 3.3920525000], [-79.8353000000, 3.3593100000], [-79.9067375000, 3.3265675000], [-79.9781750000, 3.2938250000], [-80.0496125000, 3.2610825000], [-80.1210500000, 3.2283400000], [-80.1924875000, 3.1955975000], [-80.2639250000, 3.1628550000], [-80.3353625000, 3.1301125000], [-80.4068000000, 3.0973700000], [-80.4626835938, 3.0722517422], [-80.5185671875, 3.0471334844], [-80.5744507812, 3.0220152266], [-80.6303343750, 2.9968969687], [-80.6862179688, 2.9717787109], [-80.7421015625, 2.9466604531], [-80.7979851563, 2.9215421953], [-80.8538687500, 2.8964239375], [-80.9097523438, 2.8713056797], [-80.9656359375, 2.8461874219], [-81.0215195312, 2.8210691641], [-81.0774031250, 2.7959509062], [-81.1332867188, 2.7708326484], [-81.1891703125, 2.7457143906], [-81.2450539063, 2.7205961328], [-81.3009375000, 2.6954778750], [-81.3568210937, 2.6703596172], [-81.4127046875, 2.6452413594], [-81.4685882812, 2.6201231016], [-81.5244718750, 2.5950048437], [-81.5803554688, 2.5698865859], [-81.6362390625, 2.5447683281], [-81.6921226563, 2.5196500703], [-81.7480062500, 2.4945318125], [-81.8038898437, 2.4694135547], [-81.8597734375, 2.4442952969], [-81.9156570312, 2.4191770391], [-81.9715406250, 2.3940587813], [-82.0274242188, 2.3689405234], [-82.0833078125, 2.3438222656], [-82.1391914063, 2.3187040078], [-82.1950750000, 2.2935857500], [-82.2509585937, 2.2684674922], [-82.3068421875, 2.2433492344], [-82.3627257812, 2.2182309766], [-82.4186093750, 2.1931127188], [-82.4744929688, 2.1679944609], [-82.5303765625, 2.1428762031], [-82.5862601563, 2.1177579453], [-82.6421437500, 2.0926396875], [-82.6980273437, 2.0675214297], [-82.7539109375, 2.0424031719], [-82.8097945312, 2.0172849141], [-82.8656781250, 1.9921666563], [-82.9215617188, 1.9670483984], [-82.9774453125, 1.9419301406], [-83.0333289063, 1.9168118828], [-83.0892125000, 1.8916936250], [-83.1450960937, 1.8665753672], [-83.2009796875, 1.8414571094], [-83.2568632812, 1.8163388516], [-83.3127468750, 1.7912205937], [-83.3686304688, 1.7661023359], [-83.4245140625, 1.7409840781], [-83.4803976563, 1.7158658203], [-83.5362812500, 1.6907475625], [-83.5921648437, 1.6656293047], [-83.6480484375, 1.6405110469], [-83.7039320312, 1.6153927891], [-83.7598156250, 1.5902745312], [-83.8156992188, 1.5651562734], [-83.8715828125, 1.5400380156], [-83.9274664063, 1.5149197578], [-83.9833500000, 1.4898015000], [-84.0392335937, 1.4646832422], [-84.0951171875, 1.4395649844], [-84.1510007812, 1.4144467266], [-84.2068843750, 1.3893284688], [-84.2627679688, 1.3642102109], [-84.3186515625, 1.3390919531], [-84.3745351563, 1.3139736953], [-84.4304187500, 1.2888554375], [-84.4863023437, 1.2637371797], [-84.5421859375, 1.2386189219], [-84.5980695312, 1.2135006641], [-84.6539531250, 1.1883824063], [-84.7098367188, 1.1632641484], [-84.7657203125, 1.1381458906], [-84.8216039063, 1.1130276328], [-84.8774875000, 1.0879093750], [-84.9333710937, 1.0627911172], [-84.9892546875, 1.0376728594], [-85.0451382812, 1.0125546016], [-85.1010218750, 0.9874363438], [-85.1569054688, 0.9623180859], [-85.2127890625, 0.9371998281], [-85.2686726563, 0.9120815703], [-85.3245562500, 0.8869633125], [-85.3804398437, 0.8618450547], [-85.4363234375, 0.8367267969], [-85.4922070312, 0.8116085391], [-85.5480906250, 0.7864902813], [-85.6039742188, 0.7613720234], [-85.6598578125, 0.7362537656], [-85.7157414063, 0.7111355078], [-85.7716250000, 0.6860172500], [-85.8275085937, 0.6608989922], [-85.8833921875, 0.6357807344], [-85.9392757812, 0.6106624766], [-85.9951593750, 0.5855442187], [-86.0510429688, 0.5604259609], [-86.1069265625, 0.5353077031], [-86.1628101563, 0.5101894453], [-86.2186937500, 0.4850711875], [-86.2745773437, 0.4599529297], [-86.3304609375, 0.4348346719], [-86.3863445312, 0.4097164141], [-86.4422281250, 0.3845981563], [-86.4981117188, 0.3594798984], [-86.5539953125, 0.3343616406], [-86.6098789063, 0.3092433828], [-86.6657625000, 0.2841251250], [-86.7216460937, 0.2590068672], [-86.7775296875, 0.2338886094], [-86.8334132812, 0.2087703516], [-86.8892968750, 0.1836520938], [-86.9451804688, 0.1585338359], [-87.0010640625, 0.1334155781], [-87.0569476563, 0.1082973203], [-87.1128312500, 0.0831790625], [-87.1687148437, 0.0580608047], [-87.2245984375, 0.0329425469], [-87.2804820312, 0.0078242891], [-87.3363656250, -0.0172939687], [-87.3922492188, -0.0424122266], [-87.4481328125, -0.0675304844], [-87.5040164063, -0.0926487422], [-87.5599000000, -0.1177670000], [-87.4915625000, -0.1488701250], [-87.4232250000, -0.1799732500], [-87.3548875000, -0.2110763750], [-87.2865500000, -0.2421795000], [-87.2182125000, -0.2732826250], [-87.1498750000, -0.3043857500], [-87.0815375000, -0.3354888750], [-87.0132000000, -0.3665920000], [-86.9608968750, -0.3906713438], [-86.9085937500, -0.4147506875], [-86.8562906250, -0.4388300312], [-86.8039875000, -0.4629093750], [-86.7516843750, -0.4869887187], [-86.6993812500, -0.5110680625], [-86.6470781250, -0.5351474062], [-86.5947750000, -0.5592267500], [-86.5424718750, -0.5833060938], [-86.4901687500, -0.6073854375], [-86.4378656250, -0.6314647813], [-86.3855625000, -0.6555441250], [-86.3332593750, -0.6796234688], [-86.2809562500, -0.7037028125], [-86.2286531250, -0.7277821562], [-86.1763500000, -0.7518615000], [-86.1240468750, -0.7759408437], [-86.0717437500, -0.8000201875], [-86.0194406250, -0.8240995312], [-85.9671375000, -0.8481788750], [-85.9148343750, -0.8722582187], [-85.8625312500, -0.8963375625], [-85.8102281250, -0.9204169062], [-85.7579250000, -0.9444962500], [-85.7056218750, -0.9685755938], [-85.6533187500, -0.9926549375], [-85.6010156250, -1.0167342812], [-85.5487125000, -1.0408136250], [-85.4964093750, -1.0648929687], [-85.4441062500, -1.0889723125], [-85.3918031250, -1.1130516562], [-85.3395000000, -1.1371310000], [-85.2871968750, -1.1612103438], [-85.2348937500, -1.1852896875], [-85.1825906250, -1.2093690313], [-85.1302875000, -1.2334483750], [-85.0779843750, -1.2575277188], [-85.0256812500, -1.2816070625], [-84.9733781250, -1.3056864062], [-84.9210750000, -1.3297657500], [-84.8687718750, -1.3538450937], [-84.8164687500, -1.3779244375], [-84.7641656250, -1.4020037812], [-84.7118625000, -1.4260831250], [-84.6595593750, -1.4501624687], [-84.6072562500, -1.4742418125], [-84.5549531250, -1.4983211562], [-84.5026500000, -1.5224005000], [-84.4503468750, -1.5464798437], [-84.3980437500, -1.5705591875], [-84.3457406250, -1.5946385312], [-84.2934375000, -1.6187178750], [-84.2411343750, -1.6427972187], [-84.1888312500, -1.6668765625], [-84.1365281250, -1.6909559062], [-84.0842250000, -1.7150352500], [-84.0319218750, -1.7391145938], [-83.9796187500, -1.7631939375], [-83.9273156250, -1.7872732813], [-83.8750125000, -1.8113526250], [-83.8227093750, -1.8354319688], [-83.7704062500, -1.8595113125], [-83.7181031250, -1.8835906562], [-83.6658000000, -1.9076700000], [-83.6082250000, -1.9332850000], [-83.5506500000, -1.9589000000], [-83.4930750000, -1.9845150000], [-83.4355000000, -2.0101300000], [-83.3583187500, -2.0423356250], [-83.2811375000, -2.0745412500], [-83.2039562500, -2.1067468750], [-83.1267750000, -2.1389525000], [-83.0495937500, -2.1711581250], [-82.9724125000, -2.2033637500], [-82.8952312500, -2.2355693750], [-82.8180500000, -2.2677750000], [-82.7408687500, -2.2999806250], [-82.6636875000, -2.3321862500], [-82.5865062500, -2.3643918750], [-82.5093250000, -2.3965975000], [-82.4321437500, -2.4288031250], [-82.3549625000, -2.4610087500], [-82.2777812500, -2.4932143750], [-82.2006000000, -2.5254200000], [-82.1423570312, -2.5503180469], [-82.0841140625, -2.5752160937], [-82.0258710937, -2.6001141406], [-81.9676281250, -2.6250121875], [-81.9093851563, -2.6499102344], [-81.8511421875, -2.6748082813], [-81.7928992187, -2.6997063281], [-81.7346562500, -2.7246043750], [-81.6764132813, -2.7495024219], [-81.6181703125, -2.7744004688], [-81.5599273437, -2.7992985156], [-81.5016843750, -2.8241965625], [-81.4434414063, -2.8490946094], [-81.3851984375, -2.8739926562], [-81.3269554687, -2.8988907031], [-81.2687125000, -2.9237887500], [-81.2104695312, -2.9486867969], [-81.1522265625, -2.9735848437], [-81.0939835937, -2.9984828906], [-81.0357406250, -3.0233809375], [-80.9774976562, -3.0482789844], [-80.9192546875, -3.0731770313], [-80.8610117188, -3.0980750781], [-80.8027687500, -3.1229731250], [-80.7445257812, -3.1478711719], [-80.6862828125, -3.1727692188], [-80.6280398438, -3.1976672656], [-80.5697968750, -3.2225653125], [-80.5115539063, -3.2474633594], [-80.4533109375, -3.2723614063], [-80.3950679687, -3.2972594531], [-80.3368250000, -3.3221575000], [-80.2785820313, -3.3470555469], [-80.2203390625, -3.3719535938], [-80.1620960937, -3.3968516406], [-80.1038531250, -3.4217496875], [-80.0456101563, -3.4466477344], [-79.9873671875, -3.4715457813], [-79.9291242187, -3.4964438281], [-79.8708812500, -3.5213418750], [-79.8126382813, -3.5462399219], [-79.7543953125, -3.5711379688], [-79.6961523437, -3.5960360156], [-79.6379093750, -3.6209340625], [-79.5796664062, -3.6458321094], [-79.5214234375, -3.6707301563], [-79.4631804688, -3.6956282031], [-79.4049375000, -3.7205262500], [-79.3466945312, -3.7454242969], [-79.2884515625, -3.7703223438], [-79.2302085938, -3.7952203906], [-79.1719656250, -3.8201184375], [-79.1137226563, -3.8450164844], [-79.0554796875, -3.8699145313], [-78.9972367188, -3.8948125781], [-78.9389937500, -3.9197106250], [-78.8807507813, -3.9446086719], [-78.8225078125, -3.9695067188], [-78.7642648437, -3.9944047656], [-78.7060218750, -4.0193028125], [-78.6477789063, -4.0442008594], [-78.5895359375, -4.0690989062], [-78.5312929687, -4.0939969531], [-78.4730500000, -4.1188950000], [-78.4148070313, -4.1437930469], [-78.3565640625, -4.1686910938], [-78.2983210937, -4.1935891406], [-78.2400781250, -4.2184871875], [-78.1818351563, -4.2433852344], [-78.1235921875, -4.2682832812], [-78.0653492187, -4.2931813281], [-78.0071062500, -4.3180793750], [-77.9488632812, -4.3429774219], [-77.8906203125, -4.3678754688], [-77.8323773437, -4.3927735156], [-77.7741343750, -4.4176715625], [-77.7158914062, -4.4425696094], [-77.6576484375, -4.4674676562], [-77.5994054688, -4.4923657031], [-77.5411625000, -4.5172637500], [-77.4829195312, -4.5421617969], [-77.4246765625, -4.5670598438], [-77.3664335938, -4.5919578906], [-77.3081906250, -4.6168559375], [-77.2499476563, -4.6417539844], [-77.1917046875, -4.6666520312], [-77.1334617187, -4.6915500781], [-77.0752187500, -4.7164481250], [-77.0169757813, -4.7413461719], [-76.9587328125, -4.7662442187], [-76.9004898437, -4.7911422656], [-76.8422468750, -4.8160403125], [-76.7840039063, -4.8409383594], [-76.7257609375, -4.8658364063], [-76.6675179687, -4.8907344531], [-76.6092750000, -4.9156325000], [-76.5510320313, -4.9405305469], [-76.4927890625, -4.9654285937], [-76.4345460937, -4.9903266406], [-76.3763031250, -5.0152246875], [-76.3180601562, -5.0401227344], [-76.2598171875, -5.0650207813], [-76.2015742188, -5.0899188281], [-76.1433312500, -5.1148168750], [-76.0850882812, -5.1397149219], [-76.0268453125, -5.1646129688], [-75.9686023438, -5.1895110156], [-75.9103593750, -5.2144090625], [-75.8521164063, -5.2393071094], [-75.7938734375, -5.2642051563], [-75.7356304688, -5.2891032031], [-75.6773875000, -5.3140012500], [-75.6191445313, -5.3388992969], [-75.5609015625, -5.3637973438], [-75.5026585937, -5.3886953906], [-75.4444156250, -5.4135934375], [-75.3861726563, -5.4384914844], [-75.3279296875, -5.4633895312], [-75.2696867187, -5.4882875781], [-75.2114437500, -5.5131856250], [-75.1532007813, -5.5380836719], [-75.0949578125, -5.5629817188], [-75.0367148437, -5.5878797656], [-74.9784718750, -5.6127778125], [-74.9202289063, -5.6376758594], [-74.8619859375, -5.6625739062], [-74.8037429688, -5.6874719531], [-74.7455000000, -5.7123700000], [-74.6754000000, -5.7404550000], [-74.6053000000, -5.7685400000], [-74.5352000000, -5.7966250000], [-74.4651000000, -5.8247100000], [-74.4070000000, -5.8476350000], [-74.3489000000, -5.8705600000], [-74.2772468750, -5.8991806250], [-74.2055937500, -5.9278012500], [-74.1339406250, -5.9564218750], [-74.0622875000, -5.9850425000], [-73.9906343750, -6.0136631250], [-73.9189812500, -6.0422837500], [-73.8473281250, -6.0709043750], [-73.7756750000, -6.0995250000], [-73.7040218750, -6.1281456250], [-73.6323687500, -6.1567662500], [-73.5607156250, -6.1853868750], [-73.4890625000, -6.2140075000], [-73.4174093750, -6.2426281250], [-73.3457562500, -6.2712487500], [-73.2741031250, -6.2998693750], [-73.2024500000, -6.3284900000], [-73.1307968750, -6.3571106250], [-73.0591437500, -6.3857312500], [-72.9874906250, -6.4143518750], [-72.9158375000, -6.4429725000], [-72.8441843750, -6.4715931250], [-72.7725312500, -6.5002137500], [-72.7008781250, -6.5288343750], [-72.6292250000, -6.5574550000], [-72.5575718750, -6.5860756250], [-72.4859187500, -6.6146962500], [-72.4142656250, -6.6433168750], [-72.3426125000, -6.6719375000], [-72.2709593750, -6.7005581250], [-72.1993062500, -6.7291787500], [-72.1276531250, -6.7577993750], [-72.0560000000, -6.7864200000], [-71.9871812500, -6.8126412500], [-71.9183625000, -6.8388625000], [-71.8495437500, -6.8650837500], [-71.7807250000, -6.8913050000], [-71.7119062500, -6.9175262500], [-71.6430875000, -6.9437475000], [-71.5742687500, -6.9699687500], [-71.5054500000, -6.9961900000], [-71.4366312500, -7.0224112500], [-71.3678125000, -7.0486325000], [-71.2989937500, -7.0748537500], [-71.2301750000, -7.1010750000], [-71.1613562500, -7.1272962500], [-71.0925375000, -7.1535175000], [-71.0237187500, -7.1797387500], [-70.9549000000, -7.2059600000], [-70.8746250000, -7.2364335938], [-70.7943500000, -7.2669071875], [-70.7140750000, -7.2973807812], [-70.6338000000, -7.3278543750], [-70.5535250000, -7.3583279687], [-70.4732500000, -7.3888015625], [-70.3929750000, -7.4192751562], [-70.3127000000, -7.4497487500], [-70.2324250000, -7.4802223437], [-70.1521500000, -7.5106959375], [-70.0718750000, -7.5411695312], [-69.9916000000, -7.5716431250], [-69.9113250000, -7.6021167187], [-69.8310500000, -7.6325903125], [-69.7507750000, -7.6630639062], [-69.6705000000, -7.6935375000], [-69.5902250000, -7.7240110937], [-69.5099500000, -7.7544846875], [-69.4296750000, -7.7849582812], [-69.3494000000, -7.8154318750], [-69.2691250000, -7.8459054687], [-69.1888500000, -7.8763790625], [-69.1085750000, -7.9068526562], [-69.0283000000, -7.9373262500], [-68.9480250000, -7.9677998437], [-68.8677500000, -7.9982734375], [-68.7874750000, -8.0287470312], [-68.7072000000, -8.0592206250], [-68.6269250000, -8.0896942188], [-68.5466500000, -8.1201678125], [-68.4663750000, -8.1506414062], [-68.3861000000, -8.1811150000], [-68.3058250000, -8.2115885938], [-68.2255500000, -8.2420621875], [-68.1452750000, -8.2725357812], [-68.0650000000, -8.3030093750], [-67.9847250000, -8.3334829687], [-67.9044500000, -8.3639565625], [-67.8241750000, -8.3944301562], [-67.7439000000, -8.4249037500], [-67.6636250000, -8.4553773437], [-67.5833500000, -8.4858509375], [-67.5030750000, -8.5163245312], [-67.4228000000, -8.5467981250], [-67.3425250000, -8.5772717187], [-67.2622500000, -8.6077453125], [-67.1819750000, -8.6382189062], [-67.1017000000, -8.6686925000], [-67.0214250000, -8.6991660937], [-66.9411500000, -8.7296396875], [-66.8608750000, -8.7601132812], [-66.7806000000, -8.7905868750], [-66.7003250000, -8.8210604687], [-66.6200500000, -8.8515340625], [-66.5397750000, -8.8820076562], [-66.4595000000, -8.9124812500], [-66.3792250000, -8.9429548437], [-66.2989500000, -8.9734284375], [-66.2186750000, -9.0039020312], [-66.1384000000, -9.0343756250], [-66.0581250000, -9.0648492187], [-65.9778500000, -9.0953228125], [-65.8975750000, -9.1257964063], [-65.8173000000, -9.1562700000], [-65.7323000000, -9.1875500000], [-65.6585875000, -9.2133350000], [-65.5848750000, -9.2391200000], [-65.5111625000, -9.2649050000], [-65.4374500000, -9.2906900000], [-65.3637375000, -9.3164750000], [-65.2900250000, -9.3422600000], [-65.2163125000, -9.3680450000], [-65.1426000000, -9.3938300000], [-65.0689500000, -9.4194987500], [-64.9953000000, -9.4451675000], [-64.9216500000, -9.4708362500], [-64.8480000000, -9.4965050000], [-64.7743500000, -9.5221737500], [-64.7007000000, -9.5478425000], [-64.6270500000, -9.5735112500], [-64.5534000000, -9.5991800000], [-64.4797500000, -9.6248487500], [-64.4061000000, -9.6505175000], [-64.3324500000, -9.6761862500], [-64.2588000000, -9.7018550000], [-64.1851500000, -9.7275237500], [-64.1115000000, -9.7531925000], [-64.0378500000, -9.7788612500], [-63.9642000000, -9.8045300000], [-63.9036093750, -9.8256344531], [-63.8430187500, -9.8467389062], [-63.7824281250, -9.8678433594], [-63.7218375000, -9.8889478125], [-63.6612468750, -9.9100522656], [-63.6006562500, -9.9311567187], [-63.5400656250, -9.9522611719], [-63.4794750000, -9.9733656250], [-63.4188843750, -9.9944700781], [-63.3582937500, -10.0155745312], [-63.2977031250, -10.0366789844], [-63.2371125000, -10.0577834375], [-63.1765218750, -10.0788878906], [-63.1159312500, -10.0999923437], [-63.0553406250, -10.1210967969], [-62.9947500000, -10.1422012500], [-62.9341593750, -10.1633057031], [-62.8735687500, -10.1844101562], [-62.8129781250, -10.2055146094], [-62.7523875000, -10.2266190625], [-62.6917968750, -10.2477235156], [-62.6312062500, -10.2688279687], [-62.5706156250, -10.2899324219], [-62.5100250000, -10.3110368750], [-62.4494343750, -10.3321413281], [-62.3888437500, -10.3532457812], [-62.3282531250, -10.3743502344], [-62.2676625000, -10.3954546875], [-62.2070718750, -10.4165591406], [-62.1464812500, -10.4376635937], [-62.0858906250, -10.4587680469], [-62.0253000000, -10.4798725000], [-61.9647093750, -10.5009769531], [-61.9041187500, -10.5220814062], [-61.8435281250, -10.5431858594], [-61.7829375000, -10.5642903125], [-61.7223468750, -10.5853947656], [-61.6617562500, -10.6064992187], [-61.6011656250, -10.6276036719], [-61.5405750000, -10.6487081250], [-61.4799843750, -10.6698125781], [-61.4193937500, -10.6909170312], [-61.3588031250, -10.7120214844], [-61.2982125000, -10.7331259375], [-61.2376218750, -10.7542303906], [-61.1770312500, -10.7753348437], [-61.1164406250, -10.7964392969], [-61.0558500000, -10.8175437500], [-60.9952593750, -10.8386482031], [-60.9346687500, -10.8597526562], [-60.8740781250, -10.8808571094], [-60.8134875000, -10.9019615625], [-60.7528968750, -10.9230660156], [-60.6923062500, -10.9441704687], [-60.6317156250, -10.9652749219], [-60.5711250000, -10.9863793750], [-60.5105343750, -11.0074838281], [-60.4499437500, -11.0285882812], [-60.3893531250, -11.0496927344], [-60.3287625000, -11.0707971875], [-60.2681718750, -11.0919016406], [-60.2075812500, -11.1130060937], [-60.1469906250, -11.1341105469], [-60.0864000000, -11.1552150000], [-60.0258093750, -11.1763194531], [-59.9652187500, -11.1974239063], [-59.9046281250, -11.2185283594], [-59.8440375000, -11.2396328125], [-59.7834468750, -11.2607372656], [-59.7228562500, -11.2818417188], [-59.6622656250, -11.3029461719], [-59.6016750000, -11.3240506250], [-59.5410843750, -11.3451550781], [-59.4804937500, -11.3662595313], [-59.4199031250, -11.3873639844], [-59.3593125000, -11.4084684375], [-59.2987218750, -11.4295728906], [-59.2381312500, -11.4506773438], [-59.1775406250, -11.4717817969], [-59.1169500000, -11.4928862500], [-59.0563593750, -11.5139907031], [-58.9957687500, -11.5350951563], [-58.9351781250, -11.5561996094], [-58.8745875000, -11.5773040625], [-58.8139968750, -11.5984085156], [-58.7534062500, -11.6195129688], [-58.6928156250, -11.6406174219], [-58.6322250000, -11.6617218750], [-58.5716343750, -11.6828263281], [-58.5110437500, -11.7039307813], [-58.4504531250, -11.7250352344], [-58.3898625000, -11.7461396875], [-58.3292718750, -11.7672441406], [-58.2686812500, -11.7883485938], [-58.2080906250, -11.8094530469], [-58.1475000000, -11.8305575000], [-58.0869093750, -11.8516619531], [-58.0263187500, -11.8727664063], [-57.9657281250, -11.8938708594], [-57.9051375000, -11.9149753125]]);
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
import math
import time

from stl import mesh, Dimension

from tkinter import Tk     # from tkinter import Tk for Python 3.x
from tkinter.filedialog import askopenfilename
from mpl_toolkits.mplot3d import art3d
from matplotlib import pyplot as plt
import solid
import os
import ezdxf
import shapely.geometry as sg
import subprocess
from GUI import getSCADPath



def outputSTL(From, To, PATH=getSCADPath()):
    subprocess.Popen(PATH + " -o " + To + " " + From)
    while not os.path.exists(To):
        time.sleep(1)

class Model:
    def __init__(self, model, fileName, location, layer, thickness):
        self.location = location
        self.code = None
        self.fileName = fileName
        self.stl = fileName + ".stl"
        self.layer = layer
        self.thickness = thickness
        self.maxz = (layer+1)*thickness
        self.dxf = fileName + ".dxf"
        self.scad = fileName + ".scad"
        self.model = model
        self.center = None
        self.width = 10
        self.mesh = None
        self.useable_area = None


    def get_code(self):
        max_dim = 0.05
        max_array = 6

        num = int(self.fileName)
        nums = [int(a) for a in str(num)]
        nums.reverse()
        indices = nums
        length = len(nums)

        print(indices)
        t = 0
        i = 0
        cubes = []
        x = 0
        y = 0
        width = 0.01
        while x <= max_dim:
            while y <= max_dim:
                print(indices)
                if nums == []:
                    break
                if indices[0] != 0:
                    cubes.append(solid.translate([x, y, 0])(solid.cube(size=t / 1000 + 0.001)))
                    y += max_dim / (max_array - 1)
                    nums[0] = nums[0] - 1
                else:
                    indices.pop(0)
                    t += 1
                i += 1
            x += max_dim / (max_array - 1)
            y = 0

        outside = solid.translate([-width / 2, -width / 2])(solid.cube(max_dim + (length - 1) / 1000 + 0.001 + width))
        self.code = solid.difference()(outside, cubes)
        self.code = solid.projection(cut=True)(self.code)
        solid.scad_render_to_file(self.code, self.location + "/code.scad")
        outputSTL(From=self.location+"/code.scad", To=self.location+"code.dxf", PATH=getSCADPath())
        # os.system("toSTL.sh renders/code.scad renders/code.dxf")
        return self.location+"/code.dxf"

    def download(self, type):
        if type =="stl":
            print("generating:" + self.location+"/"+ self.fileName+".stl")
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".stl")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".stl")
        elif type == "dxf":
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".dxf")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".dxf")

    def render(self):
        solid.scad_render_to_file(self.model, self.location+"/"+ self.fileName+'.scad')
        while not os.path.exists(self.location+"/"+self.fileName+".scad"):
            time.sleep(1)
        # outputSTL(From= self.location+"/"+ self.fileName+'.scad', To=self.location+"/"+ self.fileName+'.stl')

    def get_points(self):
        doc = ezdxf.readfile(filename=self.location+"/"+ self.fileName+".dxf")
        msp = doc.modelspace()
        i=0
        lists = []
        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return [start, end]

        for e in msp.query("LINE"):
            line = helper(e)
            if not lists:
                lists.append([line])
            else:
                if lists[i][len(lists)-1][1] != line[0]:
                    lists.append([line])
                    i+=1
                else:
                    lists[i].append(line)

    def get_points2(self, FILE):
        doc = ezdxf.readfile(filename=FILE)
        msp = doc.modelspace()
        i = 0
        lists = []

        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return (start, end)

        for e in msp.query("LINE"):
            line = helper(e)
            if lists==[]:
                lists.append([line])
            else:
                if lists[i][len(lists[i]) - 1][1] != line[0]:
                    lists.append([line])
                    i += 1
                else:
                    lists[i].append(line)
        return lists

    def add_code(self):
        dxf = solid.projection(cut=False)(self.model)
        offset = solid.offset(r=-0.1)(dxf)
        solid.scad_render_to_file(offset, self.location+'/offset.scad')
        os.system("toSTL.sh renders/offset.scad renders/offset.dxf")
        lines = self.get_points2("renders/offset.dxf")
        x = lines[0][0][0][0]
        y = lines[0][0][0][1]
        print(x)
        print(y)
        code = solid.translate([x,y,0])(self.code)
        code = solid.linear_extrude(height=999)(code)
        save = self.model
        self.model = solid.projection()(solid.difference()(self.model, code))
        self.render()
        self.download("dxf")
        self.model = save

    def add_label(self, pos):
        # num = 12
        # minx, maxx, miny, maxy, minz, maxz = self.find_minmax()
        maxz = self.maxz
        # label = solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.5, halign="center"))
        # i=minx
        # print("x-len: " + str(maxx-minx))
        # print(i)
        # inc = (maxx-minx)/num
        # while minx <= i <= maxx:
        #     label = solid.union()(solid.translate([i, 0, maxz - 0.2])(solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.25, halign="center"))), label)
        #     i += inc
        #
        # l = label
        #
        # i =miny
        # while miny<= i <= maxy:
        #     print("y inc")
        #     l = solid.union()(solid.translate([0, i, 0])(label), l)
        #     i += 0.5
        for i in str(self.fileName):
            cur = pos[0]
            label = solid.translate([pos[0][0], pos[0][1], self.maxz-0.2])(solid.linear_extrude(height=(self.thickness)/3)(solid.text(str(i), size=0.5, halign="center", valign="center")))
            self.model = solid.difference()(self.model, label)
            pos.append(pos.pop(0))
            while abs(cur[0]-pos[0][0])<0.5 and abs(cur[1]-pos[0][1])<0.5:
                pos.append(pos.pop(0))



    def Center(self):

        volume, cog, inertia = self.mesh.get_mass_properties()
        print("Volume                                  = {0}".format(volume))
        print("Position of the center of gravity (COG) = {0}".format(cog))
        m_centered = solid.translate([-cog[0], -cog[1], 0])(
            self.model
        )
        return m_centered

    def find_minmax(self):
        minx = maxx = miny = maxy = minz = maxz = None
        for p in self.mesh.points:
            # p contains (x, y, z)
            if minx is None:
                minx = p[Dimension.X]
                maxx = p[Dimension.X]
                miny = p[Dimension.Y]
                maxy = p[Dimension.Y]
                minz = p[Dimension.Z]
                maxz = p[Dimension.Z]
            else:
                maxx = max(p[Dimension.X], maxx)
                minx = min(p[Dimension.X], minx)
                maxy = max(p[Dimension.Y], maxy)
                miny = min(p[Dimension.Y], miny)
                maxz = max(p[Dimension.Z], maxz)
                minz = min(p[Dimension.Z], minz)
        lenx = maxx - minx
        leny = maxy - miny
        lenz = maxz - minz
        return minx, maxx, miny, maxy, minz, maxz

    # def generate_Mesh(self):
    #     self.mesh = mesh.Mesh.from_file(self.location + "/" + str(int(self.fileName)//8)+ "b.stl")

    def get_top(self):
        top = solid.projection(cut=True)(solid.translate([0,0,-1*self.thickness*(self.layer+1)])(self.model))
        useable_area = solid.offset(r=-0.45)(top)
        self.useable_area = useable_area
        solid.scad_render_to_file(self.useable_area, self.location+'/' + 'toptemp.scad')
        outputSTL(From=self.location+'/' + 'toptemp.scad', To=self.location+"/top"+ self.dxf)

        # os.system("toSTL.sh out/toptemp.scad renders/" + self.fileName + ".dxf")
        dxf = DXF(self.location+"/top"+ self.dxf)
        min_p=dxf.points[0][0]
        points_ordered = dxf.points
        i=0
        while i <= len(dxf.points)+1:
            while math.sqrt((dxf.points[0][0]-dxf.points[1][0])**2+(dxf.points[0][1]-dxf.points[1][1])**2) > 0.1:
                dxf.points.insert(1, [(dxf.points[0][0]+dxf.points[1][0])/2, (dxf.points[0][1]+dxf.points[1][1])/2])
                i = i-1
            dxf.points.append(dxf.points.pop(0))
            i+=1
        for i in range(len(dxf.points)):
            dxf.points.append(dxf.points.pop(0))
            if dxf.points[0][0] < min_p:
                min_p = dxf.points[0][0]
                points_ordered = dxf.points.copy()
        dxf.points = points_ordered.copy()

        print(dxf.points)
        self.add_label(dxf.points)

class DXF:
    def __init__(self, file):
        self.file = file
        self.Lines = []
        self.points = []
        doc = ezdxf.readfile(self.file)
        msp = doc.modelspace()
        for e in msp:
            if e.dxftype() == "LINE":
                self.Lines.append(e)
                self.points.append([e.dxf.start[0], e.dxf.start[1]])
        # self.points.append([self.Lines[-1].dxf.end[0], self.Lines[-1].dxf.end[1]])
        self.area = None
        self.center = None
        self.polygon = sg.Polygon(self.points)

    def get_area(self):
        self.area = self.polygon.area
        return self.area

    def get_center(self):
        x_sum = 0
        y_sum =0
        for i in self.points:
            x_sum += i[0]
            y_sum += i[1]
        x_c = x_sum/len(self.points)
        y_c = y_sum/len(self.points)
        return (x_c, y_c)

    def split(self, maxdim):
        splits = []
        length = 0
        pieces = [[]]
        prev = self.points[-1]
        pieces[-1].append(prev)
        for j in self.points:
            length = length + math.sqrt((prev[0]-j[0])**2+(prev[1]-j[1])**2)
            if length >= maxdim:
                pieces[-1].append(j)
                pieces.append([])
                length = 0
            pieces[-1].append(j)
            prev = j
        for j in pieces:
            j.insert(0, [0,0])
            piece = solid.linear_extrude(height=10)(solid.polygon(j))
            splits.append(piece)
        return splits
    def refine_points(self):
        i=0
        while i <= len(self.points)+1:
            while math.sqrt((self.points[0][0]-self.points[1][0])**2+(self.points[0][1]-self.points[1][1])**2) > 0.1:
                self.points.insert(1, [(self.points[0][0]+self.points[1][0])/2, (self.points[0][1]+self.points[1][1])/2])
                i = i-1
            self.points.append(self.points.pop(0))
            i+=1


if __name__== "__main__":
    test = DXF("C:/Users/Daniel/Documents/repos/Shell_Maker/output/0top_slice.dxf")
    test.refine_points()
    k = test.split(48)
    for i in range(len(k)):
        solid.scad_render_to_file(k[i], str(i) + ".scad")


 
 
************************************************/
