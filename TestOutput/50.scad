// Generated by SolidPython 1.1.3 on 2024-05-26 02:00:52


intersection() {
	difference() {
		intersection() {
			translate(v = [0, 0, 0]) {
				import(file = "CE3E3V2_Bottom_shell.stl", origin = [0, 0]);
			}
			translate(v = [-90.04029846191406, -32.690147399902344, 12]) {
				cube(size = [180.0806, 65.380295, 2]);
			}
		}
		linear_extrude(height = 999) {
			offset(r = -1) {
				import(file = "C:/Users/Daniel/Documents/repos/Shell_Maker/TestOutput/6top_slice.dxf", origin = [0, 0]);
			}
		}
	}
	translate(v = [0, 0, 12]) {
		linear_extrude(height = 10) {
			polygon(points = [[0, 0], [5.6563065313, 27.0218000000], [5.5974948594, 27.0127500000], [5.5386831875, 27.0037000000], [5.4798715156, 26.9946500000], [5.4210598438, 26.9856000000], [5.3622481719, 26.9765500000], [5.3034365000, 26.9675000000], [5.2446248281, 26.9584500000], [5.1858131563, 26.9494000000], [5.1270014844, 26.9403500000], [5.0681898125, 26.9313000000], [5.0093781406, 26.9222500000], [4.9505664687, 26.9132000000], [4.8917547969, 26.9041500000], [4.8329431250, 26.8951000000], [4.7741314531, 26.8860500000], [4.7153197812, 26.8770000000], [4.6565081094, 26.8679500000], [4.5976964375, 26.8589000000], [4.5388847656, 26.8498500000], [4.4800730937, 26.8408000000], [4.4212614219, 26.8317500000], [4.3624497500, 26.8227000000], [4.3036380781, 26.8136500000], [4.2448264062, 26.8046000000], [4.1860147344, 26.7955500000], [4.1272030625, 26.7865000000], [4.0683913906, 26.7774500000], [4.0095797187, 26.7684000000], [3.9507680469, 26.7593500000], [3.8919563750, 26.7503000000], [3.8331447031, 26.7412500000], [3.7743330313, 26.7322000000], [3.7155213594, 26.7231500000], [3.6567096875, 26.7141000000], [3.5978980156, 26.7050500000], [3.5390863438, 26.6960000000], [3.4802746719, 26.6869500000], [3.4214630000, 26.6779000000], [3.3626513281, 26.6688500000], [3.3038396563, 26.6598000000], [3.2450279844, 26.6507500000], [3.1862163125, 26.6417000000], [3.1274046406, 26.6326500000], [3.0685929687, 26.6236000000], [3.0097812969, 26.6145500000], [2.9509696250, 26.6055000000], [2.8921579531, 26.5964500000], [2.8333462812, 26.5874000000], [2.7745346094, 26.5783500000], [2.7157229375, 26.5693000000], [2.6569112656, 26.5602500000], [2.5980995937, 26.5512000000], [2.5392879219, 26.5421500000], [2.4804762500, 26.5331000000], [2.4216645781, 26.5240500000], [2.3628529063, 26.5150000000], [2.3040412344, 26.5059500000], [2.2452295625, 26.4969000000], [2.1864178906, 26.4878500000], [2.1276062188, 26.4788000000], [2.0687945469, 26.4697500000], [2.0099828750, 26.4607000000], [1.9511712031, 26.4516500000], [1.8923595313, 26.4426000000], [1.8335478594, 26.4335500000], [1.7747361875, 26.4245000000], [1.7159245156, 26.4154500000], [1.6571128438, 26.4064000000], [1.5983011719, 26.3973500000], [1.5394895000, 26.3883000000], [1.4806778281, 26.3792500000], [1.4218661563, 26.3702000000], [1.3630544844, 26.3611500000], [1.3042428125, 26.3521000000], [1.2454311406, 26.3430500000], [1.1866194688, 26.3340000000], [1.1278077969, 26.3249500000], [1.0689961250, 26.3159000000], [1.0101844531, 26.3068500000], [0.9513727813, 26.2978000000], [0.8925611094, 26.2887500000], [0.8337494375, 26.2797000000], [0.7749377656, 26.2706500000], [0.7161260938, 26.2616000000], [0.6573144219, 26.2525500000], [0.5985027500, 26.2435000000], [0.5396910781, 26.2344500000], [0.4808794063, 26.2254000000], [0.4220677344, 26.2163500000], [0.3632560625, 26.2073000000], [0.3044443906, 26.1982500000], [0.2456327188, 26.1892000000], [0.1868210469, 26.1801500000], [0.1280093750, 26.1711000000], [0.0691977031, 26.1620500000], [0.0103860313, 26.1530000000], [-0.0484256406, 26.1439500000], [-0.1072373125, 26.1349000000], [-0.1660489844, 26.1258500000], [-0.2248606563, 26.1168000000], [-0.2836723281, 26.1077500000], [-0.3424840000, 26.0987000000], [-0.3978750000, 26.0897562500], [-0.4532660000, 26.0808125000], [-0.5086570000, 26.0718687500], [-0.5640480000, 26.0629250000], [-0.6194390000, 26.0539812500], [-0.6748300000, 26.0450375000], [-0.7302210000, 26.0360937500], [-0.7856120000, 26.0271500000], [-0.8410030000, 26.0182062500], [-0.8963940000, 26.0092625000], [-0.9517850000, 26.0003187500], [-1.0071760000, 25.9913750000], [-1.0625670000, 25.9824312500], [-1.1179580000, 25.9734875000], [-1.1733490000, 25.9645437500], [-1.2287400000, 25.9556000000], [-1.3019300000, 25.9432625000], [-1.3751200000, 25.9309250000], [-1.4483100000, 25.9185875000], [-1.5215000000, 25.9062500000], [-1.5946900000, 25.8939125000], [-1.6678800000, 25.8815750000], [-1.7410700000, 25.8692375000], [-1.8142600000, 25.8569000000], [-1.8874500000, 25.8445625000], [-1.9606400000, 25.8322250000], [-2.0338300000, 25.8198875000], [-2.1070200000, 25.8075500000], [-2.1802100000, 25.7952125000], [-2.2534000000, 25.7828750000], [-2.3265900000, 25.7705375000], [-2.3997800000, 25.7582000000], [-2.4729700000, 25.7458625000], [-2.5461600000, 25.7335250000], [-2.6193500000, 25.7211875000], [-2.6925400000, 25.7088500000], [-2.7657300000, 25.6965125000], [-2.8389200000, 25.6841750000], [-2.9121100000, 25.6718375000], [-2.9853000000, 25.6595000000], [-3.0584900000, 25.6471625000], [-3.1316800000, 25.6348250000], [-3.2048700000, 25.6224875000], [-3.2780600000, 25.6101500000], [-3.3512500000, 25.5978125000], [-3.4244400000, 25.5854750000], [-3.4976300000, 25.5731375000], [-3.5708200000, 25.5608000000], [-3.6552500000, 25.5457875000], [-3.7396800000, 25.5307750000], [-3.8241100000, 25.5157625000], [-3.9085400000, 25.5007500000], [-3.9929700000, 25.4857375000], [-4.0774000000, 25.4707250000], [-4.1618300000, 25.4557125000], [-4.2462600000, 25.4407000000], [-4.3054946875, 25.4296046875], [-4.3647293750, 25.4185093750], [-4.4239640625, 25.4074140625], [-4.4831987500, 25.3963187500], [-4.5424334375, 25.3852234375], [-4.6016681250, 25.3741281250], [-4.6609028125, 25.3630328125], [-4.7201375000, 25.3519375000], [-4.7793721875, 25.3408421875], [-4.8386068750, 25.3297468750], [-4.8978415625, 25.3186515625], [-4.9570762500, 25.3075562500], [-5.0163109375, 25.2964609375], [-5.0755456250, 25.2853656250], [-5.1347803125, 25.2742703125], [-5.1940150000, 25.2631750000], [-5.2532496875, 25.2520796875], [-5.3124843750, 25.2409843750], [-5.3717190625, 25.2298890625], [-5.4309537500, 25.2187937500], [-5.4901884375, 25.2076984375], [-5.5494231250, 25.1966031250], [-5.6086578125, 25.1855078125], [-5.6678925000, 25.1744125000], [-5.7271271875, 25.1633171875], [-5.7863618750, 25.1522218750], [-5.8455965625, 25.1411265625], [-5.9048312500, 25.1300312500], [-5.9640659375, 25.1189359375], [-6.0233006250, 25.1078406250], [-6.0825353125, 25.0967453125], [-6.1417700000, 25.0856500000], [-6.2010046875, 25.0745546875], [-6.2602393750, 25.0634593750], [-6.3194740625, 25.0523640625], [-6.3787087500, 25.0412687500], [-6.4379434375, 25.0301734375], [-6.4971781250, 25.0190781250], [-6.5564128125, 25.0079828125], [-6.6156475000, 24.9968875000], [-6.6748821875, 24.9857921875], [-6.7341168750, 24.9746968750], [-6.7933515625, 24.9636015625], [-6.8525862500, 24.9525062500], [-6.9118209375, 24.9414109375], [-6.9710556250, 24.9303156250], [-7.0302903125, 24.9192203125], [-7.0895250000, 24.9081250000], [-7.1487596875, 24.8970296875], [-7.2079943750, 24.8859343750], [-7.2672290625, 24.8748390625], [-7.3264637500, 24.8637437500], [-7.3856984375, 24.8526484375], [-7.4449331250, 24.8415531250], [-7.5041678125, 24.8304578125], [-7.5634025000, 24.8193625000], [-7.6226371875, 24.8082671875], [-7.6818718750, 24.7971718750], [-7.7411065625, 24.7860765625], [-7.8003412500, 24.7749812500], [-7.8595759375, 24.7638859375], [-7.9188106250, 24.7527906250], [-7.9780453125, 24.7416953125], [-8.0372800000, 24.7306000000], [-8.0965146875, 24.7195046875], [-8.1557493750, 24.7084093750], [-8.2149840625, 24.6973140625], [-8.2742187500, 24.6862187500], [-8.3334534375, 24.6751234375], [-8.3926881250, 24.6640281250], [-8.4519228125, 24.6529328125], [-8.5111575000, 24.6418375000], [-8.5703921875, 24.6307421875], [-8.6296268750, 24.6196468750], [-8.6888615625, 24.6085515625], [-8.7480962500, 24.5974562500], [-8.8073309375, 24.5863609375], [-8.8665656250, 24.5752656250], [-8.9258003125, 24.5641703125], [-8.9850350000, 24.5530750000], [-9.0442696875, 24.5419796875], [-9.1035043750, 24.5308843750], [-9.1627390625, 24.5197890625], [-9.2219737500, 24.5086937500], [-9.2812084375, 24.4975984375], [-9.3404431250, 24.4865031250], [-9.3996778125, 24.4754078125], [-9.4589125000, 24.4643125000], [-9.5181471875, 24.4532171875], [-9.5773818750, 24.4421218750], [-9.6366165625, 24.4310265625], [-9.6958512500, 24.4199312500], [-9.7550859375, 24.4088359375], [-9.8143206250, 24.3977406250], [-9.8735553125, 24.3866453125], [-9.9327900000, 24.3755500000], [-9.9920246875, 24.3644546875], [-10.0512593750, 24.3533593750], [-10.1104940625, 24.3422640625], [-10.1697287500, 24.3311687500], [-10.2289634375, 24.3200734375], [-10.2881981250, 24.3089781250], [-10.3474328125, 24.2978828125], [-10.4066675000, 24.2867875000], [-10.4659021875, 24.2756921875], [-10.5251368750, 24.2645968750], [-10.5843715625, 24.2535015625], [-10.6436062500, 24.2424062500], [-10.7028409375, 24.2313109375], [-10.7620756250, 24.2202156250], [-10.8213103125, 24.2091203125], [-10.8805450000, 24.1980250000], [-10.9397796875, 24.1869296875], [-10.9990143750, 24.1758343750], [-11.0582490625, 24.1647390625], [-11.1174837500, 24.1536437500], [-11.1767184375, 24.1425484375], [-11.2359531250, 24.1314531250], [-11.2951878125, 24.1203578125], [-11.3544225000, 24.1092625000], [-11.4136571875, 24.0981671875], [-11.4728918750, 24.0870718750], [-11.5321265625, 24.0759765625], [-11.5913612500, 24.0648812500], [-11.6505959375, 24.0537859375], [-11.7098306250, 24.0426906250], [-11.7690653125, 24.0315953125], [-11.8283000000, 24.0205000000], [-11.8988718750, 24.0067843750], [-11.9694437500, 23.9930687500], [-12.0400156250, 23.9793531250], [-12.1105875000, 23.9656375000], [-12.1811593750, 23.9519218750], [-12.2517312500, 23.9382062500], [-12.3223031250, 23.9244906250], [-12.3928750000, 23.9107750000], [-12.4634468750, 23.8970593750], [-12.5340187500, 23.8833437500], [-12.6045906250, 23.8696281250], [-12.6751625000, 23.8559125000], [-12.7457343750, 23.8421968750], [-12.8163062500, 23.8284812500], [-12.8868781250, 23.8147656250], [-12.9574500000, 23.8010500000], [-13.0280218750, 23.7873343750], [-13.0985937500, 23.7736187500], [-13.1691656250, 23.7599031250], [-13.2397375000, 23.7461875000], [-13.3103093750, 23.7324718750], [-13.3808812500, 23.7187562500], [-13.4514531250, 23.7050406250], [-13.5220250000, 23.6913250000], [-13.5925968750, 23.6776093750], [-13.6631687500, 23.6638937500], [-13.7337406250, 23.6501781250], [-13.8043125000, 23.6364625000], [-13.8748843750, 23.6227468750], [-13.9454562500, 23.6090312500], [-14.0160281250, 23.5953156250], [-14.0866000000, 23.5816000000], [-14.1748000000, 23.5636000000], [-14.2468421875, 23.5484281250], [-14.3188843750, 23.5332562500], [-14.3909265625, 23.5180843750], [-14.4629687500, 23.5029125000], [-14.5350109375, 23.4877406250], [-14.6070531250, 23.4725687500], [-14.6790953125, 23.4573968750], [-14.7511375000, 23.4422250000], [-14.8231796875, 23.4270531250], [-14.8952218750, 23.4118812500], [-14.9672640625, 23.3967093750], [-15.0393062500, 23.3815375000], [-15.1113484375, 23.3663656250], [-15.1833906250, 23.3511937500], [-15.2554328125, 23.3360218750], [-15.3274750000, 23.3208500000], [-15.3995171875, 23.3056781250], [-15.4715593750, 23.2905062500], [-15.5436015625, 23.2753343750], [-15.6156437500, 23.2601625000], [-15.6876859375, 23.2449906250], [-15.7597281250, 23.2298187500], [-15.8317703125, 23.2146468750], [-15.9038125000, 23.1994750000], [-15.9758546875, 23.1843031250], [-16.0478968750, 23.1691312500], [-16.1199390625, 23.1539593750], [-16.1919812500, 23.1387875000], [-16.2640234375, 23.1236156250], [-16.3360656250, 23.1084437500], [-16.4081078125, 23.0932718750], [-16.4801500000, 23.0781000000], [-16.5521921875, 23.0629281250], [-16.6242343750, 23.0477562500], [-16.6962765625, 23.0325843750], [-16.7683187500, 23.0174125000], [-16.8403609375, 23.0022406250], [-16.9124031250, 22.9870687500], [-16.9844453125, 22.9718968750], [-17.0564875000, 22.9567250000], [-17.1285296875, 22.9415531250], [-17.2005718750, 22.9263812500], [-17.2726140625, 22.9112093750], [-17.3446562500, 22.8960375000], [-17.4166984375, 22.8808656250], [-17.4887406250, 22.8656937500], [-17.5607828125, 22.8505218750], [-17.6328250000, 22.8353500000], [-17.7048671875, 22.8201781250], [-17.7769093750, 22.8050062500], [-17.8489515625, 22.7898343750], [-17.9209937500, 22.7746625000], [-17.9930359375, 22.7594906250], [-18.0650781250, 22.7443187500], [-18.1371203125, 22.7291468750], [-18.2091625000, 22.7139750000], [-18.2812046875, 22.6988031250], [-18.3532468750, 22.6836312500], [-18.4252890625, 22.6684593750], [-18.4973312500, 22.6532875000], [-18.5693734375, 22.6381156250], [-18.6414156250, 22.6229437500], [-18.7134578125, 22.6077718750], [-18.7855000000, 22.5926000000], [-18.7982000000, 22.5898000000], [-18.8574843750, 22.5759476563], [-18.9167687500, 22.5620953125], [-18.9760531250, 22.5482429687], [-19.0353375000, 22.5343906250], [-19.0946218750, 22.5205382813], [-19.1539062500, 22.5066859375], [-19.2131906250, 22.4928335937], [-19.2724750000, 22.4789812500], [-19.3317593750, 22.4651289063], [-19.3910437500, 22.4512765625], [-19.4503281250, 22.4374242187], [-19.5096125000, 22.4235718750], [-19.5688968750, 22.4097195313], [-19.6281812500, 22.3958671875], [-19.6874656250, 22.3820148437], [-19.7467500000, 22.3681625000], [-19.8060343750, 22.3543101563], [-19.8653187500, 22.3404578125], [-19.9246031250, 22.3266054687], [-19.9838875000, 22.3127531250], [-20.0431718750, 22.2989007813], [-20.1024562500, 22.2850484375], [-20.1617406250, 22.2711960937], [-20.2210250000, 22.2573437500], [-20.2803093750, 22.2434914063], [-20.3395937500, 22.2296390625], [-20.3988781250, 22.2157867187], [-20.4581625000, 22.2019343750], [-20.5174468750, 22.1880820313], [-20.5767312500, 22.1742296875], [-20.6360156250, 22.1603773437], [-20.6953000000, 22.1465250000], [-20.7545843750, 22.1326726563], [-20.8138687500, 22.1188203125], [-20.8731531250, 22.1049679687], [-20.9324375000, 22.0911156250], [-20.9917218750, 22.0772632813], [-21.0510062500, 22.0634109375], [-21.1102906250, 22.0495585937], [-21.1695750000, 22.0357062500], [-21.2288593750, 22.0218539063], [-21.2881437500, 22.0080015625], [-21.3474281250, 21.9941492187], [-21.4067125000, 21.9802968750], [-21.4659968750, 21.9664445313], [-21.5252812500, 21.9525921875], [-21.5845656250, 21.9387398437], [-21.6438500000, 21.9248875000], [-21.7031343750, 21.9110351563], [-21.7624187500, 21.8971828125], [-21.8217031250, 21.8833304687], [-21.8809875000, 21.8694781250], [-21.9402718750, 21.8556257813], [-21.9995562500, 21.8417734375], [-22.0588406250, 21.8279210937], [-22.1181250000, 21.8140687500], [-22.1774093750, 21.8002164063], [-22.2366937500, 21.7863640625], [-22.2959781250, 21.7725117187], [-22.3552625000, 21.7586593750], [-22.4145468750, 21.7448070313], [-22.4738312500, 21.7309546875], [-22.5331156250, 21.7171023437], [-22.5924000000, 21.7032500000], [-22.6516843750, 21.6893976563], [-22.7109687500, 21.6755453125], [-22.7702531250, 21.6616929687], [-22.8295375000, 21.6478406250], [-22.8888218750, 21.6339882813], [-22.9481062500, 21.6201359375], [-23.0073906250, 21.6062835937], [-23.0666750000, 21.5924312500], [-23.1259593750, 21.5785789063], [-23.1852437500, 21.5647265625], [-23.2445281250, 21.5508742187], [-23.3038125000, 21.5370218750], [-23.3630968750, 21.5231695313], [-23.4223812500, 21.5093171875], [-23.4816656250, 21.4954648437], [-23.5409500000, 21.4816125000], [-23.6002343750, 21.4677601563], [-23.6595187500, 21.4539078125], [-23.7188031250, 21.4400554687], [-23.7780875000, 21.4262031250], [-23.8373718750, 21.4123507813], [-23.8966562500, 21.3984984375], [-23.9559406250, 21.3846460937], [-24.0152250000, 21.3707937500], [-24.0745093750, 21.3569414063], [-24.1337937500, 21.3430890625], [-24.1930781250, 21.3292367187], [-24.2523625000, 21.3153843750], [-24.3116468750, 21.3015320313], [-24.3709312500, 21.2876796875], [-24.4302156250, 21.2738273437], [-24.4895000000, 21.2599750000], [-24.5487843750, 21.2461226563], [-24.6080687500, 21.2322703125], [-24.6673531250, 21.2184179687], [-24.7266375000, 21.2045656250], [-24.7859218750, 21.1907132813], [-24.8452062500, 21.1768609375], [-24.9044906250, 21.1630085937], [-24.9637750000, 21.1491562500], [-25.0230593750, 21.1353039063], [-25.0823437500, 21.1214515625], [-25.1416281250, 21.1075992187], [-25.2009125000, 21.0937468750], [-25.2601968750, 21.0798945313], [-25.3194812500, 21.0660421875], [-25.3787656250, 21.0521898437], [-25.4380500000, 21.0383375000], [-25.4973343750, 21.0244851563], [-25.5566187500, 21.0106328125], [-25.6159031250, 20.9967804687], [-25.6751875000, 20.9829281250], [-25.7344718750, 20.9690757813], [-25.7937562500, 20.9552234375], [-25.8530406250, 20.9413710937], [-25.9123250000, 20.9275187500], [-25.9716093750, 20.9136664063], [-26.0308937500, 20.8998140625], [-26.0901781250, 20.8859617187], [-26.1494625000, 20.8721093750], [-26.2087468750, 20.8582570313], [-26.2680312500, 20.8444046875], [-26.3273156250, 20.8305523437], [-26.3866000000, 20.8167000000], [-26.4466281250, 20.8026656250], [-26.5066562500, 20.7886312500], [-26.5666843750, 20.7745968750], [-26.6267125000, 20.7605625000], [-26.6867406250, 20.7465281250], [-26.7467687500, 20.7324937500], [-26.8067968750, 20.7184593750], [-26.8668250000, 20.7044250000], [-26.9268531250, 20.6903906250], [-26.9868812500, 20.6763562500], [-27.0469093750, 20.6623218750], [-27.1069375000, 20.6482875000], [-27.1669656250, 20.6342531250], [-27.2269937500, 20.6202187500], [-27.2870218750, 20.6061843750], [-27.3470500000, 20.5921500000], [-27.4070781250, 20.5781156250], [-27.4671062500, 20.5640812500], [-27.5271343750, 20.5500468750], [-27.5871625000, 20.5360125000], [-27.6471906250, 20.5219781250], [-27.7072187500, 20.5079437500], [-27.7672468750, 20.4939093750], [-27.8272750000, 20.4798750000], [-27.8873031250, 20.4658406250], [-27.9473312500, 20.4518062500], [-28.0073593750, 20.4377718750], [-28.0673875000, 20.4237375000], [-28.1274156250, 20.4097031250], [-28.1874437500, 20.3956687500], [-28.2474718750, 20.3816343750], [-28.3075000000, 20.3676000000], [-28.3675281250, 20.3535656250], [-28.4275562500, 20.3395312500], [-28.4875843750, 20.3254968750], [-28.5476125000, 20.3114625000], [-28.6076406250, 20.2974281250], [-28.6676687500, 20.2833937500], [-28.7276968750, 20.2693593750], [-28.7877250000, 20.2553250000], [-28.8477531250, 20.2412906250], [-28.9077812500, 20.2272562500], [-28.9678093750, 20.2132218750], [-29.0278375000, 20.1991875000], [-29.0878656250, 20.1851531250], [-29.1478937500, 20.1711187500], [-29.2079218750, 20.1570843750], [-29.2679500000, 20.1430500000], [-29.3279781250, 20.1290156250], [-29.3880062500, 20.1149812500], [-29.4480343750, 20.1009468750], [-29.5080625000, 20.0869125000], [-29.5680906250, 20.0728781250], [-29.6281187500, 20.0588437500], [-29.6881468750, 20.0448093750], [-29.7481750000, 20.0307750000], [-29.8082031250, 20.0167406250], [-29.8682312500, 20.0027062500], [-29.9282593750, 19.9886718750], [-29.9882875000, 19.9746375000], [-30.0483156250, 19.9606031250], [-30.1083437500, 19.9465687500], [-30.1683718750, 19.9325343750], [-30.2284000000, 19.9185000000], [-30.2943500000, 19.9015750000], [-30.3603000000, 19.8846500000], [-30.4262500000, 19.8677250000], [-30.4922000000, 19.8508000000], [-30.5581500000, 19.8338750000], [-30.6241000000, 19.8169500000], [-30.6900500000, 19.8000250000], [-30.7560000000, 19.7831000000], [-30.8219500000, 19.7661750000], [-30.8879000000, 19.7492500000], [-30.9538500000, 19.7323250000], [-31.0198000000, 19.7154000000], [-31.0857500000, 19.6984750000], [-31.1517000000, 19.6815500000], [-31.2176500000, 19.6646250000], [-31.2836000000, 19.6477000000], [-31.3495500000, 19.6307750000], [-31.4155000000, 19.6138500000], [-31.4814500000, 19.5969250000], [-31.5474000000, 19.5800000000], [-31.6133500000, 19.5630750000], [-31.6793000000, 19.5461500000], [-31.7452500000, 19.5292250000], [-31.8112000000, 19.5123000000], [-31.8771500000, 19.4953750000], [-31.9431000000, 19.4784500000], [-32.0090500000, 19.4615250000], [-32.0750000000, 19.4446000000], [-32.1409500000, 19.4276750000], [-32.2069000000, 19.4107500000], [-32.2728500000, 19.3938250000], [-32.3388000000, 19.3769000000], [-32.4047500000, 19.3599750000], [-32.4707000000, 19.3430500000], [-32.5366500000, 19.3261250000], [-32.6026000000, 19.3092000000], [-32.6685500000, 19.2922750000], [-32.7345000000, 19.2753500000], [-32.8004500000, 19.2584250000], [-32.8664000000, 19.2415000000], [-32.9323500000, 19.2245750000], [-32.9983000000, 19.2076500000], [-33.0642500000, 19.1907250000], [-33.1302000000, 19.1738000000], [-33.1961500000, 19.1568750000], [-33.2621000000, 19.1399500000], [-33.3280500000, 19.1230250000], [-33.3940000000, 19.1061000000], [-33.4599500000, 19.0891750000], [-33.5259000000, 19.0722500000], [-33.5918500000, 19.0553250000], [-33.6578000000, 19.0384000000], [-33.7237500000, 19.0214750000], [-33.7897000000, 19.0045500000], [-33.8556500000, 18.9876250000], [-33.9216000000, 18.9707000000], [-33.9875500000, 18.9537750000], [-34.0535000000, 18.9368500000], [-34.1194500000, 18.9199250000], [-34.1854000000, 18.9030000000], [-34.2513500000, 18.8860750000], [-34.3173000000, 18.8691500000], [-34.3832500000, 18.8522250000], [-34.4492000000, 18.8353000000], [-34.5111000000, 18.8189500000], [-34.5730000000, 18.8026000000], [-34.6349000000, 18.7862500000], [-34.6968000000, 18.7699000000], [-34.7708562500, 18.7496281250], [-34.8449125000, 18.7293562500], [-34.9189687500, 18.7090843750], [-34.9930250000, 18.6888125000], [-35.0670812500, 18.6685406250], [-35.1411375000, 18.6482687500], [-35.2151937500, 18.6279968750], [-35.2892500000, 18.6077250000], [-35.3633062500, 18.5874531250], [-35.4373625000, 18.5671812500], [-35.5114187500, 18.5469093750], [-35.5854750000, 18.5266375000], [-35.6595312500, 18.5063656250], [-35.7335875000, 18.4860937500], [-35.8076437500, 18.4658218750], [-35.8817000000, 18.4455500000], [-35.9557562500, 18.4252781250], [-36.0298125000, 18.4050062500], [-36.1038687500, 18.3847343750], [-36.1779250000, 18.3644625000], [-36.2519812500, 18.3441906250], [-36.3260375000, 18.3239187500], [-36.4000937500, 18.3036468750], [-36.4741500000, 18.2833750000], [-36.5482062500, 18.2631031250], [-36.6222625000, 18.2428312500], [-36.6963187500, 18.2225593750], [-36.7703750000, 18.2022875000], [-36.8444312500, 18.1820156250], [-36.9184875000, 18.1617437500], [-36.9925437500, 18.1414718750], [-37.0666000000, 18.1212000000], [-37.1406562500, 18.1009281250], [-37.2147125000, 18.0806562500], [-37.2887687500, 18.0603843750], [-37.3628250000, 18.0401125000], [-37.4368812500, 18.0198406250], [-37.5109375000, 17.9995687500], [-37.5849937500, 17.9792968750], [-37.6590500000, 17.9590250000], [-37.7331062500, 17.9387531250], [-37.8071625000, 17.9184812500], [-37.8812187500, 17.8982093750], [-37.9552750000, 17.8779375000], [-38.0293312500, 17.8576656250], [-38.1033875000, 17.8373937500], [-38.1774437500, 17.8171218750], [-38.2515000000, 17.7968500000], [-38.3255562500, 17.7765781250], [-38.3996125000, 17.7563062500], [-38.4736687500, 17.7360343750], [-38.5477250000, 17.7157625000], [-38.6217812500, 17.6954906250], [-38.6958375000, 17.6752187500], [-38.7698937500, 17.6549468750], [-38.8439500000, 17.6346750000], [-38.9180062500, 17.6144031250], [-38.9920625000, 17.5941312500], [-39.0661187500, 17.5738593750], [-39.1401750000, 17.5535875000], [-39.2142312500, 17.5333156250], [-39.2882875000, 17.5130437500], [-39.3623437500, 17.4927718750], [-39.4364000000, 17.4725000000], [-39.4886250000, 17.4581437500], [-39.5408500000, 17.4437875000], [-39.5930750000, 17.4294312500], [-39.6453000000, 17.4150750000], [-39.6975250000, 17.4007187500], [-39.7497500000, 17.3863625000], [-39.8019750000, 17.3720062500], [-39.8542000000, 17.3576500000], [-39.9064250000, 17.3432937500], [-39.9586500000, 17.3289375000], [-40.0108750000, 17.3145812500], [-40.0631000000, 17.3002250000], [-40.1153250000, 17.2858687500], [-40.1675500000, 17.2715125000], [-40.2197750000, 17.2571562500], [-40.2720000000, 17.2428000000], [-40.3410250000, 17.2233000000], [-40.4100500000, 17.2038000000], [-40.4790750000, 17.1843000000], [-40.5481000000, 17.1648000000], [-40.6171250000, 17.1453000000], [-40.6861500000, 17.1258000000], [-40.7551750000, 17.1063000000], [-40.8242000000, 17.0868000000], [-40.8932250000, 17.0673000000], [-40.9622500000, 17.0478000000], [-41.0312750000, 17.0283000000], [-41.1003000000, 17.0088000000], [-41.1693250000, 16.9893000000], [-41.2383500000, 16.9698000000], [-41.3073750000, 16.9503000000]]);
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
import math
import time

from stl import mesh, Dimension

from tkinter import Tk     # from tkinter import Tk for Python 3.x
from tkinter.filedialog import askopenfilename
from mpl_toolkits.mplot3d import art3d
from matplotlib import pyplot as plt
import solid
import os
import ezdxf
import shapely.geometry as sg
import subprocess
from GUI import getSCADPath



def outputSTL(From, To, PATH=getSCADPath()):
    subprocess.Popen(PATH + " -o " + To + " " + From)
    while not os.path.exists(To):
        time.sleep(1)

class Model:
    def __init__(self, model, fileName, location, layer, thickness):
        self.location = location
        self.code = None
        self.fileName = fileName
        self.stl = fileName + ".stl"
        self.layer = layer
        self.thickness = thickness
        self.maxz = (layer+1)*thickness
        self.dxf = fileName + ".dxf"
        self.scad = fileName + ".scad"
        self.model = model
        self.center = None
        self.width = 10
        self.mesh = None
        self.useable_area = None


    def get_code(self):
        max_dim = 0.05
        max_array = 6

        num = int(self.fileName)
        nums = [int(a) for a in str(num)]
        nums.reverse()
        indices = nums
        length = len(nums)

        print(indices)
        t = 0
        i = 0
        cubes = []
        x = 0
        y = 0
        width = 0.01
        while x <= max_dim:
            while y <= max_dim:
                print(indices)
                if nums == []:
                    break
                if indices[0] != 0:
                    cubes.append(solid.translate([x, y, 0])(solid.cube(size=t / 1000 + 0.001)))
                    y += max_dim / (max_array - 1)
                    nums[0] = nums[0] - 1
                else:
                    indices.pop(0)
                    t += 1
                i += 1
            x += max_dim / (max_array - 1)
            y = 0

        outside = solid.translate([-width / 2, -width / 2])(solid.cube(max_dim + (length - 1) / 1000 + 0.001 + width))
        self.code = solid.difference()(outside, cubes)
        self.code = solid.projection(cut=True)(self.code)
        solid.scad_render_to_file(self.code, self.location + "/code.scad")
        outputSTL(From=self.location+"/code.scad", To=self.location+"code.dxf", PATH=getSCADPath())
        # os.system("toSTL.sh renders/code.scad renders/code.dxf")
        return self.location+"/code.dxf"

    def download(self, type):
        if type =="stl":
            print("generating:" + self.location+"/"+ self.fileName+".stl")
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".stl")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".stl")
        elif type == "dxf":
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".dxf")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".dxf")

    def render(self):
        solid.scad_render_to_file(self.model, self.location+"/"+ self.fileName+'.scad')
        while not os.path.exists(self.location+"/"+self.fileName+".scad"):
            time.sleep(1)
        # outputSTL(From= self.location+"/"+ self.fileName+'.scad', To=self.location+"/"+ self.fileName+'.stl')

    def get_points(self):
        doc = ezdxf.readfile(filename=self.location+"/"+ self.fileName+".dxf")
        msp = doc.modelspace()
        i=0
        lists = []
        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return [start, end]

        for e in msp.query("LINE"):
            line = helper(e)
            if not lists:
                lists.append([line])
            else:
                if lists[i][len(lists)-1][1] != line[0]:
                    lists.append([line])
                    i+=1
                else:
                    lists[i].append(line)

    def get_points2(self, FILE):
        doc = ezdxf.readfile(filename=FILE)
        msp = doc.modelspace()
        i = 0
        lists = []

        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return (start, end)

        for e in msp.query("LINE"):
            line = helper(e)
            if lists==[]:
                lists.append([line])
            else:
                if lists[i][len(lists[i]) - 1][1] != line[0]:
                    lists.append([line])
                    i += 1
                else:
                    lists[i].append(line)
        return lists

    def add_code(self):
        dxf = solid.projection(cut=False)(self.model)
        offset = solid.offset(r=-0.1)(dxf)
        solid.scad_render_to_file(offset, self.location+'/offset.scad')
        os.system("toSTL.sh renders/offset.scad renders/offset.dxf")
        lines = self.get_points2("renders/offset.dxf")
        x = lines[0][0][0][0]
        y = lines[0][0][0][1]
        print(x)
        print(y)
        code = solid.translate([x,y,0])(self.code)
        code = solid.linear_extrude(height=999)(code)
        save = self.model
        self.model = solid.projection()(solid.difference()(self.model, code))
        self.render()
        self.download("dxf")
        self.model = save

    def add_label(self, pos):
        # num = 12
        # minx, maxx, miny, maxy, minz, maxz = self.find_minmax()
        maxz = self.maxz
        # label = solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.5, halign="center"))
        # i=minx
        # print("x-len: " + str(maxx-minx))
        # print(i)
        # inc = (maxx-minx)/num
        # while minx <= i <= maxx:
        #     label = solid.union()(solid.translate([i, 0, maxz - 0.2])(solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.25, halign="center"))), label)
        #     i += inc
        #
        # l = label
        #
        # i =miny
        # while miny<= i <= maxy:
        #     print("y inc")
        #     l = solid.union()(solid.translate([0, i, 0])(label), l)
        #     i += 0.5
        for i in str(self.fileName):
            cur = pos[0]
            label = solid.translate([pos[0][0], pos[0][1], self.maxz-0.2])(solid.linear_extrude(height=(self.thickness)/3)(solid.text(str(i), size=0.5, halign="center", valign="center")))
            self.model = solid.difference()(self.model, label)
            pos.append(pos.pop(0))
            while abs(cur[0]-pos[0][0])<0.5 and abs(cur[1]-pos[0][1])<0.5:
                pos.append(pos.pop(0))



    def Center(self):

        volume, cog, inertia = self.mesh.get_mass_properties()
        print("Volume                                  = {0}".format(volume))
        print("Position of the center of gravity (COG) = {0}".format(cog))
        m_centered = solid.translate([-cog[0], -cog[1], 0])(
            self.model
        )
        return m_centered

    def find_minmax(self):
        minx = maxx = miny = maxy = minz = maxz = None
        for p in self.mesh.points:
            # p contains (x, y, z)
            if minx is None:
                minx = p[Dimension.X]
                maxx = p[Dimension.X]
                miny = p[Dimension.Y]
                maxy = p[Dimension.Y]
                minz = p[Dimension.Z]
                maxz = p[Dimension.Z]
            else:
                maxx = max(p[Dimension.X], maxx)
                minx = min(p[Dimension.X], minx)
                maxy = max(p[Dimension.Y], maxy)
                miny = min(p[Dimension.Y], miny)
                maxz = max(p[Dimension.Z], maxz)
                minz = min(p[Dimension.Z], minz)
        lenx = maxx - minx
        leny = maxy - miny
        lenz = maxz - minz
        return minx, maxx, miny, maxy, minz, maxz

    # def generate_Mesh(self):
    #     self.mesh = mesh.Mesh.from_file(self.location + "/" + str(int(self.fileName)//8)+ "b.stl")

    def get_top(self):
        top = solid.projection(cut=True)(solid.translate([0,0,-1*self.thickness*(self.layer+1)])(self.model))
        useable_area = solid.offset(r=-0.45)(top)
        self.useable_area = useable_area
        solid.scad_render_to_file(self.useable_area, self.location+'/' + 'toptemp.scad')
        outputSTL(From=self.location+'/' + 'toptemp.scad', To=self.location+"/top"+ self.dxf)

        # os.system("toSTL.sh out/toptemp.scad renders/" + self.fileName + ".dxf")
        dxf = DXF(self.location+"/top"+ self.dxf)
        min_p=dxf.points[0][0]
        points_ordered = dxf.points
        i=0
        while i <= len(dxf.points)+1:
            while math.sqrt((dxf.points[0][0]-dxf.points[1][0])**2+(dxf.points[0][1]-dxf.points[1][1])**2) > 0.1:
                dxf.points.insert(1, [(dxf.points[0][0]+dxf.points[1][0])/2, (dxf.points[0][1]+dxf.points[1][1])/2])
                i = i-1
            dxf.points.append(dxf.points.pop(0))
            i+=1
        for i in range(len(dxf.points)):
            dxf.points.append(dxf.points.pop(0))
            if dxf.points[0][0] < min_p:
                min_p = dxf.points[0][0]
                points_ordered = dxf.points.copy()
        dxf.points = points_ordered.copy()

        print(dxf.points)
        self.add_label(dxf.points)

class DXF:
    def __init__(self, file):
        self.file = file
        self.Lines = []
        self.points = []
        doc = ezdxf.readfile(self.file)
        msp = doc.modelspace()
        for e in msp:
            if e.dxftype() == "LINE":
                self.Lines.append(e)
                self.points.append([e.dxf.start[0], e.dxf.start[1]])
        # self.points.append([self.Lines[-1].dxf.end[0], self.Lines[-1].dxf.end[1]])
        self.area = None
        self.center = None
        self.polygon = sg.Polygon(self.points)

    def get_area(self):
        self.area = self.polygon.area
        return self.area

    def get_center(self):
        x_sum = 0
        y_sum =0
        for i in self.points:
            x_sum += i[0]
            y_sum += i[1]
        x_c = x_sum/len(self.points)
        y_c = y_sum/len(self.points)
        return (x_c, y_c)

    def split(self, maxdim):
        splits = []
        length = 0
        pieces = [[]]
        prev = self.points[-1]
        pieces[-1].append(prev)
        for j in self.points:
            length = length + math.sqrt((prev[0]-j[0])**2+(prev[1]-j[1])**2)
            if length >= maxdim:
                pieces[-1].append(j)
                pieces.append([])
                length = 0
            pieces[-1].append(j)
            prev = j
        for j in pieces:
            j.insert(0, [0,0])
            piece = solid.linear_extrude(height=10)(solid.polygon(j))
            splits.append(piece)
        return splits
    def refine_points(self):
        i=0
        while i <= len(self.points)+1:
            while math.sqrt((self.points[0][0]-self.points[1][0])**2+(self.points[0][1]-self.points[1][1])**2) > 0.1:
                self.points.insert(1, [(self.points[0][0]+self.points[1][0])/2, (self.points[0][1]+self.points[1][1])/2])
                i = i-1
            self.points.append(self.points.pop(0))
            i+=1


if __name__== "__main__":
    test = DXF("C:/Users/Daniel/Documents/repos/Shell_Maker/output/0top_slice.dxf")
    test.refine_points()
    k = test.split(48)
    for i in range(len(k)):
        solid.scad_render_to_file(k[i], str(i) + ".scad")


 
 
************************************************/
