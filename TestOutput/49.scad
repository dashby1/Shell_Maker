// Generated by SolidPython 1.1.3 on 2024-05-26 02:00:52


intersection() {
	difference() {
		intersection() {
			translate(v = [0, 0, 0]) {
				import(file = "CE3E3V2_Bottom_shell.stl", origin = [0, 0]);
			}
			translate(v = [-90.04029846191406, -32.690147399902344, 12]) {
				cube(size = [180.0806, 65.380295, 2]);
			}
		}
		linear_extrude(height = 999) {
			offset(r = -1) {
				import(file = "C:/Users/Daniel/Documents/repos/Shell_Maker/TestOutput/6top_slice.dxf", origin = [0, 0]);
			}
		}
	}
	translate(v = [0, 0, 12]) {
		linear_extrude(height = 10) {
			polygon(points = [[0, 0], [51.2694000000, 18.0430500000], [51.2252000000, 18.0762250000], [51.1810000000, 18.1094000000], [51.1110687500, 18.1606875000], [51.0411375000, 18.2119750000], [50.9712062500, 18.2632625000], [50.9012750000, 18.3145500000], [50.8313437500, 18.3658375000], [50.7614125000, 18.4171250000], [50.6914812500, 18.4684125000], [50.6215500000, 18.5197000000], [50.5516187500, 18.5709875000], [50.4816875000, 18.6222750000], [50.4117562500, 18.6735625000], [50.3418250000, 18.7248500000], [50.2718937500, 18.7761375000], [50.2019625000, 18.8274250000], [50.1320312500, 18.8787125000], [50.0621000000, 18.9300000000], [49.9921687500, 18.9812875000], [49.9222375000, 19.0325750000], [49.8523062500, 19.0838625000], [49.7823750000, 19.1351500000], [49.7124437500, 19.1864375000], [49.6425125000, 19.2377250000], [49.5725812500, 19.2890125000], [49.5026500000, 19.3403000000], [49.4327187500, 19.3915875000], [49.3627875000, 19.4428750000], [49.2928562500, 19.4941625000], [49.2229250000, 19.5454500000], [49.1529937500, 19.5967375000], [49.0830625000, 19.6480250000], [49.0131312500, 19.6993125000], [48.9432000000, 19.7506000000], [48.8841000000, 19.7909000000], [48.8250000000, 19.8312000000], [48.7783781250, 19.8607750000], [48.7317562500, 19.8903500000], [48.6851343750, 19.9199250000], [48.6385125000, 19.9495000000], [48.5918906250, 19.9790750000], [48.5452687500, 20.0086500000], [48.4986468750, 20.0382250000], [48.4520250000, 20.0678000000], [48.4054031250, 20.0973750000], [48.3587812500, 20.1269500000], [48.3121593750, 20.1565250000], [48.2655375000, 20.1861000000], [48.2189156250, 20.2156750000], [48.1722937500, 20.2452500000], [48.1256718750, 20.2748250000], [48.0790500000, 20.3044000000], [48.0324281250, 20.3339750000], [47.9858062500, 20.3635500000], [47.9391843750, 20.3931250000], [47.8925625000, 20.4227000000], [47.8459406250, 20.4522750000], [47.7993187500, 20.4818500000], [47.7526968750, 20.5114250000], [47.7060750000, 20.5410000000], [47.6594531250, 20.5705750000], [47.6128312500, 20.6001500000], [47.5662093750, 20.6297250000], [47.5195875000, 20.6593000000], [47.4729656250, 20.6888750000], [47.4263437500, 20.7184500000], [47.3797218750, 20.7480250000], [47.3331000000, 20.7776000000], [47.2622625000, 20.8236000000], [47.1914250000, 20.8696000000], [47.1205875000, 20.9156000000], [47.0497500000, 20.9616000000], [46.9789125000, 21.0076000000], [46.9080750000, 21.0536000000], [46.8372375000, 21.0996000000], [46.7664000000, 21.1456000000], [46.7168250000, 21.1751000000], [46.6672500000, 21.2046000000], [46.6176750000, 21.2341000000], [46.5681000000, 21.2636000000], [46.4921437500, 21.3073125000], [46.4161875000, 21.3510250000], [46.3402312500, 21.3947375000], [46.2642750000, 21.4384500000], [46.1883187500, 21.4821625000], [46.1123625000, 21.5258750000], [46.0364062500, 21.5695875000], [45.9604500000, 21.6133000000], [45.8844937500, 21.6570125000], [45.8085375000, 21.7007250000], [45.7325812500, 21.7444375000], [45.6566250000, 21.7881500000], [45.5806687500, 21.8318625000], [45.5047125000, 21.8755750000], [45.4287562500, 21.9192875000], [45.3528000000, 21.9630000000], [45.3082000000, 21.9882750000], [45.2636000000, 22.0135500000], [45.2190000000, 22.0388250000], [45.1744000000, 22.0641000000], [45.0927250000, 22.1082500000], [45.0110500000, 22.1524000000], [44.9293750000, 22.1965500000], [44.8477000000, 22.2407000000], [44.7660250000, 22.2848500000], [44.6843500000, 22.3290000000], [44.6026750000, 22.3731500000], [44.5210000000, 22.4173000000], [44.4390312500, 22.4603500000], [44.3570625000, 22.5034000000], [44.2750937500, 22.5464500000], [44.1931250000, 22.5895000000], [44.1111562500, 22.6325500000], [44.0291875000, 22.6756000000], [43.9472187500, 22.7186500000], [43.8652500000, 22.7617000000], [43.7832812500, 22.8047500000], [43.7013125000, 22.8478000000], [43.6193437500, 22.8908500000], [43.5373750000, 22.9339000000], [43.4554062500, 22.9769500000], [43.3734375000, 23.0200000000], [43.2914687500, 23.0630500000], [43.2095000000, 23.1061000000], [43.1826000000, 23.1196000000], [43.1054593750, 23.1546375000], [43.0283187500, 23.1896750000], [42.9511781250, 23.2247125000], [42.8740375000, 23.2597500000], [42.7968968750, 23.2947875000], [42.7197562500, 23.3298250000], [42.6426156250, 23.3648625000], [42.5654750000, 23.3999000000], [42.4883343750, 23.4349375000], [42.4111937500, 23.4699750000], [42.3340531250, 23.5050125000], [42.2569125000, 23.5400500000], [42.1797718750, 23.5750875000], [42.1026312500, 23.6101250000], [42.0254906250, 23.6451625000], [41.9483500000, 23.6802000000], [41.8712093750, 23.7152375000], [41.7940687500, 23.7502750000], [41.7169281250, 23.7853125000], [41.6397875000, 23.8203500000], [41.5626468750, 23.8553875000], [41.4855062500, 23.8904250000], [41.4083656250, 23.9254625000], [41.3312250000, 23.9605000000], [41.2540843750, 23.9955375000], [41.1769437500, 24.0305750000], [41.0998031250, 24.0656125000], [41.0226625000, 24.1006500000], [40.9455218750, 24.1356875000], [40.8683812500, 24.1707250000], [40.7912406250, 24.2057625000], [40.7141000000, 24.2408000000], [40.6361500000, 24.2760125000], [40.5582000000, 24.3112250000], [40.4802500000, 24.3464375000], [40.4023000000, 24.3816500000], [40.3243500000, 24.4168625000], [40.2464000000, 24.4520750000], [40.1684500000, 24.4872875000], [40.0905000000, 24.5225000000], [40.0125500000, 24.5577125000], [39.9346000000, 24.5929250000], [39.8566500000, 24.6281375000], [39.7787000000, 24.6633500000], [39.7007500000, 24.6985625000], [39.6228000000, 24.7337750000], [39.5448500000, 24.7689875000], [39.4669000000, 24.8042000000], [39.3846000000, 24.8376000000], [39.3342500000, 24.8578000000], [39.2839000000, 24.8780000000], [39.2312000000, 24.8991000000], [39.1507343750, 24.9279250000], [39.0702687500, 24.9567500000], [38.9898031250, 24.9855750000], [38.9093375000, 25.0144000000], [38.8288718750, 25.0432250000], [38.7484062500, 25.0720500000], [38.6679406250, 25.1008750000], [38.5874750000, 25.1297000000], [38.5070093750, 25.1585250000], [38.4265437500, 25.1873500000], [38.3460781250, 25.2161750000], [38.2656125000, 25.2450000000], [38.1851468750, 25.2738250000], [38.1046812500, 25.3026500000], [38.0242156250, 25.3314750000], [37.9437500000, 25.3603000000], [37.8632843750, 25.3891250000], [37.7828187500, 25.4179500000], [37.7023531250, 25.4467750000], [37.6218875000, 25.4756000000], [37.5414218750, 25.5044250000], [37.4609562500, 25.5332500000], [37.3804906250, 25.5620750000], [37.3000250000, 25.5909000000], [37.2195593750, 25.6197250000], [37.1390937500, 25.6485500000], [37.0586281250, 25.6773750000], [36.9781625000, 25.7062000000], [36.8976968750, 25.7350250000], [36.8172312500, 25.7638500000], [36.7367656250, 25.7926750000], [36.6563000000, 25.8215000000], [36.5940125000, 25.8435375000], [36.5317250000, 25.8655750000], [36.4694375000, 25.8876125000], [36.4071500000, 25.9096500000], [36.3448625000, 25.9316875000], [36.2825750000, 25.9537250000], [36.2202875000, 25.9757625000], [36.1580000000, 25.9978000000], [36.1033250000, 26.0167500000], [36.0486500000, 26.0357000000], [35.9939750000, 26.0546500000], [35.9393000000, 26.0736000000], [35.8846250000, 26.0925500000], [35.8299500000, 26.1115000000], [35.7752750000, 26.1304500000], [35.7206000000, 26.1494000000], [35.6659250000, 26.1683500000], [35.6112500000, 26.1873000000], [35.5565750000, 26.2062500000], [35.5019000000, 26.2252000000], [35.4472250000, 26.2441500000], [35.3925500000, 26.2631000000], [35.3378750000, 26.2820500000], [35.2832000000, 26.3010000000], [35.1983000000, 26.3269000000], [35.1295281250, 26.3456500000], [35.0607562500, 26.3644000000], [34.9919843750, 26.3831500000], [34.9232125000, 26.4019000000], [34.8544406250, 26.4206500000], [34.7856687500, 26.4394000000], [34.7168968750, 26.4581500000], [34.6481250000, 26.4769000000], [34.5793531250, 26.4956500000], [34.5105812500, 26.5144000000], [34.4418093750, 26.5331500000], [34.3730375000, 26.5519000000], [34.3042656250, 26.5706500000], [34.2354937500, 26.5894000000], [34.1667218750, 26.6081500000], [34.0979500000, 26.6269000000], [34.0291781250, 26.6456500000], [33.9604062500, 26.6644000000], [33.8916343750, 26.6831500000], [33.8228625000, 26.7019000000], [33.7540906250, 26.7206500000], [33.6853187500, 26.7394000000], [33.6165468750, 26.7581500000], [33.5477750000, 26.7769000000], [33.4790031250, 26.7956500000], [33.4102312500, 26.8144000000], [33.3414593750, 26.8331500000], [33.2726875000, 26.8519000000], [33.2039156250, 26.8706500000], [33.1351437500, 26.8894000000], [33.0663718750, 26.9081500000], [32.9976000000, 26.9269000000], [32.9370750000, 26.9429750000], [32.8765500000, 26.9590500000], [32.8160250000, 26.9751250000], [32.7555000000, 26.9912000000], [32.6949750000, 27.0072750000], [32.6344500000, 27.0233500000], [32.5739250000, 27.0394250000], [32.5134000000, 27.0555000000], [32.4528750000, 27.0715750000], [32.3923500000, 27.0876500000], [32.3318250000, 27.1037250000], [32.2713000000, 27.1198000000], [32.2107750000, 27.1358750000], [32.1502500000, 27.1519500000], [32.0897250000, 27.1680250000], [32.0292000000, 27.1841000000], [31.9665875000, 27.1982125000], [31.9039750000, 27.2123250000], [31.8413625000, 27.2264375000], [31.7787500000, 27.2405500000], [31.7161375000, 27.2546625000], [31.6535250000, 27.2687750000], [31.5909125000, 27.2828875000], [31.5283000000, 27.2970000000], [31.4520000000, 27.3134750000], [31.3757000000, 27.3299500000], [31.2994000000, 27.3464250000], [31.2231000000, 27.3629000000], [31.1656000000, 27.3748500000], [31.1081000000, 27.3868000000], [31.0521562500, 27.3971500000], [30.9962125000, 27.4075000000], [30.9402687500, 27.4178500000], [30.8843250000, 27.4282000000], [30.8283812500, 27.4385500000], [30.7724375000, 27.4489000000], [30.7164937500, 27.4592500000], [30.6605500000, 27.4696000000], [30.6046062500, 27.4799500000], [30.5486625000, 27.4903000000], [30.4927187500, 27.5006500000], [30.4367750000, 27.5110000000], [30.3808312500, 27.5213500000], [30.3248875000, 27.5317000000], [30.2689437500, 27.5420500000], [30.2130000000, 27.5524000000], [30.1570562500, 27.5627500000], [30.1011125000, 27.5731000000], [30.0451687500, 27.5834500000], [29.9892250000, 27.5938000000], [29.9332812500, 27.6041500000], [29.8773375000, 27.6145000000], [29.8213937500, 27.6248500000], [29.7654500000, 27.6352000000], [29.7095062500, 27.6455500000], [29.6535625000, 27.6559000000], [29.5976187500, 27.6662500000], [29.5416750000, 27.6766000000], [29.4857312500, 27.6869500000], [29.4297875000, 27.6973000000], [29.3738437500, 27.7076500000], [29.3179000000, 27.7180000000], [29.2504250000, 27.7298500000], [29.1829500000, 27.7417000000], [29.1154750000, 27.7535500000], [29.0480000000, 27.7654000000], [28.9961812500, 27.7733000000], [28.9443625000, 27.7812000000], [28.8925437500, 27.7891000000], [28.8407250000, 27.7970000000], [28.7889062500, 27.8049000000], [28.7370875000, 27.8128000000], [28.6852687500, 27.8207000000], [28.6334500000, 27.8286000000], [28.5816312500, 27.8365000000], [28.5298125000, 27.8444000000], [28.4779937500, 27.8523000000], [28.4261750000, 27.8602000000], [28.3743562500, 27.8681000000], [28.3225375000, 27.8760000000], [28.2707187500, 27.8839000000], [28.2189000000, 27.8918000000], [28.1481750000, 27.9010500000], [28.0774500000, 27.9103000000], [28.0067250000, 27.9195500000], [27.9360000000, 27.9288000000], [27.8614437500, 27.9372843750], [27.7868875000, 27.9457687500], [27.7123312500, 27.9542531250], [27.6377750000, 27.9627375000], [27.5632187500, 27.9712218750], [27.4886625000, 27.9797062500], [27.4141062500, 27.9881906250], [27.3395500000, 27.9966750000], [27.2649937500, 28.0051593750], [27.1904375000, 28.0136437500], [27.1158812500, 28.0221281250], [27.0413250000, 28.0306125000], [26.9667687500, 28.0390968750], [26.8922125000, 28.0475812500], [26.8176562500, 28.0560656250], [26.7431000000, 28.0645500000], [26.6685437500, 28.0730343750], [26.5939875000, 28.0815187500], [26.5194312500, 28.0900031250], [26.4448750000, 28.0984875000], [26.3703187500, 28.1069718750], [26.2957625000, 28.1154562500], [26.2212062500, 28.1239406250], [26.1466500000, 28.1324250000], [26.0720937500, 28.1409093750], [25.9975375000, 28.1493937500], [25.9229812500, 28.1578781250], [25.8484250000, 28.1663625000], [25.7738687500, 28.1748468750], [25.6993125000, 28.1833312500], [25.6247562500, 28.1918156250], [25.5502000000, 28.2003000000], [25.4989000000, 28.2053000000], [25.4476000000, 28.2103000000], [25.3963000000, 28.2153000000], [25.3450000000, 28.2203000000], [25.2937000000, 28.2253000000], [25.2424000000, 28.2303000000], [25.1911000000, 28.2353000000], [25.1398000000, 28.2403000000], [25.0574000000, 28.2470000000], [24.9750000000, 28.2537000000], [24.9153500000, 28.2579375000], [24.8557000000, 28.2621750000], [24.7960500000, 28.2664125000], [24.7364000000, 28.2706500000], [24.6767500000, 28.2748875000], [24.6171000000, 28.2791250000], [24.5574500000, 28.2833625000], [24.4978000000, 28.2876000000], [24.4301500000, 28.2911750000], [24.3625000000, 28.2947500000], [24.2948500000, 28.2983250000], [24.2272000000, 28.3019000000], [24.1595500000, 28.3054750000], [24.0919000000, 28.3090500000], [24.0242500000, 28.3126250000], [23.9566000000, 28.3162000000], [23.8875000000, 28.3194750000], [23.8184000000, 28.3227500000], [23.7493000000, 28.3260250000], [23.6802000000, 28.3293000000], [23.6289890625, 28.3303875000], [23.5777781250, 28.3314750000], [23.5265671875, 28.3325625000], [23.4753562500, 28.3336500000], [23.4241453125, 28.3347375000], [23.3729343750, 28.3358250000], [23.3217234375, 28.3369125000], [23.2705125000, 28.3380000000], [23.2193015625, 28.3390875000], [23.1680906250, 28.3401750000], [23.1168796875, 28.3412625000], [23.0656687500, 28.3423500000], [23.0144578125, 28.3434375000], [22.9632468750, 28.3445250000], [22.9120359375, 28.3456125000], [22.8608250000, 28.3467000000], [22.8096140625, 28.3477875000], [22.7584031250, 28.3488750000], [22.7071921875, 28.3499625000], [22.6559812500, 28.3510500000], [22.6047703125, 28.3521375000], [22.5535593750, 28.3532250000], [22.5023484375, 28.3543125000], [22.4511375000, 28.3554000000], [22.3999265625, 28.3564875000], [22.3487156250, 28.3575750000], [22.2975046875, 28.3586625000], [22.2462937500, 28.3597500000], [22.1950828125, 28.3608375000], [22.1438718750, 28.3619250000], [22.0926609375, 28.3630125000], [22.0414500000, 28.3641000000], [21.9902390625, 28.3651875000], [21.9390281250, 28.3662750000], [21.8878171875, 28.3673625000], [21.8366062500, 28.3684500000], [21.7853953125, 28.3695375000], [21.7341843750, 28.3706250000], [21.6829734375, 28.3717125000], [21.6317625000, 28.3728000000], [21.5805515625, 28.3738875000], [21.5293406250, 28.3749750000], [21.4781296875, 28.3760625000], [21.4269187500, 28.3771500000], [21.3757078125, 28.3782375000], [21.3244968750, 28.3793250000], [21.2732859375, 28.3804125000], [21.2220750000, 28.3815000000], [21.1708640625, 28.3825875000], [21.1196531250, 28.3836750000], [21.0684421875, 28.3847625000], [21.0172312500, 28.3858500000], [20.9660203125, 28.3869375000], [20.9148093750, 28.3880250000], [20.8635984375, 28.3891125000], [20.8123875000, 28.3902000000], [20.7611765625, 28.3912875000], [20.7099656250, 28.3923750000], [20.6587546875, 28.3934625000], [20.6075437500, 28.3945500000], [20.5563328125, 28.3956375000], [20.5051218750, 28.3967250000], [20.4539109375, 28.3978125000], [20.4027000000, 28.3989000000], [20.3492250000, 28.3991375000], [20.2957500000, 28.3993750000], [20.2422750000, 28.3996125000], [20.1888000000, 28.3998500000], [20.1353250000, 28.4000875000], [20.0818500000, 28.4003250000], [20.0283750000, 28.4005625000], [19.9749000000, 28.4008000000], [19.9179375000, 28.4004812500], [19.8609750000, 28.4001625000], [19.8040125000, 28.3998437500], [19.7470500000, 28.3995250000], [19.6900875000, 28.3992062500], [19.6331250000, 28.3988875000], [19.5761625000, 28.3985687500], [19.5192000000, 28.3982500000], [19.4622375000, 28.3979312500], [19.4052750000, 28.3976125000], [19.3483125000, 28.3972937500], [19.2913500000, 28.3969750000], [19.2343875000, 28.3966562500], [19.1774250000, 28.3963375000], [19.1204625000, 28.3960187500], [19.0635000000, 28.3957000000], [18.9735500000, 28.3930500000], [18.8836000000, 28.3904000000], [18.8139625000, 28.3881437500], [18.7443250000, 28.3858875000], [18.6746875000, 28.3836312500], [18.6050500000, 28.3813750000], [18.5354125000, 28.3791187500], [18.4657750000, 28.3768625000], [18.3961375000, 28.3746062500], [18.3265000000, 28.3723500000], [18.2568625000, 28.3700937500], [18.1872250000, 28.3678375000], [18.1175875000, 28.3655812500], [18.0479500000, 28.3633250000], [17.9783125000, 28.3610687500], [17.9086750000, 28.3588125000], [17.8390375000, 28.3565562500], [17.7694000000, 28.3543000000], [17.6956500000, 28.3512000000], [17.6219000000, 28.3481000000], [17.5293437500, 28.3416687500], [17.4367875000, 28.3352375000], [17.3442312500, 28.3288062500], [17.2516750000, 28.3223750000], [17.1591187500, 28.3159437500], [17.0665625000, 28.3095125000], [16.9740062500, 28.3030812500], [16.8814500000, 28.2966500000], [16.7888937500, 28.2902187500], [16.6963375000, 28.2837875000], [16.6037812500, 28.2773562500], [16.5112250000, 28.2709250000], [16.4186687500, 28.2644937500], [16.3261125000, 28.2580625000], [16.2335562500, 28.2516312500], [16.1410000000, 28.2452000000], [16.0484437500, 28.2387687500], [15.9558875000, 28.2323375000], [15.8633312500, 28.2259062500], [15.7707750000, 28.2194750000], [15.6782187500, 28.2130437500], [15.5856625000, 28.2066125000], [15.4931062500, 28.2001812500], [15.4005500000, 28.1937500000], [15.3079937500, 28.1873187500], [15.2154375000, 28.1808875000], [15.1228812500, 28.1744562500], [15.0303250000, 28.1680250000], [14.9377687500, 28.1615937500], [14.8452125000, 28.1551625000], [14.7526562500, 28.1487312500], [14.6601000000, 28.1423000000], [14.6070750000, 28.1385125000], [14.5540500000, 28.1347250000], [14.5010250000, 28.1309375000], [14.4480000000, 28.1271500000], [14.3949750000, 28.1233625000], [14.3419500000, 28.1195750000], [14.2889250000, 28.1157875000], [14.2359000000, 28.1120000000], [14.1828750000, 28.1082125000], [14.1298500000, 28.1044250000], [14.0768250000, 28.1006375000], [14.0238000000, 28.0968500000], [13.9707750000, 28.0930625000], [13.9177500000, 28.0892750000], [13.8647250000, 28.0854875000], [13.8117000000, 28.0817000000], [13.7689000000, 28.0777000000], [13.7187671875, 28.0718390625], [13.6686343750, 28.0659781250], [13.6185015625, 28.0601171875], [13.5683687500, 28.0542562500], [13.5182359375, 28.0483953125], [13.4681031250, 28.0425343750], [13.4179703125, 28.0366734375], [13.3678375000, 28.0308125000], [13.3177046875, 28.0249515625], [13.2675718750, 28.0190906250], [13.2174390625, 28.0132296875], [13.1673062500, 28.0073687500], [13.1171734375, 28.0015078125], [13.0670406250, 27.9956468750], [13.0169078125, 27.9897859375], [12.9667750000, 27.9839250000], [12.9166421875, 27.9780640625], [12.8665093750, 27.9722031250], [12.8163765625, 27.9663421875], [12.7662437500, 27.9604812500], [12.7161109375, 27.9546203125], [12.6659781250, 27.9487593750], [12.6158453125, 27.9428984375], [12.5657125000, 27.9370375000], [12.5155796875, 27.9311765625], [12.4654468750, 27.9253156250], [12.4153140625, 27.9194546875], [12.3651812500, 27.9135937500], [12.3150484375, 27.9077328125], [12.2649156250, 27.9018718750], [12.2147828125, 27.8960109375], [12.1646500000, 27.8901500000], [12.1145171875, 27.8842890625], [12.0643843750, 27.8784281250], [12.0142515625, 27.8725671875], [11.9641187500, 27.8667062500], [11.9139859375, 27.8608453125], [11.8638531250, 27.8549843750], [11.8137203125, 27.8491234375], [11.7635875000, 27.8432625000], [11.7134546875, 27.8374015625], [11.6633218750, 27.8315406250], [11.6131890625, 27.8256796875], [11.5630562500, 27.8198187500], [11.5129234375, 27.8139578125], [11.4627906250, 27.8080968750], [11.4126578125, 27.8022359375], [11.3625250000, 27.7963750000], [11.3123921875, 27.7905140625], [11.2622593750, 27.7846531250], [11.2121265625, 27.7787921875], [11.1619937500, 27.7729312500], [11.1118609375, 27.7670703125], [11.0617281250, 27.7612093750], [11.0115953125, 27.7553484375], [10.9614625000, 27.7494875000], [10.9113296875, 27.7436265625], [10.8611968750, 27.7377656250], [10.8110640625, 27.7319046875], [10.7609312500, 27.7260437500], [10.7107984375, 27.7201828125], [10.6606656250, 27.7143218750], [10.6105328125, 27.7084609375], [10.5604000000, 27.7026000000], [10.5101646875, 27.6966531250], [10.4599293750, 27.6907062500], [10.4096940625, 27.6847593750], [10.3594587500, 27.6788125000], [10.3092234375, 27.6728656250], [10.2589881250, 27.6669187500], [10.2087528125, 27.6609718750], [10.1585175000, 27.6550250000], [10.1082821875, 27.6490781250], [10.0580468750, 27.6431312500], [10.0078115625, 27.6371843750], [9.9575762500, 27.6312375000], [9.9073409375, 27.6252906250], [9.8571056250, 27.6193437500], [9.8068703125, 27.6133968750], [9.7566350000, 27.6074500000], [9.7063996875, 27.6015031250], [9.6561643750, 27.5955562500], [9.6059290625, 27.5896093750], [9.5556937500, 27.5836625000], [9.5054584375, 27.5777156250], [9.4552231250, 27.5717687500], [9.4049878125, 27.5658218750], [9.3547525000, 27.5598750000], [9.3045171875, 27.5539281250], [9.2542818750, 27.5479812500], [9.2040465625, 27.5420343750], [9.1538112500, 27.5360875000], [9.1035759375, 27.5301406250], [9.0533406250, 27.5241937500], [9.0031053125, 27.5182468750], [8.9528700000, 27.5123000000], [8.8976368750, 27.5043250000], [8.8424037500, 27.4963500000], [8.7871706250, 27.4883750000], [8.7319375000, 27.4804000000], [8.6767043750, 27.4724250000], [8.6214712500, 27.4644500000], [8.5662381250, 27.4564750000], [8.5110050000, 27.4485000000], [8.4557718750, 27.4405250000], [8.4005387500, 27.4325500000], [8.3453056250, 27.4245750000], [8.2900725000, 27.4166000000], [8.2348393750, 27.4086250000], [8.1796062500, 27.4006500000], [8.1243731250, 27.3926750000], [8.0691400000, 27.3847000000], [8.0139068750, 27.3767250000], [7.9586737500, 27.3687500000], [7.9034406250, 27.3607750000], [7.8482075000, 27.3528000000], [7.7929743750, 27.3448250000], [7.7377412500, 27.3368500000], [7.6825081250, 27.3288750000], [7.6272750000, 27.3209000000], [7.5720418750, 27.3129250000], [7.5168087500, 27.3049500000], [7.4615756250, 27.2969750000], [7.4063425000, 27.2890000000], [7.3511093750, 27.2810250000], [7.2958762500, 27.2730500000], [7.2406431250, 27.2650750000], [7.1854100000, 27.2571000000], [7.1265983281, 27.2480500000], [7.0677866563, 27.2390000000], [7.0089749844, 27.2299500000], [6.9501633125, 27.2209000000], [6.8913516406, 27.2118500000], [6.8325399688, 27.2028000000], [6.7737282969, 27.1937500000], [6.7149166250, 27.1847000000], [6.6561049531, 27.1756500000], [6.5972932813, 27.1666000000], [6.5384816094, 27.1575500000], [6.4796699375, 27.1485000000], [6.4208582656, 27.1394500000], [6.3620465938, 27.1304000000], [6.3032349219, 27.1213500000], [6.2444232500, 27.1123000000], [6.1856115781, 27.1032500000], [6.1267999063, 27.0942000000], [6.0679882344, 27.0851500000], [6.0091765625, 27.0761000000], [5.9503648906, 27.0670500000], [5.8915532188, 27.0580000000], [5.8327415469, 27.0489500000], [5.7739298750, 27.0399000000], [5.7151182031, 27.0308500000], [5.6563065313, 27.0218000000]]);
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
import math
import time

from stl import mesh, Dimension

from tkinter import Tk     # from tkinter import Tk for Python 3.x
from tkinter.filedialog import askopenfilename
from mpl_toolkits.mplot3d import art3d
from matplotlib import pyplot as plt
import solid
import os
import ezdxf
import shapely.geometry as sg
import subprocess
from GUI import getSCADPath



def outputSTL(From, To, PATH=getSCADPath()):
    subprocess.Popen(PATH + " -o " + To + " " + From)
    while not os.path.exists(To):
        time.sleep(1)

class Model:
    def __init__(self, model, fileName, location, layer, thickness):
        self.location = location
        self.code = None
        self.fileName = fileName
        self.stl = fileName + ".stl"
        self.layer = layer
        self.thickness = thickness
        self.maxz = (layer+1)*thickness
        self.dxf = fileName + ".dxf"
        self.scad = fileName + ".scad"
        self.model = model
        self.center = None
        self.width = 10
        self.mesh = None
        self.useable_area = None


    def get_code(self):
        max_dim = 0.05
        max_array = 6

        num = int(self.fileName)
        nums = [int(a) for a in str(num)]
        nums.reverse()
        indices = nums
        length = len(nums)

        print(indices)
        t = 0
        i = 0
        cubes = []
        x = 0
        y = 0
        width = 0.01
        while x <= max_dim:
            while y <= max_dim:
                print(indices)
                if nums == []:
                    break
                if indices[0] != 0:
                    cubes.append(solid.translate([x, y, 0])(solid.cube(size=t / 1000 + 0.001)))
                    y += max_dim / (max_array - 1)
                    nums[0] = nums[0] - 1
                else:
                    indices.pop(0)
                    t += 1
                i += 1
            x += max_dim / (max_array - 1)
            y = 0

        outside = solid.translate([-width / 2, -width / 2])(solid.cube(max_dim + (length - 1) / 1000 + 0.001 + width))
        self.code = solid.difference()(outside, cubes)
        self.code = solid.projection(cut=True)(self.code)
        solid.scad_render_to_file(self.code, self.location + "/code.scad")
        outputSTL(From=self.location+"/code.scad", To=self.location+"code.dxf", PATH=getSCADPath())
        # os.system("toSTL.sh renders/code.scad renders/code.dxf")
        return self.location+"/code.dxf"

    def download(self, type):
        if type =="stl":
            print("generating:" + self.location+"/"+ self.fileName+".stl")
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".stl")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".stl")
        elif type == "dxf":
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".dxf")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".dxf")

    def render(self):
        solid.scad_render_to_file(self.model, self.location+"/"+ self.fileName+'.scad')
        while not os.path.exists(self.location+"/"+self.fileName+".scad"):
            time.sleep(1)
        # outputSTL(From= self.location+"/"+ self.fileName+'.scad', To=self.location+"/"+ self.fileName+'.stl')

    def get_points(self):
        doc = ezdxf.readfile(filename=self.location+"/"+ self.fileName+".dxf")
        msp = doc.modelspace()
        i=0
        lists = []
        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return [start, end]

        for e in msp.query("LINE"):
            line = helper(e)
            if not lists:
                lists.append([line])
            else:
                if lists[i][len(lists)-1][1] != line[0]:
                    lists.append([line])
                    i+=1
                else:
                    lists[i].append(line)

    def get_points2(self, FILE):
        doc = ezdxf.readfile(filename=FILE)
        msp = doc.modelspace()
        i = 0
        lists = []

        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return (start, end)

        for e in msp.query("LINE"):
            line = helper(e)
            if lists==[]:
                lists.append([line])
            else:
                if lists[i][len(lists[i]) - 1][1] != line[0]:
                    lists.append([line])
                    i += 1
                else:
                    lists[i].append(line)
        return lists

    def add_code(self):
        dxf = solid.projection(cut=False)(self.model)
        offset = solid.offset(r=-0.1)(dxf)
        solid.scad_render_to_file(offset, self.location+'/offset.scad')
        os.system("toSTL.sh renders/offset.scad renders/offset.dxf")
        lines = self.get_points2("renders/offset.dxf")
        x = lines[0][0][0][0]
        y = lines[0][0][0][1]
        print(x)
        print(y)
        code = solid.translate([x,y,0])(self.code)
        code = solid.linear_extrude(height=999)(code)
        save = self.model
        self.model = solid.projection()(solid.difference()(self.model, code))
        self.render()
        self.download("dxf")
        self.model = save

    def add_label(self, pos):
        # num = 12
        # minx, maxx, miny, maxy, minz, maxz = self.find_minmax()
        maxz = self.maxz
        # label = solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.5, halign="center"))
        # i=minx
        # print("x-len: " + str(maxx-minx))
        # print(i)
        # inc = (maxx-minx)/num
        # while minx <= i <= maxx:
        #     label = solid.union()(solid.translate([i, 0, maxz - 0.2])(solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.25, halign="center"))), label)
        #     i += inc
        #
        # l = label
        #
        # i =miny
        # while miny<= i <= maxy:
        #     print("y inc")
        #     l = solid.union()(solid.translate([0, i, 0])(label), l)
        #     i += 0.5
        for i in str(self.fileName):
            cur = pos[0]
            label = solid.translate([pos[0][0], pos[0][1], self.maxz-0.2])(solid.linear_extrude(height=(self.thickness)/3)(solid.text(str(i), size=0.5, halign="center", valign="center")))
            self.model = solid.difference()(self.model, label)
            pos.append(pos.pop(0))
            while abs(cur[0]-pos[0][0])<0.5 and abs(cur[1]-pos[0][1])<0.5:
                pos.append(pos.pop(0))



    def Center(self):

        volume, cog, inertia = self.mesh.get_mass_properties()
        print("Volume                                  = {0}".format(volume))
        print("Position of the center of gravity (COG) = {0}".format(cog))
        m_centered = solid.translate([-cog[0], -cog[1], 0])(
            self.model
        )
        return m_centered

    def find_minmax(self):
        minx = maxx = miny = maxy = minz = maxz = None
        for p in self.mesh.points:
            # p contains (x, y, z)
            if minx is None:
                minx = p[Dimension.X]
                maxx = p[Dimension.X]
                miny = p[Dimension.Y]
                maxy = p[Dimension.Y]
                minz = p[Dimension.Z]
                maxz = p[Dimension.Z]
            else:
                maxx = max(p[Dimension.X], maxx)
                minx = min(p[Dimension.X], minx)
                maxy = max(p[Dimension.Y], maxy)
                miny = min(p[Dimension.Y], miny)
                maxz = max(p[Dimension.Z], maxz)
                minz = min(p[Dimension.Z], minz)
        lenx = maxx - minx
        leny = maxy - miny
        lenz = maxz - minz
        return minx, maxx, miny, maxy, minz, maxz

    # def generate_Mesh(self):
    #     self.mesh = mesh.Mesh.from_file(self.location + "/" + str(int(self.fileName)//8)+ "b.stl")

    def get_top(self):
        top = solid.projection(cut=True)(solid.translate([0,0,-1*self.thickness*(self.layer+1)])(self.model))
        useable_area = solid.offset(r=-0.45)(top)
        self.useable_area = useable_area
        solid.scad_render_to_file(self.useable_area, self.location+'/' + 'toptemp.scad')
        outputSTL(From=self.location+'/' + 'toptemp.scad', To=self.location+"/top"+ self.dxf)

        # os.system("toSTL.sh out/toptemp.scad renders/" + self.fileName + ".dxf")
        dxf = DXF(self.location+"/top"+ self.dxf)
        min_p=dxf.points[0][0]
        points_ordered = dxf.points
        i=0
        while i <= len(dxf.points)+1:
            while math.sqrt((dxf.points[0][0]-dxf.points[1][0])**2+(dxf.points[0][1]-dxf.points[1][1])**2) > 0.1:
                dxf.points.insert(1, [(dxf.points[0][0]+dxf.points[1][0])/2, (dxf.points[0][1]+dxf.points[1][1])/2])
                i = i-1
            dxf.points.append(dxf.points.pop(0))
            i+=1
        for i in range(len(dxf.points)):
            dxf.points.append(dxf.points.pop(0))
            if dxf.points[0][0] < min_p:
                min_p = dxf.points[0][0]
                points_ordered = dxf.points.copy()
        dxf.points = points_ordered.copy()

        print(dxf.points)
        self.add_label(dxf.points)

class DXF:
    def __init__(self, file):
        self.file = file
        self.Lines = []
        self.points = []
        doc = ezdxf.readfile(self.file)
        msp = doc.modelspace()
        for e in msp:
            if e.dxftype() == "LINE":
                self.Lines.append(e)
                self.points.append([e.dxf.start[0], e.dxf.start[1]])
        # self.points.append([self.Lines[-1].dxf.end[0], self.Lines[-1].dxf.end[1]])
        self.area = None
        self.center = None
        self.polygon = sg.Polygon(self.points)

    def get_area(self):
        self.area = self.polygon.area
        return self.area

    def get_center(self):
        x_sum = 0
        y_sum =0
        for i in self.points:
            x_sum += i[0]
            y_sum += i[1]
        x_c = x_sum/len(self.points)
        y_c = y_sum/len(self.points)
        return (x_c, y_c)

    def split(self, maxdim):
        splits = []
        length = 0
        pieces = [[]]
        prev = self.points[-1]
        pieces[-1].append(prev)
        for j in self.points:
            length = length + math.sqrt((prev[0]-j[0])**2+(prev[1]-j[1])**2)
            if length >= maxdim:
                pieces[-1].append(j)
                pieces.append([])
                length = 0
            pieces[-1].append(j)
            prev = j
        for j in pieces:
            j.insert(0, [0,0])
            piece = solid.linear_extrude(height=10)(solid.polygon(j))
            splits.append(piece)
        return splits
    def refine_points(self):
        i=0
        while i <= len(self.points)+1:
            while math.sqrt((self.points[0][0]-self.points[1][0])**2+(self.points[0][1]-self.points[1][1])**2) > 0.1:
                self.points.insert(1, [(self.points[0][0]+self.points[1][0])/2, (self.points[0][1]+self.points[1][1])/2])
                i = i-1
            self.points.append(self.points.pop(0))
            i+=1


if __name__== "__main__":
    test = DXF("C:/Users/Daniel/Documents/repos/Shell_Maker/output/0top_slice.dxf")
    test.refine_points()
    k = test.split(48)
    for i in range(len(k)):
        solid.scad_render_to_file(k[i], str(i) + ".scad")


 
 
************************************************/
