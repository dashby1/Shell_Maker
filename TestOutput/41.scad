// Generated by SolidPython 1.1.3 on 2024-05-26 02:00:47


intersection() {
	difference() {
		intersection() {
			translate(v = [0, 0, 0]) {
				import(file = "CE3E3V2_Bottom_shell.stl", origin = [0, 0]);
			}
			translate(v = [-90.04029846191406, -32.690147399902344, 10]) {
				cube(size = [180.0806, 65.380295, 2]);
			}
		}
		linear_extrude(height = 999) {
			offset(r = -1) {
				import(file = "C:/Users/Daniel/Documents/repos/Shell_Maker/TestOutput/5top_slice.dxf", origin = [0, 0]);
			}
		}
	}
	translate(v = [0, 0, 10]) {
		linear_extrude(height = 10) {
			polygon(points = [[0, 0], [50.7328562500, -18.3829375000], [50.8112500000, -18.3228000000], [50.8896437500, -18.2626625000], [50.9680375000, -18.2025250000], [51.0464312500, -18.1423875000], [51.1248250000, -18.0822500000], [51.2032187500, -18.0221125000], [51.2816125000, -17.9619750000], [51.3600062500, -17.9018375000], [51.4384000000, -17.8417000000], [51.4884000000, -17.8028750000], [51.5384000000, -17.7640500000], [51.5884000000, -17.7252250000], [51.6384000000, -17.6864000000], [51.6884000000, -17.6475750000], [51.7384000000, -17.6087500000], [51.7884000000, -17.5699250000], [51.8384000000, -17.5311000000], [51.8884000000, -17.4922750000], [51.9384000000, -17.4534500000], [51.9884000000, -17.4146250000], [52.0384000000, -17.3758000000], [52.0884000000, -17.3369750000], [52.1384000000, -17.2981500000], [52.1884000000, -17.2593250000], [52.2384000000, -17.2205000000], [52.2944000000, -17.1745000000], [52.3400531250, -17.1338843750], [52.3857062500, -17.0932687500], [52.4313593750, -17.0526531250], [52.4770125000, -17.0120375000], [52.5226656250, -16.9714218750], [52.5683187500, -16.9308062500], [52.6139718750, -16.8901906250], [52.6596250000, -16.8495750000], [52.7052781250, -16.8089593750], [52.7509312500, -16.7683437500], [52.7965843750, -16.7277281250], [52.8422375000, -16.6871125000], [52.8878906250, -16.6464968750], [52.9335437500, -16.6058812500], [52.9791968750, -16.5652656250], [53.0248500000, -16.5246500000], [53.0705031250, -16.4840343750], [53.1161562500, -16.4434187500], [53.1618093750, -16.4028031250], [53.2074625000, -16.3621875000], [53.2531156250, -16.3215718750], [53.2987687500, -16.2809562500], [53.3444218750, -16.2403406250], [53.3900750000, -16.1997250000], [53.4357281250, -16.1591093750], [53.4813812500, -16.1184937500], [53.5270343750, -16.0778781250], [53.5726875000, -16.0372625000], [53.6183406250, -15.9966468750], [53.6639937500, -15.9560312500], [53.7096468750, -15.9154156250], [53.7553000000, -15.8748000000], [53.8267750000, -15.8104687500], [53.8982500000, -15.7461375000], [53.9697250000, -15.6818062500], [54.0412000000, -15.6174750000], [54.1126750000, -15.5531437500], [54.1841500000, -15.4888125000], [54.2556250000, -15.4244812500], [54.3271000000, -15.3601500000], [54.3985750000, -15.2958187500], [54.4700500000, -15.2314875000], [54.5415250000, -15.1671562500], [54.6130000000, -15.1028250000], [54.6844750000, -15.0384937500], [54.7559500000, -14.9741625000], [54.8274250000, -14.9098312500], [54.8989000000, -14.8455000000], [54.9033000000, -14.8412000000], [54.9635000000, -14.7814000000], [55.0237000000, -14.7216000000], [55.0839000000, -14.6618000000], [55.1441000000, -14.6020000000], [55.2123000000, -14.5344000000], [55.2805000000, -14.4668000000], [55.3180875000, -14.4275187500], [55.3556750000, -14.3882375000], [55.3932625000, -14.3489562500], [55.4308500000, -14.3096750000], [55.4684375000, -14.2703937500], [55.5060250000, -14.2311125000], [55.5436125000, -14.1918312500], [55.5812000000, -14.1525500000], [55.6187875000, -14.1132687500], [55.6563750000, -14.0739875000], [55.6939625000, -14.0347062500], [55.7315500000, -13.9954250000], [55.7691375000, -13.9561437500], [55.8067250000, -13.9168625000], [55.8443125000, -13.8775812500], [55.8819000000, -13.8383000000], [55.9260687500, -13.7896687500], [55.9702375000, -13.7410375000], [56.0144062500, -13.6924062500], [56.0585750000, -13.6437750000], [56.1027437500, -13.5951437500], [56.1469125000, -13.5465125000], [56.1910812500, -13.4978812500], [56.2352500000, -13.4492500000], [56.2794187500, -13.4006187500], [56.3235875000, -13.3519875000], [56.3677562500, -13.3033562500], [56.4119250000, -13.2547250000], [56.4560937500, -13.2060937500], [56.5002625000, -13.1574625000], [56.5444312500, -13.1088312500], [56.5886000000, -13.0602000000], [56.6280250000, -13.0150500000], [56.6674500000, -12.9699000000], [56.7068750000, -12.9247500000], [56.7463000000, -12.8796000000], [56.7793406250, -12.8400000000], [56.8123812500, -12.8004000000], [56.8454218750, -12.7608000000], [56.8784625000, -12.7212000000], [56.9115031250, -12.6816000000], [56.9445437500, -12.6420000000], [56.9775843750, -12.6024000000], [57.0106250000, -12.5628000000], [57.0436656250, -12.5232000000], [57.0767062500, -12.4836000000], [57.1097468750, -12.4440000000], [57.1427875000, -12.4044000000], [57.1758281250, -12.3648000000], [57.2088687500, -12.3252000000], [57.2419093750, -12.2856000000], [57.2749500000, -12.2460000000], [57.3079906250, -12.2064000000], [57.3410312500, -12.1668000000], [57.3740718750, -12.1272000000], [57.4071125000, -12.0876000000], [57.4401531250, -12.0480000000], [57.4731937500, -12.0084000000], [57.5062343750, -11.9688000000], [57.5392750000, -11.9292000000], [57.5723156250, -11.8896000000], [57.6053562500, -11.8500000000], [57.6383968750, -11.8104000000], [57.6714375000, -11.7708000000], [57.7044781250, -11.7312000000], [57.7375187500, -11.6916000000], [57.7705593750, -11.6520000000], [57.8036000000, -11.6124000000], [57.8625000000, -11.5376000000], [57.9214000000, -11.4628000000], [57.9613062500, -11.4060500000], [58.0012125000, -11.3493000000], [58.0411187500, -11.2925500000], [58.0810250000, -11.2358000000], [58.1209312500, -11.1790500000], [58.1608375000, -11.1223000000], [58.2007437500, -11.0655500000], [58.2406500000, -11.0088000000], [58.2805562500, -10.9520500000], [58.3204625000, -10.8953000000], [58.3603687500, -10.8385500000], [58.4002750000, -10.7818000000], [58.4401812500, -10.7250500000], [58.4800875000, -10.6683000000], [58.5199937500, -10.6115500000], [58.5599000000, -10.5548000000], [58.5989250000, -10.5021081250], [58.6379500000, -10.4494162500], [58.6769750000, -10.3967243750], [58.7160000000, -10.3440325000], [58.7550250000, -10.2913406250], [58.7940500000, -10.2386487500], [58.8330750000, -10.1859568750], [58.8721000000, -10.1332650000], [58.9111250000, -10.0805731250], [58.9501500000, -10.0278812500], [58.9891750000, -9.9751893750], [59.0282000000, -9.9224975000], [59.0672250000, -9.8698056250], [59.1062500000, -9.8171137500], [59.1452750000, -9.7644218750], [59.1843000000, -9.7117300000], [59.2298000000, -9.6414100000], [59.2753000000, -9.5710900000], [59.3236625000, -9.4927425000], [59.3720250000, -9.4143950000], [59.4203875000, -9.3360475000], [59.4687500000, -9.2577000000], [59.5171125000, -9.1793525000], [59.5654750000, -9.1010050000], [59.6138375000, -9.0226575000], [59.6622000000, -8.9443100000], [59.6901875000, -8.8985750000], [59.7181750000, -8.8528400000], [59.7461625000, -8.8071050000], [59.7741500000, -8.7613700000], [59.8021375000, -8.7156350000], [59.8301250000, -8.6699000000], [59.8581125000, -8.6241650000], [59.8861000000, -8.5784300000], [59.8961000000, -8.5612000000], [59.9312750000, -8.4990175000], [59.9664500000, -8.4368350000], [60.0016250000, -8.3746525000], [60.0368000000, -8.3124700000], [60.0783812500, -8.2253612500], [60.1199625000, -8.1382525000], [60.1615437500, -8.0511437500], [60.2031250000, -7.9640350000], [60.2447062500, -7.8769262500], [60.2862875000, -7.7898175000], [60.3278687500, -7.7027087500], [60.3694500000, -7.6156000000], [60.4110312500, -7.5284912500], [60.4526125000, -7.4413825000], [60.4941937500, -7.3542737500], [60.5357750000, -7.2671650000], [60.5773562500, -7.1800562500], [60.6189375000, -7.0929475000], [60.6605187500, -7.0058387500], [60.7021000000, -6.9187300000], [60.7322562500, -6.8587800000], [60.7624125000, -6.7988300000], [60.7925687500, -6.7388800000], [60.8227250000, -6.6789300000], [60.8528812500, -6.6189800000], [60.8830375000, -6.5590300000], [60.9131937500, -6.4990800000], [60.9433500000, -6.4391300000], [60.9735062500, -6.3791800000], [61.0036625000, -6.3192300000], [61.0338187500, -6.2592800000], [61.0639750000, -6.1993300000], [61.0941312500, -6.1393800000], [61.1242875000, -6.0794300000], [61.1544437500, -6.0194800000], [61.1846000000, -5.9595300000], [61.2003000000, -5.9214300000], [61.2239250000, -5.8607700000], [61.2475500000, -5.8001100000], [61.2711750000, -5.7394500000], [61.2948000000, -5.6787900000], [61.3166250000, -5.6240325000], [61.3384500000, -5.5692750000], [61.3602750000, -5.5145175000], [61.3821000000, -5.4597600000], [61.4029562500, -5.3924425000], [61.4238125000, -5.3251250000], [61.4446687500, -5.2578075000], [61.4655250000, -5.1904900000], [61.4863812500, -5.1231725000], [61.5072375000, -5.0558550000], [61.5280937500, -4.9885375000], [61.5489500000, -4.9212200000], [61.5698062500, -4.8539025000], [61.5906625000, -4.7865850000], [61.6115187500, -4.7192675000], [61.6323750000, -4.6519500000], [61.6532312500, -4.5846325000], [61.6740875000, -4.5173150000], [61.6949437500, -4.4499975000], [61.7158000000, -4.3826800000], [61.7334312500, -4.3266668750], [61.7510625000, -4.2706537500], [61.7686937500, -4.2146406250], [61.7863250000, -4.1586275000], [61.8039562500, -4.1026143750], [61.8215875000, -4.0466012500], [61.8392187500, -3.9905881250], [61.8568500000, -3.9345750000], [61.8744812500, -3.8785618750], [61.8921125000, -3.8225487500], [61.9097437500, -3.7665356250], [61.9273750000, -3.7105225000], [61.9450062500, -3.6545093750], [61.9626375000, -3.5984962500], [61.9802687500, -3.5424831250], [61.9979000000, -3.4864700000], [62.0028000000, -3.4667700000], [62.0170375000, -3.4004200000], [62.0312750000, -3.3340700000], [62.0455125000, -3.2677200000], [62.0597500000, -3.2013700000], [62.0739875000, -3.1350200000], [62.0882250000, -3.0686700000], [62.1024625000, -3.0023200000], [62.1167000000, -2.9359700000], [62.1347500000, -2.8533000000], [62.1528000000, -2.7706300000], [62.1708500000, -2.6879600000], [62.1889000000, -2.6052900000], [62.1898000000, -2.6006500000], [62.2025250000, -2.5099462500], [62.2152500000, -2.4192425000], [62.2279750000, -2.3285387500], [62.2407000000, -2.2378350000], [62.2534250000, -2.1471312500], [62.2661500000, -2.0564275000], [62.2788750000, -1.9657237500], [62.2916000000, -1.8750200000], [62.3025875000, -1.7960937500], [62.3135750000, -1.7171675000], [62.3245625000, -1.6382412500], [62.3355500000, -1.5593150000], [62.3465375000, -1.4803887500], [62.3575250000, -1.4014625000], [62.3685125000, -1.3225362500], [62.3795000000, -1.2436100000], [62.3842125000, -1.1620856250], [62.3889250000, -1.0805612500], [62.3936375000, -0.9990368750], [62.3983500000, -0.9175125000], [62.4030625000, -0.8359881250], [62.4077750000, -0.7544637500], [62.4124875000, -0.6729393750], [62.4172000000, -0.5914150000], [62.4220000000, -0.5072782500], [62.4268000000, -0.4231415000], [62.4316000000, -0.3390047500], [62.4364000000, -0.2548680000], [62.4365000000, -0.2526550000], [62.4318937500, -0.1761064375], [62.4272875000, -0.0995578750], [62.4226812500, -0.0230093125], [62.4180750000, 0.0535392500], [62.4134687500, 0.1300878125], [62.4088625000, 0.2066363750], [62.4042562500, 0.2831849375], [62.3996500000, 0.3597335000], [62.3950437500, 0.4362820625], [62.3904375000, 0.5128306250], [62.3858312500, 0.5893791875], [62.3812250000, 0.6659277500], [62.3766187500, 0.7424763125], [62.3720125000, 0.8190248750], [62.3674062500, 0.8955734375], [62.3628000000, 0.9721220000], [62.3580750000, 1.0495615000], [62.3533500000, 1.1270010000], [62.3486250000, 1.2044405000], [62.3439000000, 1.2818800000], [62.3377000000, 1.3808787500], [62.3315000000, 1.4798775000], [62.3253000000, 1.5788762500], [62.3191000000, 1.6778750000], [62.3129000000, 1.7768737500], [62.3067000000, 1.8758725000], [62.3005000000, 1.9748712500], [62.2943000000, 2.0738700000], [62.2933000000, 2.0809600000], [62.2824000000, 2.1530900000], [62.2715000000, 2.2252200000], [62.2669000000, 2.2549000000], [62.2575000000, 2.3108500000], [62.2481000000, 2.3668000000], [62.2387000000, 2.4227500000], [62.2293000000, 2.4787000000], [62.2188000000, 2.5385400000], [62.2022250000, 2.6286250000], [62.1856500000, 2.7187100000], [62.1690750000, 2.8087950000], [62.1525000000, 2.8988800000], [62.1413000000, 2.9549650000], [62.1301000000, 3.0110500000], [62.1103250000, 3.0850006250], [62.0905500000, 3.1589512500], [62.0707750000, 3.2329018750], [62.0510000000, 3.3068525000], [62.0312250000, 3.3808031250], [62.0114500000, 3.4547537500], [61.9916750000, 3.5287043750], [61.9719000000, 3.6026550000], [61.9521250000, 3.6766056250], [61.9323500000, 3.7505562500], [61.9125750000, 3.8245068750], [61.8928000000, 3.8984575000], [61.8730250000, 3.9724081250], [61.8532500000, 4.0463587500], [61.8334750000, 4.1203093750], [61.8137000000, 4.1942600000], [61.7886875000, 4.2839162500], [61.7636750000, 4.3735725000], [61.7386625000, 4.4632287500], [61.7136500000, 4.5528850000], [61.6886375000, 4.6425412500], [61.6636250000, 4.7321975000], [61.6386125000, 4.8218537500], [61.6136000000, 4.9115100000], [61.5978000000, 4.9579800000], [61.5653625000, 5.0376868750], [61.5329250000, 5.1173937500], [61.5004875000, 5.1971006250], [61.4680500000, 5.2768075000], [61.4356125000, 5.3565143750], [61.4031750000, 5.4362212500], [61.3707375000, 5.5159281250], [61.3383000000, 5.5956350000], [61.3058625000, 5.6753418750], [61.2734250000, 5.7550487500], [61.2409875000, 5.8347556250], [61.2085500000, 5.9144625000], [61.1761125000, 5.9941693750], [61.1436750000, 6.0738762500], [61.1112375000, 6.1535831250], [61.0788000000, 6.2332900000], [61.0532000000, 6.2944950000], [61.0276000000, 6.3557000000], [61.0020000000, 6.4169050000], [60.9764000000, 6.4781100000], [60.9508000000, 6.5393150000], [60.9252000000, 6.6005200000], [60.8996000000, 6.6617250000], [60.8740000000, 6.7229300000], [60.8484000000, 6.7841350000], [60.8228000000, 6.8453400000], [60.7972000000, 6.9065450000], [60.7716000000, 6.9677500000], [60.7460000000, 7.0289550000], [60.7204000000, 7.0901600000], [60.6948000000, 7.1513650000], [60.6692000000, 7.2125700000], [60.6630000000, 7.2254800000], [60.6342000000, 7.2836900000], [60.6054000000, 7.3419000000], [60.5680250000, 7.4157350000], [60.5306500000, 7.4895700000], [60.4932750000, 7.5634050000], [60.4559000000, 7.6372400000], [60.4330000000, 7.6817800000], [60.3915250000, 7.7595500000], [60.3500500000, 7.8373200000], [60.3085750000, 7.9150900000], [60.2671000000, 7.9928600000], [60.2236000000, 8.0727800000], [60.1963375000, 8.1171850000], [60.1690750000, 8.1615900000], [60.1418125000, 8.2059950000], [60.1145500000, 8.2504000000], [60.0872875000, 8.2948050000], [60.0600250000, 8.3392100000], [60.0327625000, 8.3836150000], [60.0055000000, 8.4280200000], [59.9782375000, 8.4724250000], [59.9509750000, 8.5168300000], [59.9237125000, 8.5612350000], [59.8964500000, 8.6056400000], [59.8691875000, 8.6500450000], [59.8419250000, 8.6944500000], [59.8146625000, 8.7388550000], [59.7874000000, 8.7832600000], [59.7601375000, 8.8276650000], [59.7328750000, 8.8720700000], [59.7056125000, 8.9164750000], [59.6783500000, 8.9608800000], [59.6510875000, 9.0052850000], [59.6238250000, 9.0496900000], [59.5965625000, 9.0940950000], [59.5693000000, 9.1385000000], [59.5420375000, 9.1829050000], [59.5147750000, 9.2273100000], [59.4875125000, 9.2717150000], [59.4602500000, 9.3161200000], [59.4329875000, 9.3605250000], [59.4057250000, 9.4049300000], [59.3784625000, 9.4493350000], [59.3512000000, 9.4937400000], [59.3059000000, 9.5652750000], [59.2606000000, 9.6368100000], [59.2153000000, 9.7083450000], [59.1700000000, 9.7798800000], [59.1357000000, 9.8329187500], [59.1014000000, 9.8859575000], [59.0671000000, 9.9389962500], [59.0328000000, 9.9920350000], [58.9985000000, 10.0450737500], [58.9642000000, 10.0981125000], [58.9299000000, 10.1511512500], [58.8956000000, 10.2041900000], [58.8613000000, 10.2572287500], [58.8270000000, 10.3102675000], [58.7927000000, 10.3633062500], [58.7584000000, 10.4163450000], [58.7241000000, 10.4693837500], [58.6898000000, 10.5224225000], [58.6555000000, 10.5754612500], [58.6212000000, 10.6285000000], [58.5829000000, 10.6819000000], [58.5271750000, 10.7568875000], [58.4714500000, 10.8318750000], [58.4157250000, 10.9068625000], [58.3600000000, 10.9818500000], [58.3042750000, 11.0568375000], [58.2485500000, 11.1318250000], [58.1928250000, 11.2068125000], [58.1371000000, 11.2818000000], [58.1032500000, 11.3265125000], [58.0694000000, 11.3712250000], [58.0355500000, 11.4159375000], [58.0017000000, 11.4606500000], [57.9678500000, 11.5053625000], [57.9340000000, 11.5500750000], [57.9001500000, 11.5947875000], [57.8663000000, 11.6395000000], [57.8155562500, 11.7003125000], [57.7648125000, 11.7611250000], [57.7140687500, 11.8219375000], [57.6633250000, 11.8827500000], [57.6125812500, 11.9435625000], [57.5618375000, 12.0043750000], [57.5110937500, 12.0651875000], [57.4603500000, 12.1260000000], [57.4096062500, 12.1868125000], [57.3588625000, 12.2476250000], [57.3081187500, 12.3084375000], [57.2573750000, 12.3692500000], [57.2066312500, 12.4300625000], [57.1558875000, 12.4908750000], [57.1051437500, 12.5516875000], [57.0544000000, 12.6125000000], [56.9955875000, 12.6824625000], [56.9367750000, 12.7524250000], [56.8779625000, 12.8223875000], [56.8191500000, 12.8923500000], [56.7603375000, 12.9623125000], [56.7015250000, 13.0322750000], [56.6427125000, 13.1022375000], [56.5839000000, 13.1722000000], [56.5633000000, 13.1953000000], [56.5137437500, 13.2476625000], [56.4641875000, 13.3000250000], [56.4146312500, 13.3523875000], [56.3650750000, 13.4047500000], [56.3155187500, 13.4571125000], [56.2659625000, 13.5094750000], [56.2164062500, 13.5618375000], [56.1668500000, 13.6142000000], [56.1172937500, 13.6665625000], [56.0677375000, 13.7189250000], [56.0181812500, 13.7712875000], [55.9686250000, 13.8236500000], [55.9190687500, 13.8760125000], [55.8695125000, 13.9283750000], [55.8199562500, 13.9807375000], [55.7704000000, 14.0331000000], [55.7347250000, 14.0707937500], [55.6990500000, 14.1084875000], [55.6633750000, 14.1461812500], [55.6277000000, 14.1838750000], [55.5920250000, 14.2215687500], [55.5563500000, 14.2592625000], [55.5206750000, 14.2969562500], [55.4850000000, 14.3346500000], [55.4493250000, 14.3723437500], [55.4136500000, 14.4100375000], [55.3779750000, 14.4477312500], [55.3423000000, 14.4854250000], [55.3066250000, 14.5231187500], [55.2709500000, 14.5608125000], [55.2352750000, 14.5985062500], [55.1996000000, 14.6362000000], [55.1761000000, 14.6597000000], [55.1360812500, 14.6967625000], [55.0960625000, 14.7338250000], [55.0560437500, 14.7708875000], [55.0160250000, 14.8079500000], [54.9760062500, 14.8450125000], [54.9359875000, 14.8820750000], [54.8959687500, 14.9191375000], [54.8559500000, 14.9562000000], [54.8159312500, 14.9932625000], [54.7759125000, 15.0303250000], [54.7358937500, 15.0673875000], [54.6958750000, 15.1044500000], [54.6558562500, 15.1415125000], [54.6158375000, 15.1785750000], [54.5758187500, 15.2156375000], [54.5358000000, 15.2527000000], [54.4957812500, 15.2897625000], [54.4557625000, 15.3268250000], [54.4157437500, 15.3638875000], [54.3757250000, 15.4009500000], [54.3357062500, 15.4380125000], [54.2956875000, 15.4750750000], [54.2556687500, 15.5121375000], [54.2156500000, 15.5492000000], [54.1756312500, 15.5862625000], [54.1356125000, 15.6233250000], [54.0955937500, 15.6603875000], [54.0555750000, 15.6974500000], [54.0155562500, 15.7345125000], [53.9755375000, 15.7715750000], [53.9355187500, 15.8086375000], [53.8955000000, 15.8457000000], [53.8502250000, 15.8879000000], [53.8049500000, 15.9301000000], [53.7596750000, 15.9723000000], [53.7144000000, 16.0145000000], [53.6691250000, 16.0567000000], [53.6238500000, 16.0989000000], [53.5785750000, 16.1411000000], [53.5333000000, 16.1833000000], [53.4880250000, 16.2255000000], [53.4427500000, 16.2677000000], [53.3974750000, 16.3099000000], [53.3522000000, 16.3521000000], [53.3069250000, 16.3943000000], [53.2616500000, 16.4365000000], [53.2163750000, 16.4787000000], [53.1711000000, 16.5209000000], [53.0954500000, 16.5850750000], [53.0198000000, 16.6492500000], [52.9441500000, 16.7134250000], [52.8685000000, 16.7776000000], [52.7967500000, 16.8376000000], [52.7250000000, 16.8976000000], [52.6532500000, 16.9576000000], [52.5815000000, 17.0176000000], [52.5097500000, 17.0776000000], [52.4380000000, 17.1376000000], [52.3662500000, 17.1976000000], [52.2945000000, 17.2576000000], [52.2289000000, 17.3114000000], [52.1634062500, 17.3612750000], [52.0979125000, 17.4111500000], [52.0324187500, 17.4610250000], [51.9669250000, 17.5109000000], [51.9014312500, 17.5607750000], [51.8359375000, 17.6106500000], [51.7704437500, 17.6605250000], [51.7049500000, 17.7104000000], [51.6394562500, 17.7602750000], [51.5739625000, 17.8101500000], [51.5084687500, 17.8600250000], [51.4429750000, 17.9099000000], [51.3774812500, 17.9597750000], [51.3119875000, 18.0096500000], [51.2464937500, 18.0595250000], [51.1810000000, 18.1094000000], [51.1367875000, 18.1425750000], [51.0925750000, 18.1757500000], [51.0483625000, 18.2089250000], [51.0041500000, 18.2421000000], [50.9599375000, 18.2752750000], [50.9157250000, 18.3084500000], [50.8715125000, 18.3416250000], [50.8273000000, 18.3748000000], [50.7721125000, 18.4152781250], [50.7169250000, 18.4557562500], [50.6617375000, 18.4962343750], [50.6065500000, 18.5367125000], [50.5513625000, 18.5771906250], [50.4961750000, 18.6176687500], [50.4409875000, 18.6581468750], [50.3858000000, 18.6986250000], [50.3306125000, 18.7391031250], [50.2754250000, 18.7795812500], [50.2202375000, 18.8200593750], [50.1650500000, 18.8605375000], [50.1098625000, 18.9010156250], [50.0546750000, 18.9414937500], [49.9994875000, 18.9819718750], [49.9443000000, 19.0224500000], [49.8891125000, 19.0629281250], [49.8339250000, 19.1034062500], [49.7787375000, 19.1438843750], [49.7235500000, 19.1843625000], [49.6683625000, 19.2248406250], [49.6131750000, 19.2653187500], [49.5579875000, 19.3057968750], [49.5028000000, 19.3462750000], [49.4476125000, 19.3867531250], [49.3924250000, 19.4272312500], [49.3372375000, 19.4677093750], [49.2820500000, 19.5081875000], [49.2268625000, 19.5486656250], [49.1716750000, 19.5891437500], [49.1164875000, 19.6296218750], [49.0613000000, 19.6701000000], [49.0022500000, 19.7103500000], [48.9432000000, 19.7506000000], [48.8662312500, 19.7994250000], [48.7892625000, 19.8482500000], [48.7122937500, 19.8970750000], [48.6353250000, 19.9459000000], [48.5583562500, 19.9947250000], [48.4813875000, 20.0435500000], [48.4044187500, 20.0923750000]]);
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
import math
import time

from stl import mesh, Dimension

from tkinter import Tk     # from tkinter import Tk for Python 3.x
from tkinter.filedialog import askopenfilename
from mpl_toolkits.mplot3d import art3d
from matplotlib import pyplot as plt
import solid
import os
import ezdxf
import shapely.geometry as sg
import subprocess
from GUI import getSCADPath



def outputSTL(From, To, PATH=getSCADPath()):
    subprocess.Popen(PATH + " -o " + To + " " + From)
    while not os.path.exists(To):
        time.sleep(1)

class Model:
    def __init__(self, model, fileName, location, layer, thickness):
        self.location = location
        self.code = None
        self.fileName = fileName
        self.stl = fileName + ".stl"
        self.layer = layer
        self.thickness = thickness
        self.maxz = (layer+1)*thickness
        self.dxf = fileName + ".dxf"
        self.scad = fileName + ".scad"
        self.model = model
        self.center = None
        self.width = 10
        self.mesh = None
        self.useable_area = None


    def get_code(self):
        max_dim = 0.05
        max_array = 6

        num = int(self.fileName)
        nums = [int(a) for a in str(num)]
        nums.reverse()
        indices = nums
        length = len(nums)

        print(indices)
        t = 0
        i = 0
        cubes = []
        x = 0
        y = 0
        width = 0.01
        while x <= max_dim:
            while y <= max_dim:
                print(indices)
                if nums == []:
                    break
                if indices[0] != 0:
                    cubes.append(solid.translate([x, y, 0])(solid.cube(size=t / 1000 + 0.001)))
                    y += max_dim / (max_array - 1)
                    nums[0] = nums[0] - 1
                else:
                    indices.pop(0)
                    t += 1
                i += 1
            x += max_dim / (max_array - 1)
            y = 0

        outside = solid.translate([-width / 2, -width / 2])(solid.cube(max_dim + (length - 1) / 1000 + 0.001 + width))
        self.code = solid.difference()(outside, cubes)
        self.code = solid.projection(cut=True)(self.code)
        solid.scad_render_to_file(self.code, self.location + "/code.scad")
        outputSTL(From=self.location+"/code.scad", To=self.location+"code.dxf", PATH=getSCADPath())
        # os.system("toSTL.sh renders/code.scad renders/code.dxf")
        return self.location+"/code.dxf"

    def download(self, type):
        if type =="stl":
            print("generating:" + self.location+"/"+ self.fileName+".stl")
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".stl")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".stl")
        elif type == "dxf":
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".dxf")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".dxf")

    def render(self):
        solid.scad_render_to_file(self.model, self.location+"/"+ self.fileName+'.scad')
        while not os.path.exists(self.location+"/"+self.fileName+".scad"):
            time.sleep(1)
        # outputSTL(From= self.location+"/"+ self.fileName+'.scad', To=self.location+"/"+ self.fileName+'.stl')

    def get_points(self):
        doc = ezdxf.readfile(filename=self.location+"/"+ self.fileName+".dxf")
        msp = doc.modelspace()
        i=0
        lists = []
        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return [start, end]

        for e in msp.query("LINE"):
            line = helper(e)
            if not lists:
                lists.append([line])
            else:
                if lists[i][len(lists)-1][1] != line[0]:
                    lists.append([line])
                    i+=1
                else:
                    lists[i].append(line)

    def get_points2(self, FILE):
        doc = ezdxf.readfile(filename=FILE)
        msp = doc.modelspace()
        i = 0
        lists = []

        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return (start, end)

        for e in msp.query("LINE"):
            line = helper(e)
            if lists==[]:
                lists.append([line])
            else:
                if lists[i][len(lists[i]) - 1][1] != line[0]:
                    lists.append([line])
                    i += 1
                else:
                    lists[i].append(line)
        return lists

    def add_code(self):
        dxf = solid.projection(cut=False)(self.model)
        offset = solid.offset(r=-0.1)(dxf)
        solid.scad_render_to_file(offset, self.location+'/offset.scad')
        os.system("toSTL.sh renders/offset.scad renders/offset.dxf")
        lines = self.get_points2("renders/offset.dxf")
        x = lines[0][0][0][0]
        y = lines[0][0][0][1]
        print(x)
        print(y)
        code = solid.translate([x,y,0])(self.code)
        code = solid.linear_extrude(height=999)(code)
        save = self.model
        self.model = solid.projection()(solid.difference()(self.model, code))
        self.render()
        self.download("dxf")
        self.model = save

    def add_label(self, pos):
        # num = 12
        # minx, maxx, miny, maxy, minz, maxz = self.find_minmax()
        maxz = self.maxz
        # label = solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.5, halign="center"))
        # i=minx
        # print("x-len: " + str(maxx-minx))
        # print(i)
        # inc = (maxx-minx)/num
        # while minx <= i <= maxx:
        #     label = solid.union()(solid.translate([i, 0, maxz - 0.2])(solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.25, halign="center"))), label)
        #     i += inc
        #
        # l = label
        #
        # i =miny
        # while miny<= i <= maxy:
        #     print("y inc")
        #     l = solid.union()(solid.translate([0, i, 0])(label), l)
        #     i += 0.5
        for i in str(self.fileName):
            cur = pos[0]
            label = solid.translate([pos[0][0], pos[0][1], self.maxz-0.2])(solid.linear_extrude(height=(self.thickness)/3)(solid.text(str(i), size=0.5, halign="center", valign="center")))
            self.model = solid.difference()(self.model, label)
            pos.append(pos.pop(0))
            while abs(cur[0]-pos[0][0])<0.5 and abs(cur[1]-pos[0][1])<0.5:
                pos.append(pos.pop(0))



    def Center(self):

        volume, cog, inertia = self.mesh.get_mass_properties()
        print("Volume                                  = {0}".format(volume))
        print("Position of the center of gravity (COG) = {0}".format(cog))
        m_centered = solid.translate([-cog[0], -cog[1], 0])(
            self.model
        )
        return m_centered

    def find_minmax(self):
        minx = maxx = miny = maxy = minz = maxz = None
        for p in self.mesh.points:
            # p contains (x, y, z)
            if minx is None:
                minx = p[Dimension.X]
                maxx = p[Dimension.X]
                miny = p[Dimension.Y]
                maxy = p[Dimension.Y]
                minz = p[Dimension.Z]
                maxz = p[Dimension.Z]
            else:
                maxx = max(p[Dimension.X], maxx)
                minx = min(p[Dimension.X], minx)
                maxy = max(p[Dimension.Y], maxy)
                miny = min(p[Dimension.Y], miny)
                maxz = max(p[Dimension.Z], maxz)
                minz = min(p[Dimension.Z], minz)
        lenx = maxx - minx
        leny = maxy - miny
        lenz = maxz - minz
        return minx, maxx, miny, maxy, minz, maxz

    # def generate_Mesh(self):
    #     self.mesh = mesh.Mesh.from_file(self.location + "/" + str(int(self.fileName)//8)+ "b.stl")

    def get_top(self):
        top = solid.projection(cut=True)(solid.translate([0,0,-1*self.thickness*(self.layer+1)])(self.model))
        useable_area = solid.offset(r=-0.45)(top)
        self.useable_area = useable_area
        solid.scad_render_to_file(self.useable_area, self.location+'/' + 'toptemp.scad')
        outputSTL(From=self.location+'/' + 'toptemp.scad', To=self.location+"/top"+ self.dxf)

        # os.system("toSTL.sh out/toptemp.scad renders/" + self.fileName + ".dxf")
        dxf = DXF(self.location+"/top"+ self.dxf)
        min_p=dxf.points[0][0]
        points_ordered = dxf.points
        i=0
        while i <= len(dxf.points)+1:
            while math.sqrt((dxf.points[0][0]-dxf.points[1][0])**2+(dxf.points[0][1]-dxf.points[1][1])**2) > 0.1:
                dxf.points.insert(1, [(dxf.points[0][0]+dxf.points[1][0])/2, (dxf.points[0][1]+dxf.points[1][1])/2])
                i = i-1
            dxf.points.append(dxf.points.pop(0))
            i+=1
        for i in range(len(dxf.points)):
            dxf.points.append(dxf.points.pop(0))
            if dxf.points[0][0] < min_p:
                min_p = dxf.points[0][0]
                points_ordered = dxf.points.copy()
        dxf.points = points_ordered.copy()

        print(dxf.points)
        self.add_label(dxf.points)

class DXF:
    def __init__(self, file):
        self.file = file
        self.Lines = []
        self.points = []
        doc = ezdxf.readfile(self.file)
        msp = doc.modelspace()
        for e in msp:
            if e.dxftype() == "LINE":
                self.Lines.append(e)
                self.points.append([e.dxf.start[0], e.dxf.start[1]])
        # self.points.append([self.Lines[-1].dxf.end[0], self.Lines[-1].dxf.end[1]])
        self.area = None
        self.center = None
        self.polygon = sg.Polygon(self.points)

    def get_area(self):
        self.area = self.polygon.area
        return self.area

    def get_center(self):
        x_sum = 0
        y_sum =0
        for i in self.points:
            x_sum += i[0]
            y_sum += i[1]
        x_c = x_sum/len(self.points)
        y_c = y_sum/len(self.points)
        return (x_c, y_c)

    def split(self, maxdim):
        splits = []
        length = 0
        pieces = [[]]
        prev = self.points[-1]
        pieces[-1].append(prev)
        for j in self.points:
            length = length + math.sqrt((prev[0]-j[0])**2+(prev[1]-j[1])**2)
            if length >= maxdim:
                pieces[-1].append(j)
                pieces.append([])
                length = 0
            pieces[-1].append(j)
            prev = j
        for j in pieces:
            j.insert(0, [0,0])
            piece = solid.linear_extrude(height=10)(solid.polygon(j))
            splits.append(piece)
        return splits
    def refine_points(self):
        i=0
        while i <= len(self.points)+1:
            while math.sqrt((self.points[0][0]-self.points[1][0])**2+(self.points[0][1]-self.points[1][1])**2) > 0.1:
                self.points.insert(1, [(self.points[0][0]+self.points[1][0])/2, (self.points[0][1]+self.points[1][1])/2])
                i = i-1
            self.points.append(self.points.pop(0))
            i+=1


if __name__== "__main__":
    test = DXF("C:/Users/Daniel/Documents/repos/Shell_Maker/output/0top_slice.dxf")
    test.refine_points()
    k = test.split(48)
    for i in range(len(k)):
        solid.scad_render_to_file(k[i], str(i) + ".scad")


 
 
************************************************/
