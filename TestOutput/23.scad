// Generated by SolidPython 1.1.3 on 2024-05-26 02:00:29


intersection() {
	difference() {
		intersection() {
			translate(v = [0, 0, 0]) {
				import(file = "CE3E3V2_Bottom_shell.stl", origin = [0, 0]);
			}
			translate(v = [-90.04029846191406, -32.690147399902344, 4]) {
				cube(size = [180.0806, 65.380295, 2]);
			}
		}
		linear_extrude(height = 999) {
			offset(r = -1) {
				import(file = "C:/Users/Daniel/Documents/repos/Shell_Maker/TestOutput/2top_slice.dxf", origin = [0, 0]);
			}
		}
	}
	translate(v = [0, 0, 4]) {
		linear_extrude(height = 10) {
			polygon(points = [[0, 0], [-45.3518750000, 15.7792000000], [-45.4323937500, 15.7557000000], [-45.5129125000, 15.7322000000], [-45.5934312500, 15.7087000000], [-45.6739500000, 15.6852000000], [-45.7544687500, 15.6617000000], [-45.8349875000, 15.6382000000], [-45.9155062500, 15.6147000000], [-45.9960250000, 15.5912000000], [-46.0765437500, 15.5677000000], [-46.1570625000, 15.5442000000], [-46.2375812500, 15.5207000000], [-46.3181000000, 15.4972000000], [-46.3713000000, 15.4812000000], [-46.4459187500, 15.4579437500], [-46.5205375000, 15.4346875000], [-46.5951562500, 15.4114312500], [-46.6697750000, 15.3881750000], [-46.7443937500, 15.3649187500], [-46.8190125000, 15.3416625000], [-46.8936312500, 15.3184062500], [-46.9682500000, 15.2951500000], [-47.0428687500, 15.2718937500], [-47.1174875000, 15.2486375000], [-47.1921062500, 15.2253812500], [-47.2667250000, 15.2021250000], [-47.3413437500, 15.1788687500], [-47.4159625000, 15.1556125000], [-47.4905812500, 15.1323562500], [-47.5652000000, 15.1091000000], [-47.6603421875, 15.0793750000], [-47.7554843750, 15.0496500000], [-47.8506265625, 15.0199250000], [-47.9457687500, 14.9902000000], [-48.0409109375, 14.9604750000], [-48.1360531250, 14.9307500000], [-48.2311953125, 14.9010250000], [-48.3263375000, 14.8713000000], [-48.4214796875, 14.8415750000], [-48.5166218750, 14.8118500000], [-48.6117640625, 14.7821250000], [-48.7069062500, 14.7524000000], [-48.8020484375, 14.7226750000], [-48.8971906250, 14.6929500000], [-48.9923328125, 14.6632250000], [-49.0874750000, 14.6335000000], [-49.1826171875, 14.6037750000], [-49.2777593750, 14.5740500000], [-49.3729015625, 14.5443250000], [-49.4680437500, 14.5146000000], [-49.5631859375, 14.4848750000], [-49.6583281250, 14.4551500000], [-49.7534703125, 14.4254250000], [-49.8486125000, 14.3957000000], [-49.9437546875, 14.3659750000], [-50.0388968750, 14.3362500000], [-50.1340390625, 14.3065250000], [-50.2291812500, 14.2768000000], [-50.3243234375, 14.2470750000], [-50.4194656250, 14.2173500000], [-50.5146078125, 14.1876250000], [-50.6097500000, 14.1579000000], [-50.7048921875, 14.1281750000], [-50.8000343750, 14.0984500000], [-50.8951765625, 14.0687250000], [-50.9903187500, 14.0390000000], [-51.0854609375, 14.0092750000], [-51.1806031250, 13.9795500000], [-51.2757453125, 13.9498250000], [-51.3708875000, 13.9201000000], [-51.4660296875, 13.8903750000], [-51.5611718750, 13.8606500000], [-51.6563140625, 13.8309250000], [-51.7514562500, 13.8012000000], [-51.8465984375, 13.7714750000], [-51.9417406250, 13.7417500000], [-52.0368828125, 13.7120250000], [-52.1320250000, 13.6823000000], [-52.2271671875, 13.6525750000], [-52.3223093750, 13.6228500000], [-52.4174515625, 13.5931250000], [-52.5125937500, 13.5634000000], [-52.6077359375, 13.5336750000], [-52.7028781250, 13.5039500000], [-52.7980203125, 13.4742250000], [-52.8931625000, 13.4445000000], [-52.9883046875, 13.4147750000], [-53.0834468750, 13.3850500000], [-53.1785890625, 13.3553250000], [-53.2737312500, 13.3256000000], [-53.3688734375, 13.2958750000], [-53.4640156250, 13.2661500000], [-53.5591578125, 13.2364250000], [-53.6543000000, 13.2067000000], [-53.7037625000, 13.1904062500], [-53.7532250000, 13.1741125000], [-53.8026875000, 13.1578187500], [-53.8521500000, 13.1415250000], [-53.9016125000, 13.1252312500], [-53.9510750000, 13.1089375000], [-54.0005375000, 13.0926437500], [-54.0500000000, 13.0763500000], [-54.0994625000, 13.0600562500], [-54.1489250000, 13.0437625000], [-54.1983875000, 13.0274687500], [-54.2478500000, 13.0111750000], [-54.2973125000, 12.9948812500], [-54.3467750000, 12.9785875000], [-54.3962375000, 12.9622937500], [-54.4457000000, 12.9460000000], [-54.5268343750, 12.9191281250], [-54.6079687500, 12.8922562500], [-54.6891031250, 12.8653843750], [-54.7702375000, 12.8385125000], [-54.8513718750, 12.8116406250], [-54.9325062500, 12.7847687500], [-55.0136406250, 12.7578968750], [-55.0947750000, 12.7310250000], [-55.1759093750, 12.7041531250], [-55.2570437500, 12.6772812500], [-55.3381781250, 12.6504093750], [-55.4193125000, 12.6235375000], [-55.5004468750, 12.5966656250], [-55.5815812500, 12.5697937500], [-55.6627156250, 12.5429218750], [-55.7438500000, 12.5160500000], [-55.8249843750, 12.4891781250], [-55.9061187500, 12.4623062500], [-55.9872531250, 12.4354343750], [-56.0683875000, 12.4085625000], [-56.1495218750, 12.3816906250], [-56.2306562500, 12.3548187500], [-56.3117906250, 12.3279468750], [-56.3929250000, 12.3010750000], [-56.4740593750, 12.2742031250], [-56.5551937500, 12.2473312500], [-56.6363281250, 12.2204593750], [-56.7174625000, 12.1935875000], [-56.7985968750, 12.1667156250], [-56.8797312500, 12.1398437500], [-56.9608656250, 12.1129718750], [-57.0420000000, 12.0861000000], [-57.1059500000, 12.0646500000], [-57.1699000000, 12.0432000000], [-57.2239031250, 12.0241406250], [-57.2779062500, 12.0050812500], [-57.3319093750, 11.9860218750], [-57.3859125000, 11.9669625000], [-57.4399156250, 11.9479031250], [-57.4939187500, 11.9288437500], [-57.5479218750, 11.9097843750], [-57.6019250000, 11.8907250000], [-57.6559281250, 11.8716656250], [-57.7099312500, 11.8526062500], [-57.7639343750, 11.8335468750], [-57.8179375000, 11.8144875000], [-57.8719406250, 11.7954281250], [-57.9259437500, 11.7763687500], [-57.9799468750, 11.7573093750], [-58.0339500000, 11.7382500000], [-58.0879531250, 11.7191906250], [-58.1419562500, 11.7001312500], [-58.1959593750, 11.6810718750], [-58.2499625000, 11.6620125000], [-58.3039656250, 11.6429531250], [-58.3579687500, 11.6238937500], [-58.4119718750, 11.6048343750], [-58.4659750000, 11.5857750000], [-58.5199781250, 11.5667156250], [-58.5739812500, 11.5476562500], [-58.6279843750, 11.5285968750], [-58.6819875000, 11.5095375000], [-58.7359906250, 11.4904781250], [-58.7899937500, 11.4714187500], [-58.8439968750, 11.4523593750], [-58.8980000000, 11.4333000000], [-58.9700750000, 11.4077312500], [-59.0421500000, 11.3821625000], [-59.1142250000, 11.3565937500], [-59.1863000000, 11.3310250000], [-59.2583750000, 11.3054562500], [-59.3304500000, 11.2798875000], [-59.4025250000, 11.2543187500], [-59.4746000000, 11.2287500000], [-59.5466750000, 11.2031812500], [-59.6187500000, 11.1776125000], [-59.6908250000, 11.1520437500], [-59.7629000000, 11.1264750000], [-59.8349750000, 11.1009062500], [-59.9070500000, 11.0753375000], [-59.9791250000, 11.0497687500], [-60.0512000000, 11.0242000000], [-60.1086375000, 11.0036627344], [-60.1660750000, 10.9831254687], [-60.2235125000, 10.9625882031], [-60.2809500000, 10.9420509375], [-60.3383875000, 10.9215136719], [-60.3958250000, 10.9009764062], [-60.4532625000, 10.8804391406], [-60.5107000000, 10.8599018750], [-60.5681375000, 10.8393646094], [-60.6255750000, 10.8188273438], [-60.6830125000, 10.7982900781], [-60.7404500000, 10.7777528125], [-60.7978875000, 10.7572155469], [-60.8553250000, 10.7366782813], [-60.9127625000, 10.7161410156], [-60.9702000000, 10.6956037500], [-61.0276375000, 10.6750664844], [-61.0850750000, 10.6545292187], [-61.1425125000, 10.6339919531], [-61.1999500000, 10.6134546875], [-61.2573875000, 10.5929174219], [-61.3148250000, 10.5723801562], [-61.3722625000, 10.5518428906], [-61.4297000000, 10.5313056250], [-61.4871375000, 10.5107683594], [-61.5445750000, 10.4902310938], [-61.6020125000, 10.4696938281], [-61.6594500000, 10.4491565625], [-61.7168875000, 10.4286192969], [-61.7743250000, 10.4080820313], [-61.8317625000, 10.3875447656], [-61.8892000000, 10.3670075000], [-61.9466375000, 10.3464702344], [-62.0040750000, 10.3259329687], [-62.0615125000, 10.3053957031], [-62.1189500000, 10.2848584375], [-62.1763875000, 10.2643211719], [-62.2338250000, 10.2437839062], [-62.2912625000, 10.2232466406], [-62.3487000000, 10.2027093750], [-62.4061375000, 10.1821721094], [-62.4635750000, 10.1616348438], [-62.5210125000, 10.1410975781], [-62.5784500000, 10.1205603125], [-62.6358875000, 10.1000230469], [-62.6933250000, 10.0794857812], [-62.7507625000, 10.0589485156], [-62.8082000000, 10.0384112500], [-62.8656375000, 10.0178739844], [-62.9230750000, 9.9973367187], [-62.9805125000, 9.9767994531], [-63.0379500000, 9.9562621875], [-63.0953875000, 9.9357249219], [-63.1528250000, 9.9151876562], [-63.2102625000, 9.8946503906], [-63.2677000000, 9.8741131250], [-63.3251375000, 9.8535758594], [-63.3825750000, 9.8330385938], [-63.4400125000, 9.8125013281], [-63.4974500000, 9.7919640625], [-63.5548875000, 9.7714267969], [-63.6123250000, 9.7508895312], [-63.6697625000, 9.7303522656], [-63.7272000000, 9.7098150000], [-63.7846375000, 9.6892777344], [-63.8420750000, 9.6687404687], [-63.8995125000, 9.6482032031], [-63.9569500000, 9.6276659375], [-64.0143875000, 9.6071286719], [-64.0718250000, 9.5865914062], [-64.1292625000, 9.5660541406], [-64.1867000000, 9.5455168750], [-64.2441375000, 9.5249796094], [-64.3015750000, 9.5044423438], [-64.3590125000, 9.4839050781], [-64.4164500000, 9.4633678125], [-64.4738875000, 9.4428305469], [-64.5313250000, 9.4222932812], [-64.5887625000, 9.4017560156], [-64.6462000000, 9.3812187500], [-64.7036375000, 9.3606814844], [-64.7610750000, 9.3401442187], [-64.8185125000, 9.3196069531], [-64.8759500000, 9.2990696875], [-64.9333875000, 9.2785324219], [-64.9908250000, 9.2579951562], [-65.0482625000, 9.2374578906], [-65.1057000000, 9.2169206250], [-65.1631375000, 9.1963833594], [-65.2205750000, 9.1758460937], [-65.2780125000, 9.1553088281], [-65.3354500000, 9.1347715625], [-65.3928875000, 9.1142342969], [-65.4503250000, 9.0936970312], [-65.5077625000, 9.0731597656], [-65.5652000000, 9.0526225000], [-65.6226375000, 9.0320852344], [-65.6800750000, 9.0115479687], [-65.7375125000, 8.9910107031], [-65.7949500000, 8.9704734375], [-65.8523875000, 8.9499361719], [-65.9098250000, 8.9293989062], [-65.9672625000, 8.9088616406], [-66.0247000000, 8.8883243750], [-66.0821375000, 8.8677871094], [-66.1395750000, 8.8472498437], [-66.1970125000, 8.8267125781], [-66.2544500000, 8.8061753125], [-66.3118875000, 8.7856380469], [-66.3693250000, 8.7651007812], [-66.4267625000, 8.7445635156], [-66.4842000000, 8.7240262500], [-66.5416375000, 8.7034889844], [-66.5990750000, 8.6829517187], [-66.6565125000, 8.6624144531], [-66.7139500000, 8.6418771875], [-66.7713875000, 8.6213399219], [-66.8288250000, 8.6008026562], [-66.8862625000, 8.5802653906], [-66.9437000000, 8.5597281250], [-67.0011375000, 8.5391908594], [-67.0585750000, 8.5186535937], [-67.1160125000, 8.4981163281], [-67.1734500000, 8.4775790625], [-67.2308875000, 8.4570417969], [-67.2883250000, 8.4365045312], [-67.3457625000, 8.4159672656], [-67.4032000000, 8.3954300000], [-67.4949500000, 8.3609850000], [-67.5867000000, 8.3265400000], [-67.6423687500, 8.3052662500], [-67.6980375000, 8.2839925000], [-67.7537062500, 8.2627187500], [-67.8093750000, 8.2414450000], [-67.8650437500, 8.2201712500], [-67.9207125000, 8.1988975000], [-67.9763812500, 8.1776237500], [-68.0320500000, 8.1563500000], [-68.0877187500, 8.1350762500], [-68.1433875000, 8.1138025000], [-68.1990562500, 8.0925287500], [-68.2547250000, 8.0712550000], [-68.3103937500, 8.0499812500], [-68.3660625000, 8.0287075000], [-68.4217312500, 8.0074337500], [-68.4774000000, 7.9861600000], [-68.5401000000, 7.9622731250], [-68.6028000000, 7.9383862500], [-68.6655000000, 7.9144993750], [-68.7282000000, 7.8906125000], [-68.7909000000, 7.8667256250], [-68.8536000000, 7.8428387500], [-68.9163000000, 7.8189518750], [-68.9790000000, 7.7950650000], [-69.0417000000, 7.7711781250], [-69.1044000000, 7.7472912500], [-69.1671000000, 7.7234043750], [-69.2298000000, 7.6995175000], [-69.2925000000, 7.6756306250], [-69.3552000000, 7.6517437500], [-69.4179000000, 7.6278568750], [-69.4806000000, 7.6039700000], [-69.5327312500, 7.5837550000], [-69.5848625000, 7.5635400000], [-69.6369937500, 7.5433250000], [-69.6891250000, 7.5231100000], [-69.7412562500, 7.5028950000], [-69.7933875000, 7.4826800000], [-69.8455187500, 7.4624650000], [-69.8976500000, 7.4422500000], [-69.9497812500, 7.4220350000], [-70.0019125000, 7.4018200000], [-70.0540437500, 7.3816050000], [-70.1061750000, 7.3613900000], [-70.1583062500, 7.3411750000], [-70.2104375000, 7.3209600000], [-70.2625687500, 7.3007450000], [-70.3147000000, 7.2805300000], [-70.3668312500, 7.2603150000], [-70.4189625000, 7.2401000000], [-70.4710937500, 7.2198850000], [-70.5232250000, 7.1996700000], [-70.5753562500, 7.1794550000], [-70.6274875000, 7.1592400000], [-70.6796187500, 7.1390250000], [-70.7317500000, 7.1188100000], [-70.7838812500, 7.0985950000], [-70.8360125000, 7.0783800000], [-70.8881437500, 7.0581650000], [-70.9402750000, 7.0379500000], [-70.9924062500, 7.0177350000], [-71.0445375000, 6.9975200000], [-71.0966687500, 6.9773050000], [-71.1488000000, 6.9570900000], [-71.2086125000, 6.9334375000], [-71.2684250000, 6.9097850000], [-71.3282375000, 6.8861325000], [-71.3880500000, 6.8624800000], [-71.4478625000, 6.8388275000], [-71.5076750000, 6.8151750000], [-71.5674875000, 6.7915225000], [-71.6273000000, 6.7678700000], [-71.7057531250, 6.7357939063], [-71.7842062500, 6.7037178125], [-71.8626593750, 6.6716417188], [-71.9411125000, 6.6395656250], [-72.0195656250, 6.6074895312], [-72.0980187500, 6.5754134375], [-72.1764718750, 6.5433373438], [-72.2549250000, 6.5112612500], [-72.3333781250, 6.4791851563], [-72.4118312500, 6.4471090625], [-72.4902843750, 6.4150329688], [-72.5687375000, 6.3829568750], [-72.6471906250, 6.3508807812], [-72.7256437500, 6.3188046875], [-72.8040968750, 6.2867285938], [-72.8825500000, 6.2546525000], [-72.9610031250, 6.2225764063], [-73.0394562500, 6.1905003125], [-73.1179093750, 6.1584242188], [-73.1963625000, 6.1263481250], [-73.2748156250, 6.0942720313], [-73.3532687500, 6.0621959375], [-73.4317218750, 6.0301198438], [-73.5101750000, 5.9980437500], [-73.5886281250, 5.9659676563], [-73.6670812500, 5.9338915625], [-73.7455343750, 5.9018154687], [-73.8239875000, 5.8697393750], [-73.9024406250, 5.8376632813], [-73.9808937500, 5.8055871875], [-74.0593468750, 5.7735110938], [-74.1378000000, 5.7414350000], [-74.2162531250, 5.7093589062], [-74.2947062500, 5.6772828125], [-74.3731593750, 5.6452067187], [-74.4516125000, 5.6131306250], [-74.5300656250, 5.5810545313], [-74.6085187500, 5.5489784375], [-74.6869718750, 5.5169023437], [-74.7654250000, 5.4848262500], [-74.8438781250, 5.4527501562], [-74.9223312500, 5.4206740625], [-75.0007843750, 5.3885979688], [-75.0792375000, 5.3565218750], [-75.1576906250, 5.3244457812], [-75.2361437500, 5.2923696875], [-75.3145968750, 5.2602935937], [-75.3930500000, 5.2282175000], [-75.4715031250, 5.1961414062], [-75.5499562500, 5.1640653125], [-75.6284093750, 5.1319892188], [-75.7068625000, 5.0999131250], [-75.7853156250, 5.0678370312], [-75.8637687500, 5.0357609375], [-75.9422218750, 5.0036848437], [-76.0206750000, 4.9716087500], [-76.0991281250, 4.9395326562], [-76.1775812500, 4.9074565625], [-76.2560343750, 4.8753804688], [-76.3344875000, 4.8433043750], [-76.4129406250, 4.8112282812], [-76.4913937500, 4.7791521875], [-76.5698468750, 4.7470760937], [-76.6483000000, 4.7150000000], [-76.7389375000, 4.6776287500], [-76.8295750000, 4.6402575000], [-76.9202125000, 4.6028862500], [-77.0108500000, 4.5655150000], [-77.1014875000, 4.5281437500], [-77.1921250000, 4.4907725000], [-77.2827625000, 4.4534012500], [-77.3734000000, 4.4160300000], [-77.4324750000, 4.3911931250], [-77.4915500000, 4.3663562500], [-77.5506250000, 4.3415193750], [-77.6097000000, 4.3166825000], [-77.6687750000, 4.2918456250], [-77.7278500000, 4.2670087500], [-77.7869250000, 4.2421718750], [-77.8460000000, 4.2173350000], [-77.9050750000, 4.1924981250], [-77.9641500000, 4.1676612500], [-78.0232250000, 4.1428243750], [-78.0823000000, 4.1179875000], [-78.1413750000, 4.0931506250], [-78.2004500000, 4.0683137500], [-78.2595250000, 4.0434768750], [-78.3186000000, 4.0186400000], [-78.3776750000, 3.9938031250], [-78.4367500000, 3.9689662500], [-78.4958250000, 3.9441293750], [-78.5549000000, 3.9192925000], [-78.6139750000, 3.8944556250], [-78.6730500000, 3.8696187500], [-78.7321250000, 3.8447818750], [-78.7912000000, 3.8199450000], [-78.8502750000, 3.7951081250], [-78.9093500000, 3.7702712500], [-78.9684250000, 3.7454343750], [-79.0275000000, 3.7205975000], [-79.0865750000, 3.6957606250], [-79.1456500000, 3.6709237500], [-79.2047250000, 3.6460868750], [-79.2638000000, 3.6212500000], [-79.3153875000, 3.5988287500], [-79.3669750000, 3.5764075000], [-79.4185625000, 3.5539862500], [-79.4701500000, 3.5315650000], [-79.5217375000, 3.5091437500], [-79.5733250000, 3.4867225000], [-79.6249125000, 3.4643012500], [-79.6765000000, 3.4418800000], [-79.7337125000, 3.4156559375], [-79.7909250000, 3.3894318750], [-79.8481375000, 3.3632078125], [-79.9053500000, 3.3369837500], [-79.9625625000, 3.3107596875], [-80.0197750000, 3.2845356250], [-80.0769875000, 3.2583115625], [-80.1342000000, 3.2320875000], [-80.1914125000, 3.2058634375], [-80.2486250000, 3.1796393750], [-80.3058375000, 3.1534153125], [-80.3630500000, 3.1271912500], [-80.4202625000, 3.1009671875], [-80.4774750000, 3.0747431250], [-80.5346875000, 3.0485190625], [-80.5919000000, 3.0222950000], [-80.6491125000, 2.9960709375], [-80.7063250000, 2.9698468750], [-80.7635375000, 2.9436228125], [-80.8207500000, 2.9173987500], [-80.8779625000, 2.8911746875], [-80.9351750000, 2.8649506250], [-80.9923875000, 2.8387265625], [-81.0496000000, 2.8125025000], [-81.1068125000, 2.7862784375], [-81.1640250000, 2.7600543750], [-81.2212375000, 2.7338303125], [-81.2784500000, 2.7076062500], [-81.3356625000, 2.6813821875], [-81.3928750000, 2.6551581250], [-81.4500875000, 2.6289340625], [-81.5073000000, 2.6027100000], [-81.5545859375, 2.5814562734], [-81.6018718750, 2.5602025469], [-81.6491578125, 2.5389488203], [-81.6964437500, 2.5176950938], [-81.7437296875, 2.4964413672], [-81.7910156250, 2.4751876406], [-81.8383015625, 2.4539339141], [-81.8855875000, 2.4326801875], [-81.9328734375, 2.4114264609], [-81.9801593750, 2.3901727344], [-82.0274453125, 2.3689190078], [-82.0747312500, 2.3476652812], [-82.1220171875, 2.3264115547], [-82.1693031250, 2.3051578281], [-82.2165890625, 2.2839041016], [-82.2638750000, 2.2626503750], [-82.3111609375, 2.2413966484], [-82.3584468750, 2.2201429219], [-82.4057328125, 2.1988891953], [-82.4530187500, 2.1776354687], [-82.5003046875, 2.1563817422], [-82.5475906250, 2.1351280156], [-82.5948765625, 2.1138742891], [-82.6421625000, 2.0926205625], [-82.6894484375, 2.0713668359], [-82.7367343750, 2.0501131094], [-82.7840203125, 2.0288593828], [-82.8313062500, 2.0076056562], [-82.8785921875, 1.9863519297], [-82.9258781250, 1.9650982031], [-82.9731640625, 1.9438444766], [-83.0204500000, 1.9225907500], [-83.0677359375, 1.9013370234], [-83.1150218750, 1.8800832969], [-83.1623078125, 1.8588295703], [-83.2095937500, 1.8375758437], [-83.2568796875, 1.8163221172], [-83.3041656250, 1.7950683906], [-83.3514515625, 1.7738146641], [-83.3987375000, 1.7525609375], [-83.4460234375, 1.7313072109], [-83.4933093750, 1.7100534844], [-83.5405953125, 1.6887997578], [-83.5878812500, 1.6675460313], [-83.6351671875, 1.6462923047], [-83.6824531250, 1.6250385781], [-83.7297390625, 1.6037848516], [-83.7770250000, 1.5825311250], [-83.8243109375, 1.5612773984], [-83.8715968750, 1.5400236719], [-83.9188828125, 1.5187699453], [-83.9661687500, 1.4975162187], [-84.0134546875, 1.4762624922], [-84.0607406250, 1.4550087656], [-84.1080265625, 1.4337550391], [-84.1553125000, 1.4125013125], [-84.2025984375, 1.3912475859], [-84.2498843750, 1.3699938594], [-84.2971703125, 1.3487401328], [-84.3444562500, 1.3274864062], [-84.3917421875, 1.3062326797], [-84.4390281250, 1.2849789531], [-84.4863140625, 1.2637252266], [-84.5336000000, 1.2424715000], [-84.5808859375, 1.2212177734], [-84.6281718750, 1.1999640469], [-84.6754578125, 1.1787103203], [-84.7227437500, 1.1574565938], [-84.7700296875, 1.1362028672], [-84.8173156250, 1.1149491406], [-84.8646015625, 1.0936954141], [-84.9118875000, 1.0724416875], [-84.9591734375, 1.0511879609], [-85.0064593750, 1.0299342344], [-85.0537453125, 1.0086805078], [-85.1010312500, 0.9874267812], [-85.1483171875, 0.9661730547], [-85.1956031250, 0.9449193281], [-85.2428890625, 0.9236656016], [-85.2901750000, 0.9024118750], [-85.3374609375, 0.8811581484], [-85.3847468750, 0.8599044219], [-85.4320328125, 0.8386506953], [-85.4793187500, 0.8173969688], [-85.5266046875, 0.7961432422], [-85.5738906250, 0.7748895156], [-85.6211765625, 0.7536357891], [-85.6684625000, 0.7323820625], [-85.7157484375, 0.7111283359], [-85.7630343750, 0.6898746094], [-85.8103203125, 0.6686208828], [-85.8576062500, 0.6473671562], [-85.9048921875, 0.6261134297], [-85.9521781250, 0.6048597031], [-85.9994640625, 0.5836059766], [-86.0467500000, 0.5623522500], [-86.0940359375, 0.5410985234], [-86.1413218750, 0.5198447969], [-86.1886078125, 0.4985910703], [-86.2358937500, 0.4773373438], [-86.2831796875, 0.4560836172], [-86.3304656250, 0.4348298906], [-86.3777515625, 0.4135761641], [-86.4250375000, 0.3923224375], [-86.4723234375, 0.3710687109], [-86.5196093750, 0.3498149844], [-86.5668953125, 0.3285612578], [-86.6141812500, 0.3073075312], [-86.6614671875, 0.2860538047], [-86.7087531250, 0.2648000781], [-86.7560390625, 0.2435463516], [-86.8033250000, 0.2222926250], [-86.8506109375, 0.2010388984], [-86.8978968750, 0.1797851719], [-86.9451828125, 0.1585314453], [-86.9924687500, 0.1372777187], [-87.0397546875, 0.1160239922], [-87.0870406250, 0.0947702656], [-87.1343265625, 0.0735165391], [-87.1816125000, 0.0522628125], [-87.2288984375, 0.0310090859], [-87.2761843750, 0.0097553594], [-87.3234703125, -0.0114983672], [-87.3707562500, -0.0327520938], [-87.4180421875, -0.0540058203], [-87.4653281250, -0.0752595469], [-87.5126140625, -0.0965132734], [-87.5599000000, -0.1177670000], [-87.4833625000, -0.1526028125], [-87.4068250000, -0.1874386250], [-87.3302875000, -0.2222744375], [-87.2537500000, -0.2571102500], [-87.1772125000, -0.2919460625], [-87.1006750000, -0.3267818750], [-87.0241375000, -0.3616176875], [-86.9476000000, -0.3964535000], [-86.8710625000, -0.4312893125], [-86.7945250000, -0.4661251250], [-86.7179875000, -0.5009609375], [-86.6414500000, -0.5357967500], [-86.5649125000, -0.5706325625], [-86.4883750000, -0.6054683750], [-86.4118375000, -0.6403041875], [-86.3353000000, -0.6751400000], [-86.2446812500, -0.7168584375], [-86.1540625000, -0.7585768750], [-86.0634437500, -0.8002953125], [-85.9728250000, -0.8420137500], [-85.8822062500, -0.8837321875], [-85.7915875000, -0.9254506250], [-85.7009687500, -0.9671690625], [-85.6103500000, -1.0088875000], [-85.5197312500, -1.0506059375], [-85.4291125000, -1.0923243750], [-85.3384937500, -1.1340428125], [-85.2478750000, -1.1757612500], [-85.1572562500, -1.2174796875], [-85.0666375000, -1.2591981250], [-84.9760187500, -1.3009165625], [-84.8854000000, -1.3426350000]]);
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
import math
import time

from stl import mesh, Dimension

from tkinter import Tk     # from tkinter import Tk for Python 3.x
from tkinter.filedialog import askopenfilename
from mpl_toolkits.mplot3d import art3d
from matplotlib import pyplot as plt
import solid
import os
import ezdxf
import shapely.geometry as sg
import subprocess
from GUI import getSCADPath



def outputSTL(From, To, PATH=getSCADPath()):
    subprocess.Popen(PATH + " -o " + To + " " + From)
    while not os.path.exists(To):
        time.sleep(1)

class Model:
    def __init__(self, model, fileName, location, layer, thickness):
        self.location = location
        self.code = None
        self.fileName = fileName
        self.stl = fileName + ".stl"
        self.layer = layer
        self.thickness = thickness
        self.maxz = (layer+1)*thickness
        self.dxf = fileName + ".dxf"
        self.scad = fileName + ".scad"
        self.model = model
        self.center = None
        self.width = 10
        self.mesh = None
        self.useable_area = None


    def get_code(self):
        max_dim = 0.05
        max_array = 6

        num = int(self.fileName)
        nums = [int(a) for a in str(num)]
        nums.reverse()
        indices = nums
        length = len(nums)

        print(indices)
        t = 0
        i = 0
        cubes = []
        x = 0
        y = 0
        width = 0.01
        while x <= max_dim:
            while y <= max_dim:
                print(indices)
                if nums == []:
                    break
                if indices[0] != 0:
                    cubes.append(solid.translate([x, y, 0])(solid.cube(size=t / 1000 + 0.001)))
                    y += max_dim / (max_array - 1)
                    nums[0] = nums[0] - 1
                else:
                    indices.pop(0)
                    t += 1
                i += 1
            x += max_dim / (max_array - 1)
            y = 0

        outside = solid.translate([-width / 2, -width / 2])(solid.cube(max_dim + (length - 1) / 1000 + 0.001 + width))
        self.code = solid.difference()(outside, cubes)
        self.code = solid.projection(cut=True)(self.code)
        solid.scad_render_to_file(self.code, self.location + "/code.scad")
        outputSTL(From=self.location+"/code.scad", To=self.location+"code.dxf", PATH=getSCADPath())
        # os.system("toSTL.sh renders/code.scad renders/code.dxf")
        return self.location+"/code.dxf"

    def download(self, type):
        if type =="stl":
            print("generating:" + self.location+"/"+ self.fileName+".stl")
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".stl")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".stl")
        elif type == "dxf":
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".dxf")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".dxf")

    def render(self):
        solid.scad_render_to_file(self.model, self.location+"/"+ self.fileName+'.scad')
        while not os.path.exists(self.location+"/"+self.fileName+".scad"):
            time.sleep(1)
        # outputSTL(From= self.location+"/"+ self.fileName+'.scad', To=self.location+"/"+ self.fileName+'.stl')

    def get_points(self):
        doc = ezdxf.readfile(filename=self.location+"/"+ self.fileName+".dxf")
        msp = doc.modelspace()
        i=0
        lists = []
        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return [start, end]

        for e in msp.query("LINE"):
            line = helper(e)
            if not lists:
                lists.append([line])
            else:
                if lists[i][len(lists)-1][1] != line[0]:
                    lists.append([line])
                    i+=1
                else:
                    lists[i].append(line)

    def get_points2(self, FILE):
        doc = ezdxf.readfile(filename=FILE)
        msp = doc.modelspace()
        i = 0
        lists = []

        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return (start, end)

        for e in msp.query("LINE"):
            line = helper(e)
            if lists==[]:
                lists.append([line])
            else:
                if lists[i][len(lists[i]) - 1][1] != line[0]:
                    lists.append([line])
                    i += 1
                else:
                    lists[i].append(line)
        return lists

    def add_code(self):
        dxf = solid.projection(cut=False)(self.model)
        offset = solid.offset(r=-0.1)(dxf)
        solid.scad_render_to_file(offset, self.location+'/offset.scad')
        os.system("toSTL.sh renders/offset.scad renders/offset.dxf")
        lines = self.get_points2("renders/offset.dxf")
        x = lines[0][0][0][0]
        y = lines[0][0][0][1]
        print(x)
        print(y)
        code = solid.translate([x,y,0])(self.code)
        code = solid.linear_extrude(height=999)(code)
        save = self.model
        self.model = solid.projection()(solid.difference()(self.model, code))
        self.render()
        self.download("dxf")
        self.model = save

    def add_label(self, pos):
        # num = 12
        # minx, maxx, miny, maxy, minz, maxz = self.find_minmax()
        maxz = self.maxz
        # label = solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.5, halign="center"))
        # i=minx
        # print("x-len: " + str(maxx-minx))
        # print(i)
        # inc = (maxx-minx)/num
        # while minx <= i <= maxx:
        #     label = solid.union()(solid.translate([i, 0, maxz - 0.2])(solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.25, halign="center"))), label)
        #     i += inc
        #
        # l = label
        #
        # i =miny
        # while miny<= i <= maxy:
        #     print("y inc")
        #     l = solid.union()(solid.translate([0, i, 0])(label), l)
        #     i += 0.5
        for i in str(self.fileName):
            cur = pos[0]
            label = solid.translate([pos[0][0], pos[0][1], self.maxz-0.2])(solid.linear_extrude(height=(self.thickness)/3)(solid.text(str(i), size=0.5, halign="center", valign="center")))
            self.model = solid.difference()(self.model, label)
            pos.append(pos.pop(0))
            while abs(cur[0]-pos[0][0])<0.5 and abs(cur[1]-pos[0][1])<0.5:
                pos.append(pos.pop(0))



    def Center(self):

        volume, cog, inertia = self.mesh.get_mass_properties()
        print("Volume                                  = {0}".format(volume))
        print("Position of the center of gravity (COG) = {0}".format(cog))
        m_centered = solid.translate([-cog[0], -cog[1], 0])(
            self.model
        )
        return m_centered

    def find_minmax(self):
        minx = maxx = miny = maxy = minz = maxz = None
        for p in self.mesh.points:
            # p contains (x, y, z)
            if minx is None:
                minx = p[Dimension.X]
                maxx = p[Dimension.X]
                miny = p[Dimension.Y]
                maxy = p[Dimension.Y]
                minz = p[Dimension.Z]
                maxz = p[Dimension.Z]
            else:
                maxx = max(p[Dimension.X], maxx)
                minx = min(p[Dimension.X], minx)
                maxy = max(p[Dimension.Y], maxy)
                miny = min(p[Dimension.Y], miny)
                maxz = max(p[Dimension.Z], maxz)
                minz = min(p[Dimension.Z], minz)
        lenx = maxx - minx
        leny = maxy - miny
        lenz = maxz - minz
        return minx, maxx, miny, maxy, minz, maxz

    # def generate_Mesh(self):
    #     self.mesh = mesh.Mesh.from_file(self.location + "/" + str(int(self.fileName)//8)+ "b.stl")

    def get_top(self):
        top = solid.projection(cut=True)(solid.translate([0,0,-1*self.thickness*(self.layer+1)])(self.model))
        useable_area = solid.offset(r=-0.45)(top)
        self.useable_area = useable_area
        solid.scad_render_to_file(self.useable_area, self.location+'/' + 'toptemp.scad')
        outputSTL(From=self.location+'/' + 'toptemp.scad', To=self.location+"/top"+ self.dxf)

        # os.system("toSTL.sh out/toptemp.scad renders/" + self.fileName + ".dxf")
        dxf = DXF(self.location+"/top"+ self.dxf)
        min_p=dxf.points[0][0]
        points_ordered = dxf.points
        i=0
        while i <= len(dxf.points)+1:
            while math.sqrt((dxf.points[0][0]-dxf.points[1][0])**2+(dxf.points[0][1]-dxf.points[1][1])**2) > 0.1:
                dxf.points.insert(1, [(dxf.points[0][0]+dxf.points[1][0])/2, (dxf.points[0][1]+dxf.points[1][1])/2])
                i = i-1
            dxf.points.append(dxf.points.pop(0))
            i+=1
        for i in range(len(dxf.points)):
            dxf.points.append(dxf.points.pop(0))
            if dxf.points[0][0] < min_p:
                min_p = dxf.points[0][0]
                points_ordered = dxf.points.copy()
        dxf.points = points_ordered.copy()

        print(dxf.points)
        self.add_label(dxf.points)

class DXF:
    def __init__(self, file):
        self.file = file
        self.Lines = []
        self.points = []
        doc = ezdxf.readfile(self.file)
        msp = doc.modelspace()
        for e in msp:
            if e.dxftype() == "LINE":
                self.Lines.append(e)
                self.points.append([e.dxf.start[0], e.dxf.start[1]])
        # self.points.append([self.Lines[-1].dxf.end[0], self.Lines[-1].dxf.end[1]])
        self.area = None
        self.center = None
        self.polygon = sg.Polygon(self.points)

    def get_area(self):
        self.area = self.polygon.area
        return self.area

    def get_center(self):
        x_sum = 0
        y_sum =0
        for i in self.points:
            x_sum += i[0]
            y_sum += i[1]
        x_c = x_sum/len(self.points)
        y_c = y_sum/len(self.points)
        return (x_c, y_c)

    def split(self, maxdim):
        splits = []
        length = 0
        pieces = [[]]
        prev = self.points[-1]
        pieces[-1].append(prev)
        for j in self.points:
            length = length + math.sqrt((prev[0]-j[0])**2+(prev[1]-j[1])**2)
            if length >= maxdim:
                pieces[-1].append(j)
                pieces.append([])
                length = 0
            pieces[-1].append(j)
            prev = j
        for j in pieces:
            j.insert(0, [0,0])
            piece = solid.linear_extrude(height=10)(solid.polygon(j))
            splits.append(piece)
        return splits
    def refine_points(self):
        i=0
        while i <= len(self.points)+1:
            while math.sqrt((self.points[0][0]-self.points[1][0])**2+(self.points[0][1]-self.points[1][1])**2) > 0.1:
                self.points.insert(1, [(self.points[0][0]+self.points[1][0])/2, (self.points[0][1]+self.points[1][1])/2])
                i = i-1
            self.points.append(self.points.pop(0))
            i+=1


if __name__== "__main__":
    test = DXF("C:/Users/Daniel/Documents/repos/Shell_Maker/output/0top_slice.dxf")
    test.refine_points()
    k = test.split(48)
    for i in range(len(k)):
        solid.scad_render_to_file(k[i], str(i) + ".scad")


 
 
************************************************/
