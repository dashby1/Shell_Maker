// Generated by SolidPython 1.1.3 on 2024-05-26 02:00:16


intersection() {
	difference() {
		intersection() {
			translate(v = [0, 0, 0]) {
				import(file = "CE3E3V2_Bottom_shell.stl", origin = [0, 0]);
			}
			translate(v = [-90.04029846191406, -32.690147399902344, 0]) {
				cube(size = [180.0806, 65.380295, 2]);
			}
		}
		linear_extrude(height = 999) {
			offset(r = -1) {
				import(file = "C:/Users/Daniel/Documents/repos/Shell_Maker/TestOutput/0top_slice.dxf", origin = [0, 0]);
			}
		}
	}
	translate(v = [0, 0, 0]) {
		linear_extrude(height = 10) {
			polygon(points = [[0, 0], [-90.0403000000, 13.6107078125], [-90.0403000000, 13.5515310547], [-90.0403000000, 13.4923542969], [-90.0403000000, 13.4331775391], [-90.0403000000, 13.3740007813], [-90.0403000000, 13.3148240234], [-90.0403000000, 13.2556472656], [-90.0403000000, 13.1964705078], [-90.0403000000, 13.1372937500], [-90.0403000000, 13.0781169922], [-90.0403000000, 13.0189402344], [-90.0403000000, 12.9597634766], [-90.0403000000, 12.9005867188], [-90.0403000000, 12.8414099609], [-90.0403000000, 12.7822332031], [-90.0403000000, 12.7230564453], [-90.0403000000, 12.6638796875], [-90.0403000000, 12.6047029297], [-90.0403000000, 12.5455261719], [-90.0403000000, 12.4863494141], [-90.0403000000, 12.4271726563], [-90.0403000000, 12.3679958984], [-90.0403000000, 12.3088191406], [-90.0403000000, 12.2496423828], [-90.0403000000, 12.1904656250], [-90.0403000000, 12.1312888672], [-90.0403000000, 12.0721121094], [-90.0403000000, 12.0129353516], [-90.0403000000, 11.9537585938], [-90.0403000000, 11.8945818359], [-90.0403000000, 11.8354050781], [-90.0403000000, 11.7762283203], [-90.0403000000, 11.7170515625], [-90.0403000000, 11.6578748047], [-90.0403000000, 11.5986980469], [-90.0403000000, 11.5395212891], [-90.0403000000, 11.4803445313], [-90.0403000000, 11.4211677734], [-90.0403000000, 11.3619910156], [-90.0403000000, 11.3028142578], [-90.0403000000, 11.2436375000], [-90.0403000000, 11.1844607422], [-90.0403000000, 11.1252839844], [-90.0403000000, 11.0661072266], [-90.0403000000, 11.0069304687], [-90.0403000000, 10.9477537109], [-90.0403000000, 10.8885769531], [-90.0403000000, 10.8294001953], [-90.0403000000, 10.7702234375], [-90.0403000000, 10.7110466797], [-90.0403000000, 10.6518699219], [-90.0403000000, 10.5926931641], [-90.0403000000, 10.5335164063], [-90.0403000000, 10.4743396484], [-90.0403000000, 10.4151628906], [-90.0403000000, 10.3559861328], [-90.0403000000, 10.2968093750], [-90.0403000000, 10.2376326172], [-90.0403000000, 10.1784558594], [-90.0403000000, 10.1192791016], [-90.0403000000, 10.0601023437], [-90.0403000000, 10.0009255859], [-90.0403000000, 9.9417488281], [-90.0403000000, 9.8825720703], [-90.0403000000, 9.8233953125], [-90.0403000000, 9.7642185547], [-90.0403000000, 9.7050417969], [-90.0403000000, 9.6458650391], [-90.0403000000, 9.5866882813], [-90.0403000000, 9.5275115234], [-90.0403000000, 9.4683347656], [-90.0403000000, 9.4091580078], [-90.0403000000, 9.3499812500], [-90.0403000000, 9.2908044922], [-90.0403000000, 9.2316277344], [-90.0403000000, 9.1724509766], [-90.0403000000, 9.1132742187], [-90.0403000000, 9.0540974609], [-90.0403000000, 8.9949207031], [-90.0403000000, 8.9357439453], [-90.0403000000, 8.8765671875], [-90.0403000000, 8.8173904297], [-90.0403000000, 8.7582136719], [-90.0403000000, 8.6990369141], [-90.0403000000, 8.6398601563], [-90.0403000000, 8.5806833984], [-90.0403000000, 8.5215066406], [-90.0403000000, 8.4623298828], [-90.0403000000, 8.4031531250], [-90.0403000000, 8.3439763672], [-90.0403000000, 8.2847996094], [-90.0403000000, 8.2256228516], [-90.0403000000, 8.1664460938], [-90.0403000000, 8.1072693359], [-90.0403000000, 8.0480925781], [-90.0403000000, 7.9889158203], [-90.0403000000, 7.9297390625], [-90.0403000000, 7.8705623047], [-90.0403000000, 7.8113855469], [-90.0403000000, 7.7522087891], [-90.0403000000, 7.6930320313], [-90.0403000000, 7.6338552734], [-90.0403000000, 7.5746785156], [-90.0403000000, 7.5155017578], [-90.0403000000, 7.4563250000], [-90.0403000000, 7.3971482422], [-90.0403000000, 7.3379714844], [-90.0403000000, 7.2787947266], [-90.0403000000, 7.2196179688], [-90.0403000000, 7.1604412109], [-90.0403000000, 7.1012644531], [-90.0403000000, 7.0420876953], [-90.0403000000, 6.9829109375], [-90.0403000000, 6.9237341797], [-90.0403000000, 6.8645574219], [-90.0403000000, 6.8053806641], [-90.0403000000, 6.7462039062], [-90.0403000000, 6.6870271484], [-90.0403000000, 6.6278503906], [-90.0403000000, 6.5686736328], [-90.0403000000, 6.5094968750], [-90.0403000000, 6.4503201172], [-90.0403000000, 6.3911433594], [-90.0403000000, 6.3319666016], [-90.0403000000, 6.2727898438], [-90.0403000000, 6.2136130859], [-90.0403000000, 6.1544363281], [-90.0403000000, 6.0952595703], [-90.0403000000, 6.0360828125], [-90.0403000000, 5.9769060547], [-90.0403000000, 5.9177292969], [-90.0403000000, 5.8585525391], [-90.0403000000, 5.7993757813], [-90.0403000000, 5.7401990234], [-90.0403000000, 5.6810222656], [-90.0403000000, 5.6218455078], [-90.0403000000, 5.5626687500], [-90.0403000000, 5.5034919922], [-90.0403000000, 5.4443152344], [-90.0403000000, 5.3851384766], [-90.0403000000, 5.3259617188], [-90.0403000000, 5.2667849609], [-90.0403000000, 5.2076082031], [-90.0403000000, 5.1484314453], [-90.0403000000, 5.0892546875], [-90.0403000000, 5.0300779297], [-90.0403000000, 4.9709011719], [-90.0403000000, 4.9117244141], [-90.0403000000, 4.8525476563], [-90.0403000000, 4.7933708984], [-90.0403000000, 4.7341941406], [-90.0403000000, 4.6750173828], [-90.0403000000, 4.6158406250], [-90.0403000000, 4.5566638672], [-90.0403000000, 4.4974871094], [-90.0403000000, 4.4383103516], [-90.0403000000, 4.3791335938], [-90.0403000000, 4.3199568359], [-90.0403000000, 4.2607800781], [-90.0403000000, 4.2016033203], [-90.0403000000, 4.1424265625], [-90.0403000000, 4.0832498047], [-90.0403000000, 4.0240730469], [-90.0403000000, 3.9648962891], [-90.0403000000, 3.9057195313], [-90.0403000000, 3.8465427734], [-90.0403000000, 3.7873660156], [-90.0403000000, 3.7281892578], [-90.0403000000, 3.6690125000], [-90.0403000000, 3.6098357422], [-90.0403000000, 3.5506589844], [-90.0403000000, 3.4914822266], [-90.0403000000, 3.4323054688], [-90.0403000000, 3.3731287109], [-90.0403000000, 3.3139519531], [-90.0403000000, 3.2547751953], [-90.0403000000, 3.1955984375], [-90.0403000000, 3.1364216797], [-90.0403000000, 3.0772449219], [-90.0403000000, 3.0180681641], [-90.0403000000, 2.9588914063], [-90.0403000000, 2.8997146484], [-90.0403000000, 2.8405378906], [-90.0403000000, 2.7813611328], [-90.0403000000, 2.7221843750], [-90.0403000000, 2.6630076172], [-90.0403000000, 2.6038308594], [-90.0403000000, 2.5446541016], [-90.0403000000, 2.4854773438], [-90.0403000000, 2.4263005859], [-90.0403000000, 2.3671238281], [-90.0403000000, 2.3079470703], [-90.0403000000, 2.2487703125], [-90.0403000000, 2.1895935547], [-90.0403000000, 2.1304167969], [-90.0403000000, 2.0712400391], [-90.0403000000, 2.0120632813], [-90.0403000000, 1.9528865234], [-90.0403000000, 1.8937097656], [-90.0403000000, 1.8345330078], [-90.0403000000, 1.7753562500], [-90.0403000000, 1.7161794922], [-90.0403000000, 1.6570027344], [-90.0403000000, 1.5978259766], [-90.0403000000, 1.5386492188], [-90.0403000000, 1.4794724609], [-90.0403000000, 1.4202957031], [-90.0403000000, 1.3611189453], [-90.0403000000, 1.3019421875], [-90.0403000000, 1.2427654297], [-90.0403000000, 1.1835886719], [-90.0403000000, 1.1244119141], [-90.0403000000, 1.0652351563], [-90.0403000000, 1.0060583984], [-90.0403000000, 0.9468816406], [-90.0403000000, 0.8877048828], [-90.0403000000, 0.8285281250], [-90.0403000000, 0.7693513672], [-90.0403000000, 0.7101746094], [-90.0403000000, 0.6509978516], [-90.0403000000, 0.5918210938], [-90.0403000000, 0.5326443359], [-90.0403000000, 0.4734675781], [-90.0403000000, 0.4142908203], [-90.0403000000, 0.3551140625], [-90.0403000000, 0.2959373047], [-90.0403000000, 0.2367605469], [-90.0403000000, 0.1775837891], [-90.0403000000, 0.1184070313], [-90.0403000000, 0.0592302734], [-90.0403000000, 0.0000535156], [-90.0403000000, -0.0591232422], [-90.0403000000, -0.1183000000], [-90.0403000000, -0.1774767578], [-90.0403000000, -0.2366535156], [-90.0403000000, -0.2958302734], [-90.0403000000, -0.3550070312], [-90.0403000000, -0.4141837891], [-90.0403000000, -0.4733605469], [-90.0403000000, -0.5325373047], [-90.0403000000, -0.5917140625], [-90.0403000000, -0.6508908203], [-90.0403000000, -0.7100675781], [-90.0403000000, -0.7692443359], [-90.0403000000, -0.8284210937], [-90.0403000000, -0.8875978516], [-90.0403000000, -0.9467746094], [-90.0403000000, -1.0059513672], [-90.0403000000, -1.0651281250], [-90.0403000000, -1.1243048828], [-90.0403000000, -1.1834816406], [-90.0403000000, -1.2426583984], [-90.0403000000, -1.3018351562], [-90.0403000000, -1.3610119141], [-90.0403000000, -1.4201886719], [-90.0403000000, -1.4793654297], [-90.0403000000, -1.5385421875], [-90.0403000000, -1.5977189453], [-90.0403000000, -1.6568957031], [-90.0403000000, -1.7160724609], [-90.0403000000, -1.7752492187], [-90.0403000000, -1.8344259766], [-90.0403000000, -1.8936027344], [-90.0403000000, -1.9527794922], [-90.0403000000, -2.0119562500], [-90.0403000000, -2.0711330078], [-90.0403000000, -2.1303097656], [-90.0403000000, -2.1894865234], [-90.0403000000, -2.2486632812], [-90.0403000000, -2.3078400391], [-90.0403000000, -2.3670167969], [-90.0403000000, -2.4261935547], [-90.0403000000, -2.4853703125], [-90.0403000000, -2.5445470703], [-90.0403000000, -2.6037238281], [-90.0403000000, -2.6629005859], [-90.0403000000, -2.7220773437], [-90.0403000000, -2.7812541016], [-90.0403000000, -2.8404308594], [-90.0403000000, -2.8996076172], [-90.0403000000, -2.9587843750], [-90.0403000000, -3.0179611328], [-90.0403000000, -3.0771378906], [-90.0403000000, -3.1363146484], [-90.0403000000, -3.1954914062], [-90.0403000000, -3.2546681641], [-90.0403000000, -3.3138449219], [-90.0403000000, -3.3730216797], [-90.0403000000, -3.4321984375], [-90.0403000000, -3.4913751953], [-90.0403000000, -3.5505519531], [-90.0403000000, -3.6097287109], [-90.0403000000, -3.6689054687], [-90.0403000000, -3.7280822266], [-90.0403000000, -3.7872589844], [-90.0403000000, -3.8464357422], [-90.0403000000, -3.9056125000], [-90.0403000000, -3.9647892578], [-90.0403000000, -4.0239660156], [-90.0403000000, -4.0831427734], [-90.0403000000, -4.1423195313], [-90.0403000000, -4.2014962891], [-90.0403000000, -4.2606730469], [-90.0403000000, -4.3198498047], [-90.0403000000, -4.3790265625], [-90.0403000000, -4.4382033203], [-90.0403000000, -4.4973800781], [-90.0403000000, -4.5565568359], [-90.0403000000, -4.6157335937], [-90.0403000000, -4.6749103516], [-90.0403000000, -4.7340871094], [-90.0403000000, -4.7932638672], [-90.0403000000, -4.8524406250], [-90.0403000000, -4.9116173828], [-90.0403000000, -4.9707941406], [-90.0403000000, -5.0299708984], [-90.0403000000, -5.0891476562], [-90.0403000000, -5.1483244141], [-90.0403000000, -5.2075011719], [-90.0403000000, -5.2666779297], [-90.0403000000, -5.3258546875], [-90.0403000000, -5.3850314453], [-90.0403000000, -5.4442082031], [-90.0403000000, -5.5033849609], [-90.0403000000, -5.5625617187], [-90.0403000000, -5.6217384766], [-90.0403000000, -5.6809152344], [-90.0403000000, -5.7400919922], [-90.0403000000, -5.7992687500], [-90.0403000000, -5.8584455078], [-90.0403000000, -5.9176222656], [-90.0403000000, -5.9767990234], [-90.0403000000, -6.0359757812], [-90.0403000000, -6.0951525391], [-90.0403000000, -6.1543292969], [-90.0403000000, -6.2135060547], [-90.0403000000, -6.2726828125], [-90.0403000000, -6.3318595703], [-90.0403000000, -6.3910363281], [-90.0403000000, -6.4502130859], [-90.0403000000, -6.5093898437], [-90.0403000000, -6.5685666016], [-90.0403000000, -6.6277433594], [-90.0403000000, -6.6869201172], [-90.0403000000, -6.7460968750], [-90.0403000000, -6.8052736328], [-90.0403000000, -6.8644503906], [-90.0403000000, -6.9236271484], [-90.0403000000, -6.9828039062], [-90.0403000000, -7.0419806641], [-90.0403000000, -7.1011574219], [-90.0403000000, -7.1603341797], [-90.0403000000, -7.2195109375], [-90.0403000000, -7.2786876953], [-90.0403000000, -7.3378644531], [-90.0403000000, -7.3970412109], [-90.0403000000, -7.4562179687], [-90.0403000000, -7.5153947266], [-90.0403000000, -7.5745714844], [-90.0403000000, -7.6337482422], [-90.0403000000, -7.6929250000], [-90.0403000000, -7.7521017578], [-90.0403000000, -7.8112785156], [-90.0403000000, -7.8704552734], [-90.0403000000, -7.9296320312], [-90.0403000000, -7.9888087891], [-90.0403000000, -8.0479855469], [-90.0403000000, -8.1071623047], [-90.0403000000, -8.1663390625], [-90.0403000000, -8.2255158203], [-90.0403000000, -8.2846925781], [-90.0403000000, -8.3438693359], [-90.0403000000, -8.4030460937], [-90.0403000000, -8.4622228516], [-90.0403000000, -8.5213996094], [-90.0403000000, -8.5805763672], [-90.0403000000, -8.6397531250], [-90.0403000000, -8.6989298828], [-90.0403000000, -8.7581066406], [-90.0403000000, -8.8172833984], [-90.0403000000, -8.8764601563], [-90.0403000000, -8.9356369141], [-90.0403000000, -8.9948136719], [-90.0403000000, -9.0539904297], [-90.0403000000, -9.1131671875], [-90.0403000000, -9.1723439453], [-90.0403000000, -9.2315207031], [-90.0403000000, -9.2906974609], [-90.0403000000, -9.3498742187], [-90.0403000000, -9.4090509766], [-90.0403000000, -9.4682277344], [-90.0403000000, -9.5274044922], [-90.0403000000, -9.5865812500], [-90.0403000000, -9.6457580078], [-90.0403000000, -9.7049347656], [-90.0403000000, -9.7641115234], [-90.0403000000, -9.8232882813], [-90.0403000000, -9.8824650391], [-90.0403000000, -9.9416417969], [-90.0403000000, -10.0008185547], [-90.0403000000, -10.0599953125], [-90.0403000000, -10.1191720703], [-90.0403000000, -10.1783488281], [-90.0403000000, -10.2375255859], [-90.0403000000, -10.2967023437], [-90.0403000000, -10.3558791016], [-90.0403000000, -10.4150558594], [-90.0403000000, -10.4742326172], [-90.0403000000, -10.5334093750], [-90.0403000000, -10.5925861328], [-90.0403000000, -10.6517628906], [-90.0403000000, -10.7109396484], [-90.0403000000, -10.7701164063], [-90.0403000000, -10.8292931641], [-90.0403000000, -10.8884699219], [-90.0403000000, -10.9476466797], [-90.0403000000, -11.0068234375], [-90.0403000000, -11.0660001953], [-90.0403000000, -11.1251769531], [-90.0403000000, -11.1843537109], [-90.0403000000, -11.2435304687], [-90.0403000000, -11.3027072266], [-90.0403000000, -11.3618839844], [-90.0403000000, -11.4210607422], [-90.0403000000, -11.4802375000], [-90.0403000000, -11.5394142578], [-90.0403000000, -11.5985910156], [-90.0403000000, -11.6577677734], [-90.0403000000, -11.7169445313], [-90.0403000000, -11.7761212891], [-90.0403000000, -11.8352980469], [-90.0403000000, -11.8944748047], [-90.0403000000, -11.9536515625], [-90.0403000000, -12.0128283203], [-90.0403000000, -12.0720050781], [-90.0403000000, -12.1311818359], [-90.0403000000, -12.1903585938], [-90.0403000000, -12.2495353516], [-90.0403000000, -12.3087121094], [-90.0403000000, -12.3678888672], [-90.0403000000, -12.4270656250], [-90.0403000000, -12.4862423828], [-90.0403000000, -12.5454191406], [-90.0403000000, -12.6045958984], [-90.0403000000, -12.6637726562], [-90.0403000000, -12.7229494141], [-90.0403000000, -12.7821261719], [-90.0403000000, -12.8413029297], [-90.0403000000, -12.9004796875], [-90.0403000000, -12.9596564453], [-90.0403000000, -13.0188332031], [-90.0403000000, -13.0780099609], [-90.0403000000, -13.1371867188], [-90.0403000000, -13.1963634766], [-90.0403000000, -13.2555402344], [-90.0403000000, -13.3147169922], [-90.0403000000, -13.3738937500], [-90.0403000000, -13.4330705078], [-90.0403000000, -13.4922472656], [-90.0403000000, -13.5514240234], [-90.0403000000, -13.6106007812], [-90.0403000000, -13.6697775391], [-90.0403000000, -13.7289542969], [-90.0403000000, -13.7881310547], [-90.0403000000, -13.8473078125], [-90.0403000000, -13.9064845703], [-90.0403000000, -13.9656613281], [-90.0403000000, -14.0248380859], [-90.0403000000, -14.0840148438], [-90.0403000000, -14.1431916016], [-90.0403000000, -14.2023683594], [-90.0403000000, -14.2615451172], [-90.0403000000, -14.3207218750], [-90.0403000000, -14.3798986328], [-90.0403000000, -14.4390753906], [-90.0403000000, -14.4982521484], [-90.0403000000, -14.5574289062], [-90.0403000000, -14.6166056641], [-90.0403000000, -14.6757824219], [-90.0403000000, -14.7349591797], [-90.0403000000, -14.7941359375], [-90.0403000000, -14.8533126953], [-90.0403000000, -14.9124894531], [-90.0403000000, -14.9716662109], [-90.0403000000, -15.0308429688], [-90.0403000000, -15.0900197266], [-90.0403000000, -15.1491964844], [-90.0403000000, -15.2083732422], [-90.0403000000, -15.2675500000], [-90.0403000000, -15.3267267578], [-90.0403000000, -15.3859035156], [-90.0403000000, -15.4450802734], [-90.0403000000, -15.5042570312], [-90.0403000000, -15.5634337891], [-90.0403000000, -15.6226105469], [-90.0403000000, -15.6817873047], [-90.0403000000, -15.7409640625], [-90.0403000000, -15.8001408203], [-90.0403000000, -15.8593175781], [-90.0403000000, -15.9184943359], [-90.0403000000, -15.9776710938], [-90.0403000000, -16.0368478516], [-90.0403000000, -16.0960246094], [-90.0403000000, -16.1552013672], [-90.0403000000, -16.2143781250], [-90.0403000000, -16.2735548828], [-90.0403000000, -16.3327316406], [-90.0403000000, -16.3919083984], [-90.0403000000, -16.4510851563], [-90.0403000000, -16.5102619141], [-90.0403000000, -16.5694386719], [-90.0403000000, -16.6286154297], [-90.0403000000, -16.6877921875], [-90.0403000000, -16.7469689453], [-90.0403000000, -16.8061457031], [-90.0403000000, -16.8653224609], [-90.0403000000, -16.9244992188], [-90.0403000000, -16.9836759766], [-90.0403000000, -17.0428527344], [-90.0403000000, -17.1020294922], [-90.0403000000, -17.1612062500], [-90.0403000000, -17.2203830078], [-90.0403000000, -17.2795597656], [-90.0403000000, -17.3387365234], [-90.0403000000, -17.3979132812], [-90.0403000000, -17.4570900391], [-90.0403000000, -17.5162667969], [-90.0403000000, -17.5754435547], [-90.0403000000, -17.6346203125], [-90.0403000000, -17.6937970703], [-90.0403000000, -17.7529738281], [-90.0403000000, -17.8121505859], [-90.0403000000, -17.8713273437], [-90.0403000000, -17.9305041016], [-90.0403000000, -17.9896808594], [-90.0403000000, -18.0488576172], [-90.0403000000, -18.1080343750], [-90.0403000000, -18.1672111328], [-90.0403000000, -18.2263878906], [-90.0403000000, -18.2855646484], [-90.0403000000, -18.3447414063], [-90.0403000000, -18.4039181641], [-90.0403000000, -18.4630949219], [-90.0403000000, -18.5222716797], [-90.0403000000, -18.5814484375], [-90.0403000000, -18.6406251953], [-90.0403000000, -18.6998019531], [-90.0403000000, -18.7589787109], [-90.0403000000, -18.8181554687], [-90.0403000000, -18.8773322266], [-90.0403000000, -18.9365089844], [-90.0403000000, -18.9956857422], [-90.0403000000, -19.0548625000], [-90.0403000000, -19.1140392578], [-90.0403000000, -19.1732160156], [-90.0403000000, -19.2323927734], [-90.0403000000, -19.2915695312], [-90.0403000000, -19.3507462891], [-90.0403000000, -19.4099230469], [-90.0403000000, -19.4690998047], [-90.0403000000, -19.5282765625], [-90.0403000000, -19.5874533203], [-90.0403000000, -19.6466300781], [-90.0403000000, -19.7058068359], [-90.0403000000, -19.7649835937], [-90.0403000000, -19.8241603516], [-90.0403000000, -19.8833371094], [-90.0403000000, -19.9425138672], [-90.0403000000, -20.0016906250], [-90.0403000000, -20.0608673828], [-90.0403000000, -20.1200441406], [-90.0403000000, -20.1792208984], [-90.0403000000, -20.2383976563], [-90.0403000000, -20.2975744141], [-90.0403000000, -20.3567511719], [-90.0403000000, -20.4159279297], [-90.0403000000, -20.4751046875], [-90.0403000000, -20.5342814453], [-90.0403000000, -20.5934582031], [-90.0403000000, -20.6526349609], [-90.0403000000, -20.7118117187], [-90.0403000000, -20.7709884766], [-90.0403000000, -20.8301652344], [-90.0403000000, -20.8893419922], [-90.0403000000, -20.9485187500], [-90.0403000000, -21.0076955078], [-90.0403000000, -21.0668722656], [-90.0403000000, -21.1260490234], [-90.0403000000, -21.1852257812], [-90.0403000000, -21.2444025391], [-90.0403000000, -21.3035792969], [-90.0403000000, -21.3627560547], [-90.0403000000, -21.4219328125], [-90.0403000000, -21.4811095703], [-90.0403000000, -21.5402863281], [-90.0403000000, -21.5994630859], [-90.0403000000, -21.6586398437], [-90.0403000000, -21.7178166016], [-90.0403000000, -21.7769933594], [-90.0403000000, -21.8361701172], [-90.0403000000, -21.8953468750], [-90.0403000000, -21.9545236328], [-90.0403000000, -22.0137003906], [-90.0403000000, -22.0728771484], [-90.0403000000, -22.1320539063], [-90.0403000000, -22.1912306641], [-90.0403000000, -22.2504074219], [-90.0403000000, -22.3095841797], [-90.0403000000, -22.3687609375], [-90.0403000000, -22.4279376953], [-90.0403000000, -22.4871144531], [-90.0403000000, -22.5462912109], [-90.0403000000, -22.6054679687], [-90.0403000000, -22.6646447266], [-90.0403000000, -22.7238214844], [-90.0403000000, -22.7829982422], [-90.0403000000, -22.8421750000], [-90.0403000000, -22.9013517578], [-90.0403000000, -22.9605285156], [-90.0403000000, -23.0197052734], [-90.0403000000, -23.0788820312], [-90.0403000000, -23.1380587891], [-90.0403000000, -23.1972355469], [-90.0403000000, -23.2564123047], [-90.0403000000, -23.3155890625], [-90.0403000000, -23.3747658203], [-90.0403000000, -23.4339425781], [-90.0403000000, -23.4931193359], [-90.0403000000, -23.5522960937], [-90.0403000000, -23.6114728516], [-90.0403000000, -23.6706496094], [-90.0403000000, -23.7298263672], [-90.0403000000, -23.7890031250], [-90.0403000000, -23.8481798828], [-90.0403000000, -23.9073566406], [-90.0403000000, -23.9665333984], [-90.0403000000, -24.0257101562], [-90.0403000000, -24.0848869141], [-90.0403000000, -24.1440636719], [-90.0403000000, -24.2032404297], [-90.0403000000, -24.2624171875], [-90.0403000000, -24.3215939453], [-90.0403000000, -24.3807707031], [-90.0403000000, -24.4399474609], [-90.0403000000, -24.4991242187], [-90.0403000000, -24.5583009766], [-90.0403000000, -24.6174777344], [-90.0403000000, -24.6766544922], [-90.0403000000, -24.7358312500], [-90.0403000000, -24.7950080078], [-90.0403000000, -24.8541847656], [-90.0403000000, -24.9133615234], [-90.0403000000, -24.9725382812], [-90.0403000000, -25.0317150391], [-90.0403000000, -25.0908917969], [-90.0403000000, -25.1500685547], [-90.0403000000, -25.2092453125], [-90.0403000000, -25.2684220703], [-90.0403000000, -25.3275988281], [-90.0403000000, -25.3867755859], [-90.0403000000, -25.4459523437], [-90.0403000000, -25.5051291016], [-90.0403000000, -25.5643058594], [-90.0403000000, -25.6234826172], [-90.0403000000, -25.6826593750], [-90.0403000000, -25.7418361328], [-90.0403000000, -25.8010128906], [-90.0403000000, -25.8601896484], [-90.0403000000, -25.9193664062], [-90.0403000000, -25.9785431641], [-90.0403000000, -26.0377199219], [-90.0403000000, -26.0968966797], [-90.0403000000, -26.1560734375], [-90.0403000000, -26.2152501953], [-90.0403000000, -26.2744269531], [-90.0403000000, -26.3336037109], [-90.0403000000, -26.3927804687], [-90.0403000000, -26.4519572266], [-90.0403000000, -26.5111339844], [-90.0403000000, -26.5703107422], [-90.0403000000, -26.6294875000], [-90.0403000000, -26.6886642578], [-90.0403000000, -26.7478410156], [-90.0403000000, -26.8070177734], [-90.0403000000, -26.8661945312], [-90.0403000000, -26.9253712891], [-90.0403000000, -26.9845480469], [-90.0403000000, -27.0437248047], [-90.0403000000, -27.1029015625], [-90.0403000000, -27.1620783203], [-90.0403000000, -27.2212550781], [-90.0403000000, -27.2804318359], [-90.0403000000, -27.3396085937], [-90.0403000000, -27.3987853516], [-90.0403000000, -27.4579621094], [-90.0403000000, -27.5171388672], [-90.0403000000, -27.5763156250], [-90.0403000000, -27.6354923828], [-90.0403000000, -27.6946691406], [-90.0403000000, -27.7538458984], [-90.0403000000, -27.8130226562], [-90.0403000000, -27.8721994141], [-90.0403000000, -27.9313761719], [-90.0403000000, -27.9905529297], [-90.0403000000, -28.0497296875], [-90.0403000000, -28.1089064453], [-90.0403000000, -28.1680832031], [-90.0403000000, -28.2272599609], [-90.0403000000, -28.2864367187], [-90.0403000000, -28.3456134766], [-90.0403000000, -28.4047902344], [-90.0403000000, -28.4639669922], [-90.0403000000, -28.5231437500], [-90.0403000000, -28.5823205078], [-90.0403000000, -28.6414972656], [-90.0403000000, -28.7006740234], [-90.0403000000, -28.7598507812], [-90.0403000000, -28.8190275391], [-90.0403000000, -28.8782042969], [-90.0403000000, -28.9373810547], [-90.0403000000, -28.9965578125], [-90.0403000000, -29.0557345703], [-90.0403000000, -29.1149113281], [-90.0403000000, -29.1740880859], [-90.0403000000, -29.2332648437], [-90.0403000000, -29.2924416016], [-90.0403000000, -29.3516183594], [-90.0403000000, -29.4107951172], [-90.0403000000, -29.4699718750], [-90.0403000000, -29.5291486328], [-90.0403000000, -29.5883253906], [-90.0403000000, -29.6475021484], [-90.0403000000, -29.7066789062], [-90.0403000000, -29.7658556641], [-90.0403000000, -29.8250324219], [-90.0403000000, -29.8842091797], [-90.0403000000, -29.9433859375], [-90.0403000000, -30.0025626953], [-90.0403000000, -30.0617394531], [-90.0403000000, -30.1209162109], [-90.0403000000, -30.1800929687], [-90.0403000000, -30.2392697266], [-90.0403000000, -30.2984464844], [-90.0403000000, -30.3576232422], [-90.0403000000, -30.4168000000], [-89.9412062500, -30.4200390625], [-89.8421125000, -30.4232781250], [-89.7430187500, -30.4265171875], [-89.6439250000, -30.4297562500], [-89.5448312500, -30.4329953125], [-89.4457375000, -30.4362343750], [-89.3466437500, -30.4394734375], [-89.2475500000, -30.4427125000], [-89.1484562500, -30.4459515625], [-89.0493625000, -30.4491906250], [-88.9502687500, -30.4524296875], [-88.8511750000, -30.4556687500], [-88.7520812500, -30.4589078125], [-88.6529875000, -30.4621468750], [-88.5538937500, -30.4653859375], [-88.4548000000, -30.4686250000], [-88.3557062500, -30.4718640625], [-88.2566125000, -30.4751031250], [-88.1575187500, -30.4783421875], [-88.0584250000, -30.4815812500], [-87.9593312500, -30.4848203125], [-87.8602375000, -30.4880593750], [-87.7611437500, -30.4912984375], [-87.6620500000, -30.4945375000], [-87.5629562500, -30.4977765625], [-87.4638625000, -30.5010156250], [-87.3647687500, -30.5042546875], [-87.2656750000, -30.5074937500], [-87.1665812500, -30.5107328125], [-87.0674875000, -30.5139718750], [-86.9683937500, -30.5172109375], [-86.8693000000, -30.5204500000], [-86.7702062500, -30.5236890625], [-86.6711125000, -30.5269281250], [-86.5720187500, -30.5301671875], [-86.4729250000, -30.5334062500], [-86.3738312500, -30.5366453125], [-86.2747375000, -30.5398843750], [-86.1756437500, -30.5431234375], [-86.0765500000, -30.5463625000], [-85.9774562500, -30.5496015625]]);
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
import math
import time

from stl import mesh, Dimension

from tkinter import Tk     # from tkinter import Tk for Python 3.x
from tkinter.filedialog import askopenfilename
from mpl_toolkits.mplot3d import art3d
from matplotlib import pyplot as plt
import solid
import os
import ezdxf
import shapely.geometry as sg
import subprocess
from GUI import getSCADPath



def outputSTL(From, To, PATH=getSCADPath()):
    subprocess.Popen(PATH + " -o " + To + " " + From)
    while not os.path.exists(To):
        time.sleep(1)

class Model:
    def __init__(self, model, fileName, location, layer, thickness):
        self.location = location
        self.code = None
        self.fileName = fileName
        self.stl = fileName + ".stl"
        self.layer = layer
        self.thickness = thickness
        self.maxz = (layer+1)*thickness
        self.dxf = fileName + ".dxf"
        self.scad = fileName + ".scad"
        self.model = model
        self.center = None
        self.width = 10
        self.mesh = None
        self.useable_area = None


    def get_code(self):
        max_dim = 0.05
        max_array = 6

        num = int(self.fileName)
        nums = [int(a) for a in str(num)]
        nums.reverse()
        indices = nums
        length = len(nums)

        print(indices)
        t = 0
        i = 0
        cubes = []
        x = 0
        y = 0
        width = 0.01
        while x <= max_dim:
            while y <= max_dim:
                print(indices)
                if nums == []:
                    break
                if indices[0] != 0:
                    cubes.append(solid.translate([x, y, 0])(solid.cube(size=t / 1000 + 0.001)))
                    y += max_dim / (max_array - 1)
                    nums[0] = nums[0] - 1
                else:
                    indices.pop(0)
                    t += 1
                i += 1
            x += max_dim / (max_array - 1)
            y = 0

        outside = solid.translate([-width / 2, -width / 2])(solid.cube(max_dim + (length - 1) / 1000 + 0.001 + width))
        self.code = solid.difference()(outside, cubes)
        self.code = solid.projection(cut=True)(self.code)
        solid.scad_render_to_file(self.code, self.location + "/code.scad")
        outputSTL(From=self.location+"/code.scad", To=self.location+"code.dxf", PATH=getSCADPath())
        # os.system("toSTL.sh renders/code.scad renders/code.dxf")
        return self.location+"/code.dxf"

    def download(self, type):
        if type =="stl":
            print("generating:" + self.location+"/"+ self.fileName+".stl")
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".stl")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".stl")
        elif type == "dxf":
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".dxf")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".dxf")

    def render(self):
        solid.scad_render_to_file(self.model, self.location+"/"+ self.fileName+'.scad')
        while not os.path.exists(self.location+"/"+self.fileName+".scad"):
            time.sleep(1)
        # outputSTL(From= self.location+"/"+ self.fileName+'.scad', To=self.location+"/"+ self.fileName+'.stl')

    def get_points(self):
        doc = ezdxf.readfile(filename=self.location+"/"+ self.fileName+".dxf")
        msp = doc.modelspace()
        i=0
        lists = []
        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return [start, end]

        for e in msp.query("LINE"):
            line = helper(e)
            if not lists:
                lists.append([line])
            else:
                if lists[i][len(lists)-1][1] != line[0]:
                    lists.append([line])
                    i+=1
                else:
                    lists[i].append(line)

    def get_points2(self, FILE):
        doc = ezdxf.readfile(filename=FILE)
        msp = doc.modelspace()
        i = 0
        lists = []

        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return (start, end)

        for e in msp.query("LINE"):
            line = helper(e)
            if lists==[]:
                lists.append([line])
            else:
                if lists[i][len(lists[i]) - 1][1] != line[0]:
                    lists.append([line])
                    i += 1
                else:
                    lists[i].append(line)
        return lists

    def add_code(self):
        dxf = solid.projection(cut=False)(self.model)
        offset = solid.offset(r=-0.1)(dxf)
        solid.scad_render_to_file(offset, self.location+'/offset.scad')
        os.system("toSTL.sh renders/offset.scad renders/offset.dxf")
        lines = self.get_points2("renders/offset.dxf")
        x = lines[0][0][0][0]
        y = lines[0][0][0][1]
        print(x)
        print(y)
        code = solid.translate([x,y,0])(self.code)
        code = solid.linear_extrude(height=999)(code)
        save = self.model
        self.model = solid.projection()(solid.difference()(self.model, code))
        self.render()
        self.download("dxf")
        self.model = save

    def add_label(self, pos):
        # num = 12
        # minx, maxx, miny, maxy, minz, maxz = self.find_minmax()
        maxz = self.maxz
        # label = solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.5, halign="center"))
        # i=minx
        # print("x-len: " + str(maxx-minx))
        # print(i)
        # inc = (maxx-minx)/num
        # while minx <= i <= maxx:
        #     label = solid.union()(solid.translate([i, 0, maxz - 0.2])(solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.25, halign="center"))), label)
        #     i += inc
        #
        # l = label
        #
        # i =miny
        # while miny<= i <= maxy:
        #     print("y inc")
        #     l = solid.union()(solid.translate([0, i, 0])(label), l)
        #     i += 0.5
        for i in str(self.fileName):
            cur = pos[0]
            label = solid.translate([pos[0][0], pos[0][1], self.maxz-0.2])(solid.linear_extrude(height=(self.thickness)/3)(solid.text(str(i), size=0.5, halign="center", valign="center")))
            self.model = solid.difference()(self.model, label)
            pos.append(pos.pop(0))
            while abs(cur[0]-pos[0][0])<0.5 and abs(cur[1]-pos[0][1])<0.5:
                pos.append(pos.pop(0))



    def Center(self):

        volume, cog, inertia = self.mesh.get_mass_properties()
        print("Volume                                  = {0}".format(volume))
        print("Position of the center of gravity (COG) = {0}".format(cog))
        m_centered = solid.translate([-cog[0], -cog[1], 0])(
            self.model
        )
        return m_centered

    def find_minmax(self):
        minx = maxx = miny = maxy = minz = maxz = None
        for p in self.mesh.points:
            # p contains (x, y, z)
            if minx is None:
                minx = p[Dimension.X]
                maxx = p[Dimension.X]
                miny = p[Dimension.Y]
                maxy = p[Dimension.Y]
                minz = p[Dimension.Z]
                maxz = p[Dimension.Z]
            else:
                maxx = max(p[Dimension.X], maxx)
                minx = min(p[Dimension.X], minx)
                maxy = max(p[Dimension.Y], maxy)
                miny = min(p[Dimension.Y], miny)
                maxz = max(p[Dimension.Z], maxz)
                minz = min(p[Dimension.Z], minz)
        lenx = maxx - minx
        leny = maxy - miny
        lenz = maxz - minz
        return minx, maxx, miny, maxy, minz, maxz

    # def generate_Mesh(self):
    #     self.mesh = mesh.Mesh.from_file(self.location + "/" + str(int(self.fileName)//8)+ "b.stl")

    def get_top(self):
        top = solid.projection(cut=True)(solid.translate([0,0,-1*self.thickness*(self.layer+1)])(self.model))
        useable_area = solid.offset(r=-0.45)(top)
        self.useable_area = useable_area
        solid.scad_render_to_file(self.useable_area, self.location+'/' + 'toptemp.scad')
        outputSTL(From=self.location+'/' + 'toptemp.scad', To=self.location+"/top"+ self.dxf)

        # os.system("toSTL.sh out/toptemp.scad renders/" + self.fileName + ".dxf")
        dxf = DXF(self.location+"/top"+ self.dxf)
        min_p=dxf.points[0][0]
        points_ordered = dxf.points
        i=0
        while i <= len(dxf.points)+1:
            while math.sqrt((dxf.points[0][0]-dxf.points[1][0])**2+(dxf.points[0][1]-dxf.points[1][1])**2) > 0.1:
                dxf.points.insert(1, [(dxf.points[0][0]+dxf.points[1][0])/2, (dxf.points[0][1]+dxf.points[1][1])/2])
                i = i-1
            dxf.points.append(dxf.points.pop(0))
            i+=1
        for i in range(len(dxf.points)):
            dxf.points.append(dxf.points.pop(0))
            if dxf.points[0][0] < min_p:
                min_p = dxf.points[0][0]
                points_ordered = dxf.points.copy()
        dxf.points = points_ordered.copy()

        print(dxf.points)
        self.add_label(dxf.points)

class DXF:
    def __init__(self, file):
        self.file = file
        self.Lines = []
        self.points = []
        doc = ezdxf.readfile(self.file)
        msp = doc.modelspace()
        for e in msp:
            if e.dxftype() == "LINE":
                self.Lines.append(e)
                self.points.append([e.dxf.start[0], e.dxf.start[1]])
        # self.points.append([self.Lines[-1].dxf.end[0], self.Lines[-1].dxf.end[1]])
        self.area = None
        self.center = None
        self.polygon = sg.Polygon(self.points)

    def get_area(self):
        self.area = self.polygon.area
        return self.area

    def get_center(self):
        x_sum = 0
        y_sum =0
        for i in self.points:
            x_sum += i[0]
            y_sum += i[1]
        x_c = x_sum/len(self.points)
        y_c = y_sum/len(self.points)
        return (x_c, y_c)

    def split(self, maxdim):
        splits = []
        length = 0
        pieces = [[]]
        prev = self.points[-1]
        pieces[-1].append(prev)
        for j in self.points:
            length = length + math.sqrt((prev[0]-j[0])**2+(prev[1]-j[1])**2)
            if length >= maxdim:
                pieces[-1].append(j)
                pieces.append([])
                length = 0
            pieces[-1].append(j)
            prev = j
        for j in pieces:
            j.insert(0, [0,0])
            piece = solid.linear_extrude(height=10)(solid.polygon(j))
            splits.append(piece)
        return splits
    def refine_points(self):
        i=0
        while i <= len(self.points)+1:
            while math.sqrt((self.points[0][0]-self.points[1][0])**2+(self.points[0][1]-self.points[1][1])**2) > 0.1:
                self.points.insert(1, [(self.points[0][0]+self.points[1][0])/2, (self.points[0][1]+self.points[1][1])/2])
                i = i-1
            self.points.append(self.points.pop(0))
            i+=1


if __name__== "__main__":
    test = DXF("C:/Users/Daniel/Documents/repos/Shell_Maker/output/0top_slice.dxf")
    test.refine_points()
    k = test.split(48)
    for i in range(len(k)):
        solid.scad_render_to_file(k[i], str(i) + ".scad")


 
 
************************************************/
