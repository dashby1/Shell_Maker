// Generated by SolidPython 1.1.3 on 2024-05-26 02:00:23


intersection() {
	difference() {
		intersection() {
			translate(v = [0, 0, 0]) {
				import(file = "CE3E3V2_Bottom_shell.stl", origin = [0, 0]);
			}
			translate(v = [-90.04029846191406, -32.690147399902344, 2]) {
				cube(size = [180.0806, 65.380295, 2]);
			}
		}
		linear_extrude(height = 999) {
			offset(r = -1) {
				import(file = "C:/Users/Daniel/Documents/repos/Shell_Maker/TestOutput/1top_slice.dxf", origin = [0, 0]);
			}
		}
	}
	translate(v = [0, 0, 2]) {
		linear_extrude(height = 10) {
			polygon(points = [[0, 0], [61.2605921875, 30.9272734375], [61.2069152344, 30.9297917969], [61.1532382812, 30.9323101563], [61.0995613281, 30.9348285156], [61.0458843750, 30.9373468750], [60.9922074219, 30.9398652344], [60.9385304688, 30.9423835938], [60.8848535156, 30.9449019531], [60.8311765625, 30.9474203125], [60.7774996094, 30.9499386719], [60.7238226562, 30.9524570312], [60.6701457031, 30.9549753906], [60.6164687500, 30.9574937500], [60.5627917969, 30.9600121094], [60.5091148437, 30.9625304688], [60.4554378906, 30.9650488281], [60.4017609375, 30.9675671875], [60.3480839844, 30.9700855469], [60.2944070313, 30.9726039063], [60.2407300781, 30.9751222656], [60.1870531250, 30.9776406250], [60.1333761719, 30.9801589844], [60.0796992187, 30.9826773437], [60.0260222656, 30.9851957031], [59.9723453125, 30.9877140625], [59.9186683594, 30.9902324219], [59.8649914062, 30.9927507813], [59.8113144531, 30.9952691406], [59.7576375000, 30.9977875000], [59.7039605469, 31.0003058594], [59.6502835938, 31.0028242187], [59.5966066406, 31.0053425781], [59.5429296875, 31.0078609375], [59.4892527344, 31.0103792969], [59.4355757812, 31.0128976563], [59.3818988281, 31.0154160156], [59.3282218750, 31.0179343750], [59.2745449219, 31.0204527344], [59.2208679687, 31.0229710938], [59.1671910156, 31.0254894531], [59.1135140625, 31.0280078125], [59.0598371094, 31.0305261719], [59.0061601563, 31.0330445312], [58.9524832031, 31.0355628906], [58.8988062500, 31.0380812500], [58.8451292969, 31.0405996094], [58.7914523437, 31.0431179688], [58.7377753906, 31.0456363281], [58.6840984375, 31.0481546875], [58.6304214844, 31.0506730469], [58.5767445313, 31.0531914063], [58.5230675781, 31.0557097656], [58.4693906250, 31.0582281250], [58.4157136719, 31.0607464844], [58.3620367188, 31.0632648437], [58.3083597656, 31.0657832031], [58.2546828125, 31.0683015625], [58.2010058594, 31.0708199219], [58.1473289062, 31.0733382813], [58.0936519531, 31.0758566406], [58.0399750000, 31.0783750000], [57.9862980469, 31.0808933594], [57.9326210938, 31.0834117187], [57.8789441406, 31.0859300781], [57.8252671875, 31.0884484375], [57.7715902344, 31.0909667969], [57.7179132812, 31.0934851563], [57.6642363281, 31.0960035156], [57.6105593750, 31.0985218750], [57.5568824219, 31.1010402344], [57.5032054687, 31.1035585938], [57.4495285156, 31.1060769531], [57.3958515625, 31.1085953125], [57.3421746094, 31.1111136719], [57.2884976563, 31.1136320312], [57.2348207031, 31.1161503906], [57.1811437500, 31.1186687500], [57.1274667969, 31.1211871094], [57.0737898437, 31.1237054688], [57.0201128906, 31.1262238281], [56.9664359375, 31.1287421875], [56.9127589844, 31.1312605469], [56.8590820312, 31.1337789063], [56.8054050781, 31.1362972656], [56.7517281250, 31.1388156250], [56.6980511719, 31.1413339844], [56.6443742188, 31.1438523437], [56.5906972656, 31.1463707031], [56.5370203125, 31.1488890625], [56.4833433594, 31.1514074219], [56.4296664062, 31.1539257813], [56.3759894531, 31.1564441406], [56.3223125000, 31.1589625000], [56.2686355469, 31.1614808594], [56.2149585937, 31.1639992187], [56.1612816406, 31.1665175781], [56.1076046875, 31.1690359375], [56.0539277344, 31.1715542969], [56.0002507813, 31.1740726563], [55.9465738281, 31.1765910156], [55.8928968750, 31.1791093750], [55.8392199219, 31.1816277344], [55.7855429687, 31.1841460938], [55.7318660156, 31.1866644531], [55.6781890625, 31.1891828125], [55.6245121094, 31.1917011719], [55.5708351562, 31.1942195312], [55.5171582031, 31.1967378906], [55.4634812500, 31.1992562500], [55.4098042969, 31.2017746094], [55.3561273438, 31.2042929688], [55.3024503906, 31.2068113281], [55.2487734375, 31.2093296875], [55.1950964844, 31.2118480469], [55.1414195312, 31.2143664063], [55.0877425781, 31.2168847656], [55.0340656250, 31.2194031250], [54.9803886719, 31.2219214844], [54.9267117187, 31.2244398437], [54.8730347656, 31.2269582031], [54.8193578125, 31.2294765625], [54.7656808594, 31.2319949219], [54.7120039063, 31.2345132813], [54.6583269531, 31.2370316406], [54.6046500000, 31.2395500000], [54.5509730469, 31.2420683594], [54.4972960937, 31.2445867187], [54.4436191406, 31.2471050781], [54.3899421875, 31.2496234375], [54.3362652344, 31.2521417969], [54.2825882812, 31.2546601563], [54.2289113281, 31.2571785156], [54.1752343750, 31.2596968750], [54.1215574219, 31.2622152344], [54.0678804688, 31.2647335938], [54.0142035156, 31.2672519531], [53.9605265625, 31.2697703125], [53.9068496094, 31.2722886719], [53.8531726562, 31.2748070312], [53.7994957031, 31.2773253906], [53.7458187500, 31.2798437500], [53.6921417969, 31.2823621094], [53.6384648438, 31.2848804688], [53.5847878906, 31.2873988281], [53.5311109375, 31.2899171875], [53.4774339844, 31.2924355469], [53.4237570313, 31.2949539063], [53.3700800781, 31.2974722656], [53.3164031250, 31.2999906250], [53.2627261719, 31.3025089844], [53.2090492187, 31.3050273437], [53.1553722656, 31.3075457031], [53.1016953125, 31.3100640625], [53.0480183594, 31.3125824219], [52.9943414063, 31.3151007813], [52.9406644531, 31.3176191406], [52.8869875000, 31.3201375000], [52.8333105469, 31.3226558594], [52.7796335938, 31.3251742187], [52.7259566406, 31.3276925781], [52.6722796875, 31.3302109375], [52.6186027344, 31.3327292969], [52.5649257812, 31.3352476563], [52.5112488281, 31.3377660156], [52.4575718750, 31.3402843750], [52.4038949219, 31.3428027344], [52.3502179688, 31.3453210938], [52.2965410156, 31.3478394531], [52.2428640625, 31.3503578125], [52.1891871094, 31.3528761719], [52.1355101563, 31.3553945312], [52.0818332031, 31.3579128906], [52.0281562500, 31.3604312500], [51.9744792969, 31.3629496094], [51.9208023437, 31.3654679688], [51.8671253906, 31.3679863281], [51.8134484375, 31.3705046875], [51.7597714844, 31.3730230469], [51.7060945313, 31.3755414063], [51.6524175781, 31.3780597656], [51.5987406250, 31.3805781250], [51.5450636719, 31.3830964844], [51.4913867188, 31.3856148437], [51.4377097656, 31.3881332031], [51.3840328125, 31.3906515625], [51.3303558594, 31.3931699219], [51.2766789062, 31.3956882813], [51.2230019531, 31.3982066406], [51.1693250000, 31.4007250000], [51.1156480469, 31.4032433594], [51.0619710938, 31.4057617188], [51.0082941406, 31.4082800781], [50.9546171875, 31.4107984375], [50.9009402344, 31.4133167969], [50.8472632812, 31.4158351563], [50.7935863281, 31.4183535156], [50.7399093750, 31.4208718750], [50.6862324219, 31.4233902344], [50.6325554687, 31.4259085938], [50.5788785156, 31.4284269531], [50.5252015625, 31.4309453125], [50.4715246094, 31.4334636719], [50.4178476563, 31.4359820312], [50.3641707031, 31.4385003906], [50.3104937500, 31.4410187500], [50.2568167969, 31.4435371094], [50.2031398437, 31.4460554688], [50.1494628906, 31.4485738281], [50.0957859375, 31.4510921875], [50.0421089844, 31.4536105469], [49.9884320312, 31.4561289063], [49.9347550781, 31.4586472656], [49.8810781250, 31.4611656250], [49.8274011719, 31.4636839844], [49.7737242188, 31.4662023437], [49.7200472656, 31.4687207031], [49.6663703125, 31.4712390625], [49.6126933594, 31.4737574219], [49.5590164062, 31.4762757813], [49.5053394531, 31.4787941406], [49.4516625000, 31.4813125000], [49.3979855469, 31.4838308594], [49.3443085938, 31.4863492188], [49.2906316406, 31.4888675781], [49.2369546875, 31.4913859375], [49.1832777344, 31.4939042969], [49.1296007813, 31.4964226563], [49.0759238281, 31.4989410156], [49.0222468750, 31.5014593750], [48.9685699219, 31.5039777344], [48.9148929687, 31.5064960938], [48.8612160156, 31.5090144531], [48.8075390625, 31.5115328125], [48.7538621094, 31.5140511719], [48.7001851563, 31.5165695312], [48.6465082031, 31.5190878906], [48.5928312500, 31.5216062500], [48.5391542969, 31.5241246094], [48.4854773438, 31.5266429688], [48.4318003906, 31.5291613281], [48.3781234375, 31.5316796875], [48.3244464844, 31.5341980469], [48.2707695312, 31.5367164063], [48.2170925781, 31.5392347656], [48.1634156250, 31.5417531250], [48.1097386719, 31.5442714844], [48.0560617188, 31.5467898437], [48.0023847656, 31.5493082031], [47.9487078125, 31.5518265625], [47.8950308594, 31.5543449219], [47.8413539063, 31.5568632813], [47.7876769531, 31.5593816406], [47.7340000000, 31.5619000000], [47.6821417969, 31.5623208984], [47.6302835938, 31.5627417969], [47.5784253906, 31.5631626953], [47.5265671875, 31.5635835938], [47.4747089844, 31.5640044922], [47.4228507813, 31.5644253906], [47.3709925781, 31.5648462891], [47.3191343750, 31.5652671875], [47.2672761719, 31.5656880859], [47.2154179688, 31.5661089844], [47.1635597656, 31.5665298828], [47.1117015625, 31.5669507813], [47.0598433594, 31.5673716797], [47.0079851563, 31.5677925781], [46.9561269531, 31.5682134766], [46.9042687500, 31.5686343750], [46.8524105469, 31.5690552734], [46.8005523437, 31.5694761719], [46.7486941406, 31.5698970703], [46.6968359375, 31.5703179688], [46.6449777344, 31.5707388672], [46.5931195312, 31.5711597656], [46.5412613281, 31.5715806641], [46.4894031250, 31.5720015625], [46.4375449219, 31.5724224609], [46.3856867188, 31.5728433594], [46.3338285156, 31.5732642578], [46.2819703125, 31.5736851563], [46.2301121094, 31.5741060547], [46.1782539063, 31.5745269531], [46.1263957031, 31.5749478516], [46.0745375000, 31.5753687500], [46.0226792969, 31.5757896484], [45.9708210938, 31.5762105469], [45.9189628906, 31.5766314453], [45.8671046875, 31.5770523438], [45.8152464844, 31.5774732422], [45.7633882813, 31.5778941406], [45.7115300781, 31.5783150391], [45.6596718750, 31.5787359375], [45.6078136719, 31.5791568359], [45.5559554687, 31.5795777344], [45.5040972656, 31.5799986328], [45.4522390625, 31.5804195313], [45.4003808594, 31.5808404297], [45.3485226562, 31.5812613281], [45.2966644531, 31.5816822266], [45.2448062500, 31.5821031250], [45.1929480469, 31.5825240234], [45.1410898438, 31.5829449219], [45.0892316406, 31.5833658203], [45.0373734375, 31.5837867188], [44.9855152344, 31.5842076172], [44.9336570313, 31.5846285156], [44.8817988281, 31.5850494141], [44.8299406250, 31.5854703125], [44.7780824219, 31.5858912109], [44.7262242188, 31.5863121094], [44.6743660156, 31.5867330078], [44.6225078125, 31.5871539063], [44.5706496094, 31.5875748047], [44.5187914063, 31.5879957031], [44.4669332031, 31.5884166016], [44.4150750000, 31.5888375000], [44.3632167969, 31.5892583984], [44.3113585938, 31.5896792969], [44.2595003906, 31.5901001953], [44.2076421875, 31.5905210937], [44.1557839844, 31.5909419922], [44.1039257812, 31.5913628906], [44.0520675781, 31.5917837891], [44.0002093750, 31.5922046875], [43.9483511719, 31.5926255859], [43.8964929687, 31.5930464844], [43.8446347656, 31.5934673828], [43.7927765625, 31.5938882812], [43.7409183594, 31.5943091797], [43.6890601562, 31.5947300781], [43.6372019531, 31.5951509766], [43.5853437500, 31.5955718750], [43.5334855469, 31.5959927734], [43.4816273438, 31.5964136719], [43.4297691406, 31.5968345703], [43.3779109375, 31.5972554687], [43.3260527344, 31.5976763672], [43.2741945313, 31.5980972656], [43.2223363281, 31.5985181641], [43.1704781250, 31.5989390625], [43.1186199219, 31.5993599609], [43.0667617188, 31.5997808594], [43.0149035156, 31.6002017578], [42.9630453125, 31.6006226562], [42.9111871094, 31.6010435547], [42.8593289062, 31.6014644531], [42.8074707031, 31.6018853516], [42.7556125000, 31.6023062500], [42.7037542969, 31.6027271484], [42.6518960937, 31.6031480469], [42.6000378906, 31.6035689453], [42.5481796875, 31.6039898437], [42.4963214844, 31.6044107422], [42.4444632812, 31.6048316406], [42.3926050781, 31.6052525391], [42.3407468750, 31.6056734375], [42.2888886719, 31.6060943359], [42.2370304688, 31.6065152344], [42.1851722656, 31.6069361328], [42.1333140625, 31.6073570312], [42.0814558594, 31.6077779297], [42.0295976563, 31.6081988281], [41.9777394531, 31.6086197266], [41.9258812500, 31.6090406250], [41.8740230469, 31.6094615234], [41.8221648438, 31.6098824219], [41.7703066406, 31.6103033203], [41.7184484375, 31.6107242188], [41.6665902344, 31.6111451172], [41.6147320312, 31.6115660156], [41.5628738281, 31.6119869141], [41.5110156250, 31.6124078125], [41.4591574219, 31.6128287109], [41.4072992187, 31.6132496094], [41.3554410156, 31.6136705078], [41.3035828125, 31.6140914062], [41.2517246094, 31.6145123047], [41.1998664062, 31.6149332031], [41.1480082031, 31.6153541016], [41.0961500000, 31.6157750000], [41.0442917969, 31.6161958984], [40.9924335938, 31.6166167969], [40.9405753906, 31.6170376953], [40.8887171875, 31.6174585938], [40.8368589844, 31.6178794922], [40.7850007813, 31.6183003906], [40.7331425781, 31.6187212891], [40.6812843750, 31.6191421875], [40.6294261719, 31.6195630859], [40.5775679688, 31.6199839844], [40.5257097656, 31.6204048828], [40.4738515625, 31.6208257812], [40.4219933594, 31.6212466797], [40.3701351563, 31.6216675781], [40.3182769531, 31.6220884766], [40.2664187500, 31.6225093750], [40.2145605469, 31.6229302734], [40.1627023437, 31.6233511719], [40.1108441406, 31.6237720703], [40.0589859375, 31.6241929688], [40.0071277344, 31.6246138672], [39.9552695312, 31.6250347656], [39.9034113281, 31.6254556641], [39.8515531250, 31.6258765625], [39.7996949219, 31.6262974609], [39.7478367188, 31.6267183594], [39.6959785156, 31.6271392578], [39.6441203125, 31.6275601562], [39.5922621094, 31.6279810547], [39.5404039063, 31.6284019531], [39.4885457031, 31.6288228516], [39.4366875000, 31.6292437500], [39.3848292969, 31.6296646484], [39.3329710938, 31.6300855469], [39.2811128906, 31.6305064453], [39.2292546875, 31.6309273438], [39.1773964844, 31.6313482422], [39.1255382813, 31.6317691406], [39.0736800781, 31.6321900391], [39.0218218750, 31.6326109375], [38.9699636719, 31.6330318359], [38.9181054687, 31.6334527344], [38.8662472656, 31.6338736328], [38.8143890625, 31.6342945312], [38.7625308594, 31.6347154297], [38.7106726562, 31.6351363281], [38.6588144531, 31.6355572266], [38.6069562500, 31.6359781250], [38.5550980469, 31.6363990234], [38.5032398438, 31.6368199219], [38.4513816406, 31.6372408203], [38.3995234375, 31.6376617188], [38.3476652344, 31.6380826172], [38.2958070313, 31.6385035156], [38.2439488281, 31.6389244141], [38.1920906250, 31.6393453125], [38.1402324219, 31.6397662109], [38.0883742188, 31.6401871094], [38.0365160156, 31.6406080078], [37.9846578125, 31.6410289062], [37.9327996094, 31.6414498047], [37.8809414063, 31.6418707031], [37.8290832031, 31.6422916016], [37.7772250000, 31.6427125000], [37.7253667969, 31.6431333984], [37.6735085938, 31.6435542969], [37.6216503906, 31.6439751953], [37.5697921875, 31.6443960938], [37.5179339844, 31.6448169922], [37.4660757812, 31.6452378906], [37.4142175781, 31.6456587891], [37.3623593750, 31.6460796875], [37.3105011719, 31.6465005859], [37.2586429687, 31.6469214844], [37.2067847656, 31.6473423828], [37.1549265625, 31.6477632813], [37.1030683594, 31.6481841797], [37.0512101562, 31.6486050781], [36.9993519531, 31.6490259766], [36.9474937500, 31.6494468750], [36.8956355469, 31.6498677734], [36.8437773438, 31.6502886719], [36.7919191406, 31.6507095703], [36.7400609375, 31.6511304688], [36.6882027344, 31.6515513672], [36.6363445313, 31.6519722656], [36.5844863281, 31.6523931641], [36.5326281250, 31.6528140625], [36.4807699219, 31.6532349609], [36.4289117188, 31.6536558594], [36.3770535156, 31.6540767578], [36.3251953125, 31.6544976563], [36.2733371094, 31.6549185547], [36.2214789062, 31.6553394531], [36.1696207031, 31.6557603516], [36.1177625000, 31.6561812500], [36.0659042969, 31.6566021484], [36.0140460937, 31.6570230469], [35.9621878906, 31.6574439453], [35.9103296875, 31.6578648438], [35.8584714844, 31.6582857422], [35.8066132812, 31.6587066406], [35.7547550781, 31.6591275391], [35.7028968750, 31.6595484375], [35.6510386719, 31.6599693359], [35.5991804688, 31.6603902344], [35.5473222656, 31.6608111328], [35.4954640625, 31.6612320313], [35.4436058594, 31.6616529297], [35.3917476563, 31.6620738281], [35.3398894531, 31.6624947266], [35.2880312500, 31.6629156250], [35.2361730469, 31.6633365234], [35.1843148438, 31.6637574219], [35.1324566406, 31.6641783203], [35.0805984375, 31.6645992188], [35.0287402344, 31.6650201172], [34.9768820312, 31.6654410156], [34.9250238281, 31.6658619141], [34.8731656250, 31.6662828125], [34.8213074219, 31.6667037109], [34.7694492187, 31.6671246094], [34.7175910156, 31.6675455078], [34.6657328125, 31.6679664063], [34.6138746094, 31.6683873047], [34.5620164062, 31.6688082031], [34.5101582031, 31.6692291016], [34.4583000000, 31.6696500000], [34.4064417969, 31.6700708984], [34.3545835938, 31.6704917969], [34.3027253906, 31.6709126953], [34.2508671875, 31.6713335937], [34.1990089844, 31.6717544922], [34.1471507813, 31.6721753906], [34.0952925781, 31.6725962891], [34.0434343750, 31.6730171875], [33.9915761719, 31.6734380859], [33.9397179688, 31.6738589844], [33.8878597656, 31.6742798828], [33.8360015625, 31.6747007812], [33.7841433594, 31.6751216797], [33.7322851563, 31.6755425781], [33.6804269531, 31.6759634766], [33.6285687500, 31.6763843750], [33.5767105469, 31.6768052734], [33.5248523437, 31.6772261719], [33.4729941406, 31.6776470703], [33.4211359375, 31.6780679687], [33.3692777344, 31.6784888672], [33.3174195312, 31.6789097656], [33.2655613281, 31.6793306641], [33.2137031250, 31.6797515625], [33.1618449219, 31.6801724609], [33.1099867188, 31.6805933594], [33.0581285156, 31.6810142578], [33.0062703125, 31.6814351562], [32.9544121094, 31.6818560547], [32.9025539063, 31.6822769531], [32.8506957031, 31.6826978516], [32.7988375000, 31.6831187500], [32.7469792969, 31.6835396484], [32.6951210938, 31.6839605469], [32.6432628906, 31.6843814453], [32.5914046875, 31.6848023438], [32.5395464844, 31.6852232422], [32.4876882813, 31.6856441406], [32.4358300781, 31.6860650391], [32.3839718750, 31.6864859375], [32.3321136719, 31.6869068359], [32.2802554687, 31.6873277344], [32.2283972656, 31.6877486328], [32.1765390625, 31.6881695312], [32.1246808594, 31.6885904297], [32.0728226562, 31.6890113281], [32.0209644531, 31.6894322266], [31.9691062500, 31.6898531250], [31.9172480469, 31.6902740234], [31.8653898438, 31.6906949219], [31.8135316406, 31.6911158203], [31.7616734375, 31.6915367188], [31.7098152344, 31.6919576172], [31.6579570312, 31.6923785156], [31.6060988281, 31.6927994141], [31.5542406250, 31.6932203125], [31.5023824219, 31.6936412109], [31.4505242188, 31.6940621094], [31.3986660156, 31.6944830078], [31.3468078125, 31.6949039062], [31.2949496094, 31.6953248047], [31.2430914063, 31.6957457031], [31.1912332031, 31.6961666016], [31.1393750000, 31.6965875000], [31.0875167969, 31.6970083984], [31.0356585938, 31.6974292969], [30.9838003906, 31.6978501953], [30.9319421875, 31.6982710938], [30.8800839844, 31.6986919922], [30.8282257812, 31.6991128906], [30.7763675781, 31.6995337891], [30.7245093750, 31.6999546875], [30.6726511719, 31.7003755859], [30.6207929688, 31.7007964844], [30.5689347656, 31.7012173828], [30.5170765625, 31.7016382812], [30.4652183594, 31.7020591797], [30.4133601563, 31.7024800781], [30.3615019531, 31.7029009766], [30.3096437500, 31.7033218750], [30.2577855469, 31.7037427734], [30.2059273437, 31.7041636719], [30.1540691406, 31.7045845703], [30.1022109375, 31.7050054688], [30.0503527344, 31.7054263672], [29.9984945313, 31.7058472656], [29.9466363281, 31.7062681641], [29.8947781250, 31.7066890625], [29.8429199219, 31.7071099609], [29.7910617188, 31.7075308594], [29.7392035156, 31.7079517578], [29.6873453125, 31.7083726562], [29.6354871094, 31.7087935547], [29.5836289062, 31.7092144531], [29.5317707031, 31.7096353516], [29.4799125000, 31.7100562500], [29.4280542969, 31.7104771484], [29.3761960938, 31.7108980469], [29.3243378906, 31.7113189453], [29.2724796875, 31.7117398438], [29.2206214844, 31.7121607422], [29.1687632813, 31.7125816406], [29.1169050781, 31.7130025391], [29.0650468750, 31.7134234375], [29.0131886719, 31.7138443359], [28.9613304687, 31.7142652344], [28.9094722656, 31.7146861328], [28.8576140625, 31.7151070312], [28.8057558594, 31.7155279297], [28.7538976563, 31.7159488281], [28.7020394531, 31.7163697266], [28.6501812500, 31.7167906250], [28.5983230469, 31.7172115234], [28.5464648438, 31.7176324219], [28.4946066406, 31.7180533203], [28.4427484375, 31.7184742188], [28.3908902344, 31.7188951172], [28.3390320312, 31.7193160156], [28.2871738281, 31.7197369141], [28.2353156250, 31.7201578125], [28.1834574219, 31.7205787109], [28.1315992188, 31.7209996094], [28.0797410156, 31.7214205078], [28.0278828125, 31.7218414063], [27.9760246094, 31.7222623047], [27.9241664063, 31.7226832031], [27.8723082031, 31.7231041016], [27.8204500000, 31.7235250000], [27.7685917969, 31.7239458984], [27.7167335937, 31.7243667969], [27.6648753906, 31.7247876953], [27.6130171875, 31.7252085938], [27.5611589844, 31.7256294922], [27.5093007812, 31.7260503906], [27.4574425781, 31.7264712891], [27.4055843750, 31.7268921875], [27.3537261719, 31.7273130859], [27.3018679688, 31.7277339844], [27.2500097656, 31.7281548828], [27.1981515625, 31.7285757813], [27.1462933594, 31.7289966797], [27.0944351563, 31.7294175781], [27.0425769531, 31.7298384766], [26.9907187500, 31.7302593750], [26.9388605469, 31.7306802734], [26.8870023437, 31.7311011719], [26.8351441406, 31.7315220703], [26.7832859375, 31.7319429688], [26.7314277344, 31.7323638672], [26.6795695313, 31.7327847656], [26.6277113281, 31.7332056641], [26.5758531250, 31.7336265625], [26.5239949219, 31.7340474609], [26.4721367188, 31.7344683594], [26.4202785156, 31.7348892578], [26.3684203125, 31.7353101563], [26.3165621094, 31.7357310547], [26.2647039062, 31.7361519531], [26.2128457031, 31.7365728516], [26.1609875000, 31.7369937500], [26.1091292969, 31.7374146484], [26.0572710938, 31.7378355469], [26.0054128906, 31.7382564453], [25.9535546875, 31.7386773438], [25.9016964844, 31.7390982422], [25.8498382813, 31.7395191406], [25.7979800781, 31.7399400391], [25.7461218750, 31.7403609375], [25.6942636719, 31.7407818359], [25.6424054687, 31.7412027344], [25.5905472656, 31.7416236328], [25.5386890625, 31.7420445313], [25.4868308594, 31.7424654297], [25.4349726563, 31.7428863281], [25.3831144531, 31.7433072266], [25.3312562500, 31.7437281250], [25.2793980469, 31.7441490234], [25.2275398438, 31.7445699219], [25.1756816406, 31.7449908203], [25.1238234375, 31.7454117188], [25.0719652344, 31.7458326172], [25.0201070312, 31.7462535156], [24.9682488281, 31.7466744141], [24.9163906250, 31.7470953125], [24.8645324219, 31.7475162109], [24.8126742188, 31.7479371094], [24.7608160156, 31.7483580078], [24.7089578125, 31.7487789063], [24.6570996094, 31.7491998047], [24.6052414063, 31.7496207031], [24.5533832031, 31.7500416016], [24.5015250000, 31.7504625000], [24.4496667969, 31.7508833984], [24.3978085937, 31.7513042969], [24.3459503906, 31.7517251953], [24.2940921875, 31.7521460937], [24.2422339844, 31.7525669922], [24.1903757812, 31.7529878906], [24.1385175781, 31.7534087891], [24.0866593750, 31.7538296875], [24.0348011719, 31.7542505859], [23.9829429688, 31.7546714844], [23.9310847656, 31.7550923828], [23.8792265625, 31.7555132812], [23.8273683594, 31.7559341797], [23.7755101563, 31.7563550781], [23.7236519531, 31.7567759766], [23.6717937500, 31.7571968750], [23.6199355469, 31.7576177734], [23.5680773437, 31.7580386719], [23.5162191406, 31.7584595703], [23.4643609375, 31.7588804688], [23.4125027344, 31.7593013672], [23.3606445313, 31.7597222656], [23.3087863281, 31.7601431641], [23.2569281250, 31.7605640625], [23.2050699219, 31.7609849609], [23.1532117188, 31.7614058594], [23.1013535156, 31.7618267578], [23.0494953125, 31.7622476562], [22.9976371094, 31.7626685547], [22.9457789062, 31.7630894531], [22.8939207031, 31.7635103516], [22.8420625000, 31.7639312500], [22.7902042969, 31.7643521484], [22.7383460938, 31.7647730469], [22.6864878906, 31.7651939453], [22.6346296875, 31.7656148438], [22.5827714844, 31.7660357422], [22.5309132813, 31.7664566406], [22.4790550781, 31.7668775391], [22.4271968750, 31.7672984375], [22.3753386719, 31.7677193359], [22.3234804687, 31.7681402344], [22.2716222656, 31.7685611328], [22.2197640625, 31.7689820312], [22.1679058594, 31.7694029297], [22.1160476563, 31.7698238281], [22.0641894531, 31.7702447266], [22.0123312500, 31.7706656250], [21.9604730469, 31.7710865234], [21.9086148438, 31.7715074219], [21.8567566406, 31.7719283203], [21.8048984375, 31.7723492188], [21.7530402344, 31.7727701172], [21.7011820312, 31.7731910156], [21.6493238281, 31.7736119141], [21.5974656250, 31.7740328125], [21.5456074219, 31.7744537109], [21.4937492188, 31.7748746094], [21.4418910156, 31.7752955078], [21.3900328125, 31.7757164062], [21.3381746094, 31.7761373047], [21.2863164063, 31.7765582031], [21.2344582031, 31.7769791016], [21.1826000000, 31.7774000000], [21.1099261719, 31.7758064453], [21.0372523438, 31.7742128906], [20.9645785156, 31.7726193359], [20.8919046875, 31.7710257812], [20.8192308594, 31.7694322266], [20.7465570312, 31.7678386719], [20.6738832031, 31.7662451172], [20.6012093750, 31.7646515625], [20.5285355469, 31.7630580078], [20.4558617188, 31.7614644531], [20.3831878906, 31.7598708984], [20.3105140625, 31.7582773437], [20.2378402344, 31.7566837891], [20.1651664062, 31.7550902344], [20.0924925781, 31.7534966797], [20.0198187500, 31.7519031250], [19.9471449219, 31.7503095703], [19.8744710937, 31.7487160156], [19.8017972656, 31.7471224609], [19.7291234375, 31.7455289062], [19.6564496094, 31.7439353516], [19.5837757813, 31.7423417969], [19.5111019531, 31.7407482422], [19.4384281250, 31.7391546875], [19.3657542969, 31.7375611328], [19.2930804688, 31.7359675781], [19.2204066406, 31.7343740234], [19.1477328125, 31.7327804688], [19.0750589844, 31.7311869141], [19.0023851562, 31.7295933594], [18.9297113281, 31.7279998047], [18.8570375000, 31.7264062500], [18.7843636719, 31.7248126953], [18.7116898438, 31.7232191406], [18.6390160156, 31.7216255859], [18.5663421875, 31.7200320312], [18.4936683594, 31.7184384766], [18.4209945312, 31.7168449219], [18.3483207031, 31.7152513672], [18.2756468750, 31.7136578125], [18.2029730469, 31.7120642578], [18.1302992188, 31.7104707031], [18.0576253906, 31.7088771484], [17.9849515625, 31.7072835938], [17.9122777344, 31.7056900391], [17.8396039063, 31.7040964844], [17.7669300781, 31.7025029297], [17.6942562500, 31.7009093750], [17.6215824219, 31.6993158203], [17.5489085938, 31.6977222656], [17.4762347656, 31.6961287109], [17.4035609375, 31.6945351563], [17.3308871094, 31.6929416016], [17.2582132813, 31.6913480469], [17.1855394531, 31.6897544922], [17.1128656250, 31.6881609375], [17.0401917969, 31.6865673828], [16.9675179688, 31.6849738281], [16.8948441406, 31.6833802734], [16.8221703125, 31.6817867188], [16.7494964844, 31.6801931641], [16.6768226562, 31.6785996094], [16.6041488281, 31.6770060547], [16.5314750000, 31.6754125000], [16.4588011719, 31.6738189453], [16.3861273438, 31.6722253906], [16.3134535156, 31.6706318359], [16.2407796875, 31.6690382812], [16.1681058594, 31.6674447266], [16.0954320312, 31.6658511719], [16.0227582031, 31.6642576172], [15.9500843750, 31.6626640625], [15.8774105469, 31.6610705078], [15.8047367188, 31.6594769531], [15.7320628906, 31.6578833984], [15.6593890625, 31.6562898437], [15.5867152344, 31.6546962891], [15.5140414063, 31.6531027344], [15.4413675781, 31.6515091797], [15.3686937500, 31.6499156250], [15.2960199219, 31.6483220703], [15.2233460937, 31.6467285156], [15.1506722656, 31.6451349609], [15.0779984375, 31.6435414062], [15.0053246094, 31.6419478516], [14.9326507813, 31.6403542969], [14.8599769531, 31.6387607422], [14.7873031250, 31.6371671875], [14.7146292969, 31.6355736328], [14.6419554688, 31.6339800781], [14.5692816406, 31.6323865234], [14.4966078125, 31.6307929688], [14.4239339844, 31.6291994141], [14.3512601562, 31.6276058594], [14.2785863281, 31.6260123047], [14.2059125000, 31.6244187500], [14.1332386719, 31.6228251953], [14.0605648438, 31.6212316406], [13.9878910156, 31.6196380859], [13.9152171875, 31.6180445312], [13.8425433594, 31.6164509766], [13.7698695312, 31.6148574219], [13.6971957031, 31.6132638672], [13.6245218750, 31.6116703125], [13.5518480469, 31.6100767578], [13.4791742187, 31.6084832031], [13.4065003906, 31.6068896484], [13.3338265625, 31.6052960938], [13.2611527344, 31.6037025391]]);
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
import math
import time

from stl import mesh, Dimension

from tkinter import Tk     # from tkinter import Tk for Python 3.x
from tkinter.filedialog import askopenfilename
from mpl_toolkits.mplot3d import art3d
from matplotlib import pyplot as plt
import solid
import os
import ezdxf
import shapely.geometry as sg
import subprocess
from GUI import getSCADPath



def outputSTL(From, To, PATH=getSCADPath()):
    subprocess.Popen(PATH + " -o " + To + " " + From)
    while not os.path.exists(To):
        time.sleep(1)

class Model:
    def __init__(self, model, fileName, location, layer, thickness):
        self.location = location
        self.code = None
        self.fileName = fileName
        self.stl = fileName + ".stl"
        self.layer = layer
        self.thickness = thickness
        self.maxz = (layer+1)*thickness
        self.dxf = fileName + ".dxf"
        self.scad = fileName + ".scad"
        self.model = model
        self.center = None
        self.width = 10
        self.mesh = None
        self.useable_area = None


    def get_code(self):
        max_dim = 0.05
        max_array = 6

        num = int(self.fileName)
        nums = [int(a) for a in str(num)]
        nums.reverse()
        indices = nums
        length = len(nums)

        print(indices)
        t = 0
        i = 0
        cubes = []
        x = 0
        y = 0
        width = 0.01
        while x <= max_dim:
            while y <= max_dim:
                print(indices)
                if nums == []:
                    break
                if indices[0] != 0:
                    cubes.append(solid.translate([x, y, 0])(solid.cube(size=t / 1000 + 0.001)))
                    y += max_dim / (max_array - 1)
                    nums[0] = nums[0] - 1
                else:
                    indices.pop(0)
                    t += 1
                i += 1
            x += max_dim / (max_array - 1)
            y = 0

        outside = solid.translate([-width / 2, -width / 2])(solid.cube(max_dim + (length - 1) / 1000 + 0.001 + width))
        self.code = solid.difference()(outside, cubes)
        self.code = solid.projection(cut=True)(self.code)
        solid.scad_render_to_file(self.code, self.location + "/code.scad")
        outputSTL(From=self.location+"/code.scad", To=self.location+"code.dxf", PATH=getSCADPath())
        # os.system("toSTL.sh renders/code.scad renders/code.dxf")
        return self.location+"/code.dxf"

    def download(self, type):
        if type =="stl":
            print("generating:" + self.location+"/"+ self.fileName+".stl")
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".stl")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".stl")
        elif type == "dxf":
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".dxf")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".dxf")

    def render(self):
        solid.scad_render_to_file(self.model, self.location+"/"+ self.fileName+'.scad')
        while not os.path.exists(self.location+"/"+self.fileName+".scad"):
            time.sleep(1)
        # outputSTL(From= self.location+"/"+ self.fileName+'.scad', To=self.location+"/"+ self.fileName+'.stl')

    def get_points(self):
        doc = ezdxf.readfile(filename=self.location+"/"+ self.fileName+".dxf")
        msp = doc.modelspace()
        i=0
        lists = []
        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return [start, end]

        for e in msp.query("LINE"):
            line = helper(e)
            if not lists:
                lists.append([line])
            else:
                if lists[i][len(lists)-1][1] != line[0]:
                    lists.append([line])
                    i+=1
                else:
                    lists[i].append(line)

    def get_points2(self, FILE):
        doc = ezdxf.readfile(filename=FILE)
        msp = doc.modelspace()
        i = 0
        lists = []

        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return (start, end)

        for e in msp.query("LINE"):
            line = helper(e)
            if lists==[]:
                lists.append([line])
            else:
                if lists[i][len(lists[i]) - 1][1] != line[0]:
                    lists.append([line])
                    i += 1
                else:
                    lists[i].append(line)
        return lists

    def add_code(self):
        dxf = solid.projection(cut=False)(self.model)
        offset = solid.offset(r=-0.1)(dxf)
        solid.scad_render_to_file(offset, self.location+'/offset.scad')
        os.system("toSTL.sh renders/offset.scad renders/offset.dxf")
        lines = self.get_points2("renders/offset.dxf")
        x = lines[0][0][0][0]
        y = lines[0][0][0][1]
        print(x)
        print(y)
        code = solid.translate([x,y,0])(self.code)
        code = solid.linear_extrude(height=999)(code)
        save = self.model
        self.model = solid.projection()(solid.difference()(self.model, code))
        self.render()
        self.download("dxf")
        self.model = save

    def add_label(self, pos):
        # num = 12
        # minx, maxx, miny, maxy, minz, maxz = self.find_minmax()
        maxz = self.maxz
        # label = solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.5, halign="center"))
        # i=minx
        # print("x-len: " + str(maxx-minx))
        # print(i)
        # inc = (maxx-minx)/num
        # while minx <= i <= maxx:
        #     label = solid.union()(solid.translate([i, 0, maxz - 0.2])(solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.25, halign="center"))), label)
        #     i += inc
        #
        # l = label
        #
        # i =miny
        # while miny<= i <= maxy:
        #     print("y inc")
        #     l = solid.union()(solid.translate([0, i, 0])(label), l)
        #     i += 0.5
        for i in str(self.fileName):
            cur = pos[0]
            label = solid.translate([pos[0][0], pos[0][1], self.maxz-0.2])(solid.linear_extrude(height=(self.thickness)/3)(solid.text(str(i), size=0.5, halign="center", valign="center")))
            self.model = solid.difference()(self.model, label)
            pos.append(pos.pop(0))
            while abs(cur[0]-pos[0][0])<0.5 and abs(cur[1]-pos[0][1])<0.5:
                pos.append(pos.pop(0))



    def Center(self):

        volume, cog, inertia = self.mesh.get_mass_properties()
        print("Volume                                  = {0}".format(volume))
        print("Position of the center of gravity (COG) = {0}".format(cog))
        m_centered = solid.translate([-cog[0], -cog[1], 0])(
            self.model
        )
        return m_centered

    def find_minmax(self):
        minx = maxx = miny = maxy = minz = maxz = None
        for p in self.mesh.points:
            # p contains (x, y, z)
            if minx is None:
                minx = p[Dimension.X]
                maxx = p[Dimension.X]
                miny = p[Dimension.Y]
                maxy = p[Dimension.Y]
                minz = p[Dimension.Z]
                maxz = p[Dimension.Z]
            else:
                maxx = max(p[Dimension.X], maxx)
                minx = min(p[Dimension.X], minx)
                maxy = max(p[Dimension.Y], maxy)
                miny = min(p[Dimension.Y], miny)
                maxz = max(p[Dimension.Z], maxz)
                minz = min(p[Dimension.Z], minz)
        lenx = maxx - minx
        leny = maxy - miny
        lenz = maxz - minz
        return minx, maxx, miny, maxy, minz, maxz

    # def generate_Mesh(self):
    #     self.mesh = mesh.Mesh.from_file(self.location + "/" + str(int(self.fileName)//8)+ "b.stl")

    def get_top(self):
        top = solid.projection(cut=True)(solid.translate([0,0,-1*self.thickness*(self.layer+1)])(self.model))
        useable_area = solid.offset(r=-0.45)(top)
        self.useable_area = useable_area
        solid.scad_render_to_file(self.useable_area, self.location+'/' + 'toptemp.scad')
        outputSTL(From=self.location+'/' + 'toptemp.scad', To=self.location+"/top"+ self.dxf)

        # os.system("toSTL.sh out/toptemp.scad renders/" + self.fileName + ".dxf")
        dxf = DXF(self.location+"/top"+ self.dxf)
        min_p=dxf.points[0][0]
        points_ordered = dxf.points
        i=0
        while i <= len(dxf.points)+1:
            while math.sqrt((dxf.points[0][0]-dxf.points[1][0])**2+(dxf.points[0][1]-dxf.points[1][1])**2) > 0.1:
                dxf.points.insert(1, [(dxf.points[0][0]+dxf.points[1][0])/2, (dxf.points[0][1]+dxf.points[1][1])/2])
                i = i-1
            dxf.points.append(dxf.points.pop(0))
            i+=1
        for i in range(len(dxf.points)):
            dxf.points.append(dxf.points.pop(0))
            if dxf.points[0][0] < min_p:
                min_p = dxf.points[0][0]
                points_ordered = dxf.points.copy()
        dxf.points = points_ordered.copy()

        print(dxf.points)
        self.add_label(dxf.points)

class DXF:
    def __init__(self, file):
        self.file = file
        self.Lines = []
        self.points = []
        doc = ezdxf.readfile(self.file)
        msp = doc.modelspace()
        for e in msp:
            if e.dxftype() == "LINE":
                self.Lines.append(e)
                self.points.append([e.dxf.start[0], e.dxf.start[1]])
        # self.points.append([self.Lines[-1].dxf.end[0], self.Lines[-1].dxf.end[1]])
        self.area = None
        self.center = None
        self.polygon = sg.Polygon(self.points)

    def get_area(self):
        self.area = self.polygon.area
        return self.area

    def get_center(self):
        x_sum = 0
        y_sum =0
        for i in self.points:
            x_sum += i[0]
            y_sum += i[1]
        x_c = x_sum/len(self.points)
        y_c = y_sum/len(self.points)
        return (x_c, y_c)

    def split(self, maxdim):
        splits = []
        length = 0
        pieces = [[]]
        prev = self.points[-1]
        pieces[-1].append(prev)
        for j in self.points:
            length = length + math.sqrt((prev[0]-j[0])**2+(prev[1]-j[1])**2)
            if length >= maxdim:
                pieces[-1].append(j)
                pieces.append([])
                length = 0
            pieces[-1].append(j)
            prev = j
        for j in pieces:
            j.insert(0, [0,0])
            piece = solid.linear_extrude(height=10)(solid.polygon(j))
            splits.append(piece)
        return splits
    def refine_points(self):
        i=0
        while i <= len(self.points)+1:
            while math.sqrt((self.points[0][0]-self.points[1][0])**2+(self.points[0][1]-self.points[1][1])**2) > 0.1:
                self.points.insert(1, [(self.points[0][0]+self.points[1][0])/2, (self.points[0][1]+self.points[1][1])/2])
                i = i-1
            self.points.append(self.points.pop(0))
            i+=1


if __name__== "__main__":
    test = DXF("C:/Users/Daniel/Documents/repos/Shell_Maker/output/0top_slice.dxf")
    test.refine_points()
    k = test.split(48)
    for i in range(len(k)):
        solid.scad_render_to_file(k[i], str(i) + ".scad")


 
 
************************************************/
