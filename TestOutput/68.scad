// Generated by SolidPython 1.1.3 on 2024-05-26 02:01:05


intersection() {
	intersection() {
		translate(v = [0, 0, 0]) {
			import(file = "CE3E3V2_Bottom_shell.stl", origin = [0, 0]);
		}
		translate(v = [-90.04029846191406, -32.690147399902344, 18]) {
			cube(size = [180.0806, 65.380295, 2]);
		}
	}
	translate(v = [0, 0, 18]) {
		linear_extrude(height = 10) {
			polygon(points = [[0, 0], [9.9629206250, -27.5972750000], [10.0301048437, -27.6050312500], [10.0972890625, -27.6127875000], [10.1644732813, -27.6205437500], [10.2316575000, -27.6283000000], [10.2988417188, -27.6360562500], [10.3660259375, -27.6438125000], [10.4332101563, -27.6515687500], [10.5003943750, -27.6593250000], [10.5675785937, -27.6670812500], [10.6347628125, -27.6748375000], [10.7019470313, -27.6825937500], [10.7691312500, -27.6903500000], [10.8363154688, -27.6981062500], [10.9034996875, -27.7058625000], [10.9706839063, -27.7136187500], [11.0378681250, -27.7213750000], [11.1050523437, -27.7291312500], [11.1722365625, -27.7368875000], [11.2394207813, -27.7446437500], [11.3066050000, -27.7524000000], [11.3737892188, -27.7601562500], [11.4409734375, -27.7679125000], [11.5081576563, -27.7756687500], [11.5753418750, -27.7834250000], [11.6425260937, -27.7911812500], [11.7097103125, -27.7989375000], [11.7768945313, -27.8066937500], [11.8440787500, -27.8144500000], [11.9112629688, -27.8222062500], [11.9784471875, -27.8299625000], [12.0456314063, -27.8377187500], [12.1128156250, -27.8454750000], [12.1799998438, -27.8532312500], [12.2471840625, -27.8609875000], [12.3143682813, -27.8687437500], [12.3815525000, -27.8765000000], [12.4487367188, -27.8842562500], [12.5159209375, -27.8920125000], [12.5831051563, -27.8997687500], [12.6502893750, -27.9075250000], [12.7174735938, -27.9152812500], [12.7846578125, -27.9230375000], [12.8518420313, -27.9307937500], [12.9190262500, -27.9385500000], [12.9862104688, -27.9463062500], [13.0533946875, -27.9540625000], [13.1205789062, -27.9618187500], [13.1877631250, -27.9695750000], [13.2549473438, -27.9773312500], [13.3221315625, -27.9850875000], [13.3893157813, -27.9928437500], [13.4565000000, -28.0006000000], [13.5523000000, -28.0108500000], [13.6481000000, -28.0211000000], [13.7009750000, -28.0250500000], [13.7538500000, -28.0290000000], [13.8067250000, -28.0329500000], [13.8596000000, -28.0369000000], [13.9250968750, -28.0411734375], [13.9905937500, -28.0454468750], [14.0560906250, -28.0497203125], [14.1215875000, -28.0539937500], [14.1870843750, -28.0582671875], [14.2525812500, -28.0625406250], [14.3180781250, -28.0668140625], [14.3835750000, -28.0710875000], [14.4490718750, -28.0753609375], [14.5145687500, -28.0796343750], [14.5800656250, -28.0839078125], [14.6455625000, -28.0881812500], [14.7110593750, -28.0924546875], [14.7765562500, -28.0967281250], [14.8420531250, -28.1010015625], [14.9075500000, -28.1052750000], [14.9730468750, -28.1095484375], [15.0385437500, -28.1138218750], [15.1040406250, -28.1180953125], [15.1695375000, -28.1223687500], [15.2350343750, -28.1266421875], [15.3005312500, -28.1309156250], [15.3660281250, -28.1351890625], [15.4315250000, -28.1394625000], [15.4970218750, -28.1437359375], [15.5625187500, -28.1480093750], [15.6280156250, -28.1522828125], [15.6935125000, -28.1565562500], [15.7590093750, -28.1608296875], [15.8245062500, -28.1651031250], [15.8900031250, -28.1693765625], [15.9555000000, -28.1736500000], [16.0209968750, -28.1779234375], [16.0864937500, -28.1821968750], [16.1519906250, -28.1864703125], [16.2174875000, -28.1907437500], [16.2829843750, -28.1950171875], [16.3484812500, -28.1992906250], [16.4139781250, -28.2035640625], [16.4794750000, -28.2078375000], [16.5449718750, -28.2121109375], [16.6104687500, -28.2163843750], [16.6759656250, -28.2206578125], [16.7414625000, -28.2249312500], [16.8069593750, -28.2292046875], [16.8724562500, -28.2334781250], [16.9379531250, -28.2377515625], [17.0034500000, -28.2420250000], [17.0689468750, -28.2462984375], [17.1344437500, -28.2505718750], [17.1999406250, -28.2548453125], [17.2654375000, -28.2591187500], [17.3309343750, -28.2633921875], [17.3964312500, -28.2676656250], [17.4619281250, -28.2719390625], [17.5274250000, -28.2762125000], [17.5929218750, -28.2804859375], [17.6584187500, -28.2847593750], [17.7239156250, -28.2890328125], [17.7894125000, -28.2933062500], [17.8549093750, -28.2975796875], [17.9204062500, -28.3018531250], [17.9859031250, -28.3061265625], [18.0514000000, -28.3104000000], [18.1027000000, -28.3127500000], [18.1540000000, -28.3151000000], [18.2054062500, -28.3156484375], [18.2568125000, -28.3161968750], [18.3082187500, -28.3167453125], [18.3596250000, -28.3172937500], [18.4110312500, -28.3178421875], [18.4624375000, -28.3183906250], [18.5138437500, -28.3189390625], [18.5652500000, -28.3194875000], [18.6166562500, -28.3200359375], [18.6680625000, -28.3205843750], [18.7194687500, -28.3211328125], [18.7708750000, -28.3216812500], [18.8222812500, -28.3222296875], [18.8736875000, -28.3227781250], [18.9250937500, -28.3233265625], [18.9765000000, -28.3238750000], [19.0279062500, -28.3244234375], [19.0793125000, -28.3249718750], [19.1307187500, -28.3255203125], [19.1821250000, -28.3260687500], [19.2335312500, -28.3266171875], [19.2849375000, -28.3271656250], [19.3363437500, -28.3277140625], [19.3877500000, -28.3282625000], [19.4391562500, -28.3288109375], [19.4905625000, -28.3293593750], [19.5419687500, -28.3299078125], [19.5933750000, -28.3304562500], [19.6447812500, -28.3310046875], [19.6961875000, -28.3315531250], [19.7475937500, -28.3321015625], [19.7990000000, -28.3326500000], [19.8504062500, -28.3331984375], [19.9018125000, -28.3337468750], [19.9532187500, -28.3342953125], [20.0046250000, -28.3348437500], [20.0560312500, -28.3353921875], [20.1074375000, -28.3359406250], [20.1588437500, -28.3364890625], [20.2102500000, -28.3370375000], [20.2616562500, -28.3375859375], [20.3130625000, -28.3381343750], [20.3644687500, -28.3386828125], [20.4158750000, -28.3392312500], [20.4672812500, -28.3397796875], [20.5186875000, -28.3403281250], [20.5700937500, -28.3408765625], [20.6215000000, -28.3414250000], [20.6729062500, -28.3419734375], [20.7243125000, -28.3425218750], [20.7757187500, -28.3430703125], [20.8271250000, -28.3436187500], [20.8785312500, -28.3441671875], [20.9299375000, -28.3447156250], [20.9813437500, -28.3452640625], [21.0327500000, -28.3458125000], [21.0841562500, -28.3463609375], [21.1355625000, -28.3469093750], [21.1869687500, -28.3474578125], [21.2383750000, -28.3480062500], [21.2897812500, -28.3485546875], [21.3411875000, -28.3491031250], [21.3925937500, -28.3496515625], [21.4440000000, -28.3502000000], [21.4792000000, -28.3495000000], [21.5427500000, -28.3479562500], [21.6063000000, -28.3464125000], [21.6698500000, -28.3448687500], [21.7334000000, -28.3433250000], [21.7969500000, -28.3417812500], [21.8605000000, -28.3402375000], [21.9240500000, -28.3386937500], [21.9876000000, -28.3371500000], [22.0511500000, -28.3356062500], [22.1147000000, -28.3340625000], [22.1782500000, -28.3325187500], [22.2418000000, -28.3309750000], [22.3053500000, -28.3294312500], [22.3689000000, -28.3278875000], [22.4324500000, -28.3263437500], [22.4960000000, -28.3248000000], [22.5372000000, -28.3236000000], [22.5893250000, -28.3204500000], [22.6414500000, -28.3173000000], [22.6935750000, -28.3141500000], [22.7457000000, -28.3110000000], [22.8077546875, -28.3064984375], [22.8698093750, -28.3019968750], [22.9318640625, -28.2974953125], [22.9939187500, -28.2929937500], [23.0559734375, -28.2884921875], [23.1180281250, -28.2839906250], [23.1800828125, -28.2794890625], [23.2421375000, -28.2749875000], [23.3041921875, -28.2704859375], [23.3662468750, -28.2659843750], [23.4283015625, -28.2614828125], [23.4903562500, -28.2569812500], [23.5524109375, -28.2524796875], [23.6144656250, -28.2479781250], [23.6765203125, -28.2434765625], [23.7385750000, -28.2389750000], [23.8006296875, -28.2344734375], [23.8626843750, -28.2299718750], [23.9247390625, -28.2254703125], [23.9867937500, -28.2209687500], [24.0488484375, -28.2164671875], [24.1109031250, -28.2119656250], [24.1729578125, -28.2074640625], [24.2350125000, -28.2029625000], [24.2970671875, -28.1984609375], [24.3591218750, -28.1939593750], [24.4211765625, -28.1894578125], [24.4832312500, -28.1849562500], [24.5452859375, -28.1804546875], [24.6073406250, -28.1759531250], [24.6693953125, -28.1714515625], [24.7314500000, -28.1669500000], [24.7935046875, -28.1624484375], [24.8555593750, -28.1579468750], [24.9176140625, -28.1534453125], [24.9796687500, -28.1489437500], [25.0417234375, -28.1444421875], [25.1037781250, -28.1399406250], [25.1658328125, -28.1354390625], [25.2278875000, -28.1309375000], [25.2899421875, -28.1264359375], [25.3519968750, -28.1219343750], [25.4140515625, -28.1174328125], [25.4761062500, -28.1129312500], [25.5381609375, -28.1084296875], [25.6002156250, -28.1039281250], [25.6622703125, -28.0994265625], [25.7243250000, -28.0949250000], [25.7863796875, -28.0904234375], [25.8484343750, -28.0859218750], [25.9104890625, -28.0814203125], [25.9725437500, -28.0769187500], [26.0345984375, -28.0724171875], [26.0966531250, -28.0679156250], [26.1587078125, -28.0634140625], [26.2207625000, -28.0589125000], [26.2828171875, -28.0544109375], [26.3448718750, -28.0499093750], [26.4069265625, -28.0454078125], [26.4689812500, -28.0409062500], [26.5310359375, -28.0364046875], [26.5930906250, -28.0319031250], [26.6551453125, -28.0274015625], [26.7172000000, -28.0229000000], [26.7430000000, -28.0205000000], [26.8071000000, -28.0138000000], [26.8683343750, -28.0055500000], [26.9295687500, -27.9973000000], [26.9908031250, -27.9890500000], [27.0520375000, -27.9808000000], [27.1132718750, -27.9725500000], [27.1745062500, -27.9643000000], [27.2357406250, -27.9560500000], [27.2969750000, -27.9478000000], [27.3582093750, -27.9395500000], [27.4194437500, -27.9313000000], [27.4806781250, -27.9230500000], [27.5419125000, -27.9148000000], [27.6031468750, -27.9065500000], [27.6643812500, -27.8983000000], [27.7256156250, -27.8900500000], [27.7868500000, -27.8818000000], [27.8480843750, -27.8735500000], [27.9093187500, -27.8653000000], [27.9705531250, -27.8570500000], [28.0317875000, -27.8488000000], [28.0930218750, -27.8405500000], [28.1542562500, -27.8323000000], [28.2154906250, -27.8240500000], [28.2767250000, -27.8158000000], [28.3379593750, -27.8075500000], [28.3991937500, -27.7993000000], [28.4604281250, -27.7910500000], [28.5216625000, -27.7828000000], [28.5828968750, -27.7745500000], [28.6441312500, -27.7663000000], [28.7053656250, -27.7580500000], [28.7666000000, -27.7498000000], [28.8476312500, -27.7359437500], [28.9286625000, -27.7220875000], [29.0096937500, -27.7082312500], [29.0907250000, -27.6943750000], [29.1717562500, -27.6805187500], [29.2527875000, -27.6666625000], [29.3338187500, -27.6528062500], [29.4148500000, -27.6389500000], [29.4958812500, -27.6250937500], [29.5769125000, -27.6112375000], [29.6579437500, -27.5973812500], [29.7389750000, -27.5835250000], [29.8200062500, -27.5696687500], [29.9010375000, -27.5558125000], [29.9820687500, -27.5419562500], [30.0631000000, -27.5281000000], [30.0681000000, -27.5272000000], [30.1295906250, -27.5126515625], [30.1910812500, -27.4981031250], [30.2525718750, -27.4835546875], [30.3140625000, -27.4690062500], [30.3755531250, -27.4544578125], [30.4370437500, -27.4399093750], [30.4985343750, -27.4253609375], [30.5600250000, -27.4108125000], [30.6215156250, -27.3962640625], [30.6830062500, -27.3817156250], [30.7444968750, -27.3671671875], [30.8059875000, -27.3526187500], [30.8674781250, -27.3380703125], [30.9289687500, -27.3235218750], [30.9904593750, -27.3089734375], [31.0519500000, -27.2944250000], [31.1134406250, -27.2798765625], [31.1749312500, -27.2653281250], [31.2364218750, -27.2507796875], [31.2979125000, -27.2362312500], [31.3594031250, -27.2216828125], [31.4208937500, -27.2071343750], [31.4823843750, -27.1925859375], [31.5438750000, -27.1780375000], [31.6053656250, -27.1634890625], [31.6668562500, -27.1489406250], [31.7283468750, -27.1343921875], [31.7898375000, -27.1198437500], [31.8513281250, -27.1052953125], [31.9128187500, -27.0907468750], [31.9743093750, -27.0761984375], [32.0358000000, -27.0616500000], [32.0972906250, -27.0471015625], [32.1587812500, -27.0325531250], [32.2202718750, -27.0180046875], [32.2817625000, -27.0034562500], [32.3432531250, -26.9889078125], [32.4047437500, -26.9743593750], [32.4662343750, -26.9598109375], [32.5277250000, -26.9452625000], [32.5892156250, -26.9307140625], [32.6507062500, -26.9161656250], [32.7121968750, -26.9016171875], [32.7736875000, -26.8870687500], [32.8351781250, -26.8725203125], [32.8966687500, -26.8579718750], [32.9581593750, -26.8434234375], [33.0196500000, -26.8288750000], [33.0811406250, -26.8143265625], [33.1426312500, -26.7997781250], [33.2041218750, -26.7852296875], [33.2656125000, -26.7706812500], [33.3271031250, -26.7561328125], [33.3885937500, -26.7415843750], [33.4500843750, -26.7270359375], [33.5115750000, -26.7124875000], [33.5730656250, -26.6979390625], [33.6345562500, -26.6833906250], [33.6960468750, -26.6688421875], [33.7575375000, -26.6542937500], [33.8190281250, -26.6397453125], [33.8805187500, -26.6251968750], [33.9420093750, -26.6106484375], [34.0035000000, -26.5961000000], [34.0755250000, -26.5790250000], [34.1475500000, -26.5619500000], [34.2195750000, -26.5448750000], [34.2916000000, -26.5278000000], [34.2942000000, -26.5271000000], [34.3638218750, -26.5053562500], [34.4334437500, -26.4836125000], [34.5030656250, -26.4618687500], [34.5726875000, -26.4401250000], [34.6423093750, -26.4183812500], [34.7119312500, -26.3966375000], [34.7815531250, -26.3748937500], [34.8511750000, -26.3531500000], [34.9207968750, -26.3314062500], [34.9904187500, -26.3096625000], [35.0600406250, -26.2879187500], [35.1296625000, -26.2661750000], [35.1992843750, -26.2444312500], [35.2689062500, -26.2226875000], [35.3385281250, -26.2009437500], [35.4081500000, -26.1792000000], [35.4777718750, -26.1574562500], [35.5473937500, -26.1357125000], [35.6170156250, -26.1139687500], [35.6866375000, -26.0922250000], [35.7562593750, -26.0704812500], [35.8258812500, -26.0487375000], [35.8955031250, -26.0269937500], [35.9651250000, -26.0052500000], [36.0347468750, -25.9835062500], [36.1043687500, -25.9617625000], [36.1739906250, -25.9400187500], [36.2436125000, -25.9182750000], [36.3132343750, -25.8965312500], [36.3828562500, -25.8747875000], [36.4524781250, -25.8530437500], [36.5221000000, -25.8313000000], [36.5787625000, -25.8108406250], [36.6354250000, -25.7903812500], [36.6920875000, -25.7699218750], [36.7487500000, -25.7494625000], [36.8054125000, -25.7290031250], [36.8620750000, -25.7085437500], [36.9187375000, -25.6880843750], [36.9754000000, -25.6676250000], [37.0320625000, -25.6471656250], [37.0887250000, -25.6267062500], [37.1453875000, -25.6062468750], [37.2020500000, -25.5857875000], [37.2587125000, -25.5653281250], [37.3153750000, -25.5448687500], [37.3720375000, -25.5244093750], [37.4287000000, -25.5039500000], [37.4853625000, -25.4834906250], [37.5420250000, -25.4630312500], [37.5986875000, -25.4425718750], [37.6553500000, -25.4221125000], [37.7120125000, -25.4016531250], [37.7686750000, -25.3811937500], [37.8253375000, -25.3607343750], [37.8820000000, -25.3402750000], [37.9386625000, -25.3198156250], [37.9953250000, -25.2993562500], [38.0519875000, -25.2788968750], [38.1086500000, -25.2584375000], [38.1653125000, -25.2379781250], [38.2219750000, -25.2175187500], [38.2786375000, -25.1970593750], [38.3353000000, -25.1766000000], [38.3980000000, -25.1540500000], [38.4607000000, -25.1315000000], [38.4675000000, -25.1289000000], [38.5271421875, -25.1030281250], [38.5867843750, -25.0771562500], [38.6464265625, -25.0512843750], [38.7060687500, -25.0254125000], [38.7657109375, -24.9995406250], [38.8253531250, -24.9736687500], [38.8849953125, -24.9477968750], [38.9446375000, -24.9219250000], [39.0042796875, -24.8960531250], [39.0639218750, -24.8701812500], [39.1235640625, -24.8443093750], [39.1832062500, -24.8184375000], [39.2428484375, -24.7925656250], [39.3024906250, -24.7666937500], [39.3621328125, -24.7408218750], [39.4217750000, -24.7149500000], [39.4814171875, -24.6890781250], [39.5410593750, -24.6632062500], [39.6007015625, -24.6373343750], [39.6603437500, -24.6114625000], [39.7199859375, -24.5855906250], [39.7796281250, -24.5597187500], [39.8392703125, -24.5338468750], [39.8989125000, -24.5079750000], [39.9585546875, -24.4821031250], [40.0181968750, -24.4562312500], [40.0778390625, -24.4303593750], [40.1374812500, -24.4044875000], [40.1971234375, -24.3786156250], [40.2567656250, -24.3527437500], [40.3164078125, -24.3268718750], [40.3760500000, -24.3010000000], [40.4356921875, -24.2751281250], [40.4953343750, -24.2492562500], [40.5549765625, -24.2233843750], [40.6146187500, -24.1975125000], [40.6742609375, -24.1716406250], [40.7339031250, -24.1457687500], [40.7935453125, -24.1198968750], [40.8531875000, -24.0940250000], [40.9128296875, -24.0681531250], [40.9724718750, -24.0422812500], [41.0321140625, -24.0164093750], [41.0917562500, -23.9905375000], [41.1513984375, -23.9646656250], [41.2110406250, -23.9387937500], [41.2706828125, -23.9129218750], [41.3303250000, -23.8870500000], [41.3899671875, -23.8611781250], [41.4496093750, -23.8353062500], [41.5092515625, -23.8094343750], [41.5688937500, -23.7835625000], [41.6285359375, -23.7576906250], [41.6881781250, -23.7318187500], [41.7478203125, -23.7059468750], [41.8074625000, -23.6800750000], [41.8671046875, -23.6542031250], [41.9267468750, -23.6283312500], [41.9863890625, -23.6024593750], [42.0460312500, -23.5765875000], [42.1056734375, -23.5507156250], [42.1653156250, -23.5248437500], [42.2249578125, -23.4989718750], [42.2846000000, -23.4731000000], [42.3766500000, -23.4347000000], [42.4687000000, -23.3963000000], [42.5548000000, -23.3559000000], [42.6260000000, -23.3202875000], [42.6972000000, -23.2846750000], [42.7684000000, -23.2490625000], [42.8396000000, -23.2134500000], [42.9108000000, -23.1778375000], [42.9820000000, -23.1422250000], [43.0532000000, -23.1066125000], [43.1244000000, -23.0710000000], [43.1956000000, -23.0353875000], [43.2668000000, -22.9997750000], [43.3380000000, -22.9641625000], [43.4092000000, -22.9285500000], [43.4804000000, -22.8929375000], [43.5516000000, -22.8573250000], [43.6228000000, -22.8217125000], [43.6940000000, -22.7861000000], [43.7512468750, -22.7550281250], [43.8084937500, -22.7239562500], [43.8657406250, -22.6928843750], [43.9229875000, -22.6618125000], [43.9802343750, -22.6307406250], [44.0374812500, -22.5996687500], [44.0947281250, -22.5685968750], [44.1519750000, -22.5375250000], [44.2092218750, -22.5064531250], [44.2664687500, -22.4753812500], [44.3237156250, -22.4443093750], [44.3809625000, -22.4132375000], [44.4382093750, -22.3821656250], [44.4954562500, -22.3510937500], [44.5527031250, -22.3200218750], [44.6099500000, -22.2889500000], [44.6671968750, -22.2578781250], [44.7244437500, -22.2268062500], [44.7816906250, -22.1957343750], [44.8389375000, -22.1646625000], [44.8961843750, -22.1335906250], [44.9534312500, -22.1025187500], [45.0106781250, -22.0714468750], [45.0679250000, -22.0403750000], [45.1251718750, -22.0093031250], [45.1824187500, -21.9782312500], [45.2396656250, -21.9471593750], [45.2969125000, -21.9160875000], [45.3541593750, -21.8850156250], [45.4114062500, -21.8539437500], [45.4686531250, -21.8228718750], [45.5259000000, -21.7918000000], [45.5816500000, -21.7618000000], [45.6374000000, -21.7318000000], [45.6626000000, -21.7176000000], [45.7148859375, -21.6849796875], [45.7671718750, -21.6523593750], [45.8194578125, -21.6197390625], [45.8717437500, -21.5871187500], [45.9240296875, -21.5544984375], [45.9763156250, -21.5218781250], [46.0286015625, -21.4892578125], [46.0808875000, -21.4566375000], [46.1331734375, -21.4240171875], [46.1854593750, -21.3913968750], [46.2377453125, -21.3587765625], [46.2900312500, -21.3261562500], [46.3423171875, -21.2935359375], [46.3946031250, -21.2609156250], [46.4468890625, -21.2282953125], [46.4991750000, -21.1956750000], [46.5514609375, -21.1630546875], [46.6037468750, -21.1304343750], [46.6560328125, -21.0978140625], [46.7083187500, -21.0651937500], [46.7606046875, -21.0325734375], [46.8128906250, -20.9999531250], [46.8651765625, -20.9673328125], [46.9174625000, -20.9347125000], [46.9697484375, -20.9020921875], [47.0220343750, -20.8694718750], [47.0743203125, -20.8368515625], [47.1266062500, -20.8042312500], [47.1788921875, -20.7716109375], [47.2311781250, -20.7389906250], [47.2834640625, -20.7063703125], [47.3357500000, -20.6737500000], [47.3880359375, -20.6411296875], [47.4403218750, -20.6085093750], [47.4926078125, -20.5758890625], [47.5448937500, -20.5432687500], [47.5971796875, -20.5106484375], [47.6494656250, -20.4780281250], [47.7017515625, -20.4454078125], [47.7540375000, -20.4127875000], [47.8063234375, -20.3801671875], [47.8586093750, -20.3475468750], [47.9108953125, -20.3149265625], [47.9631812500, -20.2823062500], [48.0154671875, -20.2496859375], [48.0677531250, -20.2170656250], [48.1200390625, -20.1844453125], [48.1723250000, -20.1518250000], [48.2246109375, -20.1192046875], [48.2768968750, -20.0865843750], [48.3291828125, -20.0539640625], [48.3814687500, -20.0213437500], [48.4337546875, -19.9887234375], [48.4860406250, -19.9561031250], [48.5383265625, -19.9234828125], [48.5906125000, -19.8908625000], [48.6428984375, -19.8582421875], [48.6951843750, -19.8256218750], [48.7474703125, -19.7930015625], [48.7997562500, -19.7603812500], [48.8520421875, -19.7277609375], [48.9043281250, -19.6951406250], [48.9566140625, -19.6625203125], [49.0089000000, -19.6299000000], [49.0117000000, -19.6280000000], [49.0800812500, -19.5799375000], [49.1484625000, -19.5318750000], [49.2168437500, -19.4838125000], [49.2852250000, -19.4357500000], [49.3536062500, -19.3876875000], [49.4219875000, -19.3396250000], [49.4903687500, -19.2915625000], [49.5587500000, -19.2435000000], [49.6271312500, -19.1954375000], [49.6955125000, -19.1473750000], [49.7638937500, -19.0993125000], [49.8322750000, -19.0512500000], [49.9006562500, -19.0031875000], [49.9690375000, -18.9551250000], [50.0374187500, -18.9070625000], [50.1058000000, -18.8590000000], [50.1841000000, -18.8039000000], [50.2439281250, -18.7580062500], [50.3037562500, -18.7121125000], [50.3635843750, -18.6662187500], [50.4234125000, -18.6203250000], [50.4832406250, -18.5744312500], [50.5430687500, -18.5285375000], [50.6028968750, -18.4826437500], [50.6627250000, -18.4367500000], [50.7225531250, -18.3908562500], [50.7823812500, -18.3449625000], [50.8422093750, -18.2990687500], [50.9020375000, -18.2531750000], [50.9618656250, -18.2072812500], [51.0216937500, -18.1613875000], [51.0815218750, -18.1154937500], [51.1413500000, -18.0696000000], [51.2011781250, -18.0237062500], [51.2610062500, -17.9778125000], [51.3208343750, -17.9319187500], [51.3806625000, -17.8860250000], [51.4404906250, -17.8401312500], [51.5003187500, -17.7942375000], [51.5601468750, -17.7483437500], [51.6199750000, -17.7024500000], [51.6798031250, -17.6565562500], [51.7396312500, -17.6106625000], [51.7994593750, -17.5647687500], [51.8592875000, -17.5188750000], [51.9191156250, -17.4729812500], [51.9789437500, -17.4270875000], [52.0387718750, -17.3811937500], [52.0986000000, -17.3353000000], [52.1265000000, -17.3123000000], [52.1674734375, -17.2758500000], [52.2084468750, -17.2394000000], [52.2494203125, -17.2029500000], [52.2903937500, -17.1665000000], [52.3313671875, -17.1300500000], [52.3723406250, -17.0936000000], [52.4133140625, -17.0571500000], [52.4542875000, -17.0207000000], [52.4952609375, -16.9842500000], [52.5362343750, -16.9478000000], [52.5772078125, -16.9113500000], [52.6181812500, -16.8749000000], [52.6591546875, -16.8384500000], [52.7001281250, -16.8020000000], [52.7411015625, -16.7655500000], [52.7820750000, -16.7291000000], [52.8230484375, -16.6926500000], [52.8640218750, -16.6562000000], [52.9049953125, -16.6197500000], [52.9459687500, -16.5833000000], [52.9869421875, -16.5468500000], [53.0279156250, -16.5104000000], [53.0688890625, -16.4739500000], [53.1098625000, -16.4375000000], [53.1508359375, -16.4010500000], [53.1918093750, -16.3646000000], [53.2327828125, -16.3281500000], [53.2737562500, -16.2917000000], [53.3147296875, -16.2552500000], [53.3557031250, -16.2188000000], [53.3966765625, -16.1823500000], [53.4376500000, -16.1459000000], [53.4786234375, -16.1094500000], [53.5195968750, -16.0730000000], [53.5605703125, -16.0365500000], [53.6015437500, -16.0001000000], [53.6425171875, -15.9636500000], [53.6834906250, -15.9272000000], [53.7244640625, -15.8907500000], [53.7654375000, -15.8543000000], [53.8064109375, -15.8178500000], [53.8473843750, -15.7814000000], [53.8883578125, -15.7449500000], [53.9293312500, -15.7085000000], [53.9703046875, -15.6720500000], [54.0112781250, -15.6356000000], [54.0522515625, -15.5991500000], [54.0932250000, -15.5627000000], [54.1341984375, -15.5262500000], [54.1751718750, -15.4898000000], [54.2161453125, -15.4533500000], [54.2571187500, -15.4169000000], [54.2980921875, -15.3804500000], [54.3390656250, -15.3440000000], [54.3800390625, -15.3075500000], [54.4210125000, -15.2711000000], [54.4619859375, -15.2346500000], [54.5029593750, -15.1982000000], [54.5439328125, -15.1617500000], [54.5849062500, -15.1253000000]]);
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
import math
import time

from stl import mesh, Dimension

from tkinter import Tk     # from tkinter import Tk for Python 3.x
from tkinter.filedialog import askopenfilename
from mpl_toolkits.mplot3d import art3d
from matplotlib import pyplot as plt
import solid
import os
import ezdxf
import shapely.geometry as sg
import subprocess
from GUI import getSCADPath



def outputSTL(From, To, PATH=getSCADPath()):
    subprocess.Popen(PATH + " -o " + To + " " + From)
    while not os.path.exists(To):
        time.sleep(1)

class Model:
    def __init__(self, model, fileName, location, layer, thickness):
        self.location = location
        self.code = None
        self.fileName = fileName
        self.stl = fileName + ".stl"
        self.layer = layer
        self.thickness = thickness
        self.maxz = (layer+1)*thickness
        self.dxf = fileName + ".dxf"
        self.scad = fileName + ".scad"
        self.model = model
        self.center = None
        self.width = 10
        self.mesh = None
        self.useable_area = None


    def get_code(self):
        max_dim = 0.05
        max_array = 6

        num = int(self.fileName)
        nums = [int(a) for a in str(num)]
        nums.reverse()
        indices = nums
        length = len(nums)

        print(indices)
        t = 0
        i = 0
        cubes = []
        x = 0
        y = 0
        width = 0.01
        while x <= max_dim:
            while y <= max_dim:
                print(indices)
                if nums == []:
                    break
                if indices[0] != 0:
                    cubes.append(solid.translate([x, y, 0])(solid.cube(size=t / 1000 + 0.001)))
                    y += max_dim / (max_array - 1)
                    nums[0] = nums[0] - 1
                else:
                    indices.pop(0)
                    t += 1
                i += 1
            x += max_dim / (max_array - 1)
            y = 0

        outside = solid.translate([-width / 2, -width / 2])(solid.cube(max_dim + (length - 1) / 1000 + 0.001 + width))
        self.code = solid.difference()(outside, cubes)
        self.code = solid.projection(cut=True)(self.code)
        solid.scad_render_to_file(self.code, self.location + "/code.scad")
        outputSTL(From=self.location+"/code.scad", To=self.location+"code.dxf", PATH=getSCADPath())
        # os.system("toSTL.sh renders/code.scad renders/code.dxf")
        return self.location+"/code.dxf"

    def download(self, type):
        if type =="stl":
            print("generating:" + self.location+"/"+ self.fileName+".stl")
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".stl")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".stl")
        elif type == "dxf":
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".dxf")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".dxf")

    def render(self):
        solid.scad_render_to_file(self.model, self.location+"/"+ self.fileName+'.scad')
        while not os.path.exists(self.location+"/"+self.fileName+".scad"):
            time.sleep(1)
        # outputSTL(From= self.location+"/"+ self.fileName+'.scad', To=self.location+"/"+ self.fileName+'.stl')

    def get_points(self):
        doc = ezdxf.readfile(filename=self.location+"/"+ self.fileName+".dxf")
        msp = doc.modelspace()
        i=0
        lists = []
        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return [start, end]

        for e in msp.query("LINE"):
            line = helper(e)
            if not lists:
                lists.append([line])
            else:
                if lists[i][len(lists)-1][1] != line[0]:
                    lists.append([line])
                    i+=1
                else:
                    lists[i].append(line)

    def get_points2(self, FILE):
        doc = ezdxf.readfile(filename=FILE)
        msp = doc.modelspace()
        i = 0
        lists = []

        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return (start, end)

        for e in msp.query("LINE"):
            line = helper(e)
            if lists==[]:
                lists.append([line])
            else:
                if lists[i][len(lists[i]) - 1][1] != line[0]:
                    lists.append([line])
                    i += 1
                else:
                    lists[i].append(line)
        return lists

    def add_code(self):
        dxf = solid.projection(cut=False)(self.model)
        offset = solid.offset(r=-0.1)(dxf)
        solid.scad_render_to_file(offset, self.location+'/offset.scad')
        os.system("toSTL.sh renders/offset.scad renders/offset.dxf")
        lines = self.get_points2("renders/offset.dxf")
        x = lines[0][0][0][0]
        y = lines[0][0][0][1]
        print(x)
        print(y)
        code = solid.translate([x,y,0])(self.code)
        code = solid.linear_extrude(height=999)(code)
        save = self.model
        self.model = solid.projection()(solid.difference()(self.model, code))
        self.render()
        self.download("dxf")
        self.model = save

    def add_label(self, pos):
        # num = 12
        # minx, maxx, miny, maxy, minz, maxz = self.find_minmax()
        maxz = self.maxz
        # label = solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.5, halign="center"))
        # i=minx
        # print("x-len: " + str(maxx-minx))
        # print(i)
        # inc = (maxx-minx)/num
        # while minx <= i <= maxx:
        #     label = solid.union()(solid.translate([i, 0, maxz - 0.2])(solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.25, halign="center"))), label)
        #     i += inc
        #
        # l = label
        #
        # i =miny
        # while miny<= i <= maxy:
        #     print("y inc")
        #     l = solid.union()(solid.translate([0, i, 0])(label), l)
        #     i += 0.5
        for i in str(self.fileName):
            cur = pos[0]
            label = solid.translate([pos[0][0], pos[0][1], self.maxz-0.2])(solid.linear_extrude(height=(self.thickness)/3)(solid.text(str(i), size=0.5, halign="center", valign="center")))
            self.model = solid.difference()(self.model, label)
            pos.append(pos.pop(0))
            while abs(cur[0]-pos[0][0])<0.5 and abs(cur[1]-pos[0][1])<0.5:
                pos.append(pos.pop(0))



    def Center(self):

        volume, cog, inertia = self.mesh.get_mass_properties()
        print("Volume                                  = {0}".format(volume))
        print("Position of the center of gravity (COG) = {0}".format(cog))
        m_centered = solid.translate([-cog[0], -cog[1], 0])(
            self.model
        )
        return m_centered

    def find_minmax(self):
        minx = maxx = miny = maxy = minz = maxz = None
        for p in self.mesh.points:
            # p contains (x, y, z)
            if minx is None:
                minx = p[Dimension.X]
                maxx = p[Dimension.X]
                miny = p[Dimension.Y]
                maxy = p[Dimension.Y]
                minz = p[Dimension.Z]
                maxz = p[Dimension.Z]
            else:
                maxx = max(p[Dimension.X], maxx)
                minx = min(p[Dimension.X], minx)
                maxy = max(p[Dimension.Y], maxy)
                miny = min(p[Dimension.Y], miny)
                maxz = max(p[Dimension.Z], maxz)
                minz = min(p[Dimension.Z], minz)
        lenx = maxx - minx
        leny = maxy - miny
        lenz = maxz - minz
        return minx, maxx, miny, maxy, minz, maxz

    # def generate_Mesh(self):
    #     self.mesh = mesh.Mesh.from_file(self.location + "/" + str(int(self.fileName)//8)+ "b.stl")

    def get_top(self):
        top = solid.projection(cut=True)(solid.translate([0,0,-1*self.thickness*(self.layer+1)])(self.model))
        useable_area = solid.offset(r=-0.45)(top)
        self.useable_area = useable_area
        solid.scad_render_to_file(self.useable_area, self.location+'/' + 'toptemp.scad')
        outputSTL(From=self.location+'/' + 'toptemp.scad', To=self.location+"/top"+ self.dxf)

        # os.system("toSTL.sh out/toptemp.scad renders/" + self.fileName + ".dxf")
        dxf = DXF(self.location+"/top"+ self.dxf)
        min_p=dxf.points[0][0]
        points_ordered = dxf.points
        i=0
        while i <= len(dxf.points)+1:
            while math.sqrt((dxf.points[0][0]-dxf.points[1][0])**2+(dxf.points[0][1]-dxf.points[1][1])**2) > 0.1:
                dxf.points.insert(1, [(dxf.points[0][0]+dxf.points[1][0])/2, (dxf.points[0][1]+dxf.points[1][1])/2])
                i = i-1
            dxf.points.append(dxf.points.pop(0))
            i+=1
        for i in range(len(dxf.points)):
            dxf.points.append(dxf.points.pop(0))
            if dxf.points[0][0] < min_p:
                min_p = dxf.points[0][0]
                points_ordered = dxf.points.copy()
        dxf.points = points_ordered.copy()

        print(dxf.points)
        self.add_label(dxf.points)

class DXF:
    def __init__(self, file):
        self.file = file
        self.Lines = []
        self.points = []
        doc = ezdxf.readfile(self.file)
        msp = doc.modelspace()
        for e in msp:
            if e.dxftype() == "LINE":
                self.Lines.append(e)
                self.points.append([e.dxf.start[0], e.dxf.start[1]])
        # self.points.append([self.Lines[-1].dxf.end[0], self.Lines[-1].dxf.end[1]])
        self.area = None
        self.center = None
        self.polygon = sg.Polygon(self.points)

    def get_area(self):
        self.area = self.polygon.area
        return self.area

    def get_center(self):
        x_sum = 0
        y_sum =0
        for i in self.points:
            x_sum += i[0]
            y_sum += i[1]
        x_c = x_sum/len(self.points)
        y_c = y_sum/len(self.points)
        return (x_c, y_c)

    def split(self, maxdim):
        splits = []
        length = 0
        pieces = [[]]
        prev = self.points[-1]
        pieces[-1].append(prev)
        for j in self.points:
            length = length + math.sqrt((prev[0]-j[0])**2+(prev[1]-j[1])**2)
            if length >= maxdim:
                pieces[-1].append(j)
                pieces.append([])
                length = 0
            pieces[-1].append(j)
            prev = j
        for j in pieces:
            j.insert(0, [0,0])
            piece = solid.linear_extrude(height=10)(solid.polygon(j))
            splits.append(piece)
        return splits
    def refine_points(self):
        i=0
        while i <= len(self.points)+1:
            while math.sqrt((self.points[0][0]-self.points[1][0])**2+(self.points[0][1]-self.points[1][1])**2) > 0.1:
                self.points.insert(1, [(self.points[0][0]+self.points[1][0])/2, (self.points[0][1]+self.points[1][1])/2])
                i = i-1
            self.points.append(self.points.pop(0))
            i+=1


if __name__== "__main__":
    test = DXF("C:/Users/Daniel/Documents/repos/Shell_Maker/output/0top_slice.dxf")
    test.refine_points()
    k = test.split(48)
    for i in range(len(k)):
        solid.scad_render_to_file(k[i], str(i) + ".scad")


 
 
************************************************/
