// Generated by SolidPython 1.1.3 on 2024-05-26 02:00:59


intersection() {
	difference() {
		intersection() {
			translate(v = [0, 0, 0]) {
				import(file = "CE3E3V2_Bottom_shell.stl", origin = [0, 0]);
			}
			translate(v = [-90.04029846191406, -32.690147399902344, 14]) {
				cube(size = [180.0806, 65.380295, 2]);
			}
		}
		linear_extrude(height = 999) {
			offset(r = -1) {
				import(file = "C:/Users/Daniel/Documents/repos/Shell_Maker/TestOutput/7top_slice.dxf", origin = [0, 0]);
			}
		}
	}
	translate(v = [0, 0, 14]) {
		linear_extrude(height = 10) {
			polygon(points = [[0, 0], [48.1594937500, 20.2589812500], [48.1047531250, 20.2937093750], [48.0500125000, 20.3284375000], [47.9952718750, 20.3631656250], [47.9405312500, 20.3978937500], [47.8857906250, 20.4326218750], [47.8310500000, 20.4673500000], [47.7763093750, 20.5020781250], [47.7215687500, 20.5368062500], [47.6668281250, 20.5715343750], [47.6120875000, 20.6062625000], [47.5573468750, 20.6409906250], [47.5026062500, 20.6757187500], [47.4478656250, 20.7104468750], [47.3931250000, 20.7451750000], [47.3383843750, 20.7799031250], [47.2836437500, 20.8146312500], [47.2289031250, 20.8493593750], [47.1741625000, 20.8840875000], [47.1194218750, 20.9188156250], [47.0646812500, 20.9535437500], [47.0099406250, 20.9882718750], [46.9552000000, 21.0230000000], [46.9080000000, 21.0536500000], [46.8608000000, 21.0843000000], [46.8136000000, 21.1149500000], [46.7664000000, 21.1456000000], [46.7069000000, 21.1810000000], [46.6474000000, 21.2164000000], [46.6013687500, 21.2428906250], [46.5553375000, 21.2693812500], [46.5093062500, 21.2958718750], [46.4632750000, 21.3223625000], [46.4172437500, 21.3488531250], [46.3712125000, 21.3753437500], [46.3251812500, 21.4018343750], [46.2791500000, 21.4283250000], [46.2331187500, 21.4548156250], [46.1870875000, 21.4813062500], [46.1410562500, 21.5077968750], [46.0950250000, 21.5342875000], [46.0489937500, 21.5607781250], [46.0029625000, 21.5872687500], [45.9569312500, 21.6137593750], [45.9109000000, 21.6402500000], [45.8648687500, 21.6667406250], [45.8188375000, 21.6932312500], [45.7728062500, 21.7197218750], [45.7267750000, 21.7462125000], [45.6807437500, 21.7727031250], [45.6347125000, 21.7991937500], [45.5886812500, 21.8256843750], [45.5426500000, 21.8521750000], [45.4966187500, 21.8786656250], [45.4505875000, 21.9051562500], [45.4045562500, 21.9316468750], [45.3585250000, 21.9581375000], [45.3124937500, 21.9846281250], [45.2664625000, 22.0111187500], [45.2204312500, 22.0376093750], [45.1744000000, 22.0641000000], [45.1298000000, 22.0893750000], [45.0852000000, 22.1146500000], [45.0406000000, 22.1399250000], [44.9960000000, 22.1652000000], [44.9415750000, 22.1946250000], [44.8871500000, 22.2240500000], [44.8327250000, 22.2534750000], [44.7783000000, 22.2829000000], [44.7301156250, 22.3082031250], [44.6819312500, 22.3335062500], [44.6337468750, 22.3588093750], [44.5855625000, 22.3841125000], [44.5373781250, 22.4094156250], [44.4891937500, 22.4347187500], [44.4410093750, 22.4600218750], [44.3928250000, 22.4853250000], [44.3446406250, 22.5106281250], [44.2964562500, 22.5359312500], [44.2482718750, 22.5612343750], [44.2000875000, 22.5865375000], [44.1519031250, 22.6118406250], [44.1037187500, 22.6371437500], [44.0555343750, 22.6624468750], [44.0073500000, 22.6877500000], [43.9591656250, 22.7130531250], [43.9109812500, 22.7383562500], [43.8627968750, 22.7636593750], [43.8146125000, 22.7889625000], [43.7664281250, 22.8142656250], [43.7182437500, 22.8395687500], [43.6700593750, 22.8648718750], [43.6218750000, 22.8901750000], [43.5736906250, 22.9154781250], [43.5255062500, 22.9407812500], [43.4773218750, 22.9660843750], [43.4291375000, 22.9913875000], [43.3809531250, 23.0166906250], [43.3327687500, 23.0419937500], [43.2845843750, 23.0672968750], [43.2364000000, 23.0926000000], [43.2095000000, 23.1061000000], [43.1627140625, 23.1273515625], [43.1159281250, 23.1486031250], [43.0691421875, 23.1698546875], [43.0223562500, 23.1911062500], [42.9755703125, 23.2123578125], [42.9287843750, 23.2336093750], [42.8819984375, 23.2548609375], [42.8352125000, 23.2761125000], [42.7884265625, 23.2973640625], [42.7416406250, 23.3186156250], [42.6948546875, 23.3398671875], [42.6480687500, 23.3611187500], [42.6012828125, 23.3823703125], [42.5544968750, 23.4036218750], [42.5077109375, 23.4248734375], [42.4609250000, 23.4461250000], [42.4141390625, 23.4673765625], [42.3673531250, 23.4886281250], [42.3205671875, 23.5098796875], [42.2737812500, 23.5311312500], [42.2269953125, 23.5523828125], [42.1802093750, 23.5736343750], [42.1334234375, 23.5948859375], [42.0866375000, 23.6161375000], [42.0398515625, 23.6373890625], [41.9930656250, 23.6586406250], [41.9462796875, 23.6798921875], [41.8994937500, 23.7011437500], [41.8527078125, 23.7223953125], [41.8059218750, 23.7436468750], [41.7591359375, 23.7648984375], [41.7123500000, 23.7861500000], [41.6655640625, 23.8074015625], [41.6187781250, 23.8286531250], [41.5719921875, 23.8499046875], [41.5252062500, 23.8711562500], [41.4784203125, 23.8924078125], [41.4316343750, 23.9136593750], [41.3848484375, 23.9349109375], [41.3380625000, 23.9561625000], [41.2912765625, 23.9774140625], [41.2444906250, 23.9986656250], [41.1977046875, 24.0199171875], [41.1509187500, 24.0411687500], [41.1041328125, 24.0624203125], [41.0573468750, 24.0836718750], [41.0105609375, 24.1049234375], [40.9637750000, 24.1261750000], [40.9169890625, 24.1474265625], [40.8702031250, 24.1686781250], [40.8234171875, 24.1899296875], [40.7766312500, 24.2111812500], [40.7298453125, 24.2324328125], [40.6830593750, 24.2536843750], [40.6362734375, 24.2749359375], [40.5894875000, 24.2961875000], [40.5427015625, 24.3174390625], [40.4959156250, 24.3386906250], [40.4491296875, 24.3599421875], [40.4023437500, 24.3811937500], [40.3555578125, 24.4024453125], [40.3087718750, 24.4236968750], [40.2619859375, 24.4449484375], [40.2152000000, 24.4662000000], [40.1684312500, 24.4873250000], [40.1216625000, 24.5084500000], [40.0748937500, 24.5295750000], [40.0281250000, 24.5507000000], [39.9813562500, 24.5718250000], [39.9345875000, 24.5929500000], [39.8878187500, 24.6140750000], [39.8410500000, 24.6352000000], [39.7942812500, 24.6563250000], [39.7475125000, 24.6774500000], [39.7007437500, 24.6985750000], [39.6539750000, 24.7197000000], [39.6072062500, 24.7408250000], [39.5604375000, 24.7619500000], [39.5136687500, 24.7830750000], [39.4669000000, 24.8042000000], [39.4185000000, 24.8238500000], [39.3701000000, 24.8435000000], [39.3366000000, 24.8569000000], [39.2839000000, 24.8780000000], [39.2350578125, 24.8954968750], [39.1862156250, 24.9129937500], [39.1373734375, 24.9304906250], [39.0885312500, 24.9479875000], [39.0396890625, 24.9654843750], [38.9908468750, 24.9829812500], [38.9420046875, 25.0004781250], [38.8931625000, 25.0179750000], [38.8443203125, 25.0354718750], [38.7954781250, 25.0529687500], [38.7466359375, 25.0704656250], [38.6977937500, 25.0879625000], [38.6489515625, 25.1054593750], [38.6001093750, 25.1229562500], [38.5512671875, 25.1404531250], [38.5024250000, 25.1579500000], [38.4535828125, 25.1754468750], [38.4047406250, 25.1929437500], [38.3558984375, 25.2104406250], [38.3070562500, 25.2279375000], [38.2582140625, 25.2454343750], [38.2093718750, 25.2629312500], [38.1605296875, 25.2804281250], [38.1116875000, 25.2979250000], [38.0628453125, 25.3154218750], [38.0140031250, 25.3329187500], [37.9651609375, 25.3504156250], [37.9163187500, 25.3679125000], [37.8674765625, 25.3854093750], [37.8186343750, 25.4029062500], [37.7697921875, 25.4204031250], [37.7209500000, 25.4379000000], [37.6721078125, 25.4553968750], [37.6232656250, 25.4728937500], [37.5744234375, 25.4903906250], [37.5255812500, 25.5078875000], [37.4767390625, 25.5253843750], [37.4278968750, 25.5428812500], [37.3790546875, 25.5603781250], [37.3302125000, 25.5778750000], [37.2813703125, 25.5953718750], [37.2325281250, 25.6128687500], [37.1836859375, 25.6303656250], [37.1348437500, 25.6478625000], [37.0860015625, 25.6653593750], [37.0371593750, 25.6828562500], [36.9883171875, 25.7003531250], [36.9394750000, 25.7178500000], [36.8906328125, 25.7353468750], [36.8417906250, 25.7528437500], [36.7929484375, 25.7703406250], [36.7441062500, 25.7878375000], [36.6952640625, 25.8053343750], [36.6464218750, 25.8228312500], [36.5975796875, 25.8403281250], [36.5487375000, 25.8578250000], [36.4998953125, 25.8753218750], [36.4510531250, 25.8928187500], [36.4022109375, 25.9103156250], [36.3533687500, 25.9278125000], [36.3045265625, 25.9453093750], [36.2556843750, 25.9628062500], [36.2068421875, 25.9803031250], [36.1580000000, 25.9978000000], [36.0957000000, 26.0198375000], [36.0334000000, 26.0418750000], [35.9711000000, 26.0639125000], [35.9088000000, 26.0859500000], [35.8465000000, 26.1079875000], [35.7842000000, 26.1300250000], [35.7219000000, 26.1520625000], [35.6596000000, 26.1741000000], [35.5867250000, 26.1993500000], [35.5138500000, 26.2246000000], [35.4409750000, 26.2498500000], [35.3681000000, 26.2751000000], [35.2832000000, 26.3010000000], [35.1996687500, 26.3237750000], [35.1161375000, 26.3465500000], [35.0326062500, 26.3693250000], [34.9490750000, 26.3921000000], [34.8655437500, 26.4148750000], [34.7820125000, 26.4376500000], [34.6984812500, 26.4604250000], [34.6149500000, 26.4832000000], [34.5314187500, 26.5059750000], [34.4478875000, 26.5287500000], [34.3643562500, 26.5515250000], [34.2808250000, 26.5743000000], [34.1972937500, 26.5970750000], [34.1137625000, 26.6198500000], [34.0302312500, 26.6426250000], [33.9467000000, 26.6654000000], [33.8631687500, 26.6881750000], [33.7796375000, 26.7109500000], [33.6961062500, 26.7337250000], [33.6125750000, 26.7565000000], [33.5290437500, 26.7792750000], [33.4455125000, 26.8020500000], [33.3619812500, 26.8248250000], [33.2784500000, 26.8476000000], [33.1949187500, 26.8703750000], [33.1113875000, 26.8931500000], [33.0278562500, 26.9159250000], [32.9443250000, 26.9387000000], [32.8607937500, 26.9614750000], [32.7772625000, 26.9842500000], [32.6937312500, 27.0070250000], [32.6102000000, 27.0298000000], [32.5375750000, 27.0490875000], [32.4649500000, 27.0683750000], [32.3923250000, 27.0876625000], [32.3197000000, 27.1069500000], [32.2470750000, 27.1262375000], [32.1744500000, 27.1455250000], [32.1018250000, 27.1648125000], [32.0292000000, 27.1841000000], [31.9555125000, 27.2007125000], [31.8818250000, 27.2173250000], [31.8081375000, 27.2339375000], [31.7344500000, 27.2505500000], [31.6607625000, 27.2671625000], [31.5870750000, 27.2837750000], [31.5133875000, 27.3003875000], [31.4397000000, 27.3170000000], [31.3888500000, 27.3279500000], [31.3380000000, 27.3389000000], [31.2805500000, 27.3509000000], [31.2231000000, 27.3629000000], [31.1551281250, 27.3754781250], [31.0871562500, 27.3880562500], [31.0191843750, 27.4006343750], [30.9512125000, 27.4132125000], [30.8832406250, 27.4257906250], [30.8152687500, 27.4383687500], [30.7472968750, 27.4509468750], [30.6793250000, 27.4635250000], [30.6113531250, 27.4761031250], [30.5433812500, 27.4886812500], [30.4754093750, 27.5012593750], [30.4074375000, 27.5138375000], [30.3394656250, 27.5264156250], [30.2714937500, 27.5389937500], [30.2035218750, 27.5515718750], [30.1355500000, 27.5641500000], [30.0675781250, 27.5767281250], [29.9996062500, 27.5893062500], [29.9316343750, 27.6018843750], [29.8636625000, 27.6144625000], [29.7956906250, 27.6270406250], [29.7277187500, 27.6396187500], [29.6597468750, 27.6521968750], [29.5917750000, 27.6647750000], [29.5238031250, 27.6773531250], [29.4558312500, 27.6899312500], [29.3878593750, 27.7025093750], [29.3198875000, 27.7150875000], [29.2519156250, 27.7276656250], [29.1839437500, 27.7402437500], [29.1159718750, 27.7528218750], [29.0480000000, 27.7654000000], [28.9805250000, 27.7772250000], [28.9130500000, 27.7890500000], [28.8455750000, 27.8008750000], [28.7781000000, 27.8127000000], [28.7090250000, 27.8232250000], [28.6399500000, 27.8337500000], [28.5708750000, 27.8442750000], [28.5018000000, 27.8548000000], [28.4310750000, 27.8640500000], [28.3603500000, 27.8733000000], [28.2896250000, 27.8825500000], [28.2189000000, 27.8918000000], [28.1283125000, 27.9021062500], [28.0377250000, 27.9124125000], [27.9471375000, 27.9227187500], [27.8565500000, 27.9330250000], [27.7659625000, 27.9433312500], [27.6753750000, 27.9536375000], [27.5847875000, 27.9639437500], [27.4942000000, 27.9742500000], [27.4036125000, 27.9845562500], [27.3130250000, 27.9948625000], [27.2224375000, 28.0051687500], [27.1318500000, 28.0154750000], [27.0412625000, 28.0257812500], [26.9506750000, 28.0360875000], [26.8600875000, 28.0463937500], [26.7695000000, 28.0567000000], [26.6789125000, 28.0670062500], [26.5883250000, 28.0773125000], [26.4977375000, 28.0876187500], [26.4071500000, 28.0979250000], [26.3165625000, 28.1082312500], [26.2259750000, 28.1185375000], [26.1353875000, 28.1288437500], [26.0448000000, 28.1391500000], [25.9542125000, 28.1494562500], [25.8636250000, 28.1597625000], [25.7730375000, 28.1700687500], [25.6824500000, 28.1803750000], [25.5918625000, 28.1906812500], [25.5012750000, 28.2009875000], [25.4106875000, 28.2112937500], [25.3201000000, 28.2216000000], [25.2585500000, 28.2276250000], [25.1970000000, 28.2336500000], [25.1354500000, 28.2396750000], [25.0739000000, 28.2457000000], [24.9750000000, 28.2537000000], [24.9048000000, 28.2586875000], [24.8346000000, 28.2636750000], [24.7644000000, 28.2686625000], [24.6942000000, 28.2736500000], [24.6240000000, 28.2786375000], [24.5538000000, 28.2836250000], [24.4836000000, 28.2886125000], [24.4134000000, 28.2936000000], [24.3232500000, 28.2983500000], [24.2331000000, 28.3031000000], [24.1639750000, 28.3063750000], [24.0948500000, 28.3096500000], [24.0257250000, 28.3129250000], [23.9566000000, 28.3162000000], [23.8943859375, 28.3175218750], [23.8321718750, 28.3188437500], [23.7699578125, 28.3201656250], [23.7077437500, 28.3214875000], [23.6455296875, 28.3228093750], [23.5833156250, 28.3241312500], [23.5211015625, 28.3254531250], [23.4588875000, 28.3267750000], [23.3966734375, 28.3280968750], [23.3344593750, 28.3294187500], [23.2722453125, 28.3307406250], [23.2100312500, 28.3320625000], [23.1478171875, 28.3333843750], [23.0856031250, 28.3347062500], [23.0233890625, 28.3360281250], [22.9611750000, 28.3373500000], [22.8989609375, 28.3386718750], [22.8367468750, 28.3399937500], [22.7745328125, 28.3413156250], [22.7123187500, 28.3426375000], [22.6501046875, 28.3439593750], [22.5878906250, 28.3452812500], [22.5256765625, 28.3466031250], [22.4634625000, 28.3479250000], [22.4012484375, 28.3492468750], [22.3390343750, 28.3505687500], [22.2768203125, 28.3518906250], [22.2146062500, 28.3532125000], [22.1523921875, 28.3545343750], [22.0901781250, 28.3558562500], [22.0279640625, 28.3571781250], [21.9657500000, 28.3585000000], [21.9035359375, 28.3598218750], [21.8413218750, 28.3611437500], [21.7791078125, 28.3624656250], [21.7168937500, 28.3637875000], [21.6546796875, 28.3651093750], [21.5924656250, 28.3664312500], [21.5302515625, 28.3677531250], [21.4680375000, 28.3690750000], [21.4058234375, 28.3703968750], [21.3436093750, 28.3717187500], [21.2813953125, 28.3730406250], [21.2191812500, 28.3743625000], [21.1569671875, 28.3756843750], [21.0947531250, 28.3770062500], [21.0325390625, 28.3783281250], [20.9703250000, 28.3796500000], [20.9081109375, 28.3809718750], [20.8458968750, 28.3822937500], [20.7836828125, 28.3836156250], [20.7214687500, 28.3849375000], [20.6592546875, 28.3862593750], [20.5970406250, 28.3875812500], [20.5348265625, 28.3889031250], [20.4726125000, 28.3902250000], [20.4103984375, 28.3915468750], [20.3481843750, 28.3928687500], [20.2859703125, 28.3941906250], [20.2237562500, 28.3955125000], [20.1615421875, 28.3968343750], [20.0993281250, 28.3981562500], [20.0371140625, 28.3994781250], [19.9749000000, 28.4008000000], [19.9214250000, 28.4010250000], [19.8679500000, 28.4012500000], [19.8144750000, 28.4014750000], [19.7610000000, 28.4017000000], [19.7075250000, 28.4019250000], [19.6540500000, 28.4021500000], [19.6005750000, 28.4023750000], [19.5471000000, 28.4026000000], [19.4711750000, 28.4022000000], [19.3952500000, 28.4018000000], [19.3193250000, 28.4014000000], [19.2434000000, 28.4010000000], [19.1534500000, 28.3983500000], [19.0635000000, 28.3957000000], [18.9789312500, 28.3929562500], [18.8943625000, 28.3902125000], [18.8097937500, 28.3874687500], [18.7252250000, 28.3847250000], [18.6406562500, 28.3819812500], [18.5560875000, 28.3792375000], [18.4715187500, 28.3764937500], [18.3869500000, 28.3737500000], [18.3023812500, 28.3710062500], [18.2178125000, 28.3682625000], [18.1332437500, 28.3655187500], [18.0486750000, 28.3627750000], [17.9641062500, 28.3600312500], [17.8795375000, 28.3572875000], [17.7949687500, 28.3545437500], [17.7104000000, 28.3518000000], [17.6219000000, 28.3481000000], [17.5674515625, 28.3443156250], [17.5130031250, 28.3405312500], [17.4585546875, 28.3367468750], [17.4041062500, 28.3329625000], [17.3496578125, 28.3291781250], [17.2952093750, 28.3253937500], [17.2407609375, 28.3216093750], [17.1863125000, 28.3178250000], [17.1318640625, 28.3140406250], [17.0774156250, 28.3102562500], [17.0229671875, 28.3064718750], [16.9685187500, 28.3026875000], [16.9140703125, 28.2989031250], [16.8596218750, 28.2951187500], [16.8051734375, 28.2913343750], [16.7507250000, 28.2875500000], [16.6962765625, 28.2837656250], [16.6418281250, 28.2799812500], [16.5873796875, 28.2761968750], [16.5329312500, 28.2724125000], [16.4784828125, 28.2686281250], [16.4240343750, 28.2648437500], [16.3695859375, 28.2610593750], [16.3151375000, 28.2572750000], [16.2606890625, 28.2534906250], [16.2062406250, 28.2497062500], [16.1517921875, 28.2459218750], [16.0973437500, 28.2421375000], [16.0428953125, 28.2383531250], [15.9884468750, 28.2345687500], [15.9339984375, 28.2307843750], [15.8795500000, 28.2270000000], [15.8251015625, 28.2232156250], [15.7706531250, 28.2194312500], [15.7162046875, 28.2156468750], [15.6617562500, 28.2118625000], [15.6073078125, 28.2080781250], [15.5528593750, 28.2042937500], [15.4984109375, 28.2005093750], [15.4439625000, 28.1967250000], [15.3895140625, 28.1929406250], [15.3350656250, 28.1891562500], [15.2806171875, 28.1853718750], [15.2261687500, 28.1815875000], [15.1717203125, 28.1778031250], [15.1172718750, 28.1740187500], [15.0628234375, 28.1702343750], [15.0083750000, 28.1664500000], [14.9539265625, 28.1626656250], [14.8994781250, 28.1588812500], [14.8450296875, 28.1550968750], [14.7905812500, 28.1513125000], [14.7361328125, 28.1475281250], [14.6816843750, 28.1437437500], [14.6272359375, 28.1399593750], [14.5727875000, 28.1361750000], [14.5183390625, 28.1323906250], [14.4638906250, 28.1286062500], [14.4094421875, 28.1248218750], [14.3549937500, 28.1210375000], [14.3005453125, 28.1172531250], [14.2460968750, 28.1134687500], [14.1916484375, 28.1096843750], [14.1372000000, 28.1059000000], [14.0665250000, 28.1008750000], [13.9958500000, 28.0958500000], [13.9251750000, 28.0908250000], [13.8545000000, 28.0858000000], [13.8117000000, 28.0817000000], [13.7508501562, 28.0745875000], [13.6900003125, 28.0674750000], [13.6291504687, 28.0603625000], [13.5683006250, 28.0532500000], [13.5074507813, 28.0461375000], [13.4466009375, 28.0390250000], [13.3857510937, 28.0319125000], [13.3249012500, 28.0248000000], [13.2640514063, 28.0176875000], [13.2032015625, 28.0105750000], [13.1423517187, 28.0034625000], [13.0815018750, 27.9963500000], [13.0206520313, 27.9892375000], [12.9598021875, 27.9821250000], [12.8989523438, 27.9750125000], [12.8381025000, 27.9679000000], [12.7772526563, 27.9607875000], [12.7164028125, 27.9536750000], [12.6555529688, 27.9465625000], [12.5947031250, 27.9394500000], [12.5338532813, 27.9323375000], [12.4730034375, 27.9252250000], [12.4121535938, 27.9181125000], [12.3513037500, 27.9110000000], [12.2904539063, 27.9038875000], [12.2296040625, 27.8967750000], [12.1687542188, 27.8896625000], [12.1079043750, 27.8825500000], [12.0470545313, 27.8754375000], [11.9862046875, 27.8683250000], [11.9253548438, 27.8612125000], [11.8645050000, 27.8541000000], [11.8036551563, 27.8469875000], [11.7428053125, 27.8398750000], [11.6819554688, 27.8327625000], [11.6211056250, 27.8256500000], [11.5602557813, 27.8185375000], [11.4994059375, 27.8114250000], [11.4385560938, 27.8043125000], [11.3777062500, 27.7972000000], [11.3168564063, 27.7900875000], [11.2560065625, 27.7829750000], [11.1951567188, 27.7758625000], [11.1343068750, 27.7687500000], [11.0734570313, 27.7616375000], [11.0126071875, 27.7545250000], [10.9517573437, 27.7474125000], [10.8909075000, 27.7403000000], [10.8300576563, 27.7331875000], [10.7692078125, 27.7260750000], [10.7083579688, 27.7189625000], [10.6475081250, 27.7118500000], [10.5866582813, 27.7047375000], [10.5258084375, 27.6976250000], [10.4649585938, 27.6905125000], [10.4041087500, 27.6834000000], [10.3432589062, 27.6762875000], [10.2824090625, 27.6691750000], [10.2215592188, 27.6620625000], [10.1607093750, 27.6549500000], [10.0998595313, 27.6478375000], [10.0390096875, 27.6407250000], [9.9781598437, 27.6336125000], [9.9173100000, 27.6265000000], [9.8570325000, 27.6193625000], [9.7967550000, 27.6122250000], [9.7364775000, 27.6050875000], [9.6762000000, 27.5979500000], [9.6159225000, 27.5908125000], [9.5556450000, 27.5836750000], [9.4953675000, 27.5765375000], [9.4350900000, 27.5694000000], [9.3748125000, 27.5622625000], [9.3145350000, 27.5551250000], [9.2542575000, 27.5479875000], [9.1939800000, 27.5408500000], [9.1337025000, 27.5337125000], [9.0734250000, 27.5265750000], [9.0131475000, 27.5194375000], [8.9528700000, 27.5123000000], [8.8865950000, 27.5027312500], [8.8203200000, 27.4931625000], [8.7540450000, 27.4835937500], [8.6877700000, 27.4740250000], [8.6214950000, 27.4644562500], [8.5552200000, 27.4548875000], [8.4889450000, 27.4453187500], [8.4226700000, 27.4357500000], [8.3563950000, 27.4261812500], [8.2901200000, 27.4166125000], [8.2238450000, 27.4070437500], [8.1575700000, 27.3974750000], [8.0912950000, 27.3879062500], [8.0250200000, 27.3783375000], [7.9587450000, 27.3687687500], [7.8924700000, 27.3592000000], [7.8212105469, 27.3482343750], [7.7499510938, 27.3372687500], [7.6786916406, 27.3263031250], [7.6074321875, 27.3153375000], [7.5361727344, 27.3043718750], [7.4649132813, 27.2934062500], [7.3936538281, 27.2824406250], [7.3223943750, 27.2714750000], [7.2511349219, 27.2605093750], [7.1798754687, 27.2495437500], [7.1086160156, 27.2385781250], [7.0373565625, 27.2276125000], [6.9660971094, 27.2166468750], [6.8948376563, 27.2056812500], [6.8235782031, 27.1947156250], [6.7523187500, 27.1837500000], [6.6810592969, 27.1727843750], [6.6097998438, 27.1618187500], [6.5385403906, 27.1508531250], [6.4672809375, 27.1398875000], [6.3960214844, 27.1289218750], [6.3247620312, 27.1179562500], [6.2535025781, 27.1069906250], [6.1822431250, 27.0960250000], [6.1109836719, 27.0850593750], [6.0397242188, 27.0740937500], [5.9684647656, 27.0631281250], [5.8972053125, 27.0521625000], [5.8259458594, 27.0411968750], [5.7546864063, 27.0302312500], [5.6834269531, 27.0192656250], [5.6121675000, 27.0083000000], [5.5409080469, 26.9973343750], [5.4696485937, 26.9863687500], [5.3983891406, 26.9754031250], [5.3271296875, 26.9644375000], [5.2558702344, 26.9534718750], [5.1846107813, 26.9425062500], [5.1133513281, 26.9315406250], [5.0420918750, 26.9205750000], [4.9708324219, 26.9096093750], [4.8995729688, 26.8986437500], [4.8283135156, 26.8876781250], [4.7570540625, 26.8767125000], [4.6857946094, 26.8657468750], [4.6145351562, 26.8547812500], [4.5432757031, 26.8438156250], [4.4720162500, 26.8328500000], [4.4007567969, 26.8218843750], [4.3294973438, 26.8109187500], [4.2582378906, 26.7999531250], [4.1869784375, 26.7889875000], [4.1157189844, 26.7780218750], [4.0444595313, 26.7670562500], [3.9732000781, 26.7560906250], [3.9019406250, 26.7451250000], [3.8306811719, 26.7341593750], [3.7594217188, 26.7231937500], [3.6881622656, 26.7122281250], [3.6169028125, 26.7012625000], [3.5456433594, 26.6902968750], [3.4743839062, 26.6793312500], [3.4031244531, 26.6683656250], [3.3318650000, 26.6574000000], [3.2606055469, 26.6464343750], [3.1893460938, 26.6354687500], [3.1180866406, 26.6245031250], [3.0468271875, 26.6135375000], [2.9755677344, 26.6025718750], [2.9043082813, 26.5916062500], [2.8330488281, 26.5806406250], [2.7617893750, 26.5696750000], [2.6905299219, 26.5587093750], [2.6192704687, 26.5477437500], [2.5480110156, 26.5367781250], [2.4767515625, 26.5258125000], [2.4054921094, 26.5148468750], [2.3342326563, 26.5038812500], [2.2629732031, 26.4929156250], [2.1917137500, 26.4819500000], [2.1204542969, 26.4709843750], [2.0491948438, 26.4600187500], [1.9779353906, 26.4490531250], [1.9066759375, 26.4380875000], [1.8354164844, 26.4271218750]]);
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
import math
import time

from stl import mesh, Dimension

from tkinter import Tk     # from tkinter import Tk for Python 3.x
from tkinter.filedialog import askopenfilename
from mpl_toolkits.mplot3d import art3d
from matplotlib import pyplot as plt
import solid
import os
import ezdxf
import shapely.geometry as sg
import subprocess
from GUI import getSCADPath



def outputSTL(From, To, PATH=getSCADPath()):
    subprocess.Popen(PATH + " -o " + To + " " + From)
    while not os.path.exists(To):
        time.sleep(1)

class Model:
    def __init__(self, model, fileName, location, layer, thickness):
        self.location = location
        self.code = None
        self.fileName = fileName
        self.stl = fileName + ".stl"
        self.layer = layer
        self.thickness = thickness
        self.maxz = (layer+1)*thickness
        self.dxf = fileName + ".dxf"
        self.scad = fileName + ".scad"
        self.model = model
        self.center = None
        self.width = 10
        self.mesh = None
        self.useable_area = None


    def get_code(self):
        max_dim = 0.05
        max_array = 6

        num = int(self.fileName)
        nums = [int(a) for a in str(num)]
        nums.reverse()
        indices = nums
        length = len(nums)

        print(indices)
        t = 0
        i = 0
        cubes = []
        x = 0
        y = 0
        width = 0.01
        while x <= max_dim:
            while y <= max_dim:
                print(indices)
                if nums == []:
                    break
                if indices[0] != 0:
                    cubes.append(solid.translate([x, y, 0])(solid.cube(size=t / 1000 + 0.001)))
                    y += max_dim / (max_array - 1)
                    nums[0] = nums[0] - 1
                else:
                    indices.pop(0)
                    t += 1
                i += 1
            x += max_dim / (max_array - 1)
            y = 0

        outside = solid.translate([-width / 2, -width / 2])(solid.cube(max_dim + (length - 1) / 1000 + 0.001 + width))
        self.code = solid.difference()(outside, cubes)
        self.code = solid.projection(cut=True)(self.code)
        solid.scad_render_to_file(self.code, self.location + "/code.scad")
        outputSTL(From=self.location+"/code.scad", To=self.location+"code.dxf", PATH=getSCADPath())
        # os.system("toSTL.sh renders/code.scad renders/code.dxf")
        return self.location+"/code.dxf"

    def download(self, type):
        if type =="stl":
            print("generating:" + self.location+"/"+ self.fileName+".stl")
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".stl")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".stl")
        elif type == "dxf":
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".dxf")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".dxf")

    def render(self):
        solid.scad_render_to_file(self.model, self.location+"/"+ self.fileName+'.scad')
        while not os.path.exists(self.location+"/"+self.fileName+".scad"):
            time.sleep(1)
        # outputSTL(From= self.location+"/"+ self.fileName+'.scad', To=self.location+"/"+ self.fileName+'.stl')

    def get_points(self):
        doc = ezdxf.readfile(filename=self.location+"/"+ self.fileName+".dxf")
        msp = doc.modelspace()
        i=0
        lists = []
        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return [start, end]

        for e in msp.query("LINE"):
            line = helper(e)
            if not lists:
                lists.append([line])
            else:
                if lists[i][len(lists)-1][1] != line[0]:
                    lists.append([line])
                    i+=1
                else:
                    lists[i].append(line)

    def get_points2(self, FILE):
        doc = ezdxf.readfile(filename=FILE)
        msp = doc.modelspace()
        i = 0
        lists = []

        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return (start, end)

        for e in msp.query("LINE"):
            line = helper(e)
            if lists==[]:
                lists.append([line])
            else:
                if lists[i][len(lists[i]) - 1][1] != line[0]:
                    lists.append([line])
                    i += 1
                else:
                    lists[i].append(line)
        return lists

    def add_code(self):
        dxf = solid.projection(cut=False)(self.model)
        offset = solid.offset(r=-0.1)(dxf)
        solid.scad_render_to_file(offset, self.location+'/offset.scad')
        os.system("toSTL.sh renders/offset.scad renders/offset.dxf")
        lines = self.get_points2("renders/offset.dxf")
        x = lines[0][0][0][0]
        y = lines[0][0][0][1]
        print(x)
        print(y)
        code = solid.translate([x,y,0])(self.code)
        code = solid.linear_extrude(height=999)(code)
        save = self.model
        self.model = solid.projection()(solid.difference()(self.model, code))
        self.render()
        self.download("dxf")
        self.model = save

    def add_label(self, pos):
        # num = 12
        # minx, maxx, miny, maxy, minz, maxz = self.find_minmax()
        maxz = self.maxz
        # label = solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.5, halign="center"))
        # i=minx
        # print("x-len: " + str(maxx-minx))
        # print(i)
        # inc = (maxx-minx)/num
        # while minx <= i <= maxx:
        #     label = solid.union()(solid.translate([i, 0, maxz - 0.2])(solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.25, halign="center"))), label)
        #     i += inc
        #
        # l = label
        #
        # i =miny
        # while miny<= i <= maxy:
        #     print("y inc")
        #     l = solid.union()(solid.translate([0, i, 0])(label), l)
        #     i += 0.5
        for i in str(self.fileName):
            cur = pos[0]
            label = solid.translate([pos[0][0], pos[0][1], self.maxz-0.2])(solid.linear_extrude(height=(self.thickness)/3)(solid.text(str(i), size=0.5, halign="center", valign="center")))
            self.model = solid.difference()(self.model, label)
            pos.append(pos.pop(0))
            while abs(cur[0]-pos[0][0])<0.5 and abs(cur[1]-pos[0][1])<0.5:
                pos.append(pos.pop(0))



    def Center(self):

        volume, cog, inertia = self.mesh.get_mass_properties()
        print("Volume                                  = {0}".format(volume))
        print("Position of the center of gravity (COG) = {0}".format(cog))
        m_centered = solid.translate([-cog[0], -cog[1], 0])(
            self.model
        )
        return m_centered

    def find_minmax(self):
        minx = maxx = miny = maxy = minz = maxz = None
        for p in self.mesh.points:
            # p contains (x, y, z)
            if minx is None:
                minx = p[Dimension.X]
                maxx = p[Dimension.X]
                miny = p[Dimension.Y]
                maxy = p[Dimension.Y]
                minz = p[Dimension.Z]
                maxz = p[Dimension.Z]
            else:
                maxx = max(p[Dimension.X], maxx)
                minx = min(p[Dimension.X], minx)
                maxy = max(p[Dimension.Y], maxy)
                miny = min(p[Dimension.Y], miny)
                maxz = max(p[Dimension.Z], maxz)
                minz = min(p[Dimension.Z], minz)
        lenx = maxx - minx
        leny = maxy - miny
        lenz = maxz - minz
        return minx, maxx, miny, maxy, minz, maxz

    # def generate_Mesh(self):
    #     self.mesh = mesh.Mesh.from_file(self.location + "/" + str(int(self.fileName)//8)+ "b.stl")

    def get_top(self):
        top = solid.projection(cut=True)(solid.translate([0,0,-1*self.thickness*(self.layer+1)])(self.model))
        useable_area = solid.offset(r=-0.45)(top)
        self.useable_area = useable_area
        solid.scad_render_to_file(self.useable_area, self.location+'/' + 'toptemp.scad')
        outputSTL(From=self.location+'/' + 'toptemp.scad', To=self.location+"/top"+ self.dxf)

        # os.system("toSTL.sh out/toptemp.scad renders/" + self.fileName + ".dxf")
        dxf = DXF(self.location+"/top"+ self.dxf)
        min_p=dxf.points[0][0]
        points_ordered = dxf.points
        i=0
        while i <= len(dxf.points)+1:
            while math.sqrt((dxf.points[0][0]-dxf.points[1][0])**2+(dxf.points[0][1]-dxf.points[1][1])**2) > 0.1:
                dxf.points.insert(1, [(dxf.points[0][0]+dxf.points[1][0])/2, (dxf.points[0][1]+dxf.points[1][1])/2])
                i = i-1
            dxf.points.append(dxf.points.pop(0))
            i+=1
        for i in range(len(dxf.points)):
            dxf.points.append(dxf.points.pop(0))
            if dxf.points[0][0] < min_p:
                min_p = dxf.points[0][0]
                points_ordered = dxf.points.copy()
        dxf.points = points_ordered.copy()

        print(dxf.points)
        self.add_label(dxf.points)

class DXF:
    def __init__(self, file):
        self.file = file
        self.Lines = []
        self.points = []
        doc = ezdxf.readfile(self.file)
        msp = doc.modelspace()
        for e in msp:
            if e.dxftype() == "LINE":
                self.Lines.append(e)
                self.points.append([e.dxf.start[0], e.dxf.start[1]])
        # self.points.append([self.Lines[-1].dxf.end[0], self.Lines[-1].dxf.end[1]])
        self.area = None
        self.center = None
        self.polygon = sg.Polygon(self.points)

    def get_area(self):
        self.area = self.polygon.area
        return self.area

    def get_center(self):
        x_sum = 0
        y_sum =0
        for i in self.points:
            x_sum += i[0]
            y_sum += i[1]
        x_c = x_sum/len(self.points)
        y_c = y_sum/len(self.points)
        return (x_c, y_c)

    def split(self, maxdim):
        splits = []
        length = 0
        pieces = [[]]
        prev = self.points[-1]
        pieces[-1].append(prev)
        for j in self.points:
            length = length + math.sqrt((prev[0]-j[0])**2+(prev[1]-j[1])**2)
            if length >= maxdim:
                pieces[-1].append(j)
                pieces.append([])
                length = 0
            pieces[-1].append(j)
            prev = j
        for j in pieces:
            j.insert(0, [0,0])
            piece = solid.linear_extrude(height=10)(solid.polygon(j))
            splits.append(piece)
        return splits
    def refine_points(self):
        i=0
        while i <= len(self.points)+1:
            while math.sqrt((self.points[0][0]-self.points[1][0])**2+(self.points[0][1]-self.points[1][1])**2) > 0.1:
                self.points.insert(1, [(self.points[0][0]+self.points[1][0])/2, (self.points[0][1]+self.points[1][1])/2])
                i = i-1
            self.points.append(self.points.pop(0))
            i+=1


if __name__== "__main__":
    test = DXF("C:/Users/Daniel/Documents/repos/Shell_Maker/output/0top_slice.dxf")
    test.refine_points()
    k = test.split(48)
    for i in range(len(k)):
        solid.scad_render_to_file(k[i], str(i) + ".scad")


 
 
************************************************/
