// Generated by SolidPython 1.1.3 on 2024-05-26 02:00:42


intersection() {
	difference() {
		intersection() {
			translate(v = [0, 0, 0]) {
				import(file = "CE3E3V2_Bottom_shell.stl", origin = [0, 0]);
			}
			translate(v = [-90.04029846191406, -32.690147399902344, 8]) {
				cube(size = [180.0806, 65.380295, 2]);
			}
		}
		linear_extrude(height = 999) {
			offset(r = -1) {
				import(file = "C:/Users/Daniel/Documents/repos/Shell_Maker/TestOutput/4top_slice.dxf", origin = [0, 0]);
			}
		}
	}
	translate(v = [0, 0, 8]) {
		linear_extrude(height = 10) {
			polygon(points = [[0, 0], [5.0692468750, -26.8896093750], [5.1591967187, -26.9032023437], [5.2491465625, -26.9167953125], [5.3390964063, -26.9303882812], [5.4290462500, -26.9439812500], [5.5189960937, -26.9575742188], [5.6089459375, -26.9711671875], [5.6988957813, -26.9847601563], [5.7888456250, -26.9983531250], [5.8787954688, -27.0119460938], [5.9687453125, -27.0255390625], [6.0586951562, -27.0391320313], [6.1486450000, -27.0527250000], [6.2385948438, -27.0663179688], [6.3285446875, -27.0799109375], [6.4184945312, -27.0935039063], [6.5084443750, -27.1070968750], [6.5983942188, -27.1206898438], [6.6883440625, -27.1342828125], [6.7782939062, -27.1478757813], [6.8682437500, -27.1614687500], [6.9581935937, -27.1750617188], [7.0481434375, -27.1886546875], [7.1380932812, -27.2022476562], [7.2280431250, -27.2158406250], [7.3179929687, -27.2294335937], [7.4079428125, -27.2430265625], [7.4978926563, -27.2566195312], [7.5878425000, -27.2702125000], [7.6777923437, -27.2838054687], [7.7677421875, -27.2973984375], [7.8576920313, -27.3109914063], [7.9476418750, -27.3245843750], [8.0375917188, -27.3381773438], [8.1275415625, -27.3517703125], [8.2174914062, -27.3653632813], [8.3074412500, -27.3789562500], [8.3973910938, -27.3925492188], [8.4873409375, -27.4061421875], [8.5772907812, -27.4197351563], [8.6672406250, -27.4333281250], [8.7571904688, -27.4469210938], [8.8471403125, -27.4605140625], [8.9370901562, -27.4741070312], [9.0270400000, -27.4877000000], [9.1000125000, -27.4970125000], [9.1729850000, -27.5063250000], [9.2459575000, -27.5156375000], [9.3189300000, -27.5249500000], [9.3919025000, -27.5342625000], [9.4648750000, -27.5435750000], [9.5378475000, -27.5528875000], [9.6108200000, -27.5622000000], [9.6837925000, -27.5715125000], [9.7567650000, -27.5808250000], [9.8297375000, -27.5901375000], [9.9027100000, -27.5994500000], [9.9756825000, -27.6087625000], [10.0486550000, -27.6180750000], [10.1216275000, -27.6273875000], [10.1946000000, -27.6367000000], [10.2486187500, -27.6429343750], [10.3026375000, -27.6491687500], [10.3566562500, -27.6554031250], [10.4106750000, -27.6616375000], [10.4646937500, -27.6678718750], [10.5187125000, -27.6741062500], [10.5727312500, -27.6803406250], [10.6267500000, -27.6865750000], [10.6807687500, -27.6928093750], [10.7347875000, -27.6990437500], [10.7888062500, -27.7052781250], [10.8428250000, -27.7115125000], [10.8968437500, -27.7177468750], [10.9508625000, -27.7239812500], [11.0048812500, -27.7302156250], [11.0589000000, -27.7364500000], [11.1129187500, -27.7426843750], [11.1669375000, -27.7489187500], [11.2209562500, -27.7551531250], [11.2749750000, -27.7613875000], [11.3289937500, -27.7676218750], [11.3830125000, -27.7738562500], [11.4370312500, -27.7800906250], [11.4910500000, -27.7863250000], [11.5450687500, -27.7925593750], [11.5990875000, -27.7987937500], [11.6531062500, -27.8050281250], [11.7071250000, -27.8112625000], [11.7611437500, -27.8174968750], [11.8151625000, -27.8237312500], [11.8691812500, -27.8299656250], [11.9232000000, -27.8362000000], [12.0190250000, -27.8464750000], [12.1148500000, -27.8567500000], [12.2106750000, -27.8670250000], [12.3065000000, -27.8773000000], [12.3947250000, -27.8852562500], [12.4829500000, -27.8932125000], [12.5711750000, -27.9011687500], [12.6594000000, -27.9091250000], [12.7476250000, -27.9170812500], [12.8358500000, -27.9250375000], [12.9240750000, -27.9329937500], [13.0123000000, -27.9409500000], [13.1005250000, -27.9489062500], [13.1887500000, -27.9568625000], [13.2769750000, -27.9648187500], [13.3652000000, -27.9727750000], [13.4534250000, -27.9807312500], [13.5416500000, -27.9886875000], [13.6298750000, -27.9966437500], [13.7181000000, -28.0046000000], [13.8063250000, -28.0125562500], [13.8945500000, -28.0205125000], [13.9827750000, -28.0284687500], [14.0710000000, -28.0364250000], [14.1592250000, -28.0443812500], [14.2474500000, -28.0523375000], [14.3356750000, -28.0602937500], [14.4239000000, -28.0682500000], [14.5121250000, -28.0762062500], [14.6003500000, -28.0841625000], [14.6885750000, -28.0921187500], [14.7768000000, -28.1000750000], [14.8650250000, -28.1080312500], [14.9532500000, -28.1159875000], [15.0414750000, -28.1239437500], [15.1297000000, -28.1319000000], [15.1826125000, -28.1358500000], [15.2355250000, -28.1398000000], [15.2884375000, -28.1437500000], [15.3413500000, -28.1477000000], [15.3942625000, -28.1516500000], [15.4471750000, -28.1556000000], [15.5000875000, -28.1595500000], [15.5530000000, -28.1635000000], [15.6054031250, -28.1669218750], [15.6578062500, -28.1703437500], [15.7102093750, -28.1737656250], [15.7626125000, -28.1771875000], [15.8150156250, -28.1806093750], [15.8674187500, -28.1840312500], [15.9198218750, -28.1874531250], [15.9722250000, -28.1908750000], [16.0246281250, -28.1942968750], [16.0770312500, -28.1977187500], [16.1294343750, -28.2011406250], [16.1818375000, -28.2045625000], [16.2342406250, -28.2079843750], [16.2866437500, -28.2114062500], [16.3390468750, -28.2148281250], [16.3914500000, -28.2182500000], [16.4438531250, -28.2216718750], [16.4962562500, -28.2250937500], [16.5486593750, -28.2285156250], [16.6010625000, -28.2319375000], [16.6534656250, -28.2353593750], [16.7058687500, -28.2387812500], [16.7582718750, -28.2422031250], [16.8106750000, -28.2456250000], [16.8630781250, -28.2490468750], [16.9154812500, -28.2524687500], [16.9678843750, -28.2558906250], [17.0202875000, -28.2593125000], [17.0726906250, -28.2627343750], [17.1250937500, -28.2661562500], [17.1774968750, -28.2695781250], [17.2299000000, -28.2730000000], [17.2812500000, -28.2753250000], [17.3326000000, -28.2776500000], [17.3839500000, -28.2799750000], [17.4353000000, -28.2823000000], [17.5080437500, -28.2838625000], [17.5807875000, -28.2854250000], [17.6535312500, -28.2869875000], [17.7262750000, -28.2885500000], [17.7990187500, -28.2901125000], [17.8717625000, -28.2916750000], [17.9445062500, -28.2932375000], [18.0172500000, -28.2948000000], [18.0899937500, -28.2963625000], [18.1627375000, -28.2979250000], [18.2354812500, -28.2994875000], [18.3082250000, -28.3010500000], [18.3809687500, -28.3026125000], [18.4537125000, -28.3041750000], [18.5264562500, -28.3057375000], [18.5992000000, -28.3073000000], [18.6719437500, -28.3088625000], [18.7446875000, -28.3104250000], [18.8174312500, -28.3119875000], [18.8901750000, -28.3135500000], [18.9629187500, -28.3151125000], [19.0356625000, -28.3166750000], [19.1084062500, -28.3182375000], [19.1811500000, -28.3198000000], [19.2538937500, -28.3213625000], [19.3266375000, -28.3229250000], [19.3993812500, -28.3244875000], [19.4721250000, -28.3260500000], [19.5448687500, -28.3276125000], [19.6176125000, -28.3291750000], [19.6903562500, -28.3307375000], [19.7631000000, -28.3323000000], [19.8156281250, -28.3328593750], [19.8681562500, -28.3334187500], [19.9206843750, -28.3339781250], [19.9732125000, -28.3345375000], [20.0257406250, -28.3350968750], [20.0782687500, -28.3356562500], [20.1307968750, -28.3362156250], [20.1833250000, -28.3367750000], [20.2358531250, -28.3373343750], [20.2883812500, -28.3378937500], [20.3409093750, -28.3384531250], [20.3934375000, -28.3390125000], [20.4459656250, -28.3395718750], [20.4984937500, -28.3401312500], [20.5510218750, -28.3406906250], [20.6035500000, -28.3412500000], [20.6560781250, -28.3418093750], [20.7086062500, -28.3423687500], [20.7611343750, -28.3429281250], [20.8136625000, -28.3434875000], [20.8661906250, -28.3440468750], [20.9187187500, -28.3446062500], [20.9712468750, -28.3451656250], [21.0237750000, -28.3457250000], [21.0763031250, -28.3462843750], [21.1288312500, -28.3468437500], [21.1813593750, -28.3474031250], [21.2338875000, -28.3479625000], [21.2864156250, -28.3485218750], [21.3389437500, -28.3490812500], [21.3914718750, -28.3496406250], [21.4440000000, -28.3502000000], [21.5232000000, -28.3486500000], [21.6024000000, -28.3471000000], [21.6816000000, -28.3455500000], [21.7608000000, -28.3440000000], [21.8115000000, -28.3427750000], [21.8622000000, -28.3415500000], [21.9129000000, -28.3403250000], [21.9636000000, -28.3391000000], [22.0143000000, -28.3378750000], [22.0650000000, -28.3366500000], [22.1157000000, -28.3354250000], [22.1664000000, -28.3342000000], [22.2488000000, -28.3318000000], [22.3034468750, -28.3287906250], [22.3580937500, -28.3257812500], [22.4127406250, -28.3227718750], [22.4673875000, -28.3197625000], [22.5220343750, -28.3167531250], [22.5766812500, -28.3137437500], [22.6313281250, -28.3107343750], [22.6859750000, -28.3077250000], [22.7406218750, -28.3047156250], [22.7952687500, -28.3017062500], [22.8499156250, -28.2986968750], [22.9045625000, -28.2956875000], [22.9592093750, -28.2926781250], [23.0138562500, -28.2896687500], [23.0685031250, -28.2866593750], [23.1231500000, -28.2836500000], [23.1777968750, -28.2806406250], [23.2324437500, -28.2776312500], [23.2870906250, -28.2746218750], [23.3417375000, -28.2716125000], [23.3963843750, -28.2686031250], [23.4510312500, -28.2655937500], [23.5056781250, -28.2625843750], [23.5603250000, -28.2595750000], [23.6149718750, -28.2565656250], [23.6696187500, -28.2535562500], [23.7242656250, -28.2505468750], [23.7789125000, -28.2475375000], [23.8335593750, -28.2445281250], [23.8882062500, -28.2415187500], [23.9428531250, -28.2385093750], [23.9975000000, -28.2355000000], [24.0496500000, -28.2323625000], [24.1018000000, -28.2292250000], [24.1539500000, -28.2260875000], [24.2061000000, -28.2229500000], [24.2582500000, -28.2198125000], [24.3104000000, -28.2166750000], [24.3625500000, -28.2135375000], [24.4147000000, -28.2104000000], [24.5136312500, -28.2032187500], [24.6125625000, -28.1960375000], [24.7114937500, -28.1888562500], [24.8104250000, -28.1816750000], [24.9093562500, -28.1744937500], [25.0082875000, -28.1673125000], [25.1072187500, -28.1601312500], [25.2061500000, -28.1529500000], [25.3050812500, -28.1457687500], [25.4040125000, -28.1385875000], [25.5029437500, -28.1314062500], [25.6018750000, -28.1242250000], [25.7008062500, -28.1170437500], [25.7997375000, -28.1098625000], [25.8986687500, -28.1026812500], [25.9976000000, -28.0955000000], [26.0557000000, -28.0901750000], [26.1138000000, -28.0848500000], [26.1719000000, -28.0795250000], [26.2300000000, -28.0742000000], [26.2941500000, -28.0675000000], [26.3583000000, -28.0608000000], [26.4208062500, -28.0523750000], [26.4833125000, -28.0439500000], [26.5458187500, -28.0355250000], [26.6083250000, -28.0271000000], [26.6708312500, -28.0186750000], [26.7333375000, -28.0102500000], [26.7958437500, -28.0018250000], [26.8583500000, -27.9934000000], [26.9208562500, -27.9849750000], [26.9833625000, -27.9765500000], [27.0458687500, -27.9681250000], [27.1083750000, -27.9597000000], [27.1708812500, -27.9512750000], [27.2333875000, -27.9428500000], [27.2958937500, -27.9344250000], [27.3584000000, -27.9260000000], [27.4464125000, -27.9149875000], [27.5344250000, -27.9039750000], [27.6224375000, -27.8929625000], [27.7104500000, -27.8819500000], [27.7984625000, -27.8709375000], [27.8864750000, -27.8599250000], [27.9744875000, -27.8489125000], [28.0625000000, -27.8379000000], [28.1505125000, -27.8268875000], [28.2385250000, -27.8158750000], [28.3265375000, -27.8048625000], [28.4145500000, -27.7938500000], [28.5025625000, -27.7828375000], [28.5905750000, -27.7718250000], [28.6785875000, -27.7608125000], [28.7666000000, -27.7498000000], [28.8493375000, -27.7356500000], [28.9320750000, -27.7215000000], [29.0148125000, -27.7073500000], [29.0975500000, -27.6932000000], [29.1802875000, -27.6790500000], [29.2630250000, -27.6649000000], [29.3457625000, -27.6507500000], [29.4285000000, -27.6366000000], [29.5122125000, -27.6222125000], [29.5959250000, -27.6078250000], [29.6796375000, -27.5934375000], [29.7633500000, -27.5790500000], [29.8470625000, -27.5646625000], [29.9307750000, -27.5502750000], [30.0144875000, -27.5358875000], [30.0982000000, -27.5215000000], [30.1083000000, -27.5197000000], [30.1573187500, -27.5081000000], [30.2063375000, -27.4965000000], [30.2553562500, -27.4849000000], [30.3043750000, -27.4733000000], [30.3533937500, -27.4617000000], [30.4024125000, -27.4501000000], [30.4514312500, -27.4385000000], [30.5004500000, -27.4269000000], [30.5494687500, -27.4153000000], [30.5984875000, -27.4037000000], [30.6475062500, -27.3921000000], [30.6965250000, -27.3805000000], [30.7455437500, -27.3689000000], [30.7945625000, -27.3573000000], [30.8435812500, -27.3457000000], [30.8926000000, -27.3341000000], [30.9416187500, -27.3225000000], [30.9906375000, -27.3109000000], [31.0396562500, -27.2993000000], [31.0886750000, -27.2877000000], [31.1376937500, -27.2761000000], [31.1867125000, -27.2645000000], [31.2357312500, -27.2529000000], [31.2847500000, -27.2413000000], [31.3337687500, -27.2297000000], [31.3827875000, -27.2181000000], [31.4318062500, -27.2065000000], [31.4808250000, -27.1949000000], [31.5298437500, -27.1833000000], [31.5788625000, -27.1717000000], [31.6278812500, -27.1601000000], [31.6769000000, -27.1485000000], [31.7579562500, -27.1292906250], [31.8390125000, -27.1100812500], [31.9200687500, -27.0908718750], [32.0011250000, -27.0716625000], [32.0821812500, -27.0524531250], [32.1632375000, -27.0332437500], [32.2442937500, -27.0140343750], [32.3253500000, -26.9948250000], [32.4064062500, -26.9756156250], [32.4874625000, -26.9564062500], [32.5685187500, -26.9371968750], [32.6495750000, -26.9179875000], [32.7306312500, -26.8987781250], [32.8116875000, -26.8795687500], [32.8927437500, -26.8603593750], [32.9738000000, -26.8411500000], [33.0548562500, -26.8219406250], [33.1359125000, -26.8027312500], [33.2169687500, -26.7835218750], [33.2980250000, -26.7643125000], [33.3790812500, -26.7451031250], [33.4601375000, -26.7258937500], [33.5411937500, -26.7066843750], [33.6222500000, -26.6874750000], [33.7033062500, -26.6682656250], [33.7843625000, -26.6490562500], [33.8654187500, -26.6298468750], [33.9464750000, -26.6106375000], [34.0275312500, -26.5914281250], [34.1085875000, -26.5722187500], [34.1896437500, -26.5530093750], [34.2707000000, -26.5338000000], [34.2760000000, -26.5323000000], [34.3471562500, -26.5100812500], [34.4183125000, -26.4878625000], [34.4894687500, -26.4656437500], [34.5606250000, -26.4434250000], [34.6317812500, -26.4212062500], [34.7029375000, -26.3989875000], [34.7740937500, -26.3767687500], [34.8452500000, -26.3545500000], [34.9164062500, -26.3323312500], [34.9875625000, -26.3101125000], [35.0587187500, -26.2878937500], [35.1298750000, -26.2656750000], [35.2010312500, -26.2434562500], [35.2721875000, -26.2212375000], [35.3433437500, -26.1990187500], [35.4145000000, -26.1768000000], [35.4837250000, -26.1552062500], [35.5529500000, -26.1336125000], [35.6221750000, -26.1120187500], [35.6914000000, -26.0904250000], [35.7606250000, -26.0688312500], [35.8298500000, -26.0472375000], [35.8990750000, -26.0256437500], [35.9683000000, -26.0040500000], [36.0375250000, -25.9824562500], [36.1067500000, -25.9608625000], [36.1759750000, -25.9392687500], [36.2452000000, -25.9176750000], [36.3144250000, -25.8960812500], [36.3836500000, -25.8744875000], [36.4528750000, -25.8528937500], [36.5221000000, -25.8313000000], [36.6129375000, -25.7985000000], [36.7037750000, -25.7657000000], [36.7946125000, -25.7329000000], [36.8854500000, -25.7001000000], [36.9762875000, -25.6673000000], [37.0671250000, -25.6345000000], [37.1579625000, -25.6017000000], [37.2488000000, -25.5689000000], [37.3211312500, -25.5428687500], [37.3934625000, -25.5168375000], [37.4657937500, -25.4908062500], [37.5381250000, -25.4647750000], [37.6104562500, -25.4387437500], [37.6827875000, -25.4127125000], [37.7551187500, -25.3866812500], [37.8274500000, -25.3606500000], [37.8997812500, -25.3346187500], [37.9721125000, -25.3085875000], [38.0444437500, -25.2825562500], [38.1167750000, -25.2565250000], [38.1891062500, -25.2304937500], [38.2614375000, -25.2044625000], [38.3337687500, -25.1784312500], [38.4061000000, -25.1524000000], [38.4197000000, -25.1471000000], [38.4681937500, -25.1260656250], [38.5166875000, -25.1050312500], [38.5651812500, -25.0839968750], [38.6136750000, -25.0629625000], [38.6621687500, -25.0419281250], [38.7106625000, -25.0208937500], [38.7591562500, -24.9998593750], [38.8076500000, -24.9788250000], [38.8561437500, -24.9577906250], [38.9046375000, -24.9367562500], [38.9531312500, -24.9157218750], [39.0016250000, -24.8946875000], [39.0501187500, -24.8736531250], [39.0986125000, -24.8526187500], [39.1471062500, -24.8315843750], [39.1956000000, -24.8105500000], [39.2440937500, -24.7895156250], [39.2925875000, -24.7684812500], [39.3410812500, -24.7474468750], [39.3895750000, -24.7264125000], [39.4380687500, -24.7053781250], [39.4865625000, -24.6843437500], [39.5350562500, -24.6633093750], [39.5835500000, -24.6422750000], [39.6320437500, -24.6212406250], [39.6805375000, -24.6002062500], [39.7290312500, -24.5791718750], [39.7775250000, -24.5581375000], [39.8260187500, -24.5371031250], [39.8745125000, -24.5160687500], [39.9230062500, -24.4950343750], [39.9715000000, -24.4740000000], [40.0280093750, -24.4504187500], [40.0845187500, -24.4268375000], [40.1410281250, -24.4032562500], [40.1975375000, -24.3796750000], [40.2540468750, -24.3560937500], [40.3105562500, -24.3325125000], [40.3670656250, -24.3089312500], [40.4235750000, -24.2853500000], [40.4800843750, -24.2617687500], [40.5365937500, -24.2381875000], [40.5931031250, -24.2146062500], [40.6496125000, -24.1910250000], [40.7061218750, -24.1674437500], [40.7626312500, -24.1438625000], [40.8191406250, -24.1202812500], [40.8756500000, -24.0967000000], [40.9321593750, -24.0731187500], [40.9886687500, -24.0495375000], [41.0451781250, -24.0259562500], [41.1016875000, -24.0023750000], [41.1581968750, -23.9787937500], [41.2147062500, -23.9552125000], [41.2712156250, -23.9316312500], [41.3277250000, -23.9080500000], [41.3842343750, -23.8844687500], [41.4407437500, -23.8608875000], [41.4972531250, -23.8373062500], [41.5537625000, -23.8137250000], [41.6102718750, -23.7901437500], [41.6667812500, -23.7665625000], [41.7232906250, -23.7429812500], [41.7798000000, -23.7194000000], [41.8659000000, -23.6790000000], [41.9520000000, -23.6386000000], [42.0250250000, -23.6020750000], [42.0980500000, -23.5655500000], [42.1710750000, -23.5290250000], [42.2441000000, -23.4925000000], [42.3171250000, -23.4559750000], [42.3901500000, -23.4194500000], [42.4631750000, -23.3829250000], [42.5362000000, -23.3464000000], [42.6085625000, -23.3113812500], [42.6809250000, -23.2763625000], [42.7532875000, -23.2413437500], [42.8256500000, -23.2063250000], [42.8980125000, -23.1713062500], [42.9703750000, -23.1362875000], [43.0427375000, -23.1012687500], [43.1151000000, -23.0662500000], [43.1874625000, -23.0312312500], [43.2598250000, -22.9962125000], [43.3321875000, -22.9611937500], [43.4045500000, -22.9261750000], [43.4769125000, -22.8911562500], [43.5492750000, -22.8561375000], [43.6216375000, -22.8211187500], [43.6940000000, -22.7861000000], [43.7402250000, -22.7610062500], [43.7864500000, -22.7359125000], [43.8326750000, -22.7108187500], [43.8789000000, -22.6857250000], [43.9251250000, -22.6606312500], [43.9713500000, -22.6355375000], [44.0175750000, -22.6104437500], [44.0638000000, -22.5853500000], [44.1100250000, -22.5602562500], [44.1562500000, -22.5351625000], [44.2024750000, -22.5100687500], [44.2487000000, -22.4849750000], [44.2949250000, -22.4598812500], [44.3411500000, -22.4347875000], [44.3873750000, -22.4096937500], [44.4336000000, -22.3846000000], [44.4962500000, -22.3509250000], [44.5589000000, -22.3172500000], [44.6215500000, -22.2835750000], [44.6842000000, -22.2499000000], [44.7468500000, -22.2162250000], [44.8095000000, -22.1825500000], [44.8721500000, -22.1488750000], [44.9348000000, -22.1152000000], [44.9974500000, -22.0815250000], [45.0601000000, -22.0478500000], [45.1227500000, -22.0141750000], [45.1854000000, -21.9805000000], [45.2480500000, -21.9468250000], [45.3107000000, -21.9131500000], [45.3733500000, -21.8794750000], [45.4360000000, -21.8458000000], [45.4863000000, -21.8173000000], [45.5401000000, -21.7837375000], [45.5939000000, -21.7501750000], [45.6477000000, -21.7166125000], [45.7015000000, -21.6830500000], [45.7553000000, -21.6494875000], [45.8091000000, -21.6159250000], [45.8629000000, -21.5823625000], [45.9167000000, -21.5488000000], [45.9705000000, -21.5152375000], [46.0243000000, -21.4816750000], [46.0781000000, -21.4481125000], [46.1319000000, -21.4145500000], [46.1857000000, -21.3809875000], [46.2395000000, -21.3474250000], [46.2933000000, -21.3138625000], [46.3471000000, -21.2803000000], [46.4009000000, -21.2467375000], [46.4547000000, -21.2131750000], [46.5085000000, -21.1796125000], [46.5623000000, -21.1460500000], [46.6161000000, -21.1124875000], [46.6699000000, -21.0789250000], [46.7237000000, -21.0453625000], [46.7775000000, -21.0118000000], [46.8313000000, -20.9782375000], [46.8851000000, -20.9446750000], [46.9389000000, -20.9111125000], [46.9927000000, -20.8775500000], [47.0465000000, -20.8439875000], [47.1003000000, -20.8104250000], [47.1541000000, -20.7768625000], [47.2079000000, -20.7433000000], [47.2648031250, -20.7080812500], [47.3217062500, -20.6728625000], [47.3786093750, -20.6376437500], [47.4355125000, -20.6024250000], [47.4924156250, -20.5672062500], [47.5493187500, -20.5319875000], [47.6062218750, -20.4967687500], [47.6631250000, -20.4615500000], [47.7200281250, -20.4263312500], [47.7769312500, -20.3911125000], [47.8338343750, -20.3558937500], [47.8907375000, -20.3206750000], [47.9476406250, -20.2854562500], [48.0045437500, -20.2502375000], [48.0614468750, -20.2150187500], [48.1183500000, -20.1798000000], [48.1752531250, -20.1445812500], [48.2321562500, -20.1093625000], [48.2890593750, -20.0741437500], [48.3459625000, -20.0389250000], [48.4028656250, -20.0037062500], [48.4597687500, -19.9684875000], [48.5166718750, -19.9332687500], [48.5735750000, -19.8980500000], [48.6304781250, -19.8628312500], [48.6873812500, -19.8276125000], [48.7442843750, -19.7923937500], [48.8011875000, -19.7571750000], [48.8580906250, -19.7219562500], [48.9149937500, -19.6867375000], [48.9718968750, -19.6515187500], [49.0288000000, -19.6163000000], [49.0344000000, -19.6125000000], [49.0899875000, -19.5734375000], [49.1455750000, -19.5343750000], [49.2011625000, -19.4953125000], [49.2567500000, -19.4562500000], [49.3123375000, -19.4171875000], [49.3679250000, -19.3781250000], [49.4235125000, -19.3390625000], [49.4791000000, -19.3000000000], [49.5231625000, -19.2689937500], [49.5672250000, -19.2379875000], [49.6112875000, -19.2069812500], [49.6553500000, -19.1759750000], [49.6994125000, -19.1449687500], [49.7434750000, -19.1139625000], [49.7875375000, -19.0829562500], [49.8316000000, -19.0519500000], [49.8756625000, -19.0209437500], [49.9197250000, -18.9899375000], [49.9637875000, -18.9589312500], [50.0078500000, -18.9279250000], [50.0519125000, -18.8969187500], [50.0959750000, -18.8659125000], [50.1400375000, -18.8349062500], [50.1841000000, -18.8039000000], [50.2459875000, -18.7564250000], [50.3078750000, -18.7089500000], [50.3697625000, -18.6614750000], [50.4316500000, -18.6140000000], [50.4935375000, -18.5665250000], [50.5554250000, -18.5190500000], [50.6173125000, -18.4715750000], [50.6792000000, -18.4241000000], [50.7410875000, -18.3766250000], [50.8029750000, -18.3291500000]]);
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
import math
import time

from stl import mesh, Dimension

from tkinter import Tk     # from tkinter import Tk for Python 3.x
from tkinter.filedialog import askopenfilename
from mpl_toolkits.mplot3d import art3d
from matplotlib import pyplot as plt
import solid
import os
import ezdxf
import shapely.geometry as sg
import subprocess
from GUI import getSCADPath



def outputSTL(From, To, PATH=getSCADPath()):
    subprocess.Popen(PATH + " -o " + To + " " + From)
    while not os.path.exists(To):
        time.sleep(1)

class Model:
    def __init__(self, model, fileName, location, layer, thickness):
        self.location = location
        self.code = None
        self.fileName = fileName
        self.stl = fileName + ".stl"
        self.layer = layer
        self.thickness = thickness
        self.maxz = (layer+1)*thickness
        self.dxf = fileName + ".dxf"
        self.scad = fileName + ".scad"
        self.model = model
        self.center = None
        self.width = 10
        self.mesh = None
        self.useable_area = None


    def get_code(self):
        max_dim = 0.05
        max_array = 6

        num = int(self.fileName)
        nums = [int(a) for a in str(num)]
        nums.reverse()
        indices = nums
        length = len(nums)

        print(indices)
        t = 0
        i = 0
        cubes = []
        x = 0
        y = 0
        width = 0.01
        while x <= max_dim:
            while y <= max_dim:
                print(indices)
                if nums == []:
                    break
                if indices[0] != 0:
                    cubes.append(solid.translate([x, y, 0])(solid.cube(size=t / 1000 + 0.001)))
                    y += max_dim / (max_array - 1)
                    nums[0] = nums[0] - 1
                else:
                    indices.pop(0)
                    t += 1
                i += 1
            x += max_dim / (max_array - 1)
            y = 0

        outside = solid.translate([-width / 2, -width / 2])(solid.cube(max_dim + (length - 1) / 1000 + 0.001 + width))
        self.code = solid.difference()(outside, cubes)
        self.code = solid.projection(cut=True)(self.code)
        solid.scad_render_to_file(self.code, self.location + "/code.scad")
        outputSTL(From=self.location+"/code.scad", To=self.location+"code.dxf", PATH=getSCADPath())
        # os.system("toSTL.sh renders/code.scad renders/code.dxf")
        return self.location+"/code.dxf"

    def download(self, type):
        if type =="stl":
            print("generating:" + self.location+"/"+ self.fileName+".stl")
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".stl")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".stl")
        elif type == "dxf":
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".dxf")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".dxf")

    def render(self):
        solid.scad_render_to_file(self.model, self.location+"/"+ self.fileName+'.scad')
        while not os.path.exists(self.location+"/"+self.fileName+".scad"):
            time.sleep(1)
        # outputSTL(From= self.location+"/"+ self.fileName+'.scad', To=self.location+"/"+ self.fileName+'.stl')

    def get_points(self):
        doc = ezdxf.readfile(filename=self.location+"/"+ self.fileName+".dxf")
        msp = doc.modelspace()
        i=0
        lists = []
        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return [start, end]

        for e in msp.query("LINE"):
            line = helper(e)
            if not lists:
                lists.append([line])
            else:
                if lists[i][len(lists)-1][1] != line[0]:
                    lists.append([line])
                    i+=1
                else:
                    lists[i].append(line)

    def get_points2(self, FILE):
        doc = ezdxf.readfile(filename=FILE)
        msp = doc.modelspace()
        i = 0
        lists = []

        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return (start, end)

        for e in msp.query("LINE"):
            line = helper(e)
            if lists==[]:
                lists.append([line])
            else:
                if lists[i][len(lists[i]) - 1][1] != line[0]:
                    lists.append([line])
                    i += 1
                else:
                    lists[i].append(line)
        return lists

    def add_code(self):
        dxf = solid.projection(cut=False)(self.model)
        offset = solid.offset(r=-0.1)(dxf)
        solid.scad_render_to_file(offset, self.location+'/offset.scad')
        os.system("toSTL.sh renders/offset.scad renders/offset.dxf")
        lines = self.get_points2("renders/offset.dxf")
        x = lines[0][0][0][0]
        y = lines[0][0][0][1]
        print(x)
        print(y)
        code = solid.translate([x,y,0])(self.code)
        code = solid.linear_extrude(height=999)(code)
        save = self.model
        self.model = solid.projection()(solid.difference()(self.model, code))
        self.render()
        self.download("dxf")
        self.model = save

    def add_label(self, pos):
        # num = 12
        # minx, maxx, miny, maxy, minz, maxz = self.find_minmax()
        maxz = self.maxz
        # label = solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.5, halign="center"))
        # i=minx
        # print("x-len: " + str(maxx-minx))
        # print(i)
        # inc = (maxx-minx)/num
        # while minx <= i <= maxx:
        #     label = solid.union()(solid.translate([i, 0, maxz - 0.2])(solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.25, halign="center"))), label)
        #     i += inc
        #
        # l = label
        #
        # i =miny
        # while miny<= i <= maxy:
        #     print("y inc")
        #     l = solid.union()(solid.translate([0, i, 0])(label), l)
        #     i += 0.5
        for i in str(self.fileName):
            cur = pos[0]
            label = solid.translate([pos[0][0], pos[0][1], self.maxz-0.2])(solid.linear_extrude(height=(self.thickness)/3)(solid.text(str(i), size=0.5, halign="center", valign="center")))
            self.model = solid.difference()(self.model, label)
            pos.append(pos.pop(0))
            while abs(cur[0]-pos[0][0])<0.5 and abs(cur[1]-pos[0][1])<0.5:
                pos.append(pos.pop(0))



    def Center(self):

        volume, cog, inertia = self.mesh.get_mass_properties()
        print("Volume                                  = {0}".format(volume))
        print("Position of the center of gravity (COG) = {0}".format(cog))
        m_centered = solid.translate([-cog[0], -cog[1], 0])(
            self.model
        )
        return m_centered

    def find_minmax(self):
        minx = maxx = miny = maxy = minz = maxz = None
        for p in self.mesh.points:
            # p contains (x, y, z)
            if minx is None:
                minx = p[Dimension.X]
                maxx = p[Dimension.X]
                miny = p[Dimension.Y]
                maxy = p[Dimension.Y]
                minz = p[Dimension.Z]
                maxz = p[Dimension.Z]
            else:
                maxx = max(p[Dimension.X], maxx)
                minx = min(p[Dimension.X], minx)
                maxy = max(p[Dimension.Y], maxy)
                miny = min(p[Dimension.Y], miny)
                maxz = max(p[Dimension.Z], maxz)
                minz = min(p[Dimension.Z], minz)
        lenx = maxx - minx
        leny = maxy - miny
        lenz = maxz - minz
        return minx, maxx, miny, maxy, minz, maxz

    # def generate_Mesh(self):
    #     self.mesh = mesh.Mesh.from_file(self.location + "/" + str(int(self.fileName)//8)+ "b.stl")

    def get_top(self):
        top = solid.projection(cut=True)(solid.translate([0,0,-1*self.thickness*(self.layer+1)])(self.model))
        useable_area = solid.offset(r=-0.45)(top)
        self.useable_area = useable_area
        solid.scad_render_to_file(self.useable_area, self.location+'/' + 'toptemp.scad')
        outputSTL(From=self.location+'/' + 'toptemp.scad', To=self.location+"/top"+ self.dxf)

        # os.system("toSTL.sh out/toptemp.scad renders/" + self.fileName + ".dxf")
        dxf = DXF(self.location+"/top"+ self.dxf)
        min_p=dxf.points[0][0]
        points_ordered = dxf.points
        i=0
        while i <= len(dxf.points)+1:
            while math.sqrt((dxf.points[0][0]-dxf.points[1][0])**2+(dxf.points[0][1]-dxf.points[1][1])**2) > 0.1:
                dxf.points.insert(1, [(dxf.points[0][0]+dxf.points[1][0])/2, (dxf.points[0][1]+dxf.points[1][1])/2])
                i = i-1
            dxf.points.append(dxf.points.pop(0))
            i+=1
        for i in range(len(dxf.points)):
            dxf.points.append(dxf.points.pop(0))
            if dxf.points[0][0] < min_p:
                min_p = dxf.points[0][0]
                points_ordered = dxf.points.copy()
        dxf.points = points_ordered.copy()

        print(dxf.points)
        self.add_label(dxf.points)

class DXF:
    def __init__(self, file):
        self.file = file
        self.Lines = []
        self.points = []
        doc = ezdxf.readfile(self.file)
        msp = doc.modelspace()
        for e in msp:
            if e.dxftype() == "LINE":
                self.Lines.append(e)
                self.points.append([e.dxf.start[0], e.dxf.start[1]])
        # self.points.append([self.Lines[-1].dxf.end[0], self.Lines[-1].dxf.end[1]])
        self.area = None
        self.center = None
        self.polygon = sg.Polygon(self.points)

    def get_area(self):
        self.area = self.polygon.area
        return self.area

    def get_center(self):
        x_sum = 0
        y_sum =0
        for i in self.points:
            x_sum += i[0]
            y_sum += i[1]
        x_c = x_sum/len(self.points)
        y_c = y_sum/len(self.points)
        return (x_c, y_c)

    def split(self, maxdim):
        splits = []
        length = 0
        pieces = [[]]
        prev = self.points[-1]
        pieces[-1].append(prev)
        for j in self.points:
            length = length + math.sqrt((prev[0]-j[0])**2+(prev[1]-j[1])**2)
            if length >= maxdim:
                pieces[-1].append(j)
                pieces.append([])
                length = 0
            pieces[-1].append(j)
            prev = j
        for j in pieces:
            j.insert(0, [0,0])
            piece = solid.linear_extrude(height=10)(solid.polygon(j))
            splits.append(piece)
        return splits
    def refine_points(self):
        i=0
        while i <= len(self.points)+1:
            while math.sqrt((self.points[0][0]-self.points[1][0])**2+(self.points[0][1]-self.points[1][1])**2) > 0.1:
                self.points.insert(1, [(self.points[0][0]+self.points[1][0])/2, (self.points[0][1]+self.points[1][1])/2])
                i = i-1
            self.points.append(self.points.pop(0))
            i+=1


if __name__== "__main__":
    test = DXF("C:/Users/Daniel/Documents/repos/Shell_Maker/output/0top_slice.dxf")
    test.refine_points()
    k = test.split(48)
    for i in range(len(k)):
        solid.scad_render_to_file(k[i], str(i) + ".scad")


 
 
************************************************/
