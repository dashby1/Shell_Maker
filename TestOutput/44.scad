// Generated by SolidPython 1.1.3 on 2024-05-26 02:00:47


intersection() {
	difference() {
		intersection() {
			translate(v = [0, 0, 0]) {
				import(file = "CE3E3V2_Bottom_shell.stl", origin = [0, 0]);
			}
			translate(v = [-90.04029846191406, -32.690147399902344, 10]) {
				cube(size = [180.0806, 65.380295, 2]);
			}
		}
		linear_extrude(height = 999) {
			offset(r = -1) {
				import(file = "C:/Users/Daniel/Documents/repos/Shell_Maker/TestOutput/5top_slice.dxf", origin = [0, 0]);
			}
		}
	}
	translate(v = [0, 0, 10]) {
		linear_extrude(height = 10) {
			polygon(points = [[0, 0], [-44.7332125000, 15.9610218750], [-44.8282250000, 15.9332937500], [-44.9232375000, 15.9055656250], [-45.0182500000, 15.8778375000], [-45.1132625000, 15.8501093750], [-45.2082750000, 15.8223812500], [-45.3032875000, 15.7946531250], [-45.3983000000, 15.7669250000], [-45.4933125000, 15.7391968750], [-45.5883250000, 15.7114687500], [-45.6833375000, 15.6837406250], [-45.7783500000, 15.6560125000], [-45.8733625000, 15.6282843750], [-45.9683750000, 15.6005562500], [-46.0633875000, 15.5728281250], [-46.1584000000, 15.5451000000], [-46.2116000000, 15.5291000000], [-46.2766640625, 15.5088171875], [-46.3417281250, 15.4885343750], [-46.4067921875, 15.4682515625], [-46.4718562500, 15.4479687500], [-46.5369203125, 15.4276859375], [-46.6019843750, 15.4074031250], [-46.6670484375, 15.3871203125], [-46.7321125000, 15.3668375000], [-46.7971765625, 15.3465546875], [-46.8622406250, 15.3262718750], [-46.9273046875, 15.3059890625], [-46.9923687500, 15.2857062500], [-47.0574328125, 15.2654234375], [-47.1224968750, 15.2451406250], [-47.1875609375, 15.2248578125], [-47.2526250000, 15.2045750000], [-47.3176890625, 15.1842921875], [-47.3827531250, 15.1640093750], [-47.4478171875, 15.1437265625], [-47.5128812500, 15.1234437500], [-47.5779453125, 15.1031609375], [-47.6430093750, 15.0828781250], [-47.7080734375, 15.0625953125], [-47.7731375000, 15.0423125000], [-47.8382015625, 15.0220296875], [-47.9032656250, 15.0017468750], [-47.9683296875, 14.9814640625], [-48.0333937500, 14.9611812500], [-48.0984578125, 14.9408984375], [-48.1635218750, 14.9206156250], [-48.2285859375, 14.9003328125], [-48.2936500000, 14.8800500000], [-48.3587140625, 14.8597671875], [-48.4237781250, 14.8394843750], [-48.4888421875, 14.8192015625], [-48.5539062500, 14.7989187500], [-48.6189703125, 14.7786359375], [-48.6840343750, 14.7583531250], [-48.7490984375, 14.7380703125], [-48.8141625000, 14.7177875000], [-48.8792265625, 14.6975046875], [-48.9442906250, 14.6772218750], [-49.0093546875, 14.6569390625], [-49.0744187500, 14.6366562500], [-49.1394828125, 14.6163734375], [-49.2045468750, 14.5960906250], [-49.2696109375, 14.5758078125], [-49.3346750000, 14.5555250000], [-49.3997390625, 14.5352421875], [-49.4648031250, 14.5149593750], [-49.5298671875, 14.4946765625], [-49.5949312500, 14.4743937500], [-49.6599953125, 14.4541109375], [-49.7250593750, 14.4338281250], [-49.7901234375, 14.4135453125], [-49.8551875000, 14.3932625000], [-49.9202515625, 14.3729796875], [-49.9853156250, 14.3526968750], [-50.0503796875, 14.3324140625], [-50.1154437500, 14.3121312500], [-50.1805078125, 14.2918484375], [-50.2455718750, 14.2715656250], [-50.3106359375, 14.2512828125], [-50.3757000000, 14.2310000000], [-50.4269281250, 14.2149953125], [-50.4781562500, 14.1989906250], [-50.5293843750, 14.1829859375], [-50.5806125000, 14.1669812500], [-50.6318406250, 14.1509765625], [-50.6830687500, 14.1349718750], [-50.7342968750, 14.1189671875], [-50.7855250000, 14.1029625000], [-50.8367531250, 14.0869578125], [-50.8879812500, 14.0709531250], [-50.9392093750, 14.0549484375], [-50.9904375000, 14.0389437500], [-51.0416656250, 14.0229390625], [-51.0928937500, 14.0069343750], [-51.1441218750, 13.9909296875], [-51.1953500000, 13.9749250000], [-51.2465781250, 13.9589203125], [-51.2978062500, 13.9429156250], [-51.3490343750, 13.9269109375], [-51.4002625000, 13.9109062500], [-51.4514906250, 13.8949015625], [-51.5027187500, 13.8788968750], [-51.5539468750, 13.8628921875], [-51.6051750000, 13.8468875000], [-51.6564031250, 13.8308828125], [-51.7076312500, 13.8148781250], [-51.7588593750, 13.7988734375], [-51.8100875000, 13.7828687500], [-51.8613156250, 13.7668640625], [-51.9125437500, 13.7508593750], [-51.9637718750, 13.7348546875], [-52.0150000000, 13.7188500000], [-52.0662281250, 13.7028453125], [-52.1174562500, 13.6868406250], [-52.1686843750, 13.6708359375], [-52.2199125000, 13.6548312500], [-52.2711406250, 13.6388265625], [-52.3223687500, 13.6228218750], [-52.3735968750, 13.6068171875], [-52.4248250000, 13.5908125000], [-52.4760531250, 13.5748078125], [-52.5272812500, 13.5588031250], [-52.5785093750, 13.5427984375], [-52.6297375000, 13.5267937500], [-52.6809656250, 13.5107890625], [-52.7321937500, 13.4947843750], [-52.7834218750, 13.4787796875], [-52.8346500000, 13.4627750000], [-52.8858781250, 13.4467703125], [-52.9371062500, 13.4307656250], [-52.9883343750, 13.4147609375], [-53.0395625000, 13.3987562500], [-53.0907906250, 13.3827515625], [-53.1420187500, 13.3667468750], [-53.1932468750, 13.3507421875], [-53.2444750000, 13.3347375000], [-53.2957031250, 13.3187328125], [-53.3469312500, 13.3027281250], [-53.3981593750, 13.2867234375], [-53.4493875000, 13.2707187500], [-53.5006156250, 13.2547140625], [-53.5518437500, 13.2387093750], [-53.6030718750, 13.2227046875], [-53.6543000000, 13.2067000000], [-53.7113000000, 13.1879250000], [-53.7683000000, 13.1691500000], [-53.8253000000, 13.1503750000], [-53.8823000000, 13.1316000000], [-53.9393000000, 13.1128250000], [-53.9963000000, 13.0940500000], [-54.0533000000, 13.0752750000], [-54.1103000000, 13.0565000000], [-54.1673000000, 13.0377250000], [-54.2243000000, 13.0189500000], [-54.2813000000, 13.0001750000], [-54.3383000000, 12.9814000000], [-54.3953000000, 12.9626250000], [-54.4523000000, 12.9438500000], [-54.5093000000, 12.9250750000], [-54.5663000000, 12.9063000000], [-54.6233000000, 12.8875250000], [-54.6803000000, 12.8687500000], [-54.7373000000, 12.8499750000], [-54.7943000000, 12.8312000000], [-54.8513000000, 12.8124250000], [-54.9083000000, 12.7936500000], [-54.9653000000, 12.7748750000], [-55.0223000000, 12.7561000000], [-55.0793000000, 12.7373250000], [-55.1363000000, 12.7185500000], [-55.1933000000, 12.6997750000], [-55.2503000000, 12.6810000000], [-55.3073000000, 12.6622250000], [-55.3643000000, 12.6434500000], [-55.4213000000, 12.6246750000], [-55.4783000000, 12.6059000000], [-55.5520562500, 12.5814750000], [-55.6258125000, 12.5570500000], [-55.6995687500, 12.5326250000], [-55.7733250000, 12.5082000000], [-55.8470812500, 12.4837750000], [-55.9208375000, 12.4593500000], [-55.9945937500, 12.4349250000], [-56.0683500000, 12.4105000000], [-56.1421062500, 12.3860750000], [-56.2158625000, 12.3616500000], [-56.2896187500, 12.3372250000], [-56.3633750000, 12.3128000000], [-56.4371312500, 12.2883750000], [-56.5108875000, 12.2639500000], [-56.5846437500, 12.2395250000], [-56.6584000000, 12.2151000000], [-56.7223000000, 12.1936000000], [-56.7862000000, 12.1721000000], [-56.8732546875, 12.1413812500], [-56.9603093750, 12.1106625000], [-57.0473640625, 12.0799437500], [-57.1344187500, 12.0492250000], [-57.2214734375, 12.0185062500], [-57.3085281250, 11.9877875000], [-57.3955828125, 11.9570687500], [-57.4826375000, 11.9263500000], [-57.5696921875, 11.8956312500], [-57.6567468750, 11.8649125000], [-57.7438015625, 11.8341937500], [-57.8308562500, 11.8034750000], [-57.9179109375, 11.7727562500], [-58.0049656250, 11.7420375000], [-58.0920203125, 11.7113187500], [-58.1790750000, 11.6806000000], [-58.2661296875, 11.6498812500], [-58.3531843750, 11.6191625000], [-58.4402390625, 11.5884437500], [-58.5272937500, 11.5577250000], [-58.6143484375, 11.5270062500], [-58.7014031250, 11.4962875000], [-58.7884578125, 11.4655687500], [-58.8755125000, 11.4348500000], [-58.9625671875, 11.4041312500], [-59.0496218750, 11.3734125000], [-59.1366765625, 11.3426937500], [-59.2237312500, 11.3119750000], [-59.3107859375, 11.2812562500], [-59.3978406250, 11.2505375000], [-59.4848953125, 11.2198187500], [-59.5719500000, 11.1891000000], [-59.6590046875, 11.1583812500], [-59.7460593750, 11.1276625000], [-59.8331140625, 11.0969437500], [-59.9201687500, 11.0662250000], [-60.0072234375, 11.0355062500], [-60.0942781250, 11.0047875000], [-60.1813328125, 10.9740687500], [-60.2683875000, 10.9433500000], [-60.3554421875, 10.9126312500], [-60.4424968750, 10.8819125000], [-60.5295515625, 10.8511937500], [-60.6166062500, 10.8204750000], [-60.7036609375, 10.7897562500], [-60.7907156250, 10.7590375000], [-60.8777703125, 10.7283187500], [-60.9648250000, 10.6976000000], [-61.0518796875, 10.6668812500], [-61.1389343750, 10.6361625000], [-61.2259890625, 10.6054437500], [-61.3130437500, 10.5747250000], [-61.4000984375, 10.5440062500], [-61.4871531250, 10.5132875000], [-61.5742078125, 10.4825687500], [-61.6612625000, 10.4518500000], [-61.7483171875, 10.4211312500], [-61.8353718750, 10.3904125000], [-61.9224265625, 10.3596937500], [-62.0094812500, 10.3289750000], [-62.0965359375, 10.2982562500], [-62.1835906250, 10.2675375000], [-62.2706453125, 10.2368187500], [-62.3577000000, 10.2061000000], [-62.4297750000, 10.1805281250], [-62.5018500000, 10.1549562500], [-62.5739250000, 10.1293843750], [-62.6460000000, 10.1038125000], [-62.7180750000, 10.0782406250], [-62.7901500000, 10.0526687500], [-62.8622250000, 10.0270968750], [-62.9343000000, 10.0015250000], [-63.0063750000, 9.9759531250], [-63.0784500000, 9.9503812500], [-63.1505250000, 9.9248093750], [-63.2226000000, 9.8992375000], [-63.2946750000, 9.8736656250], [-63.3667500000, 9.8480937500], [-63.4388250000, 9.8225218750], [-63.5109000000, 9.7969500000], [-63.5631125000, 9.7782804688], [-63.6153250000, 9.7596109375], [-63.6675375000, 9.7409414063], [-63.7197500000, 9.7222718750], [-63.7719625000, 9.7036023438], [-63.8241750000, 9.6849328125], [-63.8763875000, 9.6662632813], [-63.9286000000, 9.6475937500], [-63.9808125000, 9.6289242188], [-64.0330250000, 9.6102546875], [-64.0852375000, 9.5915851563], [-64.1374500000, 9.5729156250], [-64.1896625000, 9.5542460938], [-64.2418750000, 9.5355765625], [-64.2940875000, 9.5169070313], [-64.3463000000, 9.4982375000], [-64.3985125000, 9.4795679688], [-64.4507250000, 9.4608984375], [-64.5029375000, 9.4422289063], [-64.5551500000, 9.4235593750], [-64.6073625000, 9.4048898438], [-64.6595750000, 9.3862203125], [-64.7117875000, 9.3675507813], [-64.7640000000, 9.3488812500], [-64.8162125000, 9.3302117188], [-64.8684250000, 9.3115421875], [-64.9206375000, 9.2928726563], [-64.9728500000, 9.2742031250], [-65.0250625000, 9.2555335938], [-65.0772750000, 9.2368640625], [-65.1294875000, 9.2181945313], [-65.1817000000, 9.1995250000], [-65.2339125000, 9.1808554688], [-65.2861250000, 9.1621859375], [-65.3383375000, 9.1435164063], [-65.3905500000, 9.1248468750], [-65.4427625000, 9.1061773438], [-65.4949750000, 9.0875078125], [-65.5471875000, 9.0688382813], [-65.5994000000, 9.0501687500], [-65.6516125000, 9.0314992188], [-65.7038250000, 9.0128296875], [-65.7560375000, 8.9941601563], [-65.8082500000, 8.9754906250], [-65.8604625000, 8.9568210938], [-65.9126750000, 8.9381515625], [-65.9648875000, 8.9194820313], [-66.0171000000, 8.9008125000], [-66.0693125000, 8.8821429688], [-66.1215250000, 8.8634734375], [-66.1737375000, 8.8448039063], [-66.2259500000, 8.8261343750], [-66.2781625000, 8.8074648438], [-66.3303750000, 8.7887953125], [-66.3825875000, 8.7701257812], [-66.4348000000, 8.7514562500], [-66.4870125000, 8.7327867188], [-66.5392250000, 8.7141171875], [-66.5914375000, 8.6954476562], [-66.6436500000, 8.6767781250], [-66.6958625000, 8.6581085938], [-66.7480750000, 8.6394390625], [-66.8002875000, 8.6207695312], [-66.8525000000, 8.6021000000], [-66.9443000000, 8.5676500000], [-67.0361000000, 8.5332000000], [-67.1196718750, 8.5012618750], [-67.2032437500, 8.4693237500], [-67.2868156250, 8.4373856250], [-67.3703875000, 8.4054475000], [-67.4539593750, 8.3735093750], [-67.5375312500, 8.3415712500], [-67.6211031250, 8.3096331250], [-67.7046750000, 8.2776950000], [-67.7882468750, 8.2457568750], [-67.8718187500, 8.2138187500], [-67.9553906250, 8.1818806250], [-68.0389625000, 8.1499425000], [-68.1225343750, 8.1180043750], [-68.2061062500, 8.0860662500], [-68.2896781250, 8.0541281250], [-68.3732500000, 8.0221900000], [-68.4568218750, 7.9902518750], [-68.5403937500, 7.9583137500], [-68.6239656250, 7.9263756250], [-68.7075375000, 7.8944375000], [-68.7911093750, 7.8624993750], [-68.8746812500, 7.8305612500], [-68.9582531250, 7.7986231250], [-69.0418250000, 7.7666850000], [-69.1253968750, 7.7347468750], [-69.2089687500, 7.7028087500], [-69.2925406250, 7.6708706250], [-69.3761125000, 7.6389325000], [-69.4596843750, 7.6069943750], [-69.5432562500, 7.5750562500], [-69.6268281250, 7.5431181250], [-69.7104000000, 7.5111800000], [-69.7779250000, 7.4854575000], [-69.8454500000, 7.4597350000], [-69.9129750000, 7.4340125000], [-69.9805000000, 7.4082900000], [-70.0480250000, 7.3825675000], [-70.1155500000, 7.3568450000], [-70.1830750000, 7.3311225000], [-70.2506000000, 7.3054000000], [-70.3067375000, 7.2836306250], [-70.3628750000, 7.2618612500], [-70.4190125000, 7.2400918750], [-70.4751500000, 7.2183225000], [-70.5312875000, 7.1965531250], [-70.5874250000, 7.1747837500], [-70.6435625000, 7.1530143750], [-70.6997000000, 7.1312450000], [-70.7558375000, 7.1094756250], [-70.8119750000, 7.0877062500], [-70.8681125000, 7.0659368750], [-70.9242500000, 7.0441675000], [-70.9803875000, 7.0223981250], [-71.0365250000, 7.0006287500], [-71.0926625000, 6.9788593750], [-71.1488000000, 6.9570900000], [-71.2139312500, 6.9313325000], [-71.2790625000, 6.9055750000], [-71.3441937500, 6.8798175000], [-71.4093250000, 6.8540600000], [-71.4744562500, 6.8283025000], [-71.5395875000, 6.8025450000], [-71.6047187500, 6.7767875000], [-71.6698500000, 6.7510300000], [-71.7349812500, 6.7252725000], [-71.8001125000, 6.6995150000], [-71.8652437500, 6.6737575000], [-71.9303750000, 6.6480000000], [-71.9955062500, 6.6222425000], [-72.0606375000, 6.5964850000], [-72.1257687500, 6.5707275000], [-72.1909000000, 6.5449700000], [-72.2622187500, 6.5158118750], [-72.3335375000, 6.4866537500], [-72.4048562500, 6.4574956250], [-72.4761750000, 6.4283375000], [-72.5474937500, 6.3991793750], [-72.6188125000, 6.3700212500], [-72.6901312500, 6.3408631250], [-72.7614500000, 6.3117050000], [-72.8327687500, 6.2825468750], [-72.9040875000, 6.2533887500], [-72.9754062500, 6.2242306250], [-73.0467250000, 6.1950725000], [-73.1180437500, 6.1659143750], [-73.1893625000, 6.1367562500], [-73.2606812500, 6.1075981250], [-73.3320000000, 6.0784400000], [-73.4033187500, 6.0492818750], [-73.4746375000, 6.0201237500], [-73.5459562500, 5.9909656250], [-73.6172750000, 5.9618075000], [-73.6885937500, 5.9326493750], [-73.7599125000, 5.9034912500], [-73.8312312500, 5.8743331250], [-73.9025500000, 5.8451750000], [-73.9738687500, 5.8160168750], [-74.0451875000, 5.7868587500], [-74.1165062500, 5.7577006250], [-74.1878250000, 5.7285425000], [-74.2591437500, 5.6993843750], [-74.3304625000, 5.6702262500], [-74.4017812500, 5.6410681250], [-74.4731000000, 5.6119100000], [-74.5637375000, 5.5745387500], [-74.6543750000, 5.5371675000], [-74.7450125000, 5.4997962500], [-74.8356500000, 5.4624250000], [-74.9262875000, 5.4250537500], [-75.0169250000, 5.3876825000], [-75.1075625000, 5.3503112500], [-75.1982000000, 5.3129400000], [-75.2810687500, 5.2780996875], [-75.3639375000, 5.2432593750], [-75.4468062500, 5.2084190625], [-75.5296750000, 5.1735787500], [-75.6125437500, 5.1387384375], [-75.6954125000, 5.1038981250], [-75.7782812500, 5.0690578125], [-75.8611500000, 5.0342175000], [-75.9440187500, 4.9993771875], [-76.0268875000, 4.9645368750], [-76.1097562500, 4.9296965625], [-76.1926250000, 4.8948562500], [-76.2754937500, 4.8600159375], [-76.3583625000, 4.8251756250], [-76.4412312500, 4.7903353125], [-76.5241000000, 4.7554950000], [-76.6069687500, 4.7206546875], [-76.6898375000, 4.6858143750], [-76.7727062500, 4.6509740625], [-76.8555750000, 4.6161337500], [-76.9384437500, 4.5812934375], [-77.0213125000, 4.5464531250], [-77.1041812500, 4.5116128125], [-77.1870500000, 4.4767725000], [-77.2699187500, 4.4419321875], [-77.3527875000, 4.4070918750], [-77.4356562500, 4.3722515625], [-77.5185250000, 4.3374112500], [-77.6013937500, 4.3025709375], [-77.6842625000, 4.2677306250], [-77.7671312500, 4.2328903125], [-77.8500000000, 4.1980500000], [-77.9328687500, 4.1632096875], [-78.0157375000, 4.1283693750], [-78.0986062500, 4.0935290625], [-78.1814750000, 4.0586887500], [-78.2643437500, 4.0238484375], [-78.3472125000, 3.9890081250], [-78.4300812500, 3.9541678125], [-78.5129500000, 3.9193275000], [-78.5958187500, 3.8844871875], [-78.6786875000, 3.8496468750], [-78.7615562500, 3.8148065625], [-78.8444250000, 3.7799662500], [-78.9272937500, 3.7451259375], [-79.0101625000, 3.7102856250], [-79.0930312500, 3.6754453125], [-79.1759000000, 3.6406050000], [-79.2587687500, 3.6057646875], [-79.3416375000, 3.5709243750], [-79.4245062500, 3.5360840625], [-79.5073750000, 3.5012437500], [-79.5902437500, 3.4664034375], [-79.6731125000, 3.4315631250], [-79.7559812500, 3.3967228125], [-79.8388500000, 3.3618825000], [-79.9217187500, 3.3270421875], [-80.0045875000, 3.2922018750], [-80.0874562500, 3.2573615625], [-80.1703250000, 3.2225212500], [-80.2531937500, 3.1876809375], [-80.3360625000, 3.1528406250], [-80.4189312500, 3.1180003125], [-80.5018000000, 3.0831600000], [-80.5533750000, 3.0607387500], [-80.6049500000, 3.0383175000], [-80.6565250000, 3.0158962500], [-80.7081000000, 2.9934750000], [-80.7596750000, 2.9710537500], [-80.8112500000, 2.9486325000], [-80.8628250000, 2.9262112500], [-80.9144000000, 2.9037900000], [-80.9752203125, 2.8759125000], [-81.0360406250, 2.8480350000], [-81.0968609375, 2.8201575000], [-81.1576812500, 2.7922800000], [-81.2185015625, 2.7644025000], [-81.2793218750, 2.7365250000], [-81.3401421875, 2.7086475000], [-81.4009625000, 2.6807700000], [-81.4617828125, 2.6528925000], [-81.5226031250, 2.6250150000], [-81.5834234375, 2.5971375000], [-81.6442437500, 2.5692600000], [-81.7050640625, 2.5413825000], [-81.7658843750, 2.5135050000], [-81.8267046875, 2.4856275000], [-81.8875250000, 2.4577500000], [-81.9483453125, 2.4298725000], [-82.0091656250, 2.4019950000], [-82.0699859375, 2.3741175000], [-82.1308062500, 2.3462400000], [-82.1916265625, 2.3183625000], [-82.2524468750, 2.2904850000], [-82.3132671875, 2.2626075000], [-82.3740875000, 2.2347300000], [-82.4349078125, 2.2068525000], [-82.4957281250, 2.1789750000], [-82.5565484375, 2.1510975000], [-82.6173687500, 2.1232200000], [-82.6781890625, 2.0953425000], [-82.7390093750, 2.0674650000], [-82.7998296875, 2.0395875000], [-82.8606500000, 2.0117100000], [-82.9214703125, 1.9838325000], [-82.9822906250, 1.9559550000], [-83.0431109375, 1.9280775000], [-83.1039312500, 1.9002000000], [-83.1647515625, 1.8723225000], [-83.2255718750, 1.8444450000], [-83.2863921875, 1.8165675000], [-83.3472125000, 1.7886900000], [-83.4080328125, 1.7608125000], [-83.4688531250, 1.7329350000], [-83.5296734375, 1.7050575000], [-83.5904937500, 1.6771800000], [-83.6513140625, 1.6493025000], [-83.7121343750, 1.6214250000], [-83.7729546875, 1.5935475000], [-83.8337750000, 1.5656700000], [-83.8945953125, 1.5377925000], [-83.9554156250, 1.5099150000], [-84.0162359375, 1.4820375000], [-84.0770562500, 1.4541600000], [-84.1378765625, 1.4262825000], [-84.1986968750, 1.3984050000], [-84.2595171875, 1.3705275000], [-84.3203375000, 1.3426500000], [-84.3811578125, 1.3147725000], [-84.4419781250, 1.2868950000], [-84.5027984375, 1.2590175000], [-84.5636187500, 1.2311400000], [-84.6244390625, 1.2032625000], [-84.6852593750, 1.1753850000], [-84.7460796875, 1.1475075000], [-84.8069000000, 1.1196300000], [-84.8929312500, 1.0809613437], [-84.9789625000, 1.0422926875], [-85.0649937500, 1.0036240312], [-85.1510250000, 0.9649553750], [-85.2370562500, 0.9262867187], [-85.3230875000, 0.8876180625], [-85.4091187500, 0.8489494063], [-85.4951500000, 0.8102807500], [-85.5811812500, 0.7716120937], [-85.6672125000, 0.7329434375], [-85.7532437500, 0.6942747813], [-85.8392750000, 0.6556061250], [-85.9253062500, 0.6169374687], [-86.0113375000, 0.5782688125], [-86.0973687500, 0.5396001562], [-86.1834000000, 0.5009315000], [-86.2694312500, 0.4622628437], [-86.3554625000, 0.4235941875], [-86.4414937500, 0.3849255312], [-86.5275250000, 0.3462568750], [-86.6135562500, 0.3075882187], [-86.6995875000, 0.2689195625], [-86.7856187500, 0.2302509062], [-86.8716500000, 0.1915822500], [-86.9576812500, 0.1529135937], [-87.0437125000, 0.1142449375], [-87.1297437500, 0.0755762812], [-87.2157750000, 0.0369076250], [-87.3018062500, -0.0017610313], [-87.3878375000, -0.0404296875], [-87.4738687500, -0.0790983437], [-87.5599000000, -0.1177670000], [-87.5090718750, -0.1409012656], [-87.4582437500, -0.1640355313], [-87.4074156250, -0.1871697969], [-87.3565875000, -0.2103040625], [-87.3057593750, -0.2334383281], [-87.2549312500, -0.2565725937], [-87.2041031250, -0.2797068594], [-87.1532750000, -0.3028411250], [-87.1024468750, -0.3259753906], [-87.0516187500, -0.3491096563], [-87.0007906250, -0.3722439219], [-86.9499625000, -0.3953781875], [-86.8991343750, -0.4185124531], [-86.8483062500, -0.4416467187], [-86.7974781250, -0.4647809844], [-86.7466500000, -0.4879152500], [-86.6958218750, -0.5110495156], [-86.6449937500, -0.5341837812], [-86.5941656250, -0.5573180469], [-86.5433375000, -0.5804523125], [-86.4925093750, -0.6035865781], [-86.4416812500, -0.6267208438], [-86.3908531250, -0.6498551094], [-86.3400250000, -0.6729893750], [-86.2891968750, -0.6961236406], [-86.2383687500, -0.7192579062], [-86.1875406250, -0.7423921719], [-86.1367125000, -0.7655264375], [-86.0858843750, -0.7886607031], [-86.0350562500, -0.8117949687], [-85.9842281250, -0.8349292344], [-85.9334000000, -0.8580635000], [-85.8825718750, -0.8811977656], [-85.8317437500, -0.9043320313], [-85.7809156250, -0.9274662969], [-85.7300875000, -0.9506005625], [-85.6792593750, -0.9737348281], [-85.6284312500, -0.9968690937], [-85.5776031250, -1.0200033594], [-85.5267750000, -1.0431376250]]);
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
import math
import time

from stl import mesh, Dimension

from tkinter import Tk     # from tkinter import Tk for Python 3.x
from tkinter.filedialog import askopenfilename
from mpl_toolkits.mplot3d import art3d
from matplotlib import pyplot as plt
import solid
import os
import ezdxf
import shapely.geometry as sg
import subprocess
from GUI import getSCADPath



def outputSTL(From, To, PATH=getSCADPath()):
    subprocess.Popen(PATH + " -o " + To + " " + From)
    while not os.path.exists(To):
        time.sleep(1)

class Model:
    def __init__(self, model, fileName, location, layer, thickness):
        self.location = location
        self.code = None
        self.fileName = fileName
        self.stl = fileName + ".stl"
        self.layer = layer
        self.thickness = thickness
        self.maxz = (layer+1)*thickness
        self.dxf = fileName + ".dxf"
        self.scad = fileName + ".scad"
        self.model = model
        self.center = None
        self.width = 10
        self.mesh = None
        self.useable_area = None


    def get_code(self):
        max_dim = 0.05
        max_array = 6

        num = int(self.fileName)
        nums = [int(a) for a in str(num)]
        nums.reverse()
        indices = nums
        length = len(nums)

        print(indices)
        t = 0
        i = 0
        cubes = []
        x = 0
        y = 0
        width = 0.01
        while x <= max_dim:
            while y <= max_dim:
                print(indices)
                if nums == []:
                    break
                if indices[0] != 0:
                    cubes.append(solid.translate([x, y, 0])(solid.cube(size=t / 1000 + 0.001)))
                    y += max_dim / (max_array - 1)
                    nums[0] = nums[0] - 1
                else:
                    indices.pop(0)
                    t += 1
                i += 1
            x += max_dim / (max_array - 1)
            y = 0

        outside = solid.translate([-width / 2, -width / 2])(solid.cube(max_dim + (length - 1) / 1000 + 0.001 + width))
        self.code = solid.difference()(outside, cubes)
        self.code = solid.projection(cut=True)(self.code)
        solid.scad_render_to_file(self.code, self.location + "/code.scad")
        outputSTL(From=self.location+"/code.scad", To=self.location+"code.dxf", PATH=getSCADPath())
        # os.system("toSTL.sh renders/code.scad renders/code.dxf")
        return self.location+"/code.dxf"

    def download(self, type):
        if type =="stl":
            print("generating:" + self.location+"/"+ self.fileName+".stl")
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".stl")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".stl")
        elif type == "dxf":
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".dxf")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".dxf")

    def render(self):
        solid.scad_render_to_file(self.model, self.location+"/"+ self.fileName+'.scad')
        while not os.path.exists(self.location+"/"+self.fileName+".scad"):
            time.sleep(1)
        # outputSTL(From= self.location+"/"+ self.fileName+'.scad', To=self.location+"/"+ self.fileName+'.stl')

    def get_points(self):
        doc = ezdxf.readfile(filename=self.location+"/"+ self.fileName+".dxf")
        msp = doc.modelspace()
        i=0
        lists = []
        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return [start, end]

        for e in msp.query("LINE"):
            line = helper(e)
            if not lists:
                lists.append([line])
            else:
                if lists[i][len(lists)-1][1] != line[0]:
                    lists.append([line])
                    i+=1
                else:
                    lists[i].append(line)

    def get_points2(self, FILE):
        doc = ezdxf.readfile(filename=FILE)
        msp = doc.modelspace()
        i = 0
        lists = []

        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return (start, end)

        for e in msp.query("LINE"):
            line = helper(e)
            if lists==[]:
                lists.append([line])
            else:
                if lists[i][len(lists[i]) - 1][1] != line[0]:
                    lists.append([line])
                    i += 1
                else:
                    lists[i].append(line)
        return lists

    def add_code(self):
        dxf = solid.projection(cut=False)(self.model)
        offset = solid.offset(r=-0.1)(dxf)
        solid.scad_render_to_file(offset, self.location+'/offset.scad')
        os.system("toSTL.sh renders/offset.scad renders/offset.dxf")
        lines = self.get_points2("renders/offset.dxf")
        x = lines[0][0][0][0]
        y = lines[0][0][0][1]
        print(x)
        print(y)
        code = solid.translate([x,y,0])(self.code)
        code = solid.linear_extrude(height=999)(code)
        save = self.model
        self.model = solid.projection()(solid.difference()(self.model, code))
        self.render()
        self.download("dxf")
        self.model = save

    def add_label(self, pos):
        # num = 12
        # minx, maxx, miny, maxy, minz, maxz = self.find_minmax()
        maxz = self.maxz
        # label = solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.5, halign="center"))
        # i=minx
        # print("x-len: " + str(maxx-minx))
        # print(i)
        # inc = (maxx-minx)/num
        # while minx <= i <= maxx:
        #     label = solid.union()(solid.translate([i, 0, maxz - 0.2])(solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.25, halign="center"))), label)
        #     i += inc
        #
        # l = label
        #
        # i =miny
        # while miny<= i <= maxy:
        #     print("y inc")
        #     l = solid.union()(solid.translate([0, i, 0])(label), l)
        #     i += 0.5
        for i in str(self.fileName):
            cur = pos[0]
            label = solid.translate([pos[0][0], pos[0][1], self.maxz-0.2])(solid.linear_extrude(height=(self.thickness)/3)(solid.text(str(i), size=0.5, halign="center", valign="center")))
            self.model = solid.difference()(self.model, label)
            pos.append(pos.pop(0))
            while abs(cur[0]-pos[0][0])<0.5 and abs(cur[1]-pos[0][1])<0.5:
                pos.append(pos.pop(0))



    def Center(self):

        volume, cog, inertia = self.mesh.get_mass_properties()
        print("Volume                                  = {0}".format(volume))
        print("Position of the center of gravity (COG) = {0}".format(cog))
        m_centered = solid.translate([-cog[0], -cog[1], 0])(
            self.model
        )
        return m_centered

    def find_minmax(self):
        minx = maxx = miny = maxy = minz = maxz = None
        for p in self.mesh.points:
            # p contains (x, y, z)
            if minx is None:
                minx = p[Dimension.X]
                maxx = p[Dimension.X]
                miny = p[Dimension.Y]
                maxy = p[Dimension.Y]
                minz = p[Dimension.Z]
                maxz = p[Dimension.Z]
            else:
                maxx = max(p[Dimension.X], maxx)
                minx = min(p[Dimension.X], minx)
                maxy = max(p[Dimension.Y], maxy)
                miny = min(p[Dimension.Y], miny)
                maxz = max(p[Dimension.Z], maxz)
                minz = min(p[Dimension.Z], minz)
        lenx = maxx - minx
        leny = maxy - miny
        lenz = maxz - minz
        return minx, maxx, miny, maxy, minz, maxz

    # def generate_Mesh(self):
    #     self.mesh = mesh.Mesh.from_file(self.location + "/" + str(int(self.fileName)//8)+ "b.stl")

    def get_top(self):
        top = solid.projection(cut=True)(solid.translate([0,0,-1*self.thickness*(self.layer+1)])(self.model))
        useable_area = solid.offset(r=-0.45)(top)
        self.useable_area = useable_area
        solid.scad_render_to_file(self.useable_area, self.location+'/' + 'toptemp.scad')
        outputSTL(From=self.location+'/' + 'toptemp.scad', To=self.location+"/top"+ self.dxf)

        # os.system("toSTL.sh out/toptemp.scad renders/" + self.fileName + ".dxf")
        dxf = DXF(self.location+"/top"+ self.dxf)
        min_p=dxf.points[0][0]
        points_ordered = dxf.points
        i=0
        while i <= len(dxf.points)+1:
            while math.sqrt((dxf.points[0][0]-dxf.points[1][0])**2+(dxf.points[0][1]-dxf.points[1][1])**2) > 0.1:
                dxf.points.insert(1, [(dxf.points[0][0]+dxf.points[1][0])/2, (dxf.points[0][1]+dxf.points[1][1])/2])
                i = i-1
            dxf.points.append(dxf.points.pop(0))
            i+=1
        for i in range(len(dxf.points)):
            dxf.points.append(dxf.points.pop(0))
            if dxf.points[0][0] < min_p:
                min_p = dxf.points[0][0]
                points_ordered = dxf.points.copy()
        dxf.points = points_ordered.copy()

        print(dxf.points)
        self.add_label(dxf.points)

class DXF:
    def __init__(self, file):
        self.file = file
        self.Lines = []
        self.points = []
        doc = ezdxf.readfile(self.file)
        msp = doc.modelspace()
        for e in msp:
            if e.dxftype() == "LINE":
                self.Lines.append(e)
                self.points.append([e.dxf.start[0], e.dxf.start[1]])
        # self.points.append([self.Lines[-1].dxf.end[0], self.Lines[-1].dxf.end[1]])
        self.area = None
        self.center = None
        self.polygon = sg.Polygon(self.points)

    def get_area(self):
        self.area = self.polygon.area
        return self.area

    def get_center(self):
        x_sum = 0
        y_sum =0
        for i in self.points:
            x_sum += i[0]
            y_sum += i[1]
        x_c = x_sum/len(self.points)
        y_c = y_sum/len(self.points)
        return (x_c, y_c)

    def split(self, maxdim):
        splits = []
        length = 0
        pieces = [[]]
        prev = self.points[-1]
        pieces[-1].append(prev)
        for j in self.points:
            length = length + math.sqrt((prev[0]-j[0])**2+(prev[1]-j[1])**2)
            if length >= maxdim:
                pieces[-1].append(j)
                pieces.append([])
                length = 0
            pieces[-1].append(j)
            prev = j
        for j in pieces:
            j.insert(0, [0,0])
            piece = solid.linear_extrude(height=10)(solid.polygon(j))
            splits.append(piece)
        return splits
    def refine_points(self):
        i=0
        while i <= len(self.points)+1:
            while math.sqrt((self.points[0][0]-self.points[1][0])**2+(self.points[0][1]-self.points[1][1])**2) > 0.1:
                self.points.insert(1, [(self.points[0][0]+self.points[1][0])/2, (self.points[0][1]+self.points[1][1])/2])
                i = i-1
            self.points.append(self.points.pop(0))
            i+=1


if __name__== "__main__":
    test = DXF("C:/Users/Daniel/Documents/repos/Shell_Maker/output/0top_slice.dxf")
    test.refine_points()
    k = test.split(48)
    for i in range(len(k)):
        solid.scad_render_to_file(k[i], str(i) + ".scad")


 
 
************************************************/
