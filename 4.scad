// Generated by SolidPython 1.1.3 on 2024-05-19 23:35:49


linear_extrude(height = 1) {
	polygon(points = [[0, 0], [76.1867937500, -30.6162875000], [76.2421125000, -30.6065250000], [76.2974312500, -30.5967625000], [76.3527500000, -30.5870000000], [76.4080687500, -30.5772375000], [76.4633875000, -30.5674750000], [76.5187062500, -30.5577125000], [76.5740250000, -30.5479500000], [76.6293437500, -30.5381875000], [76.6846625000, -30.5284250000], [76.7399812500, -30.5186625000], [76.7953000000, -30.5089000000], [76.8603250000, -30.4922750000], [76.9253500000, -30.4756500000], [76.9903750000, -30.4590250000], [77.0554000000, -30.4424000000], [77.1204250000, -30.4257750000], [77.1854500000, -30.4091500000], [77.2504750000, -30.3925250000], [77.3155000000, -30.3759000000], [77.3774500000, -30.3600500000], [77.4394000000, -30.3442000000], [77.5013500000, -30.3283500000], [77.5633000000, -30.3125000000], [77.6128375000, -30.2765625000], [77.6623750000, -30.2406250000], [77.7119125000, -30.2046875000], [77.7614500000, -30.1687500000], [77.8109875000, -30.1328125000], [77.8605250000, -30.0968750000], [77.9100625000, -30.0609375000], [77.9596000000, -30.0250000000], [78.0045750000, -29.9923750000], [78.0495500000, -29.9597500000], [78.0945250000, -29.9271250000], [78.1395000000, -29.8945000000], [78.1394209961, -29.8359062500], [78.1393419922, -29.7773125000], [78.1392629883, -29.7187187500], [78.1391839844, -29.6601250000], [78.1391049805, -29.6015312500], [78.1390259766, -29.5429375000], [78.1389469727, -29.4843437500], [78.1388679687, -29.4257500000], [78.1387889648, -29.3671562500], [78.1387099609, -29.3085625000], [78.1386309570, -29.2499687500], [78.1385519531, -29.1913750000], [78.1384729492, -29.1327812500], [78.1383939453, -29.0741875000], [78.1383149414, -29.0155937500], [78.1382359375, -28.9570000000], [78.1381569336, -28.8984062500], [78.1380779297, -28.8398125000], [78.1379989258, -28.7812187500], [78.1379199219, -28.7226250000], [78.1378409180, -28.6640312500], [78.1377619141, -28.6054375000], [78.1376829102, -28.5468437500], [78.1376039063, -28.4882500000], [78.1375249023, -28.4296562500], [78.1374458984, -28.3710625000], [78.1373668945, -28.3124687500], [78.1372878906, -28.2538750000], [78.1372088867, -28.1952812500], [78.1371298828, -28.1366875000], [78.1370508789, -28.0780937500], [78.1369718750, -28.0195000000], [78.1368928711, -27.9609062500], [78.1368138672, -27.9023125000], [78.1367348633, -27.8437187500], [78.1366558594, -27.7851250000], [78.1365768555, -27.7265312500], [78.1364978516, -27.6679375000], [78.1364188477, -27.6093437500], [78.1363398437, -27.5507500000], [78.1362608398, -27.4921562500], [78.1361818359, -27.4335625000], [78.1361028320, -27.3749687500], [78.1360238281, -27.3163750000], [78.1359448242, -27.2577812500], [78.1358658203, -27.1991875000], [78.1357868164, -27.1405937500], [78.1357078125, -27.0820000000], [78.1356288086, -27.0234062500], [78.1355498047, -26.9648125000], [78.1354708008, -26.9062187500], [78.1353917969, -26.8476250000], [78.1353127930, -26.7890312500], [78.1352337891, -26.7304375000], [78.1351547852, -26.6718437500], [78.1350757813, -26.6132500000], [78.1349967773, -26.5546562500], [78.1349177734, -26.4960625000], [78.1348387695, -26.4374687500], [78.1347597656, -26.3788750000], [78.1346807617, -26.3202812500], [78.1346017578, -26.2616875000], [78.1345227539, -26.2030937500], [78.1344437500, -26.1445000000], [78.1343647461, -26.0859062500], [78.1342857422, -26.0273125000], [78.1342067383, -25.9687187500], [78.1341277344, -25.9101250000], [78.1340487305, -25.8515312500], [78.1339697266, -25.7929375000], [78.1338907227, -25.7343437500], [78.1338117187, -25.6757500000], [78.1337327148, -25.6171562500], [78.1336537109, -25.5585625000], [78.1335747070, -25.4999687500], [78.1334957031, -25.4413750000], [78.1334166992, -25.3827812500], [78.1333376953, -25.3241875000], [78.1332586914, -25.2655937500], [78.1331796875, -25.2070000000], [78.1331006836, -25.1484062500], [78.1330216797, -25.0898125000], [78.1329426758, -25.0312187500], [78.1328636719, -24.9726250000], [78.1327846680, -24.9140312500], [78.1327056641, -24.8554375000], [78.1326266602, -24.7968437500], [78.1325476563, -24.7382500000], [78.1324686523, -24.6796562500], [78.1323896484, -24.6210625000], [78.1323106445, -24.5624687500], [78.1322316406, -24.5038750000], [78.1321526367, -24.4452812500], [78.1320736328, -24.3866875000], [78.1319946289, -24.3280937500], [78.1319156250, -24.2695000000], [78.1318366211, -24.2109062500], [78.1317576172, -24.1523125000], [78.1316786133, -24.0937187500], [78.1315996094, -24.0351250000], [78.1315206055, -23.9765312500], [78.1314416016, -23.9179375000], [78.1313625977, -23.8593437500], [78.1312835937, -23.8007500000], [78.1312045898, -23.7421562500], [78.1311255859, -23.6835625000], [78.1310465820, -23.6249687500], [78.1309675781, -23.5663750000], [78.1308885742, -23.5077812500], [78.1308095703, -23.4491875000], [78.1307305664, -23.3905937500], [78.1306515625, -23.3320000000], [78.1305725586, -23.2734062500], [78.1304935547, -23.2148125000], [78.1304145508, -23.1562187500], [78.1303355469, -23.0976250000], [78.1302565430, -23.0390312500], [78.1301775391, -22.9804375000], [78.1300985352, -22.9218437500], [78.1300195313, -22.8632500000], [78.1299405273, -22.8046562500], [78.1298615234, -22.7460625000], [78.1297825195, -22.6874687500], [78.1297035156, -22.6288750000], [78.1296245117, -22.5702812500], [78.1295455078, -22.5116875000], [78.1294665039, -22.4530937500], [78.1293875000, -22.3945000000], [78.1293084961, -22.3359062500], [78.1292294922, -22.2773125000], [78.1291504883, -22.2187187500], [78.1290714844, -22.1601250000], [78.1289924805, -22.1015312500], [78.1289134766, -22.0429375000], [78.1288344727, -21.9843437500], [78.1287554688, -21.9257500000], [78.1286764648, -21.8671562500], [78.1285974609, -21.8085625000], [78.1285184570, -21.7499687500], [78.1284394531, -21.6913750000], [78.1283604492, -21.6327812500], [78.1282814453, -21.5741875000], [78.1282024414, -21.5155937500], [78.1281234375, -21.4570000000], [78.1280444336, -21.3984062500], [78.1279654297, -21.3398125000], [78.1278864258, -21.2812187500], [78.1278074219, -21.2226250000], [78.1277284180, -21.1640312500], [78.1276494141, -21.1054375000], [78.1275704102, -21.0468437500], [78.1274914063, -20.9882500000], [78.1274124023, -20.9296562500], [78.1273333984, -20.8710625000], [78.1272543945, -20.8124687500], [78.1271753906, -20.7538750000], [78.1270963867, -20.6952812500], [78.1270173828, -20.6366875000], [78.1269383789, -20.5780937500], [78.1268593750, -20.5195000000], [78.1267803711, -20.4609062500], [78.1267013672, -20.4023125000], [78.1266223633, -20.3437187500], [78.1265433594, -20.2851250000], [78.1264643555, -20.2265312500], [78.1263853516, -20.1679375000], [78.1263063477, -20.1093437500], [78.1262273438, -20.0507500000], [78.1261483398, -19.9921562500], [78.1260693359, -19.9335625000], [78.1259903320, -19.8749687500], [78.1259113281, -19.8163750000], [78.1258323242, -19.7577812500], [78.1257533203, -19.6991875000], [78.1256743164, -19.6405937500], [78.1255953125, -19.5820000000], [78.1255163086, -19.5234062500], [78.1254373047, -19.4648125000], [78.1253583008, -19.4062187500], [78.1252792969, -19.3476250000], [78.1252002930, -19.2890312500], [78.1251212891, -19.2304375000], [78.1250422852, -19.1718437500], [78.1249632813, -19.1132500000], [78.1248842773, -19.0546562500], [78.1248052734, -18.9960625000], [78.1247262695, -18.9374687500], [78.1246472656, -18.8788750000], [78.1245682617, -18.8202812500], [78.1244892578, -18.7616875000], [78.1244102539, -18.7030937500], [78.1243312500, -18.6445000000], [78.1242522461, -18.5859062500], [78.1241732422, -18.5273125000], [78.1240942383, -18.4687187500], [78.1240152344, -18.4101250000], [78.1239362305, -18.3515312500], [78.1238572266, -18.2929375000], [78.1237782227, -18.2343437500], [78.1236992188, -18.1757500000], [78.1236202148, -18.1171562500], [78.1235412109, -18.0585625000], [78.1234622070, -17.9999687500], [78.1233832031, -17.9413750000], [78.1233041992, -17.8827812500], [78.1232251953, -17.8241875000], [78.1231461914, -17.7655937500], [78.1230671875, -17.7070000000], [78.1229881836, -17.6484062500], [78.1229091797, -17.5898125000], [78.1228301758, -17.5312187500], [78.1227511719, -17.4726250000], [78.1226721680, -17.4140312500], [78.1225931641, -17.3554375000], [78.1225141602, -17.2968437500], [78.1224351563, -17.2382500000], [78.1223561523, -17.1796562500], [78.1222771484, -17.1210625000], [78.1221981445, -17.0624687500], [78.1221191406, -17.0038750000], [78.1220401367, -16.9452812500], [78.1219611328, -16.8866875000], [78.1218821289, -16.8280937500], [78.1218031250, -16.7695000000], [78.1217241211, -16.7109062500], [78.1216451172, -16.6523125000], [78.1215661133, -16.5937187500], [78.1214871094, -16.5351250000], [78.1214081055, -16.4765312500], [78.1213291016, -16.4179375000], [78.1212500977, -16.3593437500], [78.1211710938, -16.3007500000], [78.1210920898, -16.2421562500], [78.1210130859, -16.1835625000], [78.1209340820, -16.1249687500], [78.1208550781, -16.0663750000], [78.1207760742, -16.0077812500], [78.1206970703, -15.9491875000], [78.1206180664, -15.8905937500], [78.1205390625, -15.8320000000], [78.1204600586, -15.7734062500], [78.1203810547, -15.7148125000], [78.1203020508, -15.6562187500], [78.1202230469, -15.5976250000], [78.1201440430, -15.5390312500], [78.1200650391, -15.4804375000], [78.1199860352, -15.4218437500], [78.1199070312, -15.3632500000], [78.1198280273, -15.3046562500], [78.1197490234, -15.2460625000], [78.1196700195, -15.1874687500], [78.1195910156, -15.1288750000], [78.1195120117, -15.0702812500], [78.1194330078, -15.0116875000], [78.1193540039, -14.9530937500], [78.1192750000, -14.8945000000], [78.1191959961, -14.8359062500], [78.1191169922, -14.7773125000], [78.1190379883, -14.7187187500], [78.1189589844, -14.6601250000], [78.1188799805, -14.6015312500], [78.1188009766, -14.5429375000], [78.1187219727, -14.4843437500], [78.1186429688, -14.4257500000], [78.1185639648, -14.3671562500], [78.1184849609, -14.3085625000], [78.1184059570, -14.2499687500], [78.1183269531, -14.1913750000], [78.1182479492, -14.1327812500], [78.1181689453, -14.0741875000], [78.1180899414, -14.0155937500], [78.1180109375, -13.9570000000], [78.1179319336, -13.8984062500], [78.1178529297, -13.8398125000], [78.1177739258, -13.7812187500], [78.1176949219, -13.7226250000], [78.1176159180, -13.6640312500], [78.1175369141, -13.6054375000], [78.1174579102, -13.5468437500], [78.1173789062, -13.4882500000], [78.1172999023, -13.4296562500], [78.1172208984, -13.3710625000], [78.1171418945, -13.3124687500], [78.1170628906, -13.2538750000], [78.1169838867, -13.1952812500], [78.1169048828, -13.1366875000], [78.1168258789, -13.0780937500], [78.1167468750, -13.0195000000], [78.1166678711, -12.9609062500], [78.1165888672, -12.9023125000], [78.1165098633, -12.8437187500], [78.1164308594, -12.7851250000], [78.1163518555, -12.7265312500], [78.1162728516, -12.6679375000], [78.1161938477, -12.6093437500], [78.1161148437, -12.5507500000], [78.1160358398, -12.4921562500], [78.1159568359, -12.4335625000], [78.1158778320, -12.3749687500], [78.1157988281, -12.3163750000], [78.1157198242, -12.2577812500], [78.1156408203, -12.1991875000], [78.1155618164, -12.1405937500], [78.1154828125, -12.0820000000], [78.1154038086, -12.0234062500], [78.1153248047, -11.9648125000], [78.1152458008, -11.9062187500], [78.1151667969, -11.8476250000], [78.1150877930, -11.7890312500], [78.1150087891, -11.7304375000], [78.1149297852, -11.6718437500], [78.1148507812, -11.6132500000], [78.1147717773, -11.5546562500], [78.1146927734, -11.4960625000], [78.1146137695, -11.4374687500], [78.1145347656, -11.3788750000], [78.1144557617, -11.3202812500], [78.1143767578, -11.2616875000], [78.1142977539, -11.2030937500], [78.1142187500, -11.1445000000], [78.1141397461, -11.0859062500], [78.1140607422, -11.0273125000], [78.1139817383, -10.9687187500], [78.1139027344, -10.9101250000], [78.1138237305, -10.8515312500], [78.1137447266, -10.7929375000], [78.1136657227, -10.7343437500], [78.1135867187, -10.6757500000], [78.1135077148, -10.6171562500], [78.1134287109, -10.5585625000], [78.1133497070, -10.4999687500], [78.1132707031, -10.4413750000], [78.1131916992, -10.3827812500], [78.1131126953, -10.3241875000], [78.1130336914, -10.2655937500], [78.1129546875, -10.2070000000], [78.1128756836, -10.1484062500], [78.1127966797, -10.0898125000], [78.1127176758, -10.0312187500], [78.1126386719, -9.9726250000], [78.1125596680, -9.9140312500], [78.1124806641, -9.8554375000], [78.1124016602, -9.7968437500], [78.1123226563, -9.7382500000], [78.1122436523, -9.6796562500], [78.1121646484, -9.6210625000], [78.1120856445, -9.5624687500], [78.1120066406, -9.5038750000], [78.1119276367, -9.4452812500], [78.1118486328, -9.3866875000], [78.1117696289, -9.3280937500], [78.1116906250, -9.2695000000], [78.1116116211, -9.2109062500], [78.1115326172, -9.1523125000], [78.1114536133, -9.0937187500], [78.1113746094, -9.0351250000], [78.1112956055, -8.9765312500], [78.1112166016, -8.9179375000], [78.1111375977, -8.8593437500], [78.1110585937, -8.8007500000], [78.1109795898, -8.7421562500], [78.1109005859, -8.6835625000], [78.1108215820, -8.6249687500], [78.1107425781, -8.5663750000], [78.1106635742, -8.5077812500], [78.1105845703, -8.4491875000], [78.1105055664, -8.3905937500], [78.1104265625, -8.3320000000], [78.1103475586, -8.2734062500], [78.1102685547, -8.2148125000], [78.1101895508, -8.1562187500], [78.1101105469, -8.0976250000], [78.1100315430, -8.0390312500], [78.1099525391, -7.9804375000], [78.1098735352, -7.9218437500], [78.1097945313, -7.8632500000], [78.1097155273, -7.8046562500], [78.1096365234, -7.7460625000], [78.1095575195, -7.6874687500], [78.1094785156, -7.6288750000], [78.1093995117, -7.5702812500], [78.1093205078, -7.5116875000], [78.1092415039, -7.4530937500], [78.1091625000, -7.3945000000], [78.1090834961, -7.3359062500], [78.1090044922, -7.2773125000], [78.1089254883, -7.2187187500], [78.1088464844, -7.1601250000], [78.1087674805, -7.1015312500], [78.1086884766, -7.0429375000], [78.1086094727, -6.9843437500], [78.1085304687, -6.9257500000], [78.1084514648, -6.8671562500], [78.1083724609, -6.8085625000], [78.1082934570, -6.7499687500], [78.1082144531, -6.6913750000], [78.1081354492, -6.6327812500], [78.1080564453, -6.5741875000], [78.1079774414, -6.5155937500], [78.1078984375, -6.4570000000], [78.1078194336, -6.3984062500], [78.1077404297, -6.3398125000], [78.1076614258, -6.2812187500], [78.1075824219, -6.2226250000], [78.1075034180, -6.1640312500], [78.1074244141, -6.1054375000], [78.1073454102, -6.0468437500], [78.1072664063, -5.9882500000], [78.1071874023, -5.9296562500], [78.1071083984, -5.8710625000], [78.1070293945, -5.8124687500], [78.1069503906, -5.7538750000], [78.1068713867, -5.6952812500], [78.1067923828, -5.6366875000], [78.1067133789, -5.5780937500], [78.1066343750, -5.5195000000], [78.1065553711, -5.4609062500], [78.1064763672, -5.4023125000], [78.1063973633, -5.3437187500], [78.1063183594, -5.2851250000], [78.1062393555, -5.2265312500], [78.1061603516, -5.1679375000], [78.1060813477, -5.1093437500], [78.1060023437, -5.0507500000], [78.1059233398, -4.9921562500], [78.1058443359, -4.9335625000], [78.1057653320, -4.8749687500], [78.1056863281, -4.8163750000], [78.1056073242, -4.7577812500], [78.1055283203, -4.6991875000], [78.1054493164, -4.6405937500], [78.1053703125, -4.5820000000], [78.1052913086, -4.5234062500], [78.1052123047, -4.4648125000], [78.1051333008, -4.4062187500], [78.1050542969, -4.3476250000], [78.1049752930, -4.2890312500], [78.1048962891, -4.2304375000], [78.1048172852, -4.1718437500], [78.1047382813, -4.1132500000], [78.1046592773, -4.0546562500], [78.1045802734, -3.9960625000], [78.1045012695, -3.9374687500], [78.1044222656, -3.8788750000], [78.1043432617, -3.8202812500], [78.1042642578, -3.7616875000], [78.1041852539, -3.7030937500], [78.1041062500, -3.6445000000], [78.1040272461, -3.5859062500], [78.1039482422, -3.5273125000], [78.1038692383, -3.4687187500], [78.1037902344, -3.4101250000], [78.1037112305, -3.3515312500], [78.1036322266, -3.2929375000], [78.1035532227, -3.2343437500], [78.1034742187, -3.1757500000], [78.1033952148, -3.1171562500], [78.1033162109, -3.0585625000], [78.1032372070, -2.9999687500], [78.1031582031, -2.9413750000], [78.1030791992, -2.8827812500], [78.1030001953, -2.8241875000], [78.1029211914, -2.7655937500], [78.1028421875, -2.7070000000], [78.1027631836, -2.6484062500], [78.1026841797, -2.5898125000], [78.1026051758, -2.5312187500], [78.1025261719, -2.4726250000], [78.1024471680, -2.4140312500], [78.1023681641, -2.3554375000], [78.1022891602, -2.2968437500], [78.1022101563, -2.2382500000], [78.1021311523, -2.1796562500], [78.1020521484, -2.1210625000], [78.1019731445, -2.0624687500], [78.1018941406, -2.0038750000], [78.1018151367, -1.9452812500], [78.1017361328, -1.8866875000], [78.1016571289, -1.8280937500], [78.1015781250, -1.7695000000], [78.1014991211, -1.7109062500], [78.1014201172, -1.6523125000], [78.1013411133, -1.5937187500], [78.1012621094, -1.5351250000], [78.1011831055, -1.4765312500], [78.1011041016, -1.4179375000], [78.1010250977, -1.3593437500], [78.1009460937, -1.3007500000], [78.1008670898, -1.2421562500], [78.1007880859, -1.1835625000], [78.1007090820, -1.1249687500], [78.1006300781, -1.0663750000], [78.1005510742, -1.0077812500], [78.1004720703, -0.9491875000], [78.1003930664, -0.8905937500], [78.1003140625, -0.8320000000], [78.1002350586, -0.7734062500], [78.1001560547, -0.7148125000], [78.1000770508, -0.6562187500], [78.0999980469, -0.5976250000], [78.0999190430, -0.5390312500], [78.0998400391, -0.4804375000], [78.0997610352, -0.4218437500], [78.0996820313, -0.3632500000], [78.0996030273, -0.3046562500], [78.0995240234, -0.2460625000], [78.0994450195, -0.1874687500], [78.0993660156, -0.1288750000], [78.0992870117, -0.0702812500], [78.0992080078, -0.0116875000], [78.0991290039, 0.0469062500], [78.0990500000, 0.1055000000], [78.0989709961, 0.1640937500], [78.0988919922, 0.2226875000], [78.0988129883, 0.2812812500], [78.0987339844, 0.3398750000], [78.0986549805, 0.3984687500], [78.0985759766, 0.4570625000], [78.0984969727, 0.5156562500], [78.0984179687, 0.5742500000], [78.0983389648, 0.6328437500], [78.0982599609, 0.6914375000], [78.0981809570, 0.7500312500], [78.0981019531, 0.8086250000], [78.0980229492, 0.8672187500], [78.0979439453, 0.9258125000], [78.0978649414, 0.9844062500], [78.0977859375, 1.0430000000], [78.0977069336, 1.1015937500], [78.0976279297, 1.1601875000], [78.0975489258, 1.2187812500], [78.0974699219, 1.2773750000], [78.0973909180, 1.3359687500], [78.0973119141, 1.3945625000], [78.0972329102, 1.4531562500], [78.0971539063, 1.5117500000], [78.0970749023, 1.5703437500], [78.0969958984, 1.6289375000], [78.0969168945, 1.6875312500], [78.0968378906, 1.7461250000], [78.0967588867, 1.8047187500], [78.0966798828, 1.8633125000], [78.0966008789, 1.9219062500], [78.0965218750, 1.9805000000], [78.0964428711, 2.0390937500], [78.0963638672, 2.0976875000], [78.0962848633, 2.1562812500], [78.0962058594, 2.2148750000], [78.0961268555, 2.2734687500], [78.0960478516, 2.3320625000], [78.0959688477, 2.3906562500], [78.0958898438, 2.4492500000], [78.0958108398, 2.5078437500], [78.0957318359, 2.5664375000], [78.0956528320, 2.6250312500], [78.0955738281, 2.6836250000], [78.0954948242, 2.7422187500], [78.0954158203, 2.8008125000], [78.0953368164, 2.8594062500], [78.0952578125, 2.9180000000], [78.0951788086, 2.9765937500], [78.0950998047, 3.0351875000], [78.0950208008, 3.0937812500], [78.0949417969, 3.1523750000], [78.0948627930, 3.2109687500], [78.0947837891, 3.2695625000], [78.0947047852, 3.3281562500], [78.0946257813, 3.3867500000], [78.0945467773, 3.4453437500], [78.0944677734, 3.5039375000], [78.0943887695, 3.5625312500], [78.0943097656, 3.6211250000], [78.0942307617, 3.6797187500], [78.0941517578, 3.7383125000], [78.0940727539, 3.7969062500], [78.0939937500, 3.8555000000], [78.0939147461, 3.9140937500], [78.0938357422, 3.9726875000], [78.0937567383, 4.0312812500], [78.0936777344, 4.0898750000], [78.0935987305, 4.1484687500], [78.0935197266, 4.2070625000], [78.0934407227, 4.2656562500], [78.0933617188, 4.3242500000], [78.0932827148, 4.3828437500], [78.0932037109, 4.4414375000], [78.0931247070, 4.5000312500], [78.0930457031, 4.5586250000], [78.0929666992, 4.6172187500], [78.0928876953, 4.6758125000], [78.0928086914, 4.7344062500], [78.0927296875, 4.7930000000], [78.0926506836, 4.8515937500], [78.0925716797, 4.9101875000], [78.0924926758, 4.9687812500], [78.0924136719, 5.0273750000], [78.0923346680, 5.0859687500], [78.0922556641, 5.1445625000], [78.0921766602, 5.2031562500], [78.0920976563, 5.2617500000], [78.0920186523, 5.3203437500], [78.0919396484, 5.3789375000], [78.0918606445, 5.4375312500], [78.0917816406, 5.4961250000], [78.0917026367, 5.5547187500], [78.0916236328, 5.6133125000], [78.0915446289, 5.6719062500], [78.0914656250, 5.7305000000], [78.0913866211, 5.7890937500], [78.0913076172, 5.8476875000], [78.0912286133, 5.9062812500], [78.0911496094, 5.9648750000], [78.0910706055, 6.0234687500], [78.0909916016, 6.0820625000], [78.0909125977, 6.1406562500], [78.0908335938, 6.1992500000], [78.0907545898, 6.2578437500], [78.0906755859, 6.3164375000], [78.0905965820, 6.3750312500], [78.0905175781, 6.4336250000], [78.0904385742, 6.4922187500], [78.0903595703, 6.5508125000], [78.0902805664, 6.6094062500], [78.0902015625, 6.6680000000], [78.0901225586, 6.7265937500], [78.0900435547, 6.7851875000], [78.0899645508, 6.8437812500], [78.0898855469, 6.9023750000], [78.0898065430, 6.9609687500], [78.0897275391, 7.0195625000], [78.0896485352, 7.0781562500], [78.0895695312, 7.1367500000], [78.0894905273, 7.1953437500], [78.0894115234, 7.2539375000], [78.0893325195, 7.3125312500], [78.0892535156, 7.3711250000], [78.0891745117, 7.4297187500], [78.0890955078, 7.4883125000], [78.0890165039, 7.5469062500], [78.0889375000, 7.6055000000], [78.0888584961, 7.6640937500], [78.0887794922, 7.7226875000], [78.0887004883, 7.7812812500], [78.0886214844, 7.8398750000], [78.0885424805, 7.8984687500], [78.0884634766, 7.9570625000], [78.0883844727, 8.0156562500], [78.0883054688, 8.0742500000], [78.0882264648, 8.1328437500], [78.0881474609, 8.1914375000], [78.0880684570, 8.2500312500], [78.0879894531, 8.3086250000], [78.0879104492, 8.3672187500], [78.0878314453, 8.4258125000], [78.0877524414, 8.4844062500], [78.0876734375, 8.5430000000], [78.0875944336, 8.6015937500], [78.0875154297, 8.6601875000], [78.0874364258, 8.7187812500], [78.0873574219, 8.7773750000], [78.0872784180, 8.8359687500], [78.0871994141, 8.8945625000], [78.0871204102, 8.9531562500], [78.0870414062, 9.0117500000], [78.0869624023, 9.0703437500], [78.0868833984, 9.1289375000], [78.0868043945, 9.1875312500], [78.0867253906, 9.2461250000], [78.0866463867, 9.3047187500], [78.0865673828, 9.3633125000], [78.0864883789, 9.4219062500], [78.0864093750, 9.4805000000], [78.0863303711, 9.5390937500], [78.0862513672, 9.5976875000], [78.0861723633, 9.6562812500], [78.0860933594, 9.7148750000], [78.0860143555, 9.7734687500], [78.0859353516, 9.8320625000], [78.0858563477, 9.8906562500], [78.0857773437, 9.9492500000], [78.0856983398, 10.0078437500], [78.0856193359, 10.0664375000], [78.0855403320, 10.1250312500], [78.0854613281, 10.1836250000], [78.0853823242, 10.2422187500], [78.0853033203, 10.3008125000], [78.0852243164, 10.3594062500], [78.0851453125, 10.4180000000], [78.0850663086, 10.4765937500], [78.0849873047, 10.5351875000], [78.0849083008, 10.5937812500], [78.0848292969, 10.6523750000], [78.0847502930, 10.7109687500], [78.0846712891, 10.7695625000], [78.0845922852, 10.8281562500], [78.0845132812, 10.8867500000], [78.0844342773, 10.9453437500], [78.0843552734, 11.0039375000], [78.0842762695, 11.0625312500], [78.0841972656, 11.1211250000], [78.0841182617, 11.1797187500], [78.0840392578, 11.2383125000], [78.0839602539, 11.2969062500], [78.0838812500, 11.3555000000], [78.0838022461, 11.4140937500], [78.0837232422, 11.4726875000], [78.0836442383, 11.5312812500], [78.0835652344, 11.5898750000], [78.0834862305, 11.6484687500], [78.0834072266, 11.7070625000], [78.0833282227, 11.7656562500], [78.0832492187, 11.8242500000], [78.0831702148, 11.8828437500], [78.0830912109, 11.9414375000], [78.0830122070, 12.0000312500], [78.0829332031, 12.0586250000], [78.0828541992, 12.1172187500], [78.0827751953, 12.1758125000], [78.0826961914, 12.2344062500], [78.0826171875, 12.2930000000], [78.0825381836, 12.3515937500], [78.0824591797, 12.4101875000], [78.0823801758, 12.4687812500], [78.0823011719, 12.5273750000], [78.0822221680, 12.5859687500], [78.0821431641, 12.6445625000], [78.0820641602, 12.7031562500], [78.0819851562, 12.7617500000], [78.0819061523, 12.8203437500], [78.0818271484, 12.8789375000], [78.0817481445, 12.9375312500], [78.0816691406, 12.9961250000], [78.0815901367, 13.0547187500], [78.0815111328, 13.1133125000], [78.0814321289, 13.1719062500], [78.0813531250, 13.2305000000], [78.0812741211, 13.2890937500], [78.0811951172, 13.3476875000], [78.0811161133, 13.4062812500], [78.0810371094, 13.4648750000], [78.0809581055, 13.5234687500], [78.0808791016, 13.5820625000], [78.0808000977, 13.6406562500], [78.0807210937, 13.6992500000], [78.0806420898, 13.7578437500], [78.0805630859, 13.8164375000], [78.0804840820, 13.8750312500], [78.0804050781, 13.9336250000], [78.0803260742, 13.9922187500], [78.0802470703, 14.0508125000], [78.0801680664, 14.1094062500], [78.0800890625, 14.1680000000], [78.0800100586, 14.2265937500], [78.0799310547, 14.2851875000], [78.0798520508, 14.3437812500], [78.0797730469, 14.4023750000], [78.0796940430, 14.4609687500], [78.0796150391, 14.5195625000], [78.0795360352, 14.5781562500], [78.0794570313, 14.6367500000], [78.0793780273, 14.6953437500], [78.0792990234, 14.7539375000], [78.0792200195, 14.8125312500], [78.0791410156, 14.8711250000], [78.0790620117, 14.9297187500], [78.0789830078, 14.9883125000], [78.0789040039, 15.0469062500], [78.0788250000, 15.1055000000], [78.0787459961, 15.1640937500], [78.0786669922, 15.2226875000], [78.0785879883, 15.2812812500], [78.0785089844, 15.3398750000], [78.0784299805, 15.3984687500], [78.0783509766, 15.4570625000], [78.0782719727, 15.5156562500], [78.0781929687, 15.5742500000], [78.0781139648, 15.6328437500], [78.0780349609, 15.6914375000], [78.0779559570, 15.7500312500], [78.0778769531, 15.8086250000], [78.0777979492, 15.8672187500], [78.0777189453, 15.9258125000], [78.0776399414, 15.9844062500]]);
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
import math
import time

from stl import mesh, Dimension

from tkinter import Tk     # from tkinter import Tk for Python 3.x
from tkinter.filedialog import askopenfilename
from mpl_toolkits.mplot3d import art3d
from matplotlib import pyplot as plt
import solid
import os
import ezdxf
import shapely.geometry as sg
import subprocess
from GUI import getSCADPath



def outputSTL(From, To, PATH=getSCADPath()):
    subprocess.Popen(PATH + " -o " + To + " " + From)
    while not os.path.exists(To):
        time.sleep(1)


def get_size(i):
    x_list = [int(a) for a in str(i)]
    return len(x_list)



class Model:
    def __init__(self, model, fileName, location, layer, thickness):
        self.location = location
        self.code = None
        self.fileName = fileName
        self.stl = fileName + ".stl"
        self.layer = layer
        self.thickness = thickness
        self.maxz = (layer+1)*thickness
        self.dxf = fileName + ".dxf"
        self.scad = fileName + ".scad"
        self.model = model
        self.center = None
        self.width = 10
        self.mesh = None
        self.useable_area = None


    def get_code(self):
        max_dim = 0.05
        max_array = 6

        num = int(self.fileName)
        nums = [int(a) for a in str(num)]
        nums.reverse()
        indices = nums
        length = len(nums)

        print(indices)
        t = 0
        i = 0
        cubes = []
        x = 0
        y = 0
        width = 0.01
        while x <= max_dim:
            while y <= max_dim:
                print(indices)
                if nums == []:
                    break
                if indices[0] != 0:
                    cubes.append(solid.translate([x, y, 0])(solid.cube(size=t / 1000 + 0.001)))
                    y += max_dim / (max_array - 1)
                    nums[0] = nums[0] - 1
                else:
                    indices.pop(0)
                    t += 1
                i += 1
            x += max_dim / (max_array - 1)
            y = 0

        outside = solid.translate([-width / 2, -width / 2])(solid.cube(max_dim + (length - 1) / 1000 + 0.001 + width))
        self.code = solid.difference()(outside, cubes)
        self.code = solid.projection(cut=True)(self.code)
        solid.scad_render_to_file(self.code, self.location + "/code.scad")
        outputSTL(From=self.location+"/code.scad", To=self.location+"code.dxf", PATH=getSCADPath())
        # os.system("toSTL.sh renders/code.scad renders/code.dxf")
        return self.location+"/code.dxf"

    def download(self, type):
        if type =="stl":
            print("generating:" + self.location+"/"+ self.fileName+".stl")
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".stl")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".stl")
        elif type == "dxf":
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".dxf")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".dxf")

    def render(self):
        solid.scad_render_to_file(self.model, self.location+"/"+ self.fileName+'.scad')
        while not os.path.exists(self.location+"/"+self.fileName+".scad"):
            time.sleep(1)

    def get_points(self):
        doc = ezdxf.readfile(filename=self.location+"/"+ self.fileName+".dxf")
        msp = doc.modelspace()
        i=0
        lists = []
        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return [start, end]

        for e in msp.query("LINE"):
            line = helper(e)
            if not lists:
                lists.append([line])
            else:
                if lists[i][len(lists)-1][1] != line[0]:
                    lists.append([line])
                    i+=1
                else:
                    lists[i].append(line)

    def get_points2(self, FILE):
        doc = ezdxf.readfile(filename=FILE)
        msp = doc.modelspace()
        i = 0
        lists = []

        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return (start, end)

        for e in msp.query("LINE"):
            line = helper(e)
            if lists==[]:
                lists.append([line])
            else:
                if lists[i][len(lists[i]) - 1][1] != line[0]:
                    lists.append([line])
                    i += 1
                else:
                    lists[i].append(line)
        return lists

    def add_code(self):
        dxf = solid.projection(cut=False)(self.model)
        offset = solid.offset(r=-0.1)(dxf)
        solid.scad_render_to_file(offset, self.location+'/offset.scad')
        os.system("toSTL.sh renders/offset.scad renders/offset.dxf")
        lines = self.get_points2("renders/offset.dxf")
        x = lines[0][0][0][0]
        y = lines[0][0][0][1]
        print(x)
        print(y)
        code = solid.translate([x,y,0])(self.code)
        code = solid.linear_extrude(height=999)(code)
        save = self.model
        self.model = solid.projection()(solid.difference()(self.model, code))
        self.render()
        self.download("dxf")
        self.model = save

    def add_label(self, pos):
        # num = 12
        # minx, maxx, miny, maxy, minz, maxz = self.find_minmax()
        maxz = self.maxz
        # label = solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.5, halign="center"))
        # i=minx
        # print("x-len: " + str(maxx-minx))
        # print(i)
        # inc = (maxx-minx)/num
        # while minx <= i <= maxx:
        #     label = solid.union()(solid.translate([i, 0, maxz - 0.2])(solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.25, halign="center"))), label)
        #     i += inc
        #
        # l = label
        #
        # i =miny
        # while miny<= i <= maxy:
        #     print("y inc")
        #     l = solid.union()(solid.translate([0, i, 0])(label), l)
        #     i += 0.5
        for i in str(self.fileName):
            cur = pos[0]
            label = solid.translate([pos[0][0], pos[0][1], self.maxz-0.2])(solid.linear_extrude(height=(self.thickness)/3)(solid.text(str(i), size=0.5, halign="center", valign="center")))
            self.model = solid.difference()(self.model, label)
            pos.append(pos.pop(0))
            while abs(cur[0]-pos[0][0])<0.5 and abs(cur[1]-pos[0][1])<0.5:
                pos.append(pos.pop(0))



    def Center(self):

        volume, cog, inertia = self.mesh.get_mass_properties()
        print("Volume                                  = {0}".format(volume))
        print("Position of the center of gravity (COG) = {0}".format(cog))
        m_centered = solid.translate([-cog[0], -cog[1], 0])(
            self.model
        )
        return m_centered

    def find_minmax(self):
        minx = maxx = miny = maxy = minz = maxz = None
        for p in self.mesh.points:
            # p contains (x, y, z)
            if minx is None:
                minx = p[Dimension.X]
                maxx = p[Dimension.X]
                miny = p[Dimension.Y]
                maxy = p[Dimension.Y]
                minz = p[Dimension.Z]
                maxz = p[Dimension.Z]
            else:
                maxx = max(p[Dimension.X], maxx)
                minx = min(p[Dimension.X], minx)
                maxy = max(p[Dimension.Y], maxy)
                miny = min(p[Dimension.Y], miny)
                maxz = max(p[Dimension.Z], maxz)
                minz = min(p[Dimension.Z], minz)
        lenx = maxx - minx
        leny = maxy - miny
        lenz = maxz - minz
        return minx, maxx, miny, maxy, minz, maxz

    # def generate_Mesh(self):
    #     self.mesh = mesh.Mesh.from_file(self.location + "/" + str(int(self.fileName)//8)+ "b.stl")

    def get_top(self):
        top = solid.projection(cut=True)(solid.translate([0,0,-1*self.thickness*(self.layer+1)])(self.model))
        useable_area = solid.offset(r=-0.45)(top)
        self.useable_area = useable_area
        solid.scad_render_to_file(self.useable_area, self.location+'/' + 'toptemp.scad')
        outputSTL(From=self.location+'/' + 'toptemp.scad', To=self.location+"/top"+ self.dxf)

        # os.system("toSTL.sh out/toptemp.scad renders/" + self.fileName + ".dxf")
        dxf = DXF(self.location+"/top"+ self.dxf)
        min_p=dxf.points[0][0]
        points_ordered = dxf.points
        i=0
        while i <= len(dxf.points)+1:
            while math.sqrt((dxf.points[0][0]-dxf.points[1][0])**2+(dxf.points[0][1]-dxf.points[1][1])**2) > 0.1:
                dxf.points.insert(1, [(dxf.points[0][0]+dxf.points[1][0])/2, (dxf.points[0][1]+dxf.points[1][1])/2])
                i = i-1
            dxf.points.append(dxf.points.pop(0))
            i+=1
        for i in range(len(dxf.points)):
            dxf.points.append(dxf.points.pop(0))
            if dxf.points[0][0] < min_p:
                min_p = dxf.points[0][0]
                points_ordered = dxf.points.copy()
        dxf.points = points_ordered.copy()

        print(dxf.points)
        self.add_label(dxf.points)

class DXF:
    def __init__(self, file):
        self.file = file
        self.Lines = []
        self.points = []
        doc = ezdxf.readfile(self.file)
        msp = doc.modelspace()
        for e in msp:
            if e.dxftype() == "LINE":
                self.Lines.append(e)
                self.points.append([e.dxf.start[0], e.dxf.start[1]])
        # self.points.append([self.Lines[-1].dxf.end[0], self.Lines[-1].dxf.end[1]])
        self.area = None
        self.center = None
        self.polygon = sg.Polygon(self.points)

    def get_area(self):
        self.area = self.polygon.area
        return self.area

    def get_center(self):
        x_sum = 0
        y_sum =0
        for i in self.points:
            x_sum += i[0]
            y_sum += i[1]
        x_c = x_sum/len(self.points)
        y_c = y_sum/len(self.points)
        return (x_c, y_c)

    def split(self, maxdim):
        splits = []
        length = 0
        pieces = [[]]
        prev = self.points[0]
        for j in self.points:
            length = length + math.sqrt((prev[0]-j[0])**2+(prev[1]-j[1])**2)
            if length >= maxdim:
                pieces[-1].append(j)
                pieces.append([])
                length = 0
            pieces[-1].append(j)
            prev = j
        for j in pieces:
            j.insert(0, [0,0])
            piece = solid.linear_extrude(height=1)(solid.polygon(j))
            splits.append(piece)
        return splits
    def refine_points(self):
        i=0
        while i <= len(self.points)+1:
            while math.sqrt((self.points[0][0]-self.points[1][0])**2+(self.points[0][1]-self.points[1][1])**2) > 0.1:
                self.points.insert(1, [(self.points[0][0]+self.points[1][0])/2, (self.points[0][1]+self.points[1][1])/2])
                i = i-1
            self.points.append(self.points.pop(0))
            i+=1


if __name__== "__main__":
    test = DXF("C:/Users/Daniel/Documents/repos/Shell_Maker/output/0top_slice.dxf")
    test.refine_points()
    k = test.split(48)
    for i in range(len(k)):
        solid.scad_render_to_file(k[i], str(i) + ".scad")


 
 
************************************************/
