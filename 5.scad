// Generated by SolidPython 1.1.3 on 2024-05-19 23:35:49


linear_extrude(height = 1) {
	polygon(points = [[0, 0], [78.0776399414, 15.9844062500], [78.0775609375, 16.0430000000], [78.0774819336, 16.1015937500], [78.0774029297, 16.1601875000], [78.0773239258, 16.2187812500], [78.0772449219, 16.2773750000], [78.0771659180, 16.3359687500], [78.0770869141, 16.3945625000], [78.0770079102, 16.4531562500], [78.0769289063, 16.5117500000], [78.0768499023, 16.5703437500], [78.0767708984, 16.6289375000], [78.0766918945, 16.6875312500], [78.0766128906, 16.7461250000], [78.0765338867, 16.8047187500], [78.0764548828, 16.8633125000], [78.0763758789, 16.9219062500], [78.0762968750, 16.9805000000], [78.0762178711, 17.0390937500], [78.0761388672, 17.0976875000], [78.0760598633, 17.1562812500], [78.0759808594, 17.2148750000], [78.0759018555, 17.2734687500], [78.0758228516, 17.3320625000], [78.0757438477, 17.3906562500], [78.0756648437, 17.4492500000], [78.0755858398, 17.5078437500], [78.0755068359, 17.5664375000], [78.0754278320, 17.6250312500], [78.0753488281, 17.6836250000], [78.0752698242, 17.7422187500], [78.0751908203, 17.8008125000], [78.0751118164, 17.8594062500], [78.0750328125, 17.9180000000], [78.0749538086, 17.9765937500], [78.0748748047, 18.0351875000], [78.0747958008, 18.0937812500], [78.0747167969, 18.1523750000], [78.0746377930, 18.2109687500], [78.0745587891, 18.2695625000], [78.0744797852, 18.3281562500], [78.0744007813, 18.3867500000], [78.0743217773, 18.4453437500], [78.0742427734, 18.5039375000], [78.0741637695, 18.5625312500], [78.0740847656, 18.6211250000], [78.0740057617, 18.6797187500], [78.0739267578, 18.7383125000], [78.0738477539, 18.7969062500], [78.0737687500, 18.8555000000], [78.0736897461, 18.9140937500], [78.0736107422, 18.9726875000], [78.0735317383, 19.0312812500], [78.0734527344, 19.0898750000], [78.0733737305, 19.1484687500], [78.0732947266, 19.2070625000], [78.0732157227, 19.2656562500], [78.0731367187, 19.3242500000], [78.0730577148, 19.3828437500], [78.0729787109, 19.4414375000], [78.0728997070, 19.5000312500], [78.0728207031, 19.5586250000], [78.0727416992, 19.6172187500], [78.0726626953, 19.6758125000], [78.0725836914, 19.7344062500], [78.0725046875, 19.7930000000], [78.0724256836, 19.8515937500], [78.0723466797, 19.9101875000], [78.0722676758, 19.9687812500], [78.0721886719, 20.0273750000], [78.0721096680, 20.0859687500], [78.0720306641, 20.1445625000], [78.0719516602, 20.2031562500], [78.0718726563, 20.2617500000], [78.0717936523, 20.3203437500], [78.0717146484, 20.3789375000], [78.0716356445, 20.4375312500], [78.0715566406, 20.4961250000], [78.0714776367, 20.5547187500], [78.0713986328, 20.6133125000], [78.0713196289, 20.6719062500], [78.0712406250, 20.7305000000], [78.0711616211, 20.7890937500], [78.0710826172, 20.8476875000], [78.0710036133, 20.9062812500], [78.0709246094, 20.9648750000], [78.0708456055, 21.0234687500], [78.0707666016, 21.0820625000], [78.0706875977, 21.1406562500], [78.0706085937, 21.1992500000], [78.0705295898, 21.2578437500], [78.0704505859, 21.3164375000], [78.0703715820, 21.3750312500], [78.0702925781, 21.4336250000], [78.0702135742, 21.4922187500], [78.0701345703, 21.5508125000], [78.0700555664, 21.6094062500], [78.0699765625, 21.6680000000], [78.0698975586, 21.7265937500], [78.0698185547, 21.7851875000], [78.0697395508, 21.8437812500], [78.0696605469, 21.9023750000], [78.0695815430, 21.9609687500], [78.0695025391, 22.0195625000], [78.0694235352, 22.0781562500], [78.0693445313, 22.1367500000], [78.0692655273, 22.1953437500], [78.0691865234, 22.2539375000], [78.0691075195, 22.3125312500], [78.0690285156, 22.3711250000], [78.0689495117, 22.4297187500], [78.0688705078, 22.4883125000], [78.0687915039, 22.5469062500], [78.0687125000, 22.6055000000], [78.0686334961, 22.6640937500], [78.0685544922, 22.7226875000], [78.0684754883, 22.7812812500], [78.0683964844, 22.8398750000], [78.0683174805, 22.8984687500], [78.0682384766, 22.9570625000], [78.0681594727, 23.0156562500], [78.0680804687, 23.0742500000], [78.0680014648, 23.1328437500], [78.0679224609, 23.1914375000], [78.0678434570, 23.2500312500], [78.0677644531, 23.3086250000], [78.0676854492, 23.3672187500], [78.0676064453, 23.4258125000], [78.0675274414, 23.4844062500], [78.0674484375, 23.5430000000], [78.0673694336, 23.6015937500], [78.0672904297, 23.6601875000], [78.0672114258, 23.7187812500], [78.0671324219, 23.7773750000], [78.0670534180, 23.8359687500], [78.0669744141, 23.8945625000], [78.0668954102, 23.9531562500], [78.0668164063, 24.0117500000], [78.0667374023, 24.0703437500], [78.0666583984, 24.1289375000], [78.0665793945, 24.1875312500], [78.0665003906, 24.2461250000], [78.0664213867, 24.3047187500], [78.0663423828, 24.3633125000], [78.0662633789, 24.4219062500], [78.0661843750, 24.4805000000], [78.0661053711, 24.5390937500], [78.0660263672, 24.5976875000], [78.0659473633, 24.6562812500], [78.0658683594, 24.7148750000], [78.0657893555, 24.7734687500], [78.0657103516, 24.8320625000], [78.0656313477, 24.8906562500], [78.0655523437, 24.9492500000], [78.0654733398, 25.0078437500], [78.0653943359, 25.0664375000], [78.0653153320, 25.1250312500], [78.0652363281, 25.1836250000], [78.0651573242, 25.2422187500], [78.0650783203, 25.3008125000], [78.0649993164, 25.3594062500], [78.0649203125, 25.4180000000], [78.0648413086, 25.4765937500], [78.0647623047, 25.5351875000], [78.0646833008, 25.5937812500], [78.0646042969, 25.6523750000], [78.0645252930, 25.7109687500], [78.0644462891, 25.7695625000], [78.0643672852, 25.8281562500], [78.0642882813, 25.8867500000], [78.0642092773, 25.9453437500], [78.0641302734, 26.0039375000], [78.0640512695, 26.0625312500], [78.0639722656, 26.1211250000], [78.0638932617, 26.1797187500], [78.0638142578, 26.2383125000], [78.0637352539, 26.2969062500], [78.0636562500, 26.3555000000], [78.0635772461, 26.4140937500], [78.0634982422, 26.4726875000], [78.0634192383, 26.5312812500], [78.0633402344, 26.5898750000], [78.0632612305, 26.6484687500], [78.0631822266, 26.7070625000], [78.0631032227, 26.7656562500], [78.0630242188, 26.8242500000], [78.0629452148, 26.8828437500], [78.0628662109, 26.9414375000], [78.0627872070, 27.0000312500], [78.0627082031, 27.0586250000], [78.0626291992, 27.1172187500], [78.0625501953, 27.1758125000], [78.0624711914, 27.2344062500], [78.0623921875, 27.2930000000], [78.0623131836, 27.3515937500], [78.0622341797, 27.4101875000], [78.0621551758, 27.4687812500], [78.0620761719, 27.5273750000], [78.0619971680, 27.5859687500], [78.0619181641, 27.6445625000], [78.0618391602, 27.7031562500], [78.0617601563, 27.7617500000], [78.0616811523, 27.8203437500], [78.0616021484, 27.8789375000], [78.0615231445, 27.9375312500], [78.0614441406, 27.9961250000], [78.0613651367, 28.0547187500], [78.0612861328, 28.1133125000], [78.0612071289, 28.1719062500], [78.0611281250, 28.2305000000], [78.0610491211, 28.2890937500], [78.0609701172, 28.3476875000], [78.0608911133, 28.4062812500], [78.0608121094, 28.4648750000], [78.0607331055, 28.5234687500], [78.0606541016, 28.5820625000], [78.0605750977, 28.6406562500], [78.0604960938, 28.6992500000], [78.0604170898, 28.7578437500], [78.0603380859, 28.8164375000], [78.0602590820, 28.8750312500], [78.0601800781, 28.9336250000], [78.0601010742, 28.9922187500], [78.0600220703, 29.0508125000], [78.0599430664, 29.1094062500], [78.0598640625, 29.1680000000], [78.0597850586, 29.2265937500], [78.0597060547, 29.2851875000], [78.0596270508, 29.3437812500], [78.0595480469, 29.4023750000], [78.0594690430, 29.4609687500], [78.0593900391, 29.5195625000], [78.0593110352, 29.5781562500], [78.0592320312, 29.6367500000], [78.0591530273, 29.6953437500], [78.0590740234, 29.7539375000], [78.0589950195, 29.8125312500], [78.0589160156, 29.8711250000], [78.0588370117, 29.9297187500], [78.0587580078, 29.9883125000], [78.0586790039, 30.0469062500], [78.0586000000, 30.1055000000], [78.0058000000, 30.1436000000], [77.9530000000, 30.1817000000], [77.9002000000, 30.2198000000], [77.8474000000, 30.2579000000], [77.7946000000, 30.2960000000], [77.7418000000, 30.3341000000], [77.6890000000, 30.3722000000], [77.6362000000, 30.4103000000], [77.5589000000, 30.4661000000], [77.4816000000, 30.5219000000], [77.3854875000, 30.5462000000], [77.2893750000, 30.5705000000], [77.1932625000, 30.5948000000], [77.0971500000, 30.6191000000], [77.0010375000, 30.6434000000], [76.9049250000, 30.6677000000], [76.8088125000, 30.6920000000], [76.7127000000, 30.7163000000], [76.6417687500, 30.7286187500], [76.5708375000, 30.7409375000], [76.4999062500, 30.7532562500], [76.4289750000, 30.7655750000], [76.3580437500, 30.7778937500], [76.2871125000, 30.7902125000], [76.2161812500, 30.8025312500], [76.1452500000, 30.8148500000], [76.0743187500, 30.8271687500], [76.0033875000, 30.8394875000], [75.9324562500, 30.8518062500], [75.8615250000, 30.8641250000], [75.7905937500, 30.8764437500], [75.7196625000, 30.8887625000], [75.6487312500, 30.9010812500], [75.5778000000, 30.9134000000], [75.5068687500, 30.9257187500], [75.4359375000, 30.9380375000], [75.3650062500, 30.9503562500], [75.2940750000, 30.9626750000], [75.2231437500, 30.9749937500], [75.1522125000, 30.9873125000], [75.0812812500, 30.9996312500], [75.0103500000, 31.0119500000], [74.9394187500, 31.0242687500], [74.8684875000, 31.0365875000], [74.7975562500, 31.0489062500], [74.7266250000, 31.0612250000], [74.6556937500, 31.0735437500], [74.5847625000, 31.0858625000], [74.5138312500, 31.0981812500], [74.4429000000, 31.1105000000], [74.3543375000, 31.1207500000], [74.2657750000, 31.1310000000], [74.1772125000, 31.1412500000], [74.0886500000, 31.1515000000], [74.0000875000, 31.1617500000], [73.9115250000, 31.1720000000], [73.8229625000, 31.1822500000], [73.7344000000, 31.1925000000], [73.6667000000, 31.1970718750], [73.5990000000, 31.2016437500], [73.5313000000, 31.2062156250], [73.4636000000, 31.2107875000], [73.3959000000, 31.2153593750], [73.3282000000, 31.2199312500], [73.2605000000, 31.2245031250], [73.1928000000, 31.2290750000], [73.1251000000, 31.2336468750], [73.0574000000, 31.2382187500], [72.9897000000, 31.2427906250], [72.9220000000, 31.2473625000], [72.8543000000, 31.2519343750], [72.7866000000, 31.2565062500], [72.7189000000, 31.2610781250], [72.6512000000, 31.2656500000], [72.5835000000, 31.2702218750], [72.5158000000, 31.2747937500], [72.4481000000, 31.2793656250], [72.3804000000, 31.2839375000], [72.3127000000, 31.2885093750], [72.2450000000, 31.2930812500], [72.1773000000, 31.2976531250], [72.1096000000, 31.3022250000], [72.0419000000, 31.3067968750], [71.9742000000, 31.3113687500], [71.9065000000, 31.3159406250], [71.8388000000, 31.3205125000], [71.7711000000, 31.3250843750], [71.7034000000, 31.3296562500], [71.6357000000, 31.3342281250], [71.5680000000, 31.3388000000], [71.5000734375, 31.3433867187], [71.4321468750, 31.3479734375], [71.3642203125, 31.3525601563], [71.2962937500, 31.3571468750], [71.2283671875, 31.3617335937], [71.1604406250, 31.3663203125], [71.0925140625, 31.3709070312], [71.0245875000, 31.3754937500], [70.9566609375, 31.3800804687], [70.8887343750, 31.3846671875], [70.8208078125, 31.3892539062], [70.7528812500, 31.3938406250], [70.6849546875, 31.3984273437], [70.6170281250, 31.4030140625], [70.5491015625, 31.4076007812], [70.4811750000, 31.4121875000], [70.4132484375, 31.4167742187], [70.3453218750, 31.4213609375], [70.2773953125, 31.4259476562], [70.2094687500, 31.4305343750], [70.1415421875, 31.4351210937], [70.0736156250, 31.4397078125], [70.0056890625, 31.4442945313], [69.9377625000, 31.4488812500], [69.8698359375, 31.4534679687], [69.8019093750, 31.4580546875], [69.7339828125, 31.4626414063], [69.6660562500, 31.4672281250], [69.5981296875, 31.4718148437], [69.5302031250, 31.4764015625], [69.4622765625, 31.4809882812], [69.3943500000, 31.4855750000], [69.3264234375, 31.4901617187], [69.2584968750, 31.4947484375], [69.1905703125, 31.4993351562], [69.1226437500, 31.5039218750], [69.0547171875, 31.5085085937], [68.9867906250, 31.5130953125], [68.9188640625, 31.5176820312], [68.8509375000, 31.5222687500], [68.7830109375, 31.5268554688], [68.7150843750, 31.5314421875], [68.6471578125, 31.5360289062], [68.5792312500, 31.5406156250], [68.5113046875, 31.5452023437], [68.4433781250, 31.5497890625], [68.3754515625, 31.5543757813], [68.3075250000, 31.5589625000], [68.2395984375, 31.5635492187], [68.1716718750, 31.5681359375], [68.1037453125, 31.5727226563], [68.0358187500, 31.5773093750], [67.9678921875, 31.5818960937], [67.8999656250, 31.5864828125], [67.8320390625, 31.5910695312], [67.7641125000, 31.5956562500], [67.6961859375, 31.6002429687], [67.6282593750, 31.6048296875], [67.5603328125, 31.6094164062], [67.4924062500, 31.6140031250], [67.4244796875, 31.6185898437], [67.3565531250, 31.6231765625], [67.2886265625, 31.6277632812], [67.2207000000, 31.6323500000], [67.1527734375, 31.6369367188], [67.0848468750, 31.6415234375], [67.0169203125, 31.6461101562], [66.9489937500, 31.6506968750], [66.8810671875, 31.6552835937], [66.8131406250, 31.6598703125], [66.7452140625, 31.6644570313], [66.6772875000, 31.6690437500], [66.6093609375, 31.6736304687], [66.5414343750, 31.6782171875], [66.4735078125, 31.6828039063], [66.4055812500, 31.6873906250], [66.3376546875, 31.6919773437], [66.2697281250, 31.6965640625], [66.2018015625, 31.7011507812], [66.1338750000, 31.7057375000], [66.0659484375, 31.7103242187], [65.9980218750, 31.7149109375], [65.9300953125, 31.7194976562], [65.8621687500, 31.7240843750], [65.7942421875, 31.7286710937], [65.7263156250, 31.7332578125], [65.6583890625, 31.7378445312], [65.5904625000, 31.7424312500], [65.5225359375, 31.7470179688], [65.4546093750, 31.7516046875], [65.3866828125, 31.7561914063], [65.3187562500, 31.7607781250], [65.2508296875, 31.7653648437], [65.1829031250, 31.7699515625], [65.1149765625, 31.7745382813], [65.0470500000, 31.7791250000], [64.9791234375, 31.7837117187], [64.9111968750, 31.7882984375], [64.8432703125, 31.7928851563], [64.7753437500, 31.7974718750], [64.7074171875, 31.8020585937], [64.6394906250, 31.8066453125], [64.5715640625, 31.8112320313], [64.5036375000, 31.8158187500], [64.4357109375, 31.8204054687], [64.3677843750, 31.8249921875], [64.2998578125, 31.8295789062], [64.2319312500, 31.8341656250], [64.1640046875, 31.8387523437], [64.0960781250, 31.8433390625], [64.0281515625, 31.8479257812], [63.9602250000, 31.8525125000], [63.8922984375, 31.8570992188], [63.8243718750, 31.8616859375], [63.7564453125, 31.8662726563], [63.6885187500, 31.8708593750], [63.6205921875, 31.8754460937], [63.5526656250, 31.8800328125], [63.4847390625, 31.8846195313], [63.4168125000, 31.8892062500], [63.3488859375, 31.8937929687], [63.2809593750, 31.8983796875], [63.2130328125, 31.9029664063], [63.1451062500, 31.9075531250], [63.0771796875, 31.9121398437], [63.0092531250, 31.9167265625], [62.9413265625, 31.9213132813], [62.8734000000, 31.9259000000], [62.8189488281, 31.9275851562], [62.7644976563, 31.9292703125], [62.7100464844, 31.9309554687], [62.6555953125, 31.9326406250], [62.6011441406, 31.9343257812], [62.5466929687, 31.9360109375], [62.4922417969, 31.9376960937], [62.4377906250, 31.9393812500], [62.3833394531, 31.9410664062], [62.3288882812, 31.9427515625], [62.2744371094, 31.9444367187], [62.2199859375, 31.9461218750], [62.1655347656, 31.9478070312], [62.1110835937, 31.9494921875], [62.0566324219, 31.9511773437], [62.0021812500, 31.9528625000], [61.9477300781, 31.9545476562], [61.8932789062, 31.9562328125], [61.8388277344, 31.9579179687], [61.7843765625, 31.9596031250], [61.7299253906, 31.9612882812], [61.6754742187, 31.9629734375], [61.6210230469, 31.9646585938], [61.5665718750, 31.9663437500], [61.5121207031, 31.9680289062], [61.4576695312, 31.9697140625], [61.4032183594, 31.9713992188], [61.3487671875, 31.9730843750], [61.2943160156, 31.9747695312], [61.2398648437, 31.9764546875], [61.1854136719, 31.9781398438], [61.1309625000, 31.9798250000], [61.0765113281, 31.9815101562], [61.0220601562, 31.9831953125], [60.9676089844, 31.9848804687], [60.9131578125, 31.9865656250], [60.8587066406, 31.9882507812], [60.8042554688, 31.9899359375], [60.7498042969, 31.9916210937], [60.6953531250, 31.9933062500], [60.6409019531, 31.9949914063], [60.5864507812, 31.9966765625], [60.5319996094, 31.9983617188], [60.4775484375, 32.0000468750], [60.4230972656, 32.0017320313], [60.3686460938, 32.0034171875], [60.3141949219, 32.0051023438], [60.2597437500, 32.0067875000], [60.2052925781, 32.0084726562], [60.1508414062, 32.0101578125], [60.0963902344, 32.0118429688], [60.0419390625, 32.0135281250], [59.9874878906, 32.0152132812], [59.9330367188, 32.0168984375], [59.8785855469, 32.0185835938], [59.8241343750, 32.0202687500], [59.7696832031, 32.0219539062], [59.7152320312, 32.0236390625], [59.6607808594, 32.0253242188], [59.6063296875, 32.0270093750], [59.5518785156, 32.0286945312], [59.4974273438, 32.0303796875], [59.4429761719, 32.0320648437], [59.3885250000, 32.0337500000], [59.3340738281, 32.0354351562], [59.2796226562, 32.0371203125], [59.2251714844, 32.0388054687], [59.1707203125, 32.0404906250], [59.1162691406, 32.0421757812], [59.0618179688, 32.0438609375], [59.0073667969, 32.0455460937], [58.9529156250, 32.0472312500], [58.8984644531, 32.0489164062], [58.8440132812, 32.0506015625], [58.7895621094, 32.0522867187], [58.7351109375, 32.0539718750], [58.6806597656, 32.0556570312], [58.6262085938, 32.0573421875], [58.5717574219, 32.0590273437], [58.5173062500, 32.0607125000], [58.4628550781, 32.0623976562], [58.4084039063, 32.0640828125], [58.3539527344, 32.0657679687], [58.2995015625, 32.0674531250], [58.2450503906, 32.0691382812], [58.1905992188, 32.0708234375], [58.1361480469, 32.0725085937], [58.0816968750, 32.0741937500], [58.0272457031, 32.0758789062], [57.9727945313, 32.0775640625], [57.9183433594, 32.0792492187], [57.8638921875, 32.0809343750], [57.8094410156, 32.0826195312], [57.7549898437, 32.0843046875], [57.7005386719, 32.0859898437], [57.6460875000, 32.0876750000], [57.5916363281, 32.0893601562], [57.5371851563, 32.0910453125], [57.4827339844, 32.0927304687], [57.4282828125, 32.0944156250], [57.3738316406, 32.0961007813], [57.3193804687, 32.0977859375], [57.2649292969, 32.0994710937], [57.2104781250, 32.1011562500], [57.1560269531, 32.1028414063], [57.1015757812, 32.1045265625], [57.0471246094, 32.1062117188], [56.9926734375, 32.1078968750], [56.9382222656, 32.1095820312], [56.8837710937, 32.1112671875], [56.8293199219, 32.1129523438], [56.7748687500, 32.1146375000], [56.7204175781, 32.1163226562], [56.6659664062, 32.1180078125], [56.6115152344, 32.1196929688], [56.5570640625, 32.1213781250], [56.5026128906, 32.1230632812], [56.4481617188, 32.1247484375], [56.3937105469, 32.1264335938], [56.3392593750, 32.1281187500], [56.2848082031, 32.1298039062], [56.2303570312, 32.1314890625], [56.1759058594, 32.1331742187], [56.1214546875, 32.1348593750], [56.0670035156, 32.1365445312], [56.0125523438, 32.1382296875], [55.9581011719, 32.1399148437], [55.9036500000, 32.1416000000], [55.8491988281, 32.1432851562], [55.7947476562, 32.1449703125], [55.7402964844, 32.1466554687], [55.6858453125, 32.1483406250], [55.6313941406, 32.1500257812], [55.5769429688, 32.1517109375], [55.5224917969, 32.1533960937], [55.4680406250, 32.1550812500], [55.4135894531, 32.1567664062], [55.3591382812, 32.1584515625], [55.3046871094, 32.1601367187], [55.2502359375, 32.1618218750], [55.1957847656, 32.1635070312], [55.1413335938, 32.1651921875], [55.0868824219, 32.1668773437], [55.0324312500, 32.1685625000], [54.9779800781, 32.1702476562], [54.9235289062, 32.1719328125], [54.8690777344, 32.1736179687], [54.8146265625, 32.1753031250], [54.7601753906, 32.1769882812], [54.7057242188, 32.1786734375], [54.6512730469, 32.1803585937], [54.5968218750, 32.1820437500], [54.5423707031, 32.1837289062], [54.4879195313, 32.1854140625], [54.4334683594, 32.1870992187], [54.3790171875, 32.1887843750], [54.3245660156, 32.1904695312], [54.2701148437, 32.1921546875], [54.2156636719, 32.1938398437], [54.1612125000, 32.1955250000], [54.1067613281, 32.1972101562], [54.0523101563, 32.1988953125], [53.9978589844, 32.2005804687], [53.9434078125, 32.2022656250], [53.8889566406, 32.2039507813], [53.8345054687, 32.2056359375], [53.7800542969, 32.2073210937], [53.7256031250, 32.2090062500], [53.6711519531, 32.2106914062], [53.6167007812, 32.2123765625], [53.5622496094, 32.2140617188], [53.5077984375, 32.2157468750], [53.4533472656, 32.2174320312], [53.3988960937, 32.2191171875], [53.3444449219, 32.2208023438], [53.2899937500, 32.2224875000], [53.2355425781, 32.2241726562], [53.1810914062, 32.2258578125], [53.1266402344, 32.2275429688], [53.0721890625, 32.2292281250], [53.0177378906, 32.2309132812], [52.9632867187, 32.2325984375], [52.9088355469, 32.2342835937], [52.8543843750, 32.2359687500], [52.7999332031, 32.2376539062], [52.7454820312, 32.2393390625], [52.6910308594, 32.2410242187], [52.6365796875, 32.2427093750], [52.5821285156, 32.2443945312], [52.5276773437, 32.2460796875], [52.4732261719, 32.2477648437], [52.4187750000, 32.2494500000], [52.3643238281, 32.2511351562], [52.3098726562, 32.2528203125], [52.2554214844, 32.2545054687], [52.2009703125, 32.2561906250], [52.1465191406, 32.2578757812], [52.0920679688, 32.2595609375], [52.0376167969, 32.2612460937], [51.9831656250, 32.2629312500], [51.9287144531, 32.2646164062], [51.8742632812, 32.2663015625], [51.8198121094, 32.2679867187], [51.7653609375, 32.2696718750], [51.7109097656, 32.2713570312], [51.6564585938, 32.2730421875], [51.6020074219, 32.2747273438], [51.5475562500, 32.2764125000], [51.4931050781, 32.2780976562], [51.4386539062, 32.2797828125], [51.3842027344, 32.2814679688], [51.3297515625, 32.2831531250], [51.2753003906, 32.2848382813], [51.2208492188, 32.2865234375], [51.1663980469, 32.2882085937], [51.1119468750, 32.2898937500], [51.0574957031, 32.2915789063], [51.0030445312, 32.2932640625], [50.9485933594, 32.2949492188], [50.8941421875, 32.2966343750], [50.8396910156, 32.2983195313], [50.7852398438, 32.3000046875], [50.7307886719, 32.3016898438], [50.6763375000, 32.3033750000], [50.6218863281, 32.3050601563], [50.5674351562, 32.3067453125], [50.5129839844, 32.3084304688], [50.4585328125, 32.3101156250], [50.4040816406, 32.3118007812], [50.3496304688, 32.3134859375], [50.2951792969, 32.3151710938], [50.2407281250, 32.3168562500], [50.1862769531, 32.3185414062], [50.1318257813, 32.3202265625], [50.0773746094, 32.3219117188], [50.0229234375, 32.3235968750], [49.9684722656, 32.3252820312], [49.9140210938, 32.3269671875], [49.8595699219, 32.3286523438], [49.8051187500, 32.3303375000], [49.7506675781, 32.3320226562], [49.6962164063, 32.3337078125], [49.6417652344, 32.3353929687], [49.5873140625, 32.3370781250], [49.5328628906, 32.3387632812], [49.4784117188, 32.3404484375], [49.4239605469, 32.3421335937], [49.3695093750, 32.3438187500], [49.3150582031, 32.3455039063], [49.2606070313, 32.3471890625], [49.2061558594, 32.3488742187], [49.1517046875, 32.3505593750], [49.0972535156, 32.3522445313], [49.0428023437, 32.3539296875], [48.9883511719, 32.3556148438], [48.9339000000, 32.3573000000], [48.8588312500, 32.3596250000], [48.7837625000, 32.3619500000], [48.7086937500, 32.3642750000], [48.6336250000, 32.3666000000], [48.5585562500, 32.3689250000], [48.4834875000, 32.3712500000], [48.4084187500, 32.3735750000], [48.3333500000, 32.3759000000], [48.2582812500, 32.3782250000], [48.1832125000, 32.3805500000], [48.1081437500, 32.3828750000], [48.0330750000, 32.3852000000], [47.9580062500, 32.3875250000], [47.8829375000, 32.3898500000], [47.8078687500, 32.3921750000], [47.7328000000, 32.3945000000], [47.6501734375, 32.3949117187], [47.5675468750, 32.3953234375], [47.4849203125, 32.3957351562], [47.4022937500, 32.3961468750], [47.3196671875, 32.3965585938], [47.2370406250, 32.3969703125], [47.1544140625, 32.3973820313], [47.0717875000, 32.3977937500], [46.9891609375, 32.3982054688], [46.9065343750, 32.3986171875], [46.8239078125, 32.3990289063], [46.7412812500, 32.3994406250], [46.6586546875, 32.3998523437], [46.5760281250, 32.4002640625], [46.4934015625, 32.4006757813], [46.4107750000, 32.4010875000], [46.3281484375, 32.4014992188], [46.2455218750, 32.4019109375], [46.1628953125, 32.4023226563], [46.0802687500, 32.4027343750], [45.9976421875, 32.4031460937], [45.9150156250, 32.4035578125], [45.8323890625, 32.4039695312], [45.7497625000, 32.4043812500], [45.6671359375, 32.4047929688], [45.5845093750, 32.4052046875], [45.5018828125, 32.4056164063], [45.4192562500, 32.4060281250], [45.3366296875, 32.4064398437], [45.2540031250, 32.4068515625], [45.1713765625, 32.4072632812], [45.0887500000, 32.4076750000], [45.0061234375, 32.4080867187], [44.9234968750, 32.4084984375], [44.8408703125, 32.4089101563], [44.7582437500, 32.4093218750], [44.6756171875, 32.4097335937], [44.5929906250, 32.4101453125], [44.5103640625, 32.4105570312], [44.4277375000, 32.4109687500], [44.3451109375, 32.4113804687]]);
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
import math
import time

from stl import mesh, Dimension

from tkinter import Tk     # from tkinter import Tk for Python 3.x
from tkinter.filedialog import askopenfilename
from mpl_toolkits.mplot3d import art3d
from matplotlib import pyplot as plt
import solid
import os
import ezdxf
import shapely.geometry as sg
import subprocess
from GUI import getSCADPath



def outputSTL(From, To, PATH=getSCADPath()):
    subprocess.Popen(PATH + " -o " + To + " " + From)
    while not os.path.exists(To):
        time.sleep(1)


def get_size(i):
    x_list = [int(a) for a in str(i)]
    return len(x_list)



class Model:
    def __init__(self, model, fileName, location, layer, thickness):
        self.location = location
        self.code = None
        self.fileName = fileName
        self.stl = fileName + ".stl"
        self.layer = layer
        self.thickness = thickness
        self.maxz = (layer+1)*thickness
        self.dxf = fileName + ".dxf"
        self.scad = fileName + ".scad"
        self.model = model
        self.center = None
        self.width = 10
        self.mesh = None
        self.useable_area = None


    def get_code(self):
        max_dim = 0.05
        max_array = 6

        num = int(self.fileName)
        nums = [int(a) for a in str(num)]
        nums.reverse()
        indices = nums
        length = len(nums)

        print(indices)
        t = 0
        i = 0
        cubes = []
        x = 0
        y = 0
        width = 0.01
        while x <= max_dim:
            while y <= max_dim:
                print(indices)
                if nums == []:
                    break
                if indices[0] != 0:
                    cubes.append(solid.translate([x, y, 0])(solid.cube(size=t / 1000 + 0.001)))
                    y += max_dim / (max_array - 1)
                    nums[0] = nums[0] - 1
                else:
                    indices.pop(0)
                    t += 1
                i += 1
            x += max_dim / (max_array - 1)
            y = 0

        outside = solid.translate([-width / 2, -width / 2])(solid.cube(max_dim + (length - 1) / 1000 + 0.001 + width))
        self.code = solid.difference()(outside, cubes)
        self.code = solid.projection(cut=True)(self.code)
        solid.scad_render_to_file(self.code, self.location + "/code.scad")
        outputSTL(From=self.location+"/code.scad", To=self.location+"code.dxf", PATH=getSCADPath())
        # os.system("toSTL.sh renders/code.scad renders/code.dxf")
        return self.location+"/code.dxf"

    def download(self, type):
        if type =="stl":
            print("generating:" + self.location+"/"+ self.fileName+".stl")
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".stl")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".stl")
        elif type == "dxf":
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".dxf")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".dxf")

    def render(self):
        solid.scad_render_to_file(self.model, self.location+"/"+ self.fileName+'.scad')
        while not os.path.exists(self.location+"/"+self.fileName+".scad"):
            time.sleep(1)

    def get_points(self):
        doc = ezdxf.readfile(filename=self.location+"/"+ self.fileName+".dxf")
        msp = doc.modelspace()
        i=0
        lists = []
        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return [start, end]

        for e in msp.query("LINE"):
            line = helper(e)
            if not lists:
                lists.append([line])
            else:
                if lists[i][len(lists)-1][1] != line[0]:
                    lists.append([line])
                    i+=1
                else:
                    lists[i].append(line)

    def get_points2(self, FILE):
        doc = ezdxf.readfile(filename=FILE)
        msp = doc.modelspace()
        i = 0
        lists = []

        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return (start, end)

        for e in msp.query("LINE"):
            line = helper(e)
            if lists==[]:
                lists.append([line])
            else:
                if lists[i][len(lists[i]) - 1][1] != line[0]:
                    lists.append([line])
                    i += 1
                else:
                    lists[i].append(line)
        return lists

    def add_code(self):
        dxf = solid.projection(cut=False)(self.model)
        offset = solid.offset(r=-0.1)(dxf)
        solid.scad_render_to_file(offset, self.location+'/offset.scad')
        os.system("toSTL.sh renders/offset.scad renders/offset.dxf")
        lines = self.get_points2("renders/offset.dxf")
        x = lines[0][0][0][0]
        y = lines[0][0][0][1]
        print(x)
        print(y)
        code = solid.translate([x,y,0])(self.code)
        code = solid.linear_extrude(height=999)(code)
        save = self.model
        self.model = solid.projection()(solid.difference()(self.model, code))
        self.render()
        self.download("dxf")
        self.model = save

    def add_label(self, pos):
        # num = 12
        # minx, maxx, miny, maxy, minz, maxz = self.find_minmax()
        maxz = self.maxz
        # label = solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.5, halign="center"))
        # i=minx
        # print("x-len: " + str(maxx-minx))
        # print(i)
        # inc = (maxx-minx)/num
        # while minx <= i <= maxx:
        #     label = solid.union()(solid.translate([i, 0, maxz - 0.2])(solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.25, halign="center"))), label)
        #     i += inc
        #
        # l = label
        #
        # i =miny
        # while miny<= i <= maxy:
        #     print("y inc")
        #     l = solid.union()(solid.translate([0, i, 0])(label), l)
        #     i += 0.5
        for i in str(self.fileName):
            cur = pos[0]
            label = solid.translate([pos[0][0], pos[0][1], self.maxz-0.2])(solid.linear_extrude(height=(self.thickness)/3)(solid.text(str(i), size=0.5, halign="center", valign="center")))
            self.model = solid.difference()(self.model, label)
            pos.append(pos.pop(0))
            while abs(cur[0]-pos[0][0])<0.5 and abs(cur[1]-pos[0][1])<0.5:
                pos.append(pos.pop(0))



    def Center(self):

        volume, cog, inertia = self.mesh.get_mass_properties()
        print("Volume                                  = {0}".format(volume))
        print("Position of the center of gravity (COG) = {0}".format(cog))
        m_centered = solid.translate([-cog[0], -cog[1], 0])(
            self.model
        )
        return m_centered

    def find_minmax(self):
        minx = maxx = miny = maxy = minz = maxz = None
        for p in self.mesh.points:
            # p contains (x, y, z)
            if minx is None:
                minx = p[Dimension.X]
                maxx = p[Dimension.X]
                miny = p[Dimension.Y]
                maxy = p[Dimension.Y]
                minz = p[Dimension.Z]
                maxz = p[Dimension.Z]
            else:
                maxx = max(p[Dimension.X], maxx)
                minx = min(p[Dimension.X], minx)
                maxy = max(p[Dimension.Y], maxy)
                miny = min(p[Dimension.Y], miny)
                maxz = max(p[Dimension.Z], maxz)
                minz = min(p[Dimension.Z], minz)
        lenx = maxx - minx
        leny = maxy - miny
        lenz = maxz - minz
        return minx, maxx, miny, maxy, minz, maxz

    # def generate_Mesh(self):
    #     self.mesh = mesh.Mesh.from_file(self.location + "/" + str(int(self.fileName)//8)+ "b.stl")

    def get_top(self):
        top = solid.projection(cut=True)(solid.translate([0,0,-1*self.thickness*(self.layer+1)])(self.model))
        useable_area = solid.offset(r=-0.45)(top)
        self.useable_area = useable_area
        solid.scad_render_to_file(self.useable_area, self.location+'/' + 'toptemp.scad')
        outputSTL(From=self.location+'/' + 'toptemp.scad', To=self.location+"/top"+ self.dxf)

        # os.system("toSTL.sh out/toptemp.scad renders/" + self.fileName + ".dxf")
        dxf = DXF(self.location+"/top"+ self.dxf)
        min_p=dxf.points[0][0]
        points_ordered = dxf.points
        i=0
        while i <= len(dxf.points)+1:
            while math.sqrt((dxf.points[0][0]-dxf.points[1][0])**2+(dxf.points[0][1]-dxf.points[1][1])**2) > 0.1:
                dxf.points.insert(1, [(dxf.points[0][0]+dxf.points[1][0])/2, (dxf.points[0][1]+dxf.points[1][1])/2])
                i = i-1
            dxf.points.append(dxf.points.pop(0))
            i+=1
        for i in range(len(dxf.points)):
            dxf.points.append(dxf.points.pop(0))
            if dxf.points[0][0] < min_p:
                min_p = dxf.points[0][0]
                points_ordered = dxf.points.copy()
        dxf.points = points_ordered.copy()

        print(dxf.points)
        self.add_label(dxf.points)

class DXF:
    def __init__(self, file):
        self.file = file
        self.Lines = []
        self.points = []
        doc = ezdxf.readfile(self.file)
        msp = doc.modelspace()
        for e in msp:
            if e.dxftype() == "LINE":
                self.Lines.append(e)
                self.points.append([e.dxf.start[0], e.dxf.start[1]])
        # self.points.append([self.Lines[-1].dxf.end[0], self.Lines[-1].dxf.end[1]])
        self.area = None
        self.center = None
        self.polygon = sg.Polygon(self.points)

    def get_area(self):
        self.area = self.polygon.area
        return self.area

    def get_center(self):
        x_sum = 0
        y_sum =0
        for i in self.points:
            x_sum += i[0]
            y_sum += i[1]
        x_c = x_sum/len(self.points)
        y_c = y_sum/len(self.points)
        return (x_c, y_c)

    def split(self, maxdim):
        splits = []
        length = 0
        pieces = [[]]
        prev = self.points[0]
        for j in self.points:
            length = length + math.sqrt((prev[0]-j[0])**2+(prev[1]-j[1])**2)
            if length >= maxdim:
                pieces[-1].append(j)
                pieces.append([])
                length = 0
            pieces[-1].append(j)
            prev = j
        for j in pieces:
            j.insert(0, [0,0])
            piece = solid.linear_extrude(height=1)(solid.polygon(j))
            splits.append(piece)
        return splits
    def refine_points(self):
        i=0
        while i <= len(self.points)+1:
            while math.sqrt((self.points[0][0]-self.points[1][0])**2+(self.points[0][1]-self.points[1][1])**2) > 0.1:
                self.points.insert(1, [(self.points[0][0]+self.points[1][0])/2, (self.points[0][1]+self.points[1][1])/2])
                i = i-1
            self.points.append(self.points.pop(0))
            i+=1


if __name__== "__main__":
    test = DXF("C:/Users/Daniel/Documents/repos/Shell_Maker/output/0top_slice.dxf")
    test.refine_points()
    k = test.split(48)
    for i in range(len(k)):
        solid.scad_render_to_file(k[i], str(i) + ".scad")


 
 
************************************************/
