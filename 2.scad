// Generated by SolidPython 1.1.3 on 2024-05-19 23:35:49


linear_extrude(height = 1) {
	polygon(points = [[0, 0], [-19.8494445312, -31.9016843750], [-19.7820644531, -31.9034984375], [-19.7146843750, -31.9053125000], [-19.6473042969, -31.9071265625], [-19.5799242187, -31.9089406250], [-19.5125441406, -31.9107546875], [-19.4451640625, -31.9125687500], [-19.3777839844, -31.9143828125], [-19.3104039062, -31.9161968750], [-19.2430238281, -31.9180109375], [-19.1756437500, -31.9198250000], [-19.1082636719, -31.9216390625], [-19.0408835937, -31.9234531250], [-18.9735035156, -31.9252671875], [-18.9061234375, -31.9270812500], [-18.8387433594, -31.9288953125], [-18.7713632813, -31.9307093750], [-18.7039832031, -31.9325234375], [-18.6366031250, -31.9343375000], [-18.5692230469, -31.9361515625], [-18.5018429688, -31.9379656250], [-18.4344628906, -31.9397796875], [-18.3670828125, -31.9415937500], [-18.2997027344, -31.9434078125], [-18.2323226562, -31.9452218750], [-18.1649425781, -31.9470359375], [-18.0975625000, -31.9488500000], [-18.0301824219, -31.9506640625], [-17.9628023437, -31.9524781250], [-17.8954222656, -31.9542921875], [-17.8280421875, -31.9561062500], [-17.7606621094, -31.9579203125], [-17.6932820312, -31.9597343750], [-17.6259019531, -31.9615484375], [-17.5585218750, -31.9633625000], [-17.4911417969, -31.9651765625], [-17.4237617187, -31.9669906250], [-17.3563816406, -31.9688046875], [-17.2890015625, -31.9706187500], [-17.2216214844, -31.9724328125], [-17.1542414062, -31.9742468750], [-17.0868613281, -31.9760609375], [-17.0194812500, -31.9778750000], [-16.9521011719, -31.9796890625], [-16.8847210937, -31.9815031250], [-16.8173410156, -31.9833171875], [-16.7499609375, -31.9851312500], [-16.6825808594, -31.9869453125], [-16.6152007812, -31.9887593750], [-16.5478207031, -31.9905734375], [-16.4804406250, -31.9923875000], [-16.4130605469, -31.9942015625], [-16.3456804688, -31.9960156250], [-16.2783003906, -31.9978296875], [-16.2109203125, -31.9996437500], [-16.1435402344, -32.0014578125], [-16.0761601563, -32.0032718750], [-16.0087800781, -32.0050859375], [-15.9414000000, -32.0069000000], [-15.8732650391, -32.0077462891], [-15.8051300781, -32.0085925781], [-15.7369951172, -32.0094388672], [-15.6688601562, -32.0102851563], [-15.6007251953, -32.0111314453], [-15.5325902344, -32.0119777344], [-15.4644552734, -32.0128240234], [-15.3963203125, -32.0136703125], [-15.3281853516, -32.0145166016], [-15.2600503906, -32.0153628906], [-15.1919154297, -32.0162091797], [-15.1237804687, -32.0170554688], [-15.0556455078, -32.0179017578], [-14.9875105469, -32.0187480469], [-14.9193755859, -32.0195943359], [-14.8512406250, -32.0204406250], [-14.7831056641, -32.0212869141], [-14.7149707031, -32.0221332031], [-14.6468357422, -32.0229794922], [-14.5787007812, -32.0238257813], [-14.5105658203, -32.0246720703], [-14.4424308594, -32.0255183594], [-14.3742958984, -32.0263646484], [-14.3061609375, -32.0272109375], [-14.2380259766, -32.0280572266], [-14.1698910156, -32.0289035156], [-14.1017560547, -32.0297498047], [-14.0336210937, -32.0305960938], [-13.9654861328, -32.0314423828], [-13.8973511719, -32.0322886719], [-13.8292162109, -32.0331349609], [-13.7610812500, -32.0339812500], [-13.6929462891, -32.0348275391], [-13.6248113281, -32.0356738281], [-13.5566763672, -32.0365201172], [-13.4885414063, -32.0373664063], [-13.4204064453, -32.0382126953], [-13.3522714844, -32.0390589844], [-13.2841365234, -32.0399052734], [-13.2160015625, -32.0407515625], [-13.1478666016, -32.0415978516], [-13.0797316406, -32.0424441406], [-13.0115966797, -32.0432904297], [-12.9434617188, -32.0441367188], [-12.8753267578, -32.0449830078], [-12.8071917969, -32.0458292969], [-12.7390568359, -32.0466755859], [-12.6709218750, -32.0475218750], [-12.6027869141, -32.0483681641], [-12.5346519531, -32.0492144531], [-12.4665169922, -32.0500607422], [-12.3983820312, -32.0509070313], [-12.3302470703, -32.0517533203], [-12.2621121094, -32.0525996094], [-12.1939771484, -32.0534458984], [-12.1258421875, -32.0542921875], [-12.0577072266, -32.0551384766], [-11.9895722656, -32.0559847656], [-11.9214373047, -32.0568310547], [-11.8533023437, -32.0576773438], [-11.7851673828, -32.0585236328], [-11.7170324219, -32.0593699219], [-11.6488974609, -32.0602162109], [-11.5807625000, -32.0610625000], [-11.5126275391, -32.0619087891], [-11.4444925781, -32.0627550781], [-11.3763576172, -32.0636013672], [-11.3082226562, -32.0644476563], [-11.2400876953, -32.0652939453], [-11.1719527344, -32.0661402344], [-11.1038177734, -32.0669865234], [-11.0356828125, -32.0678328125], [-10.9675478516, -32.0686791016], [-10.8994128906, -32.0695253906], [-10.8312779297, -32.0703716797], [-10.7631429687, -32.0712179688], [-10.6950080078, -32.0720642578], [-10.6268730469, -32.0729105469], [-10.5587380859, -32.0737568359], [-10.4906031250, -32.0746031250], [-10.4224681641, -32.0754494141], [-10.3543332031, -32.0762957031], [-10.2861982422, -32.0771419922], [-10.2180632813, -32.0779882813], [-10.1499283203, -32.0788345703], [-10.0817933594, -32.0796808594], [-10.0136583984, -32.0805271484], [-9.9455234375, -32.0813734375], [-9.8773884766, -32.0822197266], [-9.8092535156, -32.0830660156], [-9.7411185547, -32.0839123047], [-9.6729835938, -32.0847585938], [-9.6048486328, -32.0856048828], [-9.5367136719, -32.0864511719], [-9.4685787109, -32.0872974609], [-9.4004437500, -32.0881437500], [-9.3323087891, -32.0889900391], [-9.2641738281, -32.0898363281], [-9.1960388672, -32.0906826172], [-9.1279039062, -32.0915289063], [-9.0597689453, -32.0923751953], [-8.9916339844, -32.0932214844], [-8.9234990234, -32.0940677734], [-8.8553640625, -32.0949140625], [-8.7872291016, -32.0957603516], [-8.7190941406, -32.0966066406], [-8.6509591797, -32.0974529297], [-8.5828242187, -32.0982992188], [-8.5146892578, -32.0991455078], [-8.4465542969, -32.0999917969], [-8.3784193359, -32.1008380859], [-8.3102843750, -32.1016843750], [-8.2421494141, -32.1025306641], [-8.1740144531, -32.1033769531], [-8.1058794922, -32.1042232422], [-8.0377445312, -32.1050695313], [-7.9696095703, -32.1059158203], [-7.9014746094, -32.1067621094], [-7.8333396484, -32.1076083984], [-7.7652046875, -32.1084546875], [-7.6970697266, -32.1093009766], [-7.6289347656, -32.1101472656], [-7.5607998047, -32.1109935547], [-7.4926648437, -32.1118398438], [-7.4245298828, -32.1126861328], [-7.3563949219, -32.1135324219], [-7.2882599609, -32.1143787109], [-7.2201250000, -32.1152250000], [-7.1519900391, -32.1160712891], [-7.0838550781, -32.1169175781], [-7.0157201172, -32.1177638672], [-6.9475851562, -32.1186101562], [-6.8794501953, -32.1194564453], [-6.8113152344, -32.1203027344], [-6.7431802734, -32.1211490234], [-6.6750453125, -32.1219953125], [-6.6069103516, -32.1228416016], [-6.5387753906, -32.1236878906], [-6.4706404297, -32.1245341797], [-6.4025054688, -32.1253804688], [-6.3343705078, -32.1262267578], [-6.2662355469, -32.1270730469], [-6.1981005859, -32.1279193359], [-6.1299656250, -32.1287656250], [-6.0618306641, -32.1296119141], [-5.9936957031, -32.1304582031], [-5.9255607422, -32.1313044922], [-5.8574257812, -32.1321507813], [-5.7892908203, -32.1329970703], [-5.7211558594, -32.1338433594], [-5.6530208984, -32.1346896484], [-5.5848859375, -32.1355359375], [-5.5167509766, -32.1363822266], [-5.4486160156, -32.1372285156], [-5.3804810547, -32.1380748047], [-5.3123460937, -32.1389210937], [-5.2442111328, -32.1397673828], [-5.1760761719, -32.1406136719], [-5.1079412109, -32.1414599609], [-5.0398062500, -32.1423062500], [-4.9716712891, -32.1431525391], [-4.9035363281, -32.1439988281], [-4.8354013672, -32.1448451172], [-4.7672664063, -32.1456914063], [-4.6991314453, -32.1465376953], [-4.6309964844, -32.1473839844], [-4.5628615234, -32.1482302734], [-4.4947265625, -32.1490765625], [-4.4265916016, -32.1499228516], [-4.3584566406, -32.1507691406], [-4.2903216797, -32.1516154297], [-4.2221867188, -32.1524617188], [-4.1540517578, -32.1533080078], [-4.0859167969, -32.1541542969], [-4.0177818359, -32.1550005859], [-3.9496468750, -32.1558468750], [-3.8815119141, -32.1566931641], [-3.8133769531, -32.1575394531], [-3.7452419922, -32.1583857422], [-3.6771070312, -32.1592320312], [-3.6089720703, -32.1600783203], [-3.5408371094, -32.1609246094], [-3.4727021484, -32.1617708984], [-3.4045671875, -32.1626171875], [-3.3364322266, -32.1634634766], [-3.2682972656, -32.1643097656], [-3.2001623047, -32.1651560547], [-3.1320273437, -32.1660023438], [-3.0638923828, -32.1668486328], [-2.9957574219, -32.1676949219], [-2.9276224609, -32.1685412109], [-2.8594875000, -32.1693875000], [-2.7913525391, -32.1702337891], [-2.7232175781, -32.1710800781], [-2.6550826172, -32.1719263672], [-2.5869476562, -32.1727726563], [-2.5188126953, -32.1736189453], [-2.4506777344, -32.1744652344], [-2.3825427734, -32.1753115234], [-2.3144078125, -32.1761578125], [-2.2462728516, -32.1770041016], [-2.1781378906, -32.1778503906], [-2.1100029297, -32.1786966797], [-2.0418679688, -32.1795429687], [-1.9737330078, -32.1803892578], [-1.9055980469, -32.1812355469], [-1.8374630859, -32.1820818359], [-1.7693281250, -32.1829281250], [-1.7011931641, -32.1837744141], [-1.6330582031, -32.1846207031], [-1.5649232422, -32.1854669922], [-1.4967882812, -32.1863132813], [-1.4286533203, -32.1871595703], [-1.3605183594, -32.1880058594], [-1.2923833984, -32.1888521484], [-1.2242484375, -32.1896984375], [-1.1561134766, -32.1905447266], [-1.0879785156, -32.1913910156], [-1.0198435547, -32.1922373047], [-0.9517085937, -32.1930835938], [-0.8835736328, -32.1939298828], [-0.8154386719, -32.1947761719], [-0.7473037109, -32.1956224609], [-0.6791687500, -32.1964687500], [-0.6110337891, -32.1973150391], [-0.5428988281, -32.1981613281], [-0.4747638672, -32.1990076172], [-0.4066289062, -32.1998539062], [-0.3384939453, -32.2007001953], [-0.2703589844, -32.2015464844], [-0.2022240234, -32.2023927734], [-0.1340890625, -32.2032390625], [-0.0659541016, -32.2040853516], [0.0021808594, -32.2049316406], [0.0703158203, -32.2057779297], [0.1384507813, -32.2066242188], [0.2065857422, -32.2074705078], [0.2747207031, -32.2083167969], [0.3428556641, -32.2091630859], [0.4109906250, -32.2100093750], [0.4791255859, -32.2108556641], [0.5472605469, -32.2117019531], [0.6153955078, -32.2125482422], [0.6835304688, -32.2133945313], [0.7516654297, -32.2142408203], [0.8198003906, -32.2150871094], [0.8879353516, -32.2159333984], [0.9560703125, -32.2167796875], [1.0242052734, -32.2176259766], [1.0923402344, -32.2184722656], [1.1604751953, -32.2193185547], [1.2286101563, -32.2201648437], [1.2967451172, -32.2210111328], [1.3648800781, -32.2218574219], [1.4330150391, -32.2227037109], [1.5011500000, -32.2235500000], [1.5692849609, -32.2243962891], [1.6374199219, -32.2252425781], [1.7055548828, -32.2260888672], [1.7736898437, -32.2269351563], [1.8418248047, -32.2277814453], [1.9099597656, -32.2286277344], [1.9780947266, -32.2294740234], [2.0462296875, -32.2303203125], [2.1143646484, -32.2311666016], [2.1824996094, -32.2320128906], [2.2506345703, -32.2328591797], [2.3187695313, -32.2337054688], [2.3869044922, -32.2345517578], [2.4550394531, -32.2353980469], [2.5231744141, -32.2362443359], [2.5913093750, -32.2370906250], [2.6594443359, -32.2379369141], [2.7275792969, -32.2387832031], [2.7957142578, -32.2396294922], [2.8638492187, -32.2404757812], [2.9319841797, -32.2413220703], [3.0001191406, -32.2421683594], [3.0682541016, -32.2430146484], [3.1363890625, -32.2438609375], [3.2045240234, -32.2447072266], [3.2726589844, -32.2455535156], [3.3407939453, -32.2463998047], [3.4089289062, -32.2472460938], [3.4770638672, -32.2480923828], [3.5451988281, -32.2489386719], [3.6133337891, -32.2497849609], [3.6814687500, -32.2506312500], [3.7496037109, -32.2514775391], [3.8177386719, -32.2523238281], [3.8858736328, -32.2531701172], [3.9540085938, -32.2540164063], [4.0221435547, -32.2548626953], [4.0902785156, -32.2557089844], [4.1584134766, -32.2565552734], [4.2265484375, -32.2574015625], [4.2946833984, -32.2582478516], [4.3628183594, -32.2590941406], [4.4309533203, -32.2599404297], [4.4990882812, -32.2607867187], [4.5672232422, -32.2616330078], [4.6353582031, -32.2624792969], [4.7034931641, -32.2633255859], [4.7716281250, -32.2641718750], [4.8397630859, -32.2650181641], [4.9078980469, -32.2658644531], [4.9760330078, -32.2667107422], [5.0441679688, -32.2675570312], [5.1123029297, -32.2684033203], [5.1804378906, -32.2692496094], [5.2485728516, -32.2700958984], [5.3167078125, -32.2709421875], [5.3848427734, -32.2717884766], [5.4529777344, -32.2726347656], [5.5211126953, -32.2734810547], [5.5892476563, -32.2743273438], [5.6573826172, -32.2751736328], [5.7255175781, -32.2760199219], [5.7936525391, -32.2768662109], [5.8617875000, -32.2777125000], [5.9299224609, -32.2785587891], [5.9980574219, -32.2794050781], [6.0661923828, -32.2802513672], [6.1343273437, -32.2810976562], [6.2024623047, -32.2819439453], [6.2705972656, -32.2827902344], [6.3387322266, -32.2836365234], [6.4068671875, -32.2844828125], [6.4750021484, -32.2853291016], [6.5431371094, -32.2861753906], [6.6112720703, -32.2870216797], [6.6794070312, -32.2878679687], [6.7475419922, -32.2887142578], [6.8156769531, -32.2895605469], [6.8838119141, -32.2904068359], [6.9519468750, -32.2912531250], [7.0200818359, -32.2920994141], [7.0882167969, -32.2929457031], [7.1563517578, -32.2937919922], [7.2244867188, -32.2946382813], [7.2926216797, -32.2954845703], [7.3607566406, -32.2963308594], [7.4288916016, -32.2971771484], [7.4970265625, -32.2980234375], [7.5651615234, -32.2988697266], [7.6332964844, -32.2997160156], [7.7014314453, -32.3005623047], [7.7695664063, -32.3014085937], [7.8377013672, -32.3022548828], [7.9058363281, -32.3031011719], [7.9739712891, -32.3039474609], [8.0421062500, -32.3047937500], [8.1102412109, -32.3056400391], [8.1783761719, -32.3064863281], [8.2465111328, -32.3073326172], [8.3146460937, -32.3081789062], [8.3827810547, -32.3090251953], [8.4509160156, -32.3098714844], [8.5190509766, -32.3107177734], [8.5871859375, -32.3115640625], [8.6553208984, -32.3124103516], [8.7234558594, -32.3132566406], [8.7915908203, -32.3141029297], [8.8597257812, -32.3149492188], [8.9278607422, -32.3157955078], [8.9959957031, -32.3166417969], [9.0641306641, -32.3174880859], [9.1322656250, -32.3183343750], [9.2004005859, -32.3191806641], [9.2685355469, -32.3200269531], [9.3366705078, -32.3208732422], [9.4048054687, -32.3217195312], [9.4729404297, -32.3225658203], [9.5410753906, -32.3234121094], [9.6092103516, -32.3242583984], [9.6773453125, -32.3251046875], [9.7454802734, -32.3259509766], [9.8136152344, -32.3267972656], [9.8817501953, -32.3276435547], [9.9498851562, -32.3284898437], [10.0180201172, -32.3293361328], [10.0861550781, -32.3301824219], [10.1542900391, -32.3310287109], [10.2224250000, -32.3318750000], [10.2905599609, -32.3327212891], [10.3586949219, -32.3335675781], [10.4268298828, -32.3344138672], [10.4949648438, -32.3352601563], [10.5630998047, -32.3361064453], [10.6312347656, -32.3369527344], [10.6993697266, -32.3377990234], [10.7675046875, -32.3386453125], [10.8356396484, -32.3394916016], [10.9037746094, -32.3403378906], [10.9719095703, -32.3411841797], [11.0400445313, -32.3420304687], [11.1081794922, -32.3428767578], [11.1763144531, -32.3437230469], [11.2444494141, -32.3445693359], [11.3125843750, -32.3454156250], [11.3807193359, -32.3462619141], [11.4488542969, -32.3471082031], [11.5169892578, -32.3479544922], [11.5851242187, -32.3488007812], [11.6532591797, -32.3496470703], [11.7213941406, -32.3504933594], [11.7895291016, -32.3513396484], [11.8576640625, -32.3521859375], [11.9257990234, -32.3530322266], [11.9939339844, -32.3538785156], [12.0620689453, -32.3547248047], [12.1302039062, -32.3555710938], [12.1983388672, -32.3564173828], [12.2664738281, -32.3572636719], [12.3346087891, -32.3581099609], [12.4027437500, -32.3589562500], [12.4708787109, -32.3598025391], [12.5390136719, -32.3606488281], [12.6071486328, -32.3614951172], [12.6752835937, -32.3623414062], [12.7434185547, -32.3631876953], [12.8115535156, -32.3640339844], [12.8796884766, -32.3648802734], [12.9478234375, -32.3657265625], [13.0159583984, -32.3665728516], [13.0840933594, -32.3674191406], [13.1522283203, -32.3682654297], [13.2203632812, -32.3691117187], [13.2884982422, -32.3699580078], [13.3566332031, -32.3708042969], [13.4247681641, -32.3716505859], [13.4929031250, -32.3724968750], [13.5610380859, -32.3733431641], [13.6291730469, -32.3741894531], [13.6973080078, -32.3750357422], [13.7654429688, -32.3758820313], [13.8335779297, -32.3767283203], [13.9017128906, -32.3775746094], [13.9698478516, -32.3784208984], [14.0379828125, -32.3792671875], [14.1061177734, -32.3801134766], [14.1742527344, -32.3809597656], [14.2423876953, -32.3818060547], [14.3105226563, -32.3826523437], [14.3786576172, -32.3834986328], [14.4467925781, -32.3843449219], [14.5149275391, -32.3851912109], [14.5830625000, -32.3860375000], [14.6511974609, -32.3868837891], [14.7193324219, -32.3877300781], [14.7874673828, -32.3885763672], [14.8556023438, -32.3894226562], [14.9237373047, -32.3902689453], [14.9918722656, -32.3911152344], [15.0600072266, -32.3919615234], [15.1281421875, -32.3928078125], [15.1962771484, -32.3936541016], [15.2644121094, -32.3945003906], [15.3325470703, -32.3953466797], [15.4006820312, -32.3961929688], [15.4688169922, -32.3970392578], [15.5369519531, -32.3978855469], [15.6050869141, -32.3987318359], [15.6732218750, -32.3995781250], [15.7413568359, -32.4004244141], [15.8094917969, -32.4012707031], [15.8776267578, -32.4021169922], [15.9457617188, -32.4029632812], [16.0138966797, -32.4038095703], [16.0820316406, -32.4046558594], [16.1501666016, -32.4055021484], [16.2183015625, -32.4063484375], [16.2864365234, -32.4071947266], [16.3545714844, -32.4080410156], [16.4227064453, -32.4088873047], [16.4908414063, -32.4097335937], [16.5589763672, -32.4105798828], [16.6271113281, -32.4114261719], [16.6952462891, -32.4122724609], [16.7633812500, -32.4131187500], [16.8315162109, -32.4139650391], [16.8996511719, -32.4148113281], [16.9677861328, -32.4156576172], [17.0359210938, -32.4165039062], [17.1040560547, -32.4173501953], [17.1721910156, -32.4181964844], [17.2403259766, -32.4190427734], [17.3084609375, -32.4198890625], [17.3765958984, -32.4207353516], [17.4447308594, -32.4215816406], [17.5128658203, -32.4224279297], [17.5810007813, -32.4232742187], [17.6491357422, -32.4241205078], [17.7172707031, -32.4249667969], [17.7854056641, -32.4258130859], [17.8535406250, -32.4266593750], [17.9216755859, -32.4275056641], [17.9898105469, -32.4283519531], [18.0579455078, -32.4291982422], [18.1260804688, -32.4300445312], [18.1942154297, -32.4308908203], [18.2623503906, -32.4317371094], [18.3304853516, -32.4325833984], [18.3986203125, -32.4334296875], [18.4667552734, -32.4342759766], [18.5348902344, -32.4351222656], [18.6030251953, -32.4359685547], [18.6711601563, -32.4368148437], [18.7392951172, -32.4376611328], [18.8074300781, -32.4385074219], [18.8755650391, -32.4393537109], [18.9437000000, -32.4402000000], [19.0098562500, -32.4409062500], [19.0760125000, -32.4416125000], [19.1421687500, -32.4423187500], [19.2083250000, -32.4430250000], [19.2744812500, -32.4437312500], [19.3406375000, -32.4444375000], [19.4067937500, -32.4451437500], [19.4729500000, -32.4458500000], [19.5391062500, -32.4465562500], [19.6052625000, -32.4472625000], [19.6714187500, -32.4479687500], [19.7375750000, -32.4486750000], [19.8037312500, -32.4493812500], [19.8698875000, -32.4500875000], [19.9360437500, -32.4507937500], [20.0022000000, -32.4515000000], [20.0683562500, -32.4522062500], [20.1345125000, -32.4529125000], [20.2006687500, -32.4536187500], [20.2668250000, -32.4543250000], [20.3329812500, -32.4550312500], [20.3991375000, -32.4557375000], [20.4652937500, -32.4564437500], [20.5314500000, -32.4571500000], [20.5976062500, -32.4578562500], [20.6637625000, -32.4585625000], [20.7299187500, -32.4592687500], [20.7960750000, -32.4599750000], [20.8622312500, -32.4606812500], [20.9283875000, -32.4613875000], [20.9945437500, -32.4620937500], [21.0607000000, -32.4628000000], [21.1285000000, -32.4631750000], [21.1963000000, -32.4635500000], [21.2641000000, -32.4639250000], [21.3319000000, -32.4643000000], [21.4099265625, -32.4637671875], [21.4879531250, -32.4632343750], [21.5659796875, -32.4627015625], [21.6440062500, -32.4621687500], [21.7220328125, -32.4616359375], [21.8000593750, -32.4611031250], [21.8780859375, -32.4605703125], [21.9561125000, -32.4600375000], [22.0341390625, -32.4595046875], [22.1121656250, -32.4589718750], [22.1901921875, -32.4584390625], [22.2682187500, -32.4579062500], [22.3462453125, -32.4573734375], [22.4242718750, -32.4568406250], [22.5022984375, -32.4563078125], [22.5803250000, -32.4557750000], [22.6583515625, -32.4552421875], [22.7363781250, -32.4547093750], [22.8144046875, -32.4541765625], [22.8924312500, -32.4536437500], [22.9704578125, -32.4531109375], [23.0484843750, -32.4525781250], [23.1265109375, -32.4520453125], [23.2045375000, -32.4515125000], [23.2825640625, -32.4509796875], [23.3605906250, -32.4504468750], [23.4386171875, -32.4499140625], [23.5166437500, -32.4493812500], [23.5946703125, -32.4488484375], [23.6726968750, -32.4483156250], [23.7507234375, -32.4477828125], [23.8287500000, -32.4472500000], [23.9067765625, -32.4467171875], [23.9848031250, -32.4461843750], [24.0628296875, -32.4456515625], [24.1408562500, -32.4451187500], [24.2188828125, -32.4445859375], [24.2969093750, -32.4440531250], [24.3749359375, -32.4435203125], [24.4529625000, -32.4429875000], [24.5309890625, -32.4424546875], [24.6090156250, -32.4419218750], [24.6870421875, -32.4413890625], [24.7650687500, -32.4408562500], [24.8430953125, -32.4403234375], [24.9211218750, -32.4397906250], [24.9991484375, -32.4392578125], [25.0771750000, -32.4387250000], [25.1552015625, -32.4381921875], [25.2332281250, -32.4376593750], [25.3112546875, -32.4371265625], [25.3892812500, -32.4365937500], [25.4673078125, -32.4360609375], [25.5453343750, -32.4355281250], [25.6233609375, -32.4349953125], [25.7013875000, -32.4344625000], [25.7794140625, -32.4339296875], [25.8574406250, -32.4333968750], [25.9354671875, -32.4328640625], [26.0134937500, -32.4323312500], [26.0915203125, -32.4317984375], [26.1695468750, -32.4312656250], [26.2475734375, -32.4307328125], [26.3256000000, -32.4302000000], [26.4047285156, -32.4295925781], [26.4838570313, -32.4289851563], [26.5629855469, -32.4283777344], [26.6421140625, -32.4277703125], [26.7212425781, -32.4271628906], [26.8003710938, -32.4265554688], [26.8794996094, -32.4259480469], [26.9586281250, -32.4253406250], [27.0377566406, -32.4247332031], [27.1168851562, -32.4241257813], [27.1960136719, -32.4235183594], [27.2751421875, -32.4229109375], [27.3542707031, -32.4223035156], [27.4333992188, -32.4216960938], [27.5125277344, -32.4210886719], [27.5916562500, -32.4204812500], [27.6707847656, -32.4198738281], [27.7499132813, -32.4192664063], [27.8290417969, -32.4186589844], [27.9081703125, -32.4180515625], [27.9872988281, -32.4174441406], [28.0664273438, -32.4168367187], [28.1455558594, -32.4162292969], [28.2246843750, -32.4156218750]]);
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
import math
import time

from stl import mesh, Dimension

from tkinter import Tk     # from tkinter import Tk for Python 3.x
from tkinter.filedialog import askopenfilename
from mpl_toolkits.mplot3d import art3d
from matplotlib import pyplot as plt
import solid
import os
import ezdxf
import shapely.geometry as sg
import subprocess
from GUI import getSCADPath



def outputSTL(From, To, PATH=getSCADPath()):
    subprocess.Popen(PATH + " -o " + To + " " + From)
    while not os.path.exists(To):
        time.sleep(1)


def get_size(i):
    x_list = [int(a) for a in str(i)]
    return len(x_list)



class Model:
    def __init__(self, model, fileName, location, layer, thickness):
        self.location = location
        self.code = None
        self.fileName = fileName
        self.stl = fileName + ".stl"
        self.layer = layer
        self.thickness = thickness
        self.maxz = (layer+1)*thickness
        self.dxf = fileName + ".dxf"
        self.scad = fileName + ".scad"
        self.model = model
        self.center = None
        self.width = 10
        self.mesh = None
        self.useable_area = None


    def get_code(self):
        max_dim = 0.05
        max_array = 6

        num = int(self.fileName)
        nums = [int(a) for a in str(num)]
        nums.reverse()
        indices = nums
        length = len(nums)

        print(indices)
        t = 0
        i = 0
        cubes = []
        x = 0
        y = 0
        width = 0.01
        while x <= max_dim:
            while y <= max_dim:
                print(indices)
                if nums == []:
                    break
                if indices[0] != 0:
                    cubes.append(solid.translate([x, y, 0])(solid.cube(size=t / 1000 + 0.001)))
                    y += max_dim / (max_array - 1)
                    nums[0] = nums[0] - 1
                else:
                    indices.pop(0)
                    t += 1
                i += 1
            x += max_dim / (max_array - 1)
            y = 0

        outside = solid.translate([-width / 2, -width / 2])(solid.cube(max_dim + (length - 1) / 1000 + 0.001 + width))
        self.code = solid.difference()(outside, cubes)
        self.code = solid.projection(cut=True)(self.code)
        solid.scad_render_to_file(self.code, self.location + "/code.scad")
        outputSTL(From=self.location+"/code.scad", To=self.location+"code.dxf", PATH=getSCADPath())
        # os.system("toSTL.sh renders/code.scad renders/code.dxf")
        return self.location+"/code.dxf"

    def download(self, type):
        if type =="stl":
            print("generating:" + self.location+"/"+ self.fileName+".stl")
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".stl")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".stl")
        elif type == "dxf":
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".dxf")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".dxf")

    def render(self):
        solid.scad_render_to_file(self.model, self.location+"/"+ self.fileName+'.scad')
        while not os.path.exists(self.location+"/"+self.fileName+".scad"):
            time.sleep(1)

    def get_points(self):
        doc = ezdxf.readfile(filename=self.location+"/"+ self.fileName+".dxf")
        msp = doc.modelspace()
        i=0
        lists = []
        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return [start, end]

        for e in msp.query("LINE"):
            line = helper(e)
            if not lists:
                lists.append([line])
            else:
                if lists[i][len(lists)-1][1] != line[0]:
                    lists.append([line])
                    i+=1
                else:
                    lists[i].append(line)

    def get_points2(self, FILE):
        doc = ezdxf.readfile(filename=FILE)
        msp = doc.modelspace()
        i = 0
        lists = []

        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return (start, end)

        for e in msp.query("LINE"):
            line = helper(e)
            if lists==[]:
                lists.append([line])
            else:
                if lists[i][len(lists[i]) - 1][1] != line[0]:
                    lists.append([line])
                    i += 1
                else:
                    lists[i].append(line)
        return lists

    def add_code(self):
        dxf = solid.projection(cut=False)(self.model)
        offset = solid.offset(r=-0.1)(dxf)
        solid.scad_render_to_file(offset, self.location+'/offset.scad')
        os.system("toSTL.sh renders/offset.scad renders/offset.dxf")
        lines = self.get_points2("renders/offset.dxf")
        x = lines[0][0][0][0]
        y = lines[0][0][0][1]
        print(x)
        print(y)
        code = solid.translate([x,y,0])(self.code)
        code = solid.linear_extrude(height=999)(code)
        save = self.model
        self.model = solid.projection()(solid.difference()(self.model, code))
        self.render()
        self.download("dxf")
        self.model = save

    def add_label(self, pos):
        # num = 12
        # minx, maxx, miny, maxy, minz, maxz = self.find_minmax()
        maxz = self.maxz
        # label = solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.5, halign="center"))
        # i=minx
        # print("x-len: " + str(maxx-minx))
        # print(i)
        # inc = (maxx-minx)/num
        # while minx <= i <= maxx:
        #     label = solid.union()(solid.translate([i, 0, maxz - 0.2])(solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.25, halign="center"))), label)
        #     i += inc
        #
        # l = label
        #
        # i =miny
        # while miny<= i <= maxy:
        #     print("y inc")
        #     l = solid.union()(solid.translate([0, i, 0])(label), l)
        #     i += 0.5
        for i in str(self.fileName):
            cur = pos[0]
            label = solid.translate([pos[0][0], pos[0][1], self.maxz-0.2])(solid.linear_extrude(height=(self.thickness)/3)(solid.text(str(i), size=0.5, halign="center", valign="center")))
            self.model = solid.difference()(self.model, label)
            pos.append(pos.pop(0))
            while abs(cur[0]-pos[0][0])<0.5 and abs(cur[1]-pos[0][1])<0.5:
                pos.append(pos.pop(0))



    def Center(self):

        volume, cog, inertia = self.mesh.get_mass_properties()
        print("Volume                                  = {0}".format(volume))
        print("Position of the center of gravity (COG) = {0}".format(cog))
        m_centered = solid.translate([-cog[0], -cog[1], 0])(
            self.model
        )
        return m_centered

    def find_minmax(self):
        minx = maxx = miny = maxy = minz = maxz = None
        for p in self.mesh.points:
            # p contains (x, y, z)
            if minx is None:
                minx = p[Dimension.X]
                maxx = p[Dimension.X]
                miny = p[Dimension.Y]
                maxy = p[Dimension.Y]
                minz = p[Dimension.Z]
                maxz = p[Dimension.Z]
            else:
                maxx = max(p[Dimension.X], maxx)
                minx = min(p[Dimension.X], minx)
                maxy = max(p[Dimension.Y], maxy)
                miny = min(p[Dimension.Y], miny)
                maxz = max(p[Dimension.Z], maxz)
                minz = min(p[Dimension.Z], minz)
        lenx = maxx - minx
        leny = maxy - miny
        lenz = maxz - minz
        return minx, maxx, miny, maxy, minz, maxz

    # def generate_Mesh(self):
    #     self.mesh = mesh.Mesh.from_file(self.location + "/" + str(int(self.fileName)//8)+ "b.stl")

    def get_top(self):
        top = solid.projection(cut=True)(solid.translate([0,0,-1*self.thickness*(self.layer+1)])(self.model))
        useable_area = solid.offset(r=-0.45)(top)
        self.useable_area = useable_area
        solid.scad_render_to_file(self.useable_area, self.location+'/' + 'toptemp.scad')
        outputSTL(From=self.location+'/' + 'toptemp.scad', To=self.location+"/top"+ self.dxf)

        # os.system("toSTL.sh out/toptemp.scad renders/" + self.fileName + ".dxf")
        dxf = DXF(self.location+"/top"+ self.dxf)
        min_p=dxf.points[0][0]
        points_ordered = dxf.points
        i=0
        while i <= len(dxf.points)+1:
            while math.sqrt((dxf.points[0][0]-dxf.points[1][0])**2+(dxf.points[0][1]-dxf.points[1][1])**2) > 0.1:
                dxf.points.insert(1, [(dxf.points[0][0]+dxf.points[1][0])/2, (dxf.points[0][1]+dxf.points[1][1])/2])
                i = i-1
            dxf.points.append(dxf.points.pop(0))
            i+=1
        for i in range(len(dxf.points)):
            dxf.points.append(dxf.points.pop(0))
            if dxf.points[0][0] < min_p:
                min_p = dxf.points[0][0]
                points_ordered = dxf.points.copy()
        dxf.points = points_ordered.copy()

        print(dxf.points)
        self.add_label(dxf.points)

class DXF:
    def __init__(self, file):
        self.file = file
        self.Lines = []
        self.points = []
        doc = ezdxf.readfile(self.file)
        msp = doc.modelspace()
        for e in msp:
            if e.dxftype() == "LINE":
                self.Lines.append(e)
                self.points.append([e.dxf.start[0], e.dxf.start[1]])
        # self.points.append([self.Lines[-1].dxf.end[0], self.Lines[-1].dxf.end[1]])
        self.area = None
        self.center = None
        self.polygon = sg.Polygon(self.points)

    def get_area(self):
        self.area = self.polygon.area
        return self.area

    def get_center(self):
        x_sum = 0
        y_sum =0
        for i in self.points:
            x_sum += i[0]
            y_sum += i[1]
        x_c = x_sum/len(self.points)
        y_c = y_sum/len(self.points)
        return (x_c, y_c)

    def split(self, maxdim):
        splits = []
        length = 0
        pieces = [[]]
        prev = self.points[0]
        for j in self.points:
            length = length + math.sqrt((prev[0]-j[0])**2+(prev[1]-j[1])**2)
            if length >= maxdim:
                pieces[-1].append(j)
                pieces.append([])
                length = 0
            pieces[-1].append(j)
            prev = j
        for j in pieces:
            j.insert(0, [0,0])
            piece = solid.linear_extrude(height=1)(solid.polygon(j))
            splits.append(piece)
        return splits
    def refine_points(self):
        i=0
        while i <= len(self.points)+1:
            while math.sqrt((self.points[0][0]-self.points[1][0])**2+(self.points[0][1]-self.points[1][1])**2) > 0.1:
                self.points.insert(1, [(self.points[0][0]+self.points[1][0])/2, (self.points[0][1]+self.points[1][1])/2])
                i = i-1
            self.points.append(self.points.pop(0))
            i+=1


if __name__== "__main__":
    test = DXF("C:/Users/Daniel/Documents/repos/Shell_Maker/output/0top_slice.dxf")
    test.refine_points()
    k = test.split(48)
    for i in range(len(k)):
        solid.scad_render_to_file(k[i], str(i) + ".scad")


 
 
************************************************/
