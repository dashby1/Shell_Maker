// Generated by SolidPython 1.1.3 on 2024-05-19 11:27:01


union() {
	translate(v = [0, 0, 0]) {
		import(file = "0.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 1]) {
		import(file = "1.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 2]) {
		import(file = "2.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 3]) {
		import(file = "3.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 4]) {
		import(file = "4.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 5]) {
		import(file = "5.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 6]) {
		import(file = "6.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 7]) {
		import(file = "7.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 8]) {
		import(file = "8.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 9]) {
		import(file = "9.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 10]) {
		import(file = "10.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 11]) {
		import(file = "11.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 12]) {
		import(file = "12.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 13]) {
		import(file = "13.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 14]) {
		import(file = "14.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 15]) {
		import(file = "15.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 16]) {
		import(file = "16.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 17]) {
		import(file = "17.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 18]) {
		import(file = "18.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 19]) {
		import(file = "19.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 20]) {
		import(file = "20.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 21]) {
		import(file = "21.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 22]) {
		import(file = "22.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 23]) {
		import(file = "23.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 24]) {
		import(file = "24.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 25]) {
		import(file = "25.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 26]) {
		import(file = "26.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 27]) {
		import(file = "27.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 28]) {
		import(file = "28.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 29]) {
		import(file = "29.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 30]) {
		import(file = "30.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 31]) {
		import(file = "31.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 32]) {
		import(file = "32.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 33]) {
		import(file = "33.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 34]) {
		import(file = "34.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 35]) {
		import(file = "35.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 36]) {
		import(file = "36.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 37]) {
		import(file = "37.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 38]) {
		import(file = "38.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 39]) {
		import(file = "39.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 40]) {
		import(file = "40.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 41]) {
		import(file = "41.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 42]) {
		import(file = "42.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 43]) {
		import(file = "43.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 44]) {
		import(file = "44.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 45]) {
		import(file = "45.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 46]) {
		import(file = "46.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 47]) {
		import(file = "47.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 48]) {
		import(file = "48.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 49]) {
		import(file = "49.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 50]) {
		import(file = "50.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 51]) {
		import(file = "51.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 52]) {
		import(file = "52.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 53]) {
		import(file = "53.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 54]) {
		import(file = "54.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 55]) {
		import(file = "55.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 56]) {
		import(file = "56.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 57]) {
		import(file = "57.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 58]) {
		import(file = "58.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 59]) {
		import(file = "59.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 60]) {
		import(file = "60.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 61]) {
		import(file = "61.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 62]) {
		import(file = "62.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 63]) {
		import(file = "63.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 64]) {
		import(file = "64.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 65]) {
		import(file = "65.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 66]) {
		import(file = "66.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 67]) {
		import(file = "67.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 68]) {
		import(file = "68.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 69]) {
		import(file = "69.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 70]) {
		import(file = "70.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 71]) {
		import(file = "71.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 72]) {
		import(file = "72.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 73]) {
		import(file = "73.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 74]) {
		import(file = "74.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 75]) {
		import(file = "75.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 76]) {
		import(file = "76.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 77]) {
		import(file = "77.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 78]) {
		import(file = "78.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 79]) {
		import(file = "79.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 80]) {
		import(file = "80.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 81]) {
		import(file = "81.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 82]) {
		import(file = "82.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 83]) {
		import(file = "83.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 84]) {
		import(file = "84.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 85]) {
		import(file = "85.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 86]) {
		import(file = "86.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 87]) {
		import(file = "87.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 88]) {
		import(file = "88.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 89]) {
		import(file = "89.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 90]) {
		import(file = "90.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 91]) {
		import(file = "91.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 92]) {
		import(file = "92.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 93]) {
		import(file = "93.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 94]) {
		import(file = "94.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 95]) {
		import(file = "95.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 96]) {
		import(file = "96.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 97]) {
		import(file = "97.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 98]) {
		import(file = "98.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 99]) {
		import(file = "99.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 100]) {
		import(file = "100.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 101]) {
		import(file = "101.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 102]) {
		import(file = "102.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 103]) {
		import(file = "103.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 104]) {
		import(file = "104.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 105]) {
		import(file = "105.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 106]) {
		import(file = "106.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 107]) {
		import(file = "107.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 108]) {
		import(file = "108.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 109]) {
		import(file = "109.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 110]) {
		import(file = "110.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 111]) {
		import(file = "111.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 112]) {
		import(file = "112.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 113]) {
		import(file = "113.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 114]) {
		import(file = "114.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 115]) {
		import(file = "115.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 116]) {
		import(file = "116.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 117]) {
		import(file = "117.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 118]) {
		import(file = "118.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 119]) {
		import(file = "119.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 120]) {
		import(file = "120.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 121]) {
		import(file = "121.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 122]) {
		import(file = "122.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 123]) {
		import(file = "123.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 124]) {
		import(file = "124.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 125]) {
		import(file = "125.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 126]) {
		import(file = "126.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 127]) {
		import(file = "127.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 128]) {
		import(file = "128.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 129]) {
		import(file = "129.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 130]) {
		import(file = "130.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 131]) {
		import(file = "131.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 132]) {
		import(file = "132.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 133]) {
		import(file = "133.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 134]) {
		import(file = "134.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 135]) {
		import(file = "135.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 136]) {
		import(file = "136.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 137]) {
		import(file = "137.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 138]) {
		import(file = "138.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 139]) {
		import(file = "139.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 140]) {
		import(file = "140.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 141]) {
		import(file = "141.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 142]) {
		import(file = "142.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 143]) {
		import(file = "143.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 144]) {
		import(file = "144.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 145]) {
		import(file = "145.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 146]) {
		import(file = "146.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 147]) {
		import(file = "147.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 148]) {
		import(file = "148.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 149]) {
		import(file = "149.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 150]) {
		import(file = "150.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 151]) {
		import(file = "151.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 152]) {
		import(file = "152.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 153]) {
		import(file = "153.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 154]) {
		import(file = "154.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 155]) {
		import(file = "155.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 156]) {
		import(file = "156.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 157]) {
		import(file = "157.stl", origin = [0, 0]);
	}
	translate(v = [0, 0, 158]) {
		import(file = "158.stl", origin = [0, 0]);
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
import time

import numpy
from stl import mesh, Dimension
from GUI import getSCADPath
from tkinter import *  # from tkinter import Tk for Python 3.x
from tkinter.filedialog import askopenfilename, askdirectory
from mpl_toolkits.mplot3d import art3d
from matplotlib import pyplot
import solid
import os
import ezdxf
import CadOps
import subprocess

# root = Tk()

# file_path = askopenfilename()

# print(file_path)
# SCAD_FILE_PATH = getSCADPath()
# input_file = askopenfilename()
# INPUT_FILE_PATH = input
# output = askdirectory()
# print(output)
# OUTPUT_PATH_DIR = output
SCAD_FILE_PATH = "C:/Program Files (x86)/OpenSCAD/openscad.com"
output = "C:/Users/Daniel/Documents/repos/Shell_Maker/output"
input_file = "C:/Users/Daniel/Documents/repos/Shell_Maker/CE3E3V2_Bottom_shell.stl"

def outputSTL(From, To, PATH=SCAD_FILE_PATH):
    print(To)
    subprocess.Popen(PATH + " -o " + To + " " + From)
    while not os.path.exists(To):
        time.sleep(1)


def find_lengths(obj):
    minx = maxx = miny = maxy = minz = maxz = None
    for p in obj.points:
        # p contains (x, y, z)
        if minx is None:
            minx = p[Dimension.X]
            maxx = p[Dimension.X]
            miny = p[Dimension.Y]
            maxy = p[Dimension.Y]
            minz = p[Dimension.Z]
            maxz = p[Dimension.Z]
        else:
            maxx = max(p[Dimension.X], maxx)
            minx = min(p[Dimension.X], minx)
            maxy = max(p[Dimension.Y], maxy)
            miny = min(p[Dimension.Y], miny)
            maxz = max(p[Dimension.Z], maxz)
            minz = min(p[Dimension.Z], minz)
    lenx = maxx - minx
    leny = maxy - miny
    lenz = maxz - minz
    return lenx, leny, lenz


def find_minmax(obj):
    minx = maxx = miny = maxy = minz = maxz = None
    for p in obj.points:
        # p contains (x, y, z)
        if minx is None:
            minx = p[Dimension.X]
            maxx = p[Dimension.X]
            miny = p[Dimension.Y]
            maxy = p[Dimension.Y]
            minz = p[Dimension.Z]
            maxz = p[Dimension.Z]
        else:
            maxx = max(p[Dimension.X], maxx)
            minx = min(p[Dimension.X], minx)
            maxy = max(p[Dimension.Y], maxy)
            miny = min(p[Dimension.Y], miny)
            maxz = max(p[Dimension.Z], maxz)
            minz = min(p[Dimension.Z], minz)
    lenx = maxx - minx
    leny = maxy - miny
    lenz = maxz - minz
    return minx, maxx, miny, maxy, minz, maxz


def Center(stlName):
    your_mesh = mesh.Mesh.from_file(stlName)

    volume, cog, inertia = your_mesh.get_mass_properties()
    print("Volume                                  = {0}".format(volume))
    print("Position of the center of gravity (COG) = {0}".format(cog))
    minx, maxx, miny, maxy, minz, maxz = find_minmax(your_mesh)

    m_centered = solid.translate([-cog[0], -cog[1], -minz])(
        solid.import_stl(stlName)
    )
    solid.scad_render_to_file(m_centered, output + '/' + 'temp.scad')
    print(SCAD_FILE_PATH + " -o " + stlName + " " + output + '/' + 'temp.scad')

    outputSTL(
        From=output + '/' + 'temp.scad',
        To=stlName
    )

    # os.remove(output + '/' + 'temp.scad')


def slice(stlPath, height):
    os.system("del output\*")
    # C:\Users\Daniel\Documents\repos\Shell_Maker

    original_file = stlPath

    stlname = os.path.basename(stlPath)
    copy_file = output +"/"+ stlname

    print(stlname)
    print(original_file)
    print(copy_file)

    os.system("copy.sh " + original_file + " " + copy_file)

    your_mesh = mesh.Mesh.from_file(stlname)
    minx, maxx, miny, maxy, minz, maxz = find_minmax(your_mesh)
    print(maxz - minz)
    n = (maxz - minz) // height
    slices = []
    whole = solid.import_stl(stlname)
    j = 0
    for i in range(int(n) + 1):
        x = solid.translate([0, 0, -(0)])(
            whole
        )
        s = solid.intersection()(
            x,
            solid.translate([-(maxx - minx) / 2, -(maxy - miny) / 2, i * height])(
                solid.cube([(maxx - minx), (maxy - miny), height])
            )
        )

        solid.scad_render_to_file(s, output + "/" + str(i) + "a.scad")
        # print("toSTL.sh renders/" +str(i) + "a.scad renders/" +str(i) +"a.stl")
        print(output + "/" + str(i) + "a.scad")
        print(output + "/" + str(i) + "b.stl")
        outputSTL(
            From=output + "/" + str(i) + "a.scad",
            To=output + "/" + str(i) + "b.stl"
        )
        # os.system("toSTL.sh "+ output+"/"+str(i) + "a.scad renders/" +str(i) +"b.stl")
        # solid.scad_render_to_file(s, "renders/" +str(i) +"b.stl", file_header="$fn=10;")
        if (i!=int(n)):
            ring = shell(s, height, i)
        else:
            ring = s

        solid.scad_render_to_file(ring, output + "/ring" + str(i) + ".scad")

        angle = 0
        maxdim = max(abs(maxx), abs(minx), abs(maxy), abs(miny))
        height2 = (maxz - minz) * 3
        while angle < 360:
            piece = solid.intersection()(
                ring,
                solid.translate([0, 0, -height2 / 2])(
                    solid.rotate([0, 0, angle])(
                        angleSlice(45, maxdim, height2)
                    )
                )
            )
            print(j)
            angle += 45
            a = CadOps.Model(piece, str(j), output, i, height)
            # a.generate_Mesh()
            # if (i != int(n)):
            #     # a.get_top()
            a.render()
            # os.system("toSTL.sh renders/"+ str(j)+".scad renders/"+ str(j)+".stl")
            j += 1
        # solid.scad_render_to_file(ring, "renders/" +str(i) +".scad")
        # print("toSTL.sh renders/" +str(i) + ".scad renders/" +str(i) +".stl")
        # os.system("toSTL.sh renders/" +str(i) + ".scad renders/" +str(i) +".stl")

    return n + 1


def shell(slice, height, i):
    # your_mesh = mesh.Mesh.from_file(output + "/" + stl)
    # m = solid.import_stl(stl)

    top_slice = solid.projection(cut=True)(
        solid.translate([0,0,-height*(i+1)])(
            slice
        )
    )
    bottom_slice = solid.projection(cut=False)(
            slice
    )
    solid.scad_render_to_file(top_slice, output + "/" + "top_slice.scad")
    solid.scad_render_to_file(bottom_slice, output + "/" + "bottom_slice.scad")
    outputSTL(From=output + "/" + "top_slice.scad", To=output + "/" +str(i)+  "top_slice.dxf")
    outputSTL(From=output + "/" + "bottom_slice.scad", To=output + "/" +str(i)+ "bottom_slice.dxf")
    T_slice = CadOps.DXF(output + "/" +str(i)+  "top_slice.dxf")
    B_slice = CadOps.DXF(output + "/" +str(i)+ "bottom_slice.dxf")
    T_area = T_slice.get_area()
    B_area = B_slice.get_area()
    print("Top area: " + str(T_area))
    print("Bottom area: " + str(B_area))
    # minx, maxx, miny, maxy, minz, maxz = find_minmax(your_mesh)
    if B_area < T_area:
        middle = solid.linear_extrude(height=999)(
            solid.offset(r=-1)(
                solid.import_dxf(output + "/" +str(i)+ "bottom_slice.dxf")
            )
        )
    else:
        middle = solid.linear_extrude(height=999)(
            solid.offset(r=-1)(
                solid.import_dxf(output + "/" +str(i)+  "top_slice.dxf")
            )
        )
    shelled_slice = solid.difference()(
        slice,
        middle
    )


    return shelled_slice


def combines(start_n, end_n, layer_h):
    total = solid.import_stl(str(0) + ".stl")
    list = []
    for i in range(start_n, end_n):
        list.append(solid.translate([0, 0, layer_h * i + start_n * layer_h])(
            solid.import_stl(str(i) + ".stl")
        ))
    # for i in list:
    #     total = solid.union()(
    #         total,
    #         i
    #     )
    total = solid.union()(
        list
    )

    solid.scad_render_to_file(total, 'renders/combined.scad')
    os.system("toSTL.sh renders/combined.scad renders/combined.stl")


def angleSlice(angle, r, h):
    s = solid.cylinder(r=r, h=h)
    c = solid.cube(size=r)
    q = solid.intersection()(
        s,
        c
    )
    an = solid.difference()(
        q,
        solid.rotate(a=[0, 0, angle])(
            c
        )
    )
    return an


# Center(input_file)
# n = slice(input_file, 1)
# print(n)
# combines(0, 15, 1)
# angleSlice(45, 30, 5)

if __name__ == "__main__":
    # outputSTL(From="C:/Users/Daniel/Documents/repos/Shell_Maker/testOutput.scad", To="C:/Users/Daniel/Documents/repos/Shell_Maker/output/testing4.stl", PATH="C:/Program Files (x86)/OpenSCAD/openscad.com")
    Center(input_file)
    n = slice(input_file, 1)
    # print(n)
    combines(0, 159, 1)
    # angleSlice(45, 30, 5) 
 
************************************************/
