// Generated by SolidPython 1.1.3 on 2024-05-19 23:35:49


linear_extrude(height = 1) {
	polygon(points = [[0, 0], [-3.6552031250, 32.1512988281], [-3.7123750000, 32.1504343750], [-3.7695468750, 32.1495699219], [-3.8267187500, 32.1487054688], [-3.8838906250, 32.1478410156], [-3.9410625000, 32.1469765625], [-3.9982343750, 32.1461121094], [-4.0554062500, 32.1452476562], [-4.1125781250, 32.1443832031], [-4.1697500000, 32.1435187500], [-4.2269218750, 32.1426542969], [-4.2840937500, 32.1417898437], [-4.3412656250, 32.1409253906], [-4.3984375000, 32.1400609375], [-4.4556093750, 32.1391964844], [-4.5127812500, 32.1383320313], [-4.5699531250, 32.1374675781], [-4.6271250000, 32.1366031250], [-4.6842968750, 32.1357386719], [-4.7414687500, 32.1348742187], [-4.7986406250, 32.1340097656], [-4.8558125000, 32.1331453125], [-4.9129843750, 32.1322808594], [-4.9701562500, 32.1314164063], [-5.0273281250, 32.1305519531], [-5.0845000000, 32.1296875000], [-5.1416718750, 32.1288230469], [-5.1988437500, 32.1279585938], [-5.2560156250, 32.1270941406], [-5.3131875000, 32.1262296875], [-5.3703593750, 32.1253652344], [-5.4275312500, 32.1245007812], [-5.4847031250, 32.1236363281], [-5.5418750000, 32.1227718750], [-5.5990468750, 32.1219074219], [-5.6562187500, 32.1210429687], [-5.7133906250, 32.1201785156], [-5.7705625000, 32.1193140625], [-5.8277343750, 32.1184496094], [-5.8849062500, 32.1175851563], [-5.9420781250, 32.1167207031], [-5.9992500000, 32.1158562500], [-6.0564218750, 32.1149917969], [-6.1135937500, 32.1141273437], [-6.1707656250, 32.1132628906], [-6.2279375000, 32.1123984375], [-6.2851093750, 32.1115339844], [-6.3422812500, 32.1106695313], [-6.3994531250, 32.1098050781], [-6.4566250000, 32.1089406250], [-6.5137968750, 32.1080761719], [-6.5709687500, 32.1072117188], [-6.6281406250, 32.1063472656], [-6.6853125000, 32.1054828125], [-6.7424843750, 32.1046183594], [-6.7996562500, 32.1037539062], [-6.8568281250, 32.1028894531], [-6.9140000000, 32.1020250000], [-6.9711718750, 32.1011605469], [-7.0283437500, 32.1002960937], [-7.0855156250, 32.0994316406], [-7.1426875000, 32.0985671875], [-7.1998593750, 32.0977027344], [-7.2570312500, 32.0968382813], [-7.3142031250, 32.0959738281], [-7.3713750000, 32.0951093750], [-7.4285468750, 32.0942449219], [-7.4857187500, 32.0933804687], [-7.5428906250, 32.0925160156], [-7.6000625000, 32.0916515625], [-7.6572343750, 32.0907871094], [-7.7144062500, 32.0899226563], [-7.7715781250, 32.0890582031], [-7.8287500000, 32.0881937500], [-7.8859218750, 32.0873292969], [-7.9430937500, 32.0864648438], [-8.0002656250, 32.0856003906], [-8.0574375000, 32.0847359375], [-8.1146093750, 32.0838714844], [-8.1717812500, 32.0830070312], [-8.2289531250, 32.0821425781], [-8.2861250000, 32.0812781250], [-8.3432968750, 32.0804136719], [-8.4004687500, 32.0795492187], [-8.4576406250, 32.0786847656], [-8.5148125000, 32.0778203125], [-8.5719843750, 32.0769558594], [-8.6291562500, 32.0760914063], [-8.6863281250, 32.0752269531], [-8.7435000000, 32.0743625000], [-8.8006718750, 32.0734980469], [-8.8578437500, 32.0726335937], [-8.9150156250, 32.0717691406], [-8.9721875000, 32.0709046875], [-9.0293593750, 32.0700402344], [-9.0865312500, 32.0691757813], [-9.1437031250, 32.0683113281], [-9.2008750000, 32.0674468750], [-9.2580468750, 32.0665824219], [-9.3152187500, 32.0657179688], [-9.3723906250, 32.0648535156], [-9.4295625000, 32.0639890625], [-9.4867343750, 32.0631246094], [-9.5439062500, 32.0622601562], [-9.6010781250, 32.0613957031], [-9.6582500000, 32.0605312500], [-9.7154218750, 32.0596667969], [-9.7725937500, 32.0588023437], [-9.8297656250, 32.0579378906], [-9.8869375000, 32.0570734375], [-9.9441093750, 32.0562089844], [-10.0012812500, 32.0553445313], [-10.0584531250, 32.0544800781], [-10.1156250000, 32.0536156250], [-10.1727968750, 32.0527511719], [-10.2299687500, 32.0518867187], [-10.2871406250, 32.0510222656], [-10.3443125000, 32.0501578125], [-10.4014843750, 32.0492933594], [-10.4586562500, 32.0484289063], [-10.5158281250, 32.0475644531], [-10.5730000000, 32.0467000000], [-10.6582312500, 32.0454109375], [-10.7434625000, 32.0441218750], [-10.8286937500, 32.0428328125], [-10.9139250000, 32.0415437500], [-10.9991562500, 32.0402546875], [-11.0843875000, 32.0389656250], [-11.1696187500, 32.0376765625], [-11.2548500000, 32.0363875000], [-11.3400812500, 32.0350984375], [-11.4253125000, 32.0338093750], [-11.5105437500, 32.0325203125], [-11.5957750000, 32.0312312500], [-11.6810062500, 32.0299421875], [-11.7662375000, 32.0286531250], [-11.8514687500, 32.0273640625], [-11.9367000000, 32.0260750000], [-12.0219312500, 32.0247859375], [-12.1071625000, 32.0234968750], [-12.1923937500, 32.0222078125], [-12.2776250000, 32.0209187500], [-12.3628562500, 32.0196296875], [-12.4480875000, 32.0183406250], [-12.5333187500, 32.0170515625], [-12.6185500000, 32.0157625000], [-12.7037812500, 32.0144734375], [-12.7890125000, 32.0131843750], [-12.8742437500, 32.0118953125], [-12.9594750000, 32.0106062500], [-13.0447062500, 32.0093171875], [-13.1299375000, 32.0080281250], [-13.2151687500, 32.0067390625], [-13.3004000000, 32.0054500000], [-13.3856312500, 32.0041609375], [-13.4708625000, 32.0028718750], [-13.5560937500, 32.0015828125], [-13.6413250000, 32.0002937500], [-13.7265562500, 31.9990046875], [-13.8117875000, 31.9977156250], [-13.8970187500, 31.9964265625], [-13.9822500000, 31.9951375000], [-14.0674812500, 31.9938484375], [-14.1527125000, 31.9925593750], [-14.2379437500, 31.9912703125], [-14.3231750000, 31.9899812500], [-14.4084062500, 31.9886921875], [-14.4936375000, 31.9874031250], [-14.5788687500, 31.9861140625], [-14.6641000000, 31.9848250000], [-14.7493312500, 31.9835359375], [-14.8345625000, 31.9822468750], [-14.9197937500, 31.9809578125], [-15.0050250000, 31.9796687500], [-15.0902562500, 31.9783796875], [-15.1754875000, 31.9770906250], [-15.2607187500, 31.9758015625], [-15.3459500000, 31.9745125000], [-15.4311812500, 31.9732234375], [-15.5164125000, 31.9719343750], [-15.6016437500, 31.9706453125], [-15.6868750000, 31.9693562500], [-15.7721062500, 31.9680671875], [-15.8573375000, 31.9667781250], [-15.9425687500, 31.9654890625], [-16.0278000000, 31.9642000000], [-16.1260382812, 31.9612898438], [-16.2242765625, 31.9583796875], [-16.3225148437, 31.9554695312], [-16.4207531250, 31.9525593750], [-16.5189914062, 31.9496492188], [-16.6172296875, 31.9467390625], [-16.7154679687, 31.9438289063], [-16.8137062500, 31.9409187500], [-16.9119445313, 31.9380085938], [-17.0101828125, 31.9350984375], [-17.1084210937, 31.9321882813], [-17.2066593750, 31.9292781250], [-17.3048976562, 31.9263679688], [-17.4031359375, 31.9234578125], [-17.5013742188, 31.9205476563], [-17.5996125000, 31.9176375000], [-17.6978507812, 31.9147273438], [-17.7960890625, 31.9118171875], [-17.8943273437, 31.9089070313], [-17.9925656250, 31.9059968750], [-18.0908039062, 31.9030867188], [-18.1890421875, 31.9001765625], [-18.2872804687, 31.8972664063], [-18.3855187500, 31.8943562500], [-18.4837570313, 31.8914460938], [-18.5819953125, 31.8885359375], [-18.6802335937, 31.8856257813], [-18.7784718750, 31.8827156250], [-18.8767101562, 31.8798054688], [-18.9749484375, 31.8768953125], [-19.0731867188, 31.8739851563], [-19.1714250000, 31.8710750000], [-19.2696632812, 31.8681648438], [-19.3679015625, 31.8652546875], [-19.4661398437, 31.8623445313], [-19.5643781250, 31.8594343750], [-19.6626164062, 31.8565242188], [-19.7608546875, 31.8536140625], [-19.8590929687, 31.8507039063], [-19.9573312500, 31.8477937500], [-20.0555695313, 31.8448835938], [-20.1538078125, 31.8419734375], [-20.2520460937, 31.8390632813], [-20.3502843750, 31.8361531250], [-20.4485226562, 31.8332429688], [-20.5467609375, 31.8303328125], [-20.6449992188, 31.8274226563], [-20.7432375000, 31.8245125000], [-20.8414757812, 31.8216023438], [-20.9397140625, 31.8186921875], [-21.0379523437, 31.8157820313], [-21.1361906250, 31.8128718750], [-21.2344289062, 31.8099617188], [-21.3326671875, 31.8070515625], [-21.4309054687, 31.8041414063], [-21.5291437500, 31.8012312500], [-21.6273820313, 31.7983210938], [-21.7256203125, 31.7954109375], [-21.8238585937, 31.7925007813], [-21.9220968750, 31.7895906250], [-22.0203351562, 31.7866804688], [-22.1185734375, 31.7837703125], [-22.2168117188, 31.7808601563], [-22.3150500000, 31.7779500000], [-22.4132882812, 31.7750398438], [-22.5115265625, 31.7721296875], [-22.6097648437, 31.7692195313], [-22.7080031250, 31.7663093750], [-22.8062414062, 31.7633992188], [-22.9044796875, 31.7604890625], [-23.0027179687, 31.7575789063], [-23.1009562500, 31.7546687500], [-23.1991945313, 31.7517585938], [-23.2974328125, 31.7488484375], [-23.3956710937, 31.7459382813], [-23.4939093750, 31.7430281250], [-23.5921476562, 31.7401179688], [-23.6903859375, 31.7372078125], [-23.7886242188, 31.7342976563], [-23.8868625000, 31.7313875000], [-23.9851007812, 31.7284773438], [-24.0833390625, 31.7255671875], [-24.1815773437, 31.7226570313], [-24.2798156250, 31.7197468750], [-24.3780539062, 31.7168367188], [-24.4762921875, 31.7139265625], [-24.5745304687, 31.7110164063], [-24.6727687500, 31.7081062500], [-24.7710070313, 31.7051960938], [-24.8692453125, 31.7022859375], [-24.9674835937, 31.6993757813], [-25.0657218750, 31.6964656250], [-25.1639601562, 31.6935554688], [-25.2621984375, 31.6906453125], [-25.3604367188, 31.6877351563], [-25.4586750000, 31.6848250000], [-25.5569132812, 31.6819148438], [-25.6551515625, 31.6790046875], [-25.7533898437, 31.6760945313], [-25.8516281250, 31.6731843750], [-25.9498664062, 31.6702742188], [-26.0481046875, 31.6673640625], [-26.1463429687, 31.6644539063], [-26.2445812500, 31.6615437500], [-26.3428195313, 31.6586335938], [-26.4410578125, 31.6557234375], [-26.5392960937, 31.6528132813], [-26.6375343750, 31.6499031250], [-26.7357726562, 31.6469929688], [-26.8340109375, 31.6440828125], [-26.9322492188, 31.6411726563], [-27.0304875000, 31.6382625000], [-27.1287257812, 31.6353523438], [-27.2269640625, 31.6324421875], [-27.3252023438, 31.6295320313], [-27.4234406250, 31.6266218750], [-27.5216789062, 31.6237117188], [-27.6199171875, 31.6208015625], [-27.7181554687, 31.6178914063], [-27.8163937500, 31.6149812500], [-27.9146320313, 31.6120710938], [-28.0128703125, 31.6091609375], [-28.1111085938, 31.6062507813], [-28.2093468750, 31.6033406250], [-28.3075851562, 31.6004304688], [-28.4058234375, 31.5975203125], [-28.5040617188, 31.5946101563], [-28.6023000000, 31.5917000000], [-28.7005382812, 31.5887898438], [-28.7987765625, 31.5858796875], [-28.8970148438, 31.5829695313], [-28.9952531250, 31.5800593750], [-29.0934914062, 31.5771492188], [-29.1917296875, 31.5742390625], [-29.2899679687, 31.5713289063], [-29.3882062500, 31.5684187500], [-29.4864445313, 31.5655085938], [-29.5846828125, 31.5625984375], [-29.6829210938, 31.5596882813], [-29.7811593750, 31.5567781250], [-29.8793976562, 31.5538679688], [-29.9776359375, 31.5509578125], [-30.0758742188, 31.5480476563], [-30.1741125000, 31.5451375000], [-30.2723507812, 31.5422273438], [-30.3705890625, 31.5393171875], [-30.4688273438, 31.5364070313], [-30.5670656250, 31.5334968750], [-30.6653039062, 31.5305867188], [-30.7635421875, 31.5276765625], [-30.8617804687, 31.5247664063], [-30.9600187500, 31.5218562500], [-31.0582570313, 31.5189460938], [-31.1564953125, 31.5160359375], [-31.2547335938, 31.5131257813], [-31.3529718750, 31.5102156250], [-31.4512101562, 31.5073054688], [-31.5494484375, 31.5043953125], [-31.6476867188, 31.5014851563], [-31.7459250000, 31.4985750000], [-31.8441632812, 31.4956648438], [-31.9424015625, 31.4927546875], [-32.0406398438, 31.4898445313], [-32.1388781250, 31.4869343750], [-32.2371164062, 31.4840242188], [-32.3353546875, 31.4811140625], [-32.4335929687, 31.4782039063], [-32.5318312500, 31.4752937500], [-32.6300695313, 31.4723835938], [-32.7283078125, 31.4694734375], [-32.8265460937, 31.4665632813], [-32.9247843750, 31.4636531250], [-33.0230226562, 31.4607429688], [-33.1212609375, 31.4578328125], [-33.2194992188, 31.4549226563], [-33.3177375000, 31.4520125000], [-33.4159757812, 31.4491023438], [-33.5142140625, 31.4461921875], [-33.6124523438, 31.4432820313], [-33.7106906250, 31.4403718750], [-33.8089289063, 31.4374617188], [-33.9071671875, 31.4345515625], [-34.0054054687, 31.4316414063], [-34.1036437500, 31.4287312500], [-34.2018820313, 31.4258210938], [-34.3001203125, 31.4229109375], [-34.3983585938, 31.4200007812], [-34.4965968750, 31.4170906250], [-34.5948351562, 31.4141804688], [-34.6930734375, 31.4112703125], [-34.7913117188, 31.4083601563], [-34.8895500000, 31.4054500000], [-34.9877882812, 31.4025398438], [-35.0860265625, 31.3996296875], [-35.1842648438, 31.3967195313], [-35.2825031250, 31.3938093750], [-35.3807414062, 31.3908992188], [-35.4789796875, 31.3879890625], [-35.5772179687, 31.3850789063], [-35.6754562500, 31.3821687500], [-35.7736945313, 31.3792585938], [-35.8719328125, 31.3763484375], [-35.9701710937, 31.3734382812], [-36.0684093750, 31.3705281250], [-36.1666476562, 31.3676179688], [-36.2648859375, 31.3647078125], [-36.3631242188, 31.3617976563], [-36.4613625000, 31.3588875000], [-36.5596007812, 31.3559773438], [-36.6578390625, 31.3530671875], [-36.7560773438, 31.3501570313], [-36.8543156250, 31.3472468750], [-36.9525539063, 31.3443367188], [-37.0507921875, 31.3414265625], [-37.1490304687, 31.3385164063], [-37.2472687500, 31.3356062500], [-37.3455070313, 31.3326960938], [-37.4437453125, 31.3297859375], [-37.5419835938, 31.3268757812], [-37.6402218750, 31.3239656250], [-37.7384601562, 31.3210554688], [-37.8366984375, 31.3181453125], [-37.9349367188, 31.3152351563], [-38.0331750000, 31.3123250000], [-38.1314132812, 31.3094148438], [-38.2296515625, 31.3065046875], [-38.3278898438, 31.3035945313], [-38.4261281250, 31.3006843750], [-38.5243664062, 31.2977742188], [-38.6226046875, 31.2948640625], [-38.7208429687, 31.2919539063], [-38.8190812500, 31.2890437500], [-38.9173195313, 31.2861335938], [-39.0155578125, 31.2832234375], [-39.1137960937, 31.2803132812], [-39.2120343750, 31.2774031250], [-39.3102726562, 31.2744929687], [-39.4085109375, 31.2715828125], [-39.5067492188, 31.2686726563], [-39.6049875000, 31.2657625000], [-39.7032257812, 31.2628523438], [-39.8014640625, 31.2599421875], [-39.8997023438, 31.2570320313], [-39.9979406250, 31.2541218750], [-40.0961789063, 31.2512117188], [-40.1944171875, 31.2483015625], [-40.2926554687, 31.2453914063], [-40.3908937500, 31.2424812500], [-40.4891320313, 31.2395710938], [-40.5873703125, 31.2366609375], [-40.6856085938, 31.2337507812], [-40.7838468750, 31.2308406250], [-40.8820851562, 31.2279304687], [-40.9803234375, 31.2250203125], [-41.0785617188, 31.2221101563], [-41.1768000000, 31.2192000000], [-41.2499085937, 31.2170335938], [-41.3230171875, 31.2148671875], [-41.3961257812, 31.2127007812], [-41.4692343750, 31.2105343750], [-41.5423429687, 31.2083679688], [-41.6154515625, 31.2062015625], [-41.6885601562, 31.2040351563], [-41.7616687500, 31.2018687500], [-41.8347773437, 31.1997023438], [-41.9078859375, 31.1975359375], [-41.9809945312, 31.1953695313], [-42.0541031250, 31.1932031250], [-42.1272117187, 31.1910367188], [-42.2003203125, 31.1888703125], [-42.2734289062, 31.1867039063], [-42.3465375000, 31.1845375000], [-42.4196460937, 31.1823710937], [-42.4927546875, 31.1802046875], [-42.5658632812, 31.1780382813], [-42.6389718750, 31.1758718750], [-42.7120804687, 31.1737054688], [-42.7851890625, 31.1715390625], [-42.8582976562, 31.1693726562], [-42.9314062500, 31.1672062500], [-43.0045148437, 31.1650398438], [-43.0776234375, 31.1628734375], [-43.1507320312, 31.1607070312], [-43.2238406250, 31.1585406250], [-43.2969492187, 31.1563742188], [-43.3700578125, 31.1542078125], [-43.4431664063, 31.1520414062], [-43.5162750000, 31.1498750000], [-43.5893835938, 31.1477085938], [-43.6624921875, 31.1455421875], [-43.7356007813, 31.1433757813], [-43.8087093750, 31.1412093750], [-43.8818179688, 31.1390429688], [-43.9549265625, 31.1368765625], [-44.0280351563, 31.1347101563], [-44.1011437500, 31.1325437500], [-44.1742523438, 31.1303773438], [-44.2473609375, 31.1282109375], [-44.3204695313, 31.1260445313], [-44.3935781250, 31.1238781250], [-44.4666867188, 31.1217117188], [-44.5397953125, 31.1195453125], [-44.6129039063, 31.1173789063], [-44.6860125000, 31.1152125000], [-44.7591210938, 31.1130460938], [-44.8322296875, 31.1108796875], [-44.9053382813, 31.1087132813], [-44.9784468750, 31.1065468750], [-45.0515554688, 31.1043804688], [-45.1246640625, 31.1022140625], [-45.1977726563, 31.1000476562], [-45.2708812500, 31.0978812500], [-45.3439898438, 31.0957148438], [-45.4170984375, 31.0935484375], [-45.4902070313, 31.0913820312], [-45.5633156250, 31.0892156250], [-45.6364242188, 31.0870492188], [-45.7095328125, 31.0848828125], [-45.7826414063, 31.0827164063], [-45.8557500000, 31.0805500000], [-45.9288585938, 31.0783835938], [-46.0019671875, 31.0762171875], [-46.0750757812, 31.0740507813], [-46.1481843750, 31.0718843750], [-46.2212929687, 31.0697179688], [-46.2944015625, 31.0675515625], [-46.3675101562, 31.0653851563], [-46.4406187500, 31.0632187500], [-46.5137273437, 31.0610523438], [-46.5868359375, 31.0588859375], [-46.6599445312, 31.0567195313], [-46.7330531250, 31.0545531250], [-46.8061617187, 31.0523867188], [-46.8792703125, 31.0502203125], [-46.9523789062, 31.0480539063], [-47.0254875000, 31.0458875000], [-47.0985960937, 31.0437210938], [-47.1717046875, 31.0415546875], [-47.2448132812, 31.0393882813], [-47.3179218750, 31.0372218750], [-47.3910304687, 31.0350554688], [-47.4641390625, 31.0328890625], [-47.5372476562, 31.0307226562], [-47.6103562500, 31.0285562500], [-47.6834648437, 31.0263898438], [-47.7565734375, 31.0242234375], [-47.8296820312, 31.0220570313], [-47.9027906250, 31.0198906250], [-47.9758992187, 31.0177242188], [-48.0490078125, 31.0155578125], [-48.1221164063, 31.0133914063], [-48.1952250000, 31.0112250000], [-48.2683335938, 31.0090585938], [-48.3414421875, 31.0068921875], [-48.4145507813, 31.0047257813], [-48.4876593750, 31.0025593750], [-48.5607679688, 31.0003929688], [-48.6338765625, 30.9982265625], [-48.7069851563, 30.9960601563], [-48.7800937500, 30.9938937500], [-48.8532023438, 30.9917273438], [-48.9263109375, 30.9895609375], [-48.9994195313, 30.9873945313], [-49.0725281250, 30.9852281250], [-49.1456367188, 30.9830617188], [-49.2187453125, 30.9808953125], [-49.2918539063, 30.9787289062], [-49.3649625000, 30.9765625000], [-49.4380710938, 30.9743960938], [-49.5111796875, 30.9722296875], [-49.5842882813, 30.9700632812], [-49.6573968750, 30.9678968750], [-49.7305054688, 30.9657304688], [-49.8036140625, 30.9635640625], [-49.8767226563, 30.9613976562], [-49.9498312500, 30.9592312500], [-50.0229398438, 30.9570648438], [-50.0960484375, 30.9548984375], [-50.1691570313, 30.9527320313], [-50.2422656250, 30.9505656250], [-50.3153742188, 30.9483992188], [-50.3884828125, 30.9462328125], [-50.4615914063, 30.9440664063], [-50.5347000000, 30.9419000000], [-50.6328343750, 30.9376203125], [-50.7309687500, 30.9333406250], [-50.8291031250, 30.9290609375], [-50.9272375000, 30.9247812500], [-51.0253718750, 30.9205015625], [-51.1235062500, 30.9162218750], [-51.2216406250, 30.9119421875], [-51.3197750000, 30.9076625000], [-51.4179093750, 30.9033828125], [-51.5160437500, 30.8991031250], [-51.6141781250, 30.8948234375], [-51.7123125000, 30.8905437500]]);
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
import math
import time

from stl import mesh, Dimension

from tkinter import Tk     # from tkinter import Tk for Python 3.x
from tkinter.filedialog import askopenfilename
from mpl_toolkits.mplot3d import art3d
from matplotlib import pyplot as plt
import solid
import os
import ezdxf
import shapely.geometry as sg
import subprocess
from GUI import getSCADPath



def outputSTL(From, To, PATH=getSCADPath()):
    subprocess.Popen(PATH + " -o " + To + " " + From)
    while not os.path.exists(To):
        time.sleep(1)


def get_size(i):
    x_list = [int(a) for a in str(i)]
    return len(x_list)



class Model:
    def __init__(self, model, fileName, location, layer, thickness):
        self.location = location
        self.code = None
        self.fileName = fileName
        self.stl = fileName + ".stl"
        self.layer = layer
        self.thickness = thickness
        self.maxz = (layer+1)*thickness
        self.dxf = fileName + ".dxf"
        self.scad = fileName + ".scad"
        self.model = model
        self.center = None
        self.width = 10
        self.mesh = None
        self.useable_area = None


    def get_code(self):
        max_dim = 0.05
        max_array = 6

        num = int(self.fileName)
        nums = [int(a) for a in str(num)]
        nums.reverse()
        indices = nums
        length = len(nums)

        print(indices)
        t = 0
        i = 0
        cubes = []
        x = 0
        y = 0
        width = 0.01
        while x <= max_dim:
            while y <= max_dim:
                print(indices)
                if nums == []:
                    break
                if indices[0] != 0:
                    cubes.append(solid.translate([x, y, 0])(solid.cube(size=t / 1000 + 0.001)))
                    y += max_dim / (max_array - 1)
                    nums[0] = nums[0] - 1
                else:
                    indices.pop(0)
                    t += 1
                i += 1
            x += max_dim / (max_array - 1)
            y = 0

        outside = solid.translate([-width / 2, -width / 2])(solid.cube(max_dim + (length - 1) / 1000 + 0.001 + width))
        self.code = solid.difference()(outside, cubes)
        self.code = solid.projection(cut=True)(self.code)
        solid.scad_render_to_file(self.code, self.location + "/code.scad")
        outputSTL(From=self.location+"/code.scad", To=self.location+"code.dxf", PATH=getSCADPath())
        # os.system("toSTL.sh renders/code.scad renders/code.dxf")
        return self.location+"/code.dxf"

    def download(self, type):
        if type =="stl":
            print("generating:" + self.location+"/"+ self.fileName+".stl")
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".stl")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".stl")
        elif type == "dxf":
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".dxf")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".dxf")

    def render(self):
        solid.scad_render_to_file(self.model, self.location+"/"+ self.fileName+'.scad')
        while not os.path.exists(self.location+"/"+self.fileName+".scad"):
            time.sleep(1)

    def get_points(self):
        doc = ezdxf.readfile(filename=self.location+"/"+ self.fileName+".dxf")
        msp = doc.modelspace()
        i=0
        lists = []
        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return [start, end]

        for e in msp.query("LINE"):
            line = helper(e)
            if not lists:
                lists.append([line])
            else:
                if lists[i][len(lists)-1][1] != line[0]:
                    lists.append([line])
                    i+=1
                else:
                    lists[i].append(line)

    def get_points2(self, FILE):
        doc = ezdxf.readfile(filename=FILE)
        msp = doc.modelspace()
        i = 0
        lists = []

        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return (start, end)

        for e in msp.query("LINE"):
            line = helper(e)
            if lists==[]:
                lists.append([line])
            else:
                if lists[i][len(lists[i]) - 1][1] != line[0]:
                    lists.append([line])
                    i += 1
                else:
                    lists[i].append(line)
        return lists

    def add_code(self):
        dxf = solid.projection(cut=False)(self.model)
        offset = solid.offset(r=-0.1)(dxf)
        solid.scad_render_to_file(offset, self.location+'/offset.scad')
        os.system("toSTL.sh renders/offset.scad renders/offset.dxf")
        lines = self.get_points2("renders/offset.dxf")
        x = lines[0][0][0][0]
        y = lines[0][0][0][1]
        print(x)
        print(y)
        code = solid.translate([x,y,0])(self.code)
        code = solid.linear_extrude(height=999)(code)
        save = self.model
        self.model = solid.projection()(solid.difference()(self.model, code))
        self.render()
        self.download("dxf")
        self.model = save

    def add_label(self, pos):
        # num = 12
        # minx, maxx, miny, maxy, minz, maxz = self.find_minmax()
        maxz = self.maxz
        # label = solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.5, halign="center"))
        # i=minx
        # print("x-len: " + str(maxx-minx))
        # print(i)
        # inc = (maxx-minx)/num
        # while minx <= i <= maxx:
        #     label = solid.union()(solid.translate([i, 0, maxz - 0.2])(solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.25, halign="center"))), label)
        #     i += inc
        #
        # l = label
        #
        # i =miny
        # while miny<= i <= maxy:
        #     print("y inc")
        #     l = solid.union()(solid.translate([0, i, 0])(label), l)
        #     i += 0.5
        for i in str(self.fileName):
            cur = pos[0]
            label = solid.translate([pos[0][0], pos[0][1], self.maxz-0.2])(solid.linear_extrude(height=(self.thickness)/3)(solid.text(str(i), size=0.5, halign="center", valign="center")))
            self.model = solid.difference()(self.model, label)
            pos.append(pos.pop(0))
            while abs(cur[0]-pos[0][0])<0.5 and abs(cur[1]-pos[0][1])<0.5:
                pos.append(pos.pop(0))



    def Center(self):

        volume, cog, inertia = self.mesh.get_mass_properties()
        print("Volume                                  = {0}".format(volume))
        print("Position of the center of gravity (COG) = {0}".format(cog))
        m_centered = solid.translate([-cog[0], -cog[1], 0])(
            self.model
        )
        return m_centered

    def find_minmax(self):
        minx = maxx = miny = maxy = minz = maxz = None
        for p in self.mesh.points:
            # p contains (x, y, z)
            if minx is None:
                minx = p[Dimension.X]
                maxx = p[Dimension.X]
                miny = p[Dimension.Y]
                maxy = p[Dimension.Y]
                minz = p[Dimension.Z]
                maxz = p[Dimension.Z]
            else:
                maxx = max(p[Dimension.X], maxx)
                minx = min(p[Dimension.X], minx)
                maxy = max(p[Dimension.Y], maxy)
                miny = min(p[Dimension.Y], miny)
                maxz = max(p[Dimension.Z], maxz)
                minz = min(p[Dimension.Z], minz)
        lenx = maxx - minx
        leny = maxy - miny
        lenz = maxz - minz
        return minx, maxx, miny, maxy, minz, maxz

    # def generate_Mesh(self):
    #     self.mesh = mesh.Mesh.from_file(self.location + "/" + str(int(self.fileName)//8)+ "b.stl")

    def get_top(self):
        top = solid.projection(cut=True)(solid.translate([0,0,-1*self.thickness*(self.layer+1)])(self.model))
        useable_area = solid.offset(r=-0.45)(top)
        self.useable_area = useable_area
        solid.scad_render_to_file(self.useable_area, self.location+'/' + 'toptemp.scad')
        outputSTL(From=self.location+'/' + 'toptemp.scad', To=self.location+"/top"+ self.dxf)

        # os.system("toSTL.sh out/toptemp.scad renders/" + self.fileName + ".dxf")
        dxf = DXF(self.location+"/top"+ self.dxf)
        min_p=dxf.points[0][0]
        points_ordered = dxf.points
        i=0
        while i <= len(dxf.points)+1:
            while math.sqrt((dxf.points[0][0]-dxf.points[1][0])**2+(dxf.points[0][1]-dxf.points[1][1])**2) > 0.1:
                dxf.points.insert(1, [(dxf.points[0][0]+dxf.points[1][0])/2, (dxf.points[0][1]+dxf.points[1][1])/2])
                i = i-1
            dxf.points.append(dxf.points.pop(0))
            i+=1
        for i in range(len(dxf.points)):
            dxf.points.append(dxf.points.pop(0))
            if dxf.points[0][0] < min_p:
                min_p = dxf.points[0][0]
                points_ordered = dxf.points.copy()
        dxf.points = points_ordered.copy()

        print(dxf.points)
        self.add_label(dxf.points)

class DXF:
    def __init__(self, file):
        self.file = file
        self.Lines = []
        self.points = []
        doc = ezdxf.readfile(self.file)
        msp = doc.modelspace()
        for e in msp:
            if e.dxftype() == "LINE":
                self.Lines.append(e)
                self.points.append([e.dxf.start[0], e.dxf.start[1]])
        # self.points.append([self.Lines[-1].dxf.end[0], self.Lines[-1].dxf.end[1]])
        self.area = None
        self.center = None
        self.polygon = sg.Polygon(self.points)

    def get_area(self):
        self.area = self.polygon.area
        return self.area

    def get_center(self):
        x_sum = 0
        y_sum =0
        for i in self.points:
            x_sum += i[0]
            y_sum += i[1]
        x_c = x_sum/len(self.points)
        y_c = y_sum/len(self.points)
        return (x_c, y_c)

    def split(self, maxdim):
        splits = []
        length = 0
        pieces = [[]]
        prev = self.points[0]
        for j in self.points:
            length = length + math.sqrt((prev[0]-j[0])**2+(prev[1]-j[1])**2)
            if length >= maxdim:
                pieces[-1].append(j)
                pieces.append([])
                length = 0
            pieces[-1].append(j)
            prev = j
        for j in pieces:
            j.insert(0, [0,0])
            piece = solid.linear_extrude(height=1)(solid.polygon(j))
            splits.append(piece)
        return splits
    def refine_points(self):
        i=0
        while i <= len(self.points)+1:
            while math.sqrt((self.points[0][0]-self.points[1][0])**2+(self.points[0][1]-self.points[1][1])**2) > 0.1:
                self.points.insert(1, [(self.points[0][0]+self.points[1][0])/2, (self.points[0][1]+self.points[1][1])/2])
                i = i-1
            self.points.append(self.points.pop(0))
            i+=1


if __name__== "__main__":
    test = DXF("C:/Users/Daniel/Documents/repos/Shell_Maker/output/0top_slice.dxf")
    test.refine_points()
    k = test.split(48)
    for i in range(len(k)):
        solid.scad_render_to_file(k[i], str(i) + ".scad")


 
 
************************************************/
