// Generated by SolidPython 1.1.3 on 2024-05-19 23:35:49


linear_extrude(height = 1) {
	polygon(points = [[0, 0], [-67.8343250000, -30.1046843750], [-67.7801375000, -30.1111265625], [-67.7259500000, -30.1175687500], [-67.6717625000, -30.1240109375], [-67.6175750000, -30.1304531250], [-67.5633875000, -30.1368953125], [-67.5092000000, -30.1433375000], [-67.4550125000, -30.1497796875], [-67.4008250000, -30.1562218750], [-67.3466375000, -30.1626640625], [-67.2924500000, -30.1691062500], [-67.2382625000, -30.1755484375], [-67.1840750000, -30.1819906250], [-67.1298875000, -30.1884328125], [-67.0757000000, -30.1948750000], [-67.0215125000, -30.2013171875], [-66.9673250000, -30.2077593750], [-66.9131375000, -30.2142015625], [-66.8589500000, -30.2206437500], [-66.8047625000, -30.2270859375], [-66.7505750000, -30.2335281250], [-66.6963875000, -30.2399703125], [-66.6422000000, -30.2464125000], [-66.5880125000, -30.2528546875], [-66.5338250000, -30.2592968750], [-66.4796375000, -30.2657390625], [-66.4254500000, -30.2721812500], [-66.3712625000, -30.2786234375], [-66.3170750000, -30.2850656250], [-66.2628875000, -30.2915078125], [-66.2087000000, -30.2979500000], [-66.1545125000, -30.3043921875], [-66.1003250000, -30.3108343750], [-66.0461375000, -30.3172765625], [-65.9919500000, -30.3237187500], [-65.9377625000, -30.3301609375], [-65.8835750000, -30.3366031250], [-65.8293875000, -30.3430453125], [-65.7752000000, -30.3494875000], [-65.7210125000, -30.3559296875], [-65.6668250000, -30.3623718750], [-65.6126375000, -30.3688140625], [-65.5584500000, -30.3752562500], [-65.5042625000, -30.3816984375], [-65.4500750000, -30.3881406250], [-65.3958875000, -30.3945828125], [-65.3417000000, -30.4010250000], [-65.2875125000, -30.4074671875], [-65.2333250000, -30.4139093750], [-65.1791375000, -30.4203515625], [-65.1249500000, -30.4267937500], [-65.0707625000, -30.4332359375], [-65.0165750000, -30.4396781250], [-64.9623875000, -30.4461203125], [-64.9082000000, -30.4525625000], [-64.8540125000, -30.4590046875], [-64.7998250000, -30.4654468750], [-64.7456375000, -30.4718890625], [-64.6914500000, -30.4783312500], [-64.6372625000, -30.4847734375], [-64.5830750000, -30.4912156250], [-64.5288875000, -30.4976578125], [-64.4747000000, -30.5041000000], [-64.3937843750, -30.5074093750], [-64.3128687500, -30.5107187500], [-64.2319531250, -30.5140281250], [-64.1510375000, -30.5173375000], [-64.0701218750, -30.5206468750], [-63.9892062500, -30.5239562500], [-63.9082906250, -30.5272656250], [-63.8273750000, -30.5305750000], [-63.7464593750, -30.5338843750], [-63.6655437500, -30.5371937500], [-63.5846281250, -30.5405031250], [-63.5037125000, -30.5438125000], [-63.4227968750, -30.5471218750], [-63.3418812500, -30.5504312500], [-63.2609656250, -30.5537406250], [-63.1800500000, -30.5570500000], [-63.0991343750, -30.5603593750], [-63.0182187500, -30.5636687500], [-62.9373031250, -30.5669781250], [-62.8563875000, -30.5702875000], [-62.7754718750, -30.5735968750], [-62.6945562500, -30.5769062500], [-62.6136406250, -30.5802156250], [-62.5327250000, -30.5835250000], [-62.4518093750, -30.5868343750], [-62.3708937500, -30.5901437500], [-62.2899781250, -30.5934531250], [-62.2090625000, -30.5967625000], [-62.1281468750, -30.6000718750], [-62.0472312500, -30.6033812500], [-61.9663156250, -30.6066906250], [-61.8854000000, -30.6100000000], [-61.7959828125, -30.6136570312], [-61.7065656250, -30.6173140625], [-61.6171484375, -30.6209710938], [-61.5277312500, -30.6246281250], [-61.4383140625, -30.6282851563], [-61.3488968750, -30.6319421875], [-61.2594796875, -30.6355992188], [-61.1700625000, -30.6392562500], [-61.0806453125, -30.6429132812], [-60.9912281250, -30.6465703125], [-60.9018109375, -30.6502273437], [-60.8123937500, -30.6538843750], [-60.7229765625, -30.6575414062], [-60.6335593750, -30.6611984375], [-60.5441421875, -30.6648554687], [-60.4547250000, -30.6685125000], [-60.3653078125, -30.6721695312], [-60.2758906250, -30.6758265625], [-60.1864734375, -30.6794835937], [-60.0970562500, -30.6831406250], [-60.0076390625, -30.6867976563], [-59.9182218750, -30.6904546875], [-59.8288046875, -30.6941117188], [-59.7393875000, -30.6977687500], [-59.6499703125, -30.7014257812], [-59.5605531250, -30.7050828125], [-59.4711359375, -30.7087398437], [-59.3817187500, -30.7123968750], [-59.2923015625, -30.7160539062], [-59.2028843750, -30.7197109375], [-59.1134671875, -30.7233679687], [-59.0240500000, -30.7270250000], [-58.9346328125, -30.7306820312], [-58.8452156250, -30.7343390625], [-58.7557984375, -30.7379960937], [-58.6663812500, -30.7416531250], [-58.5769640625, -30.7453101562], [-58.4875468750, -30.7489671875], [-58.3981296875, -30.7526242188], [-58.3087125000, -30.7562812500], [-58.2192953125, -30.7599382812], [-58.1298781250, -30.7635953125], [-58.0404609375, -30.7672523437], [-57.9510437500, -30.7709093750], [-57.8616265625, -30.7745664062], [-57.7722093750, -30.7782234375], [-57.6827921875, -30.7818804687], [-57.5933750000, -30.7855375000], [-57.5039578125, -30.7891945312], [-57.4145406250, -30.7928515625], [-57.3251234375, -30.7965085937], [-57.2357062500, -30.8001656250], [-57.1462890625, -30.8038226562], [-57.0568718750, -30.8074796875], [-56.9674546875, -30.8111367187], [-56.8780375000, -30.8147937500], [-56.7886203125, -30.8184507813], [-56.6992031250, -30.8221078125], [-56.6097859375, -30.8257648438], [-56.5203687500, -30.8294218750], [-56.4309515625, -30.8330789063], [-56.3415343750, -30.8367359375], [-56.2521171875, -30.8403929688], [-56.1627000000, -30.8440500000], [-56.0732828125, -30.8477070312], [-55.9838656250, -30.8513640625], [-55.8944484375, -30.8550210937], [-55.8050312500, -30.8586781250], [-55.7156140625, -30.8623351562], [-55.6261968750, -30.8659921875], [-55.5367796875, -30.8696492187], [-55.4473625000, -30.8733062500], [-55.3579453125, -30.8769632812], [-55.2685281250, -30.8806203125], [-55.1791109375, -30.8842773438], [-55.0896937500, -30.8879343750], [-55.0002765625, -30.8915914063], [-54.9108593750, -30.8952484375], [-54.8214421875, -30.8989054688], [-54.7320250000, -30.9025625000], [-54.6426078125, -30.9062195313], [-54.5531906250, -30.9098765625], [-54.4637734375, -30.9135335938], [-54.3743562500, -30.9171906250], [-54.2849390625, -30.9208476563], [-54.1955218750, -30.9245046875], [-54.1061046875, -30.9281617188], [-54.0166875000, -30.9318187500], [-53.9272703125, -30.9354757812], [-53.8378531250, -30.9391328125], [-53.7484359375, -30.9427898437], [-53.6590187500, -30.9464468750], [-53.5696015625, -30.9501039062], [-53.4801843750, -30.9537609375], [-53.3907671875, -30.9574179688], [-53.3013500000, -30.9610750000], [-53.2119328125, -30.9647320313], [-53.1225156250, -30.9683890625], [-53.0330984375, -30.9720460938], [-52.9436812500, -30.9757031250], [-52.8542640625, -30.9793601563], [-52.7648468750, -30.9830171875], [-52.6754296875, -30.9866742188], [-52.5860125000, -30.9903312500], [-52.4965953125, -30.9939882812], [-52.4071781250, -30.9976453125], [-52.3177609375, -31.0013023437], [-52.2283437500, -31.0049593750], [-52.1389265625, -31.0086164062], [-52.0495093750, -31.0122734375], [-51.9600921875, -31.0159304687], [-51.8706750000, -31.0195875000], [-51.7812578125, -31.0232445313], [-51.6918406250, -31.0269015625], [-51.6024234375, -31.0305585938], [-51.5130062500, -31.0342156250], [-51.4235890625, -31.0378726563], [-51.3341718750, -31.0415296875], [-51.2447546875, -31.0451867188], [-51.1553375000, -31.0488437500], [-51.0659203125, -31.0525007812], [-50.9765031250, -31.0561578125], [-50.8870859375, -31.0598148437], [-50.7976687500, -31.0634718750], [-50.7082515625, -31.0671289062], [-50.6188343750, -31.0707859375], [-50.5294171875, -31.0744429687], [-50.4400000000, -31.0781000000], [-50.3726199219, -31.0799140625], [-50.3052398438, -31.0817281250], [-50.2378597656, -31.0835421875], [-50.1704796875, -31.0853562500], [-50.1030996094, -31.0871703125], [-50.0357195312, -31.0889843750], [-49.9683394531, -31.0907984375], [-49.9009593750, -31.0926125000], [-49.8335792969, -31.0944265625], [-49.7661992188, -31.0962406250], [-49.6988191406, -31.0980546875], [-49.6314390625, -31.0998687500], [-49.5640589844, -31.1016828125], [-49.4966789062, -31.1034968750], [-49.4292988281, -31.1053109375], [-49.3619187500, -31.1071250000], [-49.2945386719, -31.1089390625], [-49.2271585938, -31.1107531250], [-49.1597785156, -31.1125671875], [-49.0923984375, -31.1143812500], [-49.0250183594, -31.1161953125], [-48.9576382812, -31.1180093750], [-48.8902582031, -31.1198234375], [-48.8228781250, -31.1216375000], [-48.7554980469, -31.1234515625], [-48.6881179687, -31.1252656250], [-48.6207378906, -31.1270796875], [-48.5533578125, -31.1288937500], [-48.4859777344, -31.1307078125], [-48.4185976563, -31.1325218750], [-48.3512175781, -31.1343359375], [-48.2838375000, -31.1361500000], [-48.2164574219, -31.1379640625], [-48.1490773437, -31.1397781250], [-48.0816972656, -31.1415921875], [-48.0143171875, -31.1434062500], [-47.9469371094, -31.1452203125], [-47.8795570312, -31.1470343750], [-47.8121769531, -31.1488484375], [-47.7447968750, -31.1506625000], [-47.6774167969, -31.1524765625], [-47.6100367187, -31.1542906250], [-47.5426566406, -31.1561046875], [-47.4752765625, -31.1579187500], [-47.4078964844, -31.1597328125], [-47.3405164062, -31.1615468750], [-47.2731363281, -31.1633609375], [-47.2057562500, -31.1651750000], [-47.1383761719, -31.1669890625], [-47.0709960937, -31.1688031250], [-47.0036160156, -31.1706171875], [-46.9362359375, -31.1724312500], [-46.8688558594, -31.1742453125], [-46.8014757812, -31.1760593750], [-46.7340957031, -31.1778734375], [-46.6667156250, -31.1796875000], [-46.5993355469, -31.1815015625], [-46.5319554687, -31.1833156250], [-46.4645753906, -31.1851296875], [-46.3971953125, -31.1869437500], [-46.3298152344, -31.1887578125], [-46.2624351562, -31.1905718750], [-46.1950550781, -31.1923859375], [-46.1276750000, -31.1942000000], [-46.0602949219, -31.1960140625], [-45.9929148438, -31.1978281250], [-45.9255347656, -31.1996421875], [-45.8581546875, -31.2014562500], [-45.7907746094, -31.2032703125], [-45.7233945312, -31.2050843750], [-45.6560144531, -31.2068984375], [-45.5886343750, -31.2087125000], [-45.5212542969, -31.2105265625], [-45.4538742188, -31.2123406250], [-45.3864941406, -31.2141546875], [-45.3191140625, -31.2159687500], [-45.2517339844, -31.2177828125], [-45.1843539062, -31.2195968750], [-45.1169738281, -31.2214109375], [-45.0495937500, -31.2232250000], [-44.9822136719, -31.2250390625], [-44.9148335938, -31.2268531250], [-44.8474535156, -31.2286671875], [-44.7800734375, -31.2304812500], [-44.7126933594, -31.2322953125], [-44.6453132812, -31.2341093750], [-44.5779332031, -31.2359234375], [-44.5105531250, -31.2377375000], [-44.4431730469, -31.2395515625], [-44.3757929687, -31.2413656250], [-44.3084128906, -31.2431796875], [-44.2410328125, -31.2449937500], [-44.1736527344, -31.2468078125], [-44.1062726562, -31.2486218750], [-44.0388925781, -31.2504359375], [-43.9715125000, -31.2522500000], [-43.9041324219, -31.2540640625], [-43.8367523437, -31.2558781250], [-43.7693722656, -31.2576921875], [-43.7019921875, -31.2595062500], [-43.6346121094, -31.2613203125], [-43.5672320312, -31.2631343750], [-43.4998519531, -31.2649484375], [-43.4324718750, -31.2667625000], [-43.3650917969, -31.2685765625], [-43.2977117187, -31.2703906250], [-43.2303316406, -31.2722046875], [-43.1629515625, -31.2740187500], [-43.0955714844, -31.2758328125], [-43.0281914062, -31.2776468750], [-42.9608113281, -31.2794609375], [-42.8934312500, -31.2812750000], [-42.8260511719, -31.2830890625], [-42.7586710937, -31.2849031250], [-42.6912910156, -31.2867171875], [-42.6239109375, -31.2885312500], [-42.5565308594, -31.2903453125], [-42.4891507812, -31.2921593750], [-42.4217707031, -31.2939734375], [-42.3543906250, -31.2957875000], [-42.2870105469, -31.2976015625], [-42.2196304687, -31.2994156250], [-42.1522503906, -31.3012296875], [-42.0848703125, -31.3030437500], [-42.0174902344, -31.3048578125], [-41.9501101562, -31.3066718750], [-41.8827300781, -31.3084859375], [-41.8153500000, -31.3103000000], [-41.7479699219, -31.3121140625], [-41.6805898437, -31.3139281250], [-41.6132097656, -31.3157421875], [-41.5458296875, -31.3175562500], [-41.4784496094, -31.3193703125], [-41.4110695312, -31.3211843750], [-41.3436894531, -31.3229984375], [-41.2763093750, -31.3248125000], [-41.2089292969, -31.3266265625], [-41.1415492188, -31.3284406250], [-41.0741691406, -31.3302546875], [-41.0067890625, -31.3320687500], [-40.9394089844, -31.3338828125], [-40.8720289062, -31.3356968750], [-40.8046488281, -31.3375109375], [-40.7372687500, -31.3393250000], [-40.6698886719, -31.3411390625], [-40.6025085938, -31.3429531250], [-40.5351285156, -31.3447671875], [-40.4677484375, -31.3465812500], [-40.4003683594, -31.3483953125], [-40.3329882812, -31.3502093750], [-40.2656082031, -31.3520234375], [-40.1982281250, -31.3538375000], [-40.1308480469, -31.3556515625], [-40.0634679687, -31.3574656250], [-39.9960878906, -31.3592796875], [-39.9287078125, -31.3610937500], [-39.8613277344, -31.3629078125], [-39.7939476562, -31.3647218750], [-39.7265675781, -31.3665359375], [-39.6591875000, -31.3683500000], [-39.5918074219, -31.3701640625], [-39.5244273437, -31.3719781250], [-39.4570472656, -31.3737921875], [-39.3896671875, -31.3756062500], [-39.3222871094, -31.3774203125], [-39.2549070312, -31.3792343750], [-39.1875269531, -31.3810484375], [-39.1201468750, -31.3828625000], [-39.0527667969, -31.3846765625], [-38.9853867187, -31.3864906250], [-38.9180066406, -31.3883046875], [-38.8506265625, -31.3901187500], [-38.7832464844, -31.3919328125], [-38.7158664062, -31.3937468750], [-38.6484863281, -31.3955609375], [-38.5811062500, -31.3973750000], [-38.5137261719, -31.3991890625], [-38.4463460937, -31.4010031250], [-38.3789660156, -31.4028171875], [-38.3115859375, -31.4046312500], [-38.2442058594, -31.4064453125], [-38.1768257812, -31.4082593750], [-38.1094457031, -31.4100734375], [-38.0420656250, -31.4118875000], [-37.9746855469, -31.4137015625], [-37.9073054687, -31.4155156250], [-37.8399253906, -31.4173296875], [-37.7725453125, -31.4191437500], [-37.7051652344, -31.4209578125], [-37.6377851562, -31.4227718750], [-37.5704050781, -31.4245859375], [-37.5030250000, -31.4264000000], [-37.4356449219, -31.4282140625], [-37.3682648437, -31.4300281250], [-37.3008847656, -31.4318421875], [-37.2335046875, -31.4336562500], [-37.1661246094, -31.4354703125], [-37.0987445312, -31.4372843750], [-37.0313644531, -31.4390984375], [-36.9639843750, -31.4409125000], [-36.8966042969, -31.4427265625], [-36.8292242187, -31.4445406250], [-36.7618441406, -31.4463546875], [-36.6944640625, -31.4481687500], [-36.6270839844, -31.4499828125], [-36.5597039062, -31.4517968750], [-36.4923238281, -31.4536109375], [-36.4249437500, -31.4554250000], [-36.3575636719, -31.4572390625], [-36.2901835938, -31.4590531250], [-36.2228035156, -31.4608671875], [-36.1554234375, -31.4626812500], [-36.0880433594, -31.4644953125], [-36.0206632812, -31.4663093750], [-35.9532832031, -31.4681234375], [-35.8859031250, -31.4699375000], [-35.8185230469, -31.4717515625], [-35.7511429688, -31.4735656250], [-35.6837628906, -31.4753796875], [-35.6163828125, -31.4771937500], [-35.5490027344, -31.4790078125], [-35.4816226562, -31.4808218750], [-35.4142425781, -31.4826359375], [-35.3468625000, -31.4844500000], [-35.2794824219, -31.4862640625], [-35.2121023438, -31.4880781250], [-35.1447222656, -31.4898921875], [-35.0773421875, -31.4917062500], [-35.0099621094, -31.4935203125], [-34.9425820312, -31.4953343750], [-34.8752019531, -31.4971484375], [-34.8078218750, -31.4989625000], [-34.7404417969, -31.5007765625], [-34.6730617188, -31.5025906250], [-34.6056816406, -31.5044046875], [-34.5383015625, -31.5062187500], [-34.4709214844, -31.5080328125], [-34.4035414062, -31.5098468750], [-34.3361613281, -31.5116609375], [-34.2687812500, -31.5134750000], [-34.2014011719, -31.5152890625], [-34.1340210938, -31.5171031250], [-34.0666410156, -31.5189171875], [-33.9992609375, -31.5207312500], [-33.9318808594, -31.5225453125], [-33.8645007813, -31.5243593750], [-33.7971207031, -31.5261734375], [-33.7297406250, -31.5279875000], [-33.6623605469, -31.5298015625], [-33.5949804688, -31.5316156250], [-33.5276003906, -31.5334296875], [-33.4602203125, -31.5352437500], [-33.3928402344, -31.5370578125], [-33.3254601563, -31.5388718750], [-33.2580800781, -31.5406859375], [-33.1907000000, -31.5425000000], [-33.1233199219, -31.5443140625], [-33.0559398437, -31.5461281250], [-32.9885597656, -31.5479421875], [-32.9211796875, -31.5497562500], [-32.8537996094, -31.5515703125], [-32.7864195312, -31.5533843750], [-32.7190394531, -31.5551984375], [-32.6516593750, -31.5570125000], [-32.5842792969, -31.5588265625], [-32.5168992187, -31.5606406250], [-32.4495191406, -31.5624546875], [-32.3821390625, -31.5642687500], [-32.3147589844, -31.5660828125], [-32.2473789062, -31.5678968750], [-32.1799988281, -31.5697109375], [-32.1126187500, -31.5715250000], [-32.0452386719, -31.5733390625], [-31.9778585937, -31.5751531250], [-31.9104785156, -31.5769671875], [-31.8430984375, -31.5787812500], [-31.7757183594, -31.5805953125], [-31.7083382812, -31.5824093750], [-31.6409582031, -31.5842234375], [-31.5735781250, -31.5860375000], [-31.5061980469, -31.5878515625], [-31.4388179687, -31.5896656250], [-31.3714378906, -31.5914796875], [-31.3040578125, -31.5932937500], [-31.2366777344, -31.5951078125], [-31.1692976562, -31.5969218750], [-31.1019175781, -31.5987359375], [-31.0345375000, -31.6005500000], [-30.9671574219, -31.6023640625], [-30.8997773437, -31.6041781250], [-30.8323972656, -31.6059921875], [-30.7650171875, -31.6078062500], [-30.6976371094, -31.6096203125], [-30.6302570313, -31.6114343750], [-30.5628769531, -31.6132484375], [-30.4954968750, -31.6150625000], [-30.4281167969, -31.6168765625], [-30.3607367188, -31.6186906250], [-30.2933566406, -31.6205046875], [-30.2259765625, -31.6223187500], [-30.1585964844, -31.6241328125], [-30.0912164062, -31.6259468750], [-30.0238363281, -31.6277609375], [-29.9564562500, -31.6295750000], [-29.8890761719, -31.6313890625], [-29.8216960937, -31.6332031250], [-29.7543160156, -31.6350171875], [-29.6869359375, -31.6368312500], [-29.6195558594, -31.6386453125], [-29.5521757812, -31.6404593750], [-29.4847957031, -31.6422734375], [-29.4174156250, -31.6440875000], [-29.3500355469, -31.6459015625], [-29.2826554687, -31.6477156250], [-29.2152753906, -31.6495296875], [-29.1478953125, -31.6513437500], [-29.0805152344, -31.6531578125], [-29.0131351562, -31.6549718750], [-28.9457550781, -31.6567859375], [-28.8783750000, -31.6586000000], [-28.8109949219, -31.6604140625], [-28.7436148437, -31.6622281250], [-28.6762347656, -31.6640421875], [-28.6088546875, -31.6658562500], [-28.5414746094, -31.6676703125], [-28.4740945312, -31.6694843750], [-28.4067144531, -31.6712984375], [-28.3393343750, -31.6731125000], [-28.2719542969, -31.6749265625], [-28.2045742188, -31.6767406250], [-28.1371941406, -31.6785546875], [-28.0698140625, -31.6803687500], [-28.0024339844, -31.6821828125], [-27.9350539062, -31.6839968750], [-27.8676738281, -31.6858109375], [-27.8002937500, -31.6876250000], [-27.7329136719, -31.6894390625], [-27.6655335937, -31.6912531250], [-27.5981535156, -31.6930671875], [-27.5307734375, -31.6948812500], [-27.4633933594, -31.6966953125], [-27.3960132812, -31.6985093750], [-27.3286332031, -31.7003234375], [-27.2612531250, -31.7021375000], [-27.1938730469, -31.7039515625], [-27.1264929687, -31.7057656250], [-27.0591128906, -31.7075796875], [-26.9917328125, -31.7093937500], [-26.9243527344, -31.7112078125], [-26.8569726562, -31.7130218750], [-26.7895925781, -31.7148359375], [-26.7222125000, -31.7166500000], [-26.6548324219, -31.7184640625], [-26.5874523437, -31.7202781250], [-26.5200722656, -31.7220921875], [-26.4526921875, -31.7239062500], [-26.3853121094, -31.7257203125], [-26.3179320312, -31.7275343750], [-26.2505519531, -31.7293484375], [-26.1831718750, -31.7311625000], [-26.1157917969, -31.7329765625], [-26.0484117187, -31.7347906250], [-25.9810316406, -31.7366046875], [-25.9136515625, -31.7384187500], [-25.8462714844, -31.7402328125], [-25.7788914063, -31.7420468750], [-25.7115113281, -31.7438609375], [-25.6441312500, -31.7456750000], [-25.5767511719, -31.7474890625], [-25.5093710938, -31.7493031250], [-25.4419910156, -31.7511171875], [-25.3746109375, -31.7529312500], [-25.3072308594, -31.7547453125], [-25.2398507813, -31.7565593750], [-25.1724707031, -31.7583734375], [-25.1050906250, -31.7601875000], [-25.0377105469, -31.7620015625], [-24.9703304688, -31.7638156250], [-24.9029503906, -31.7656296875], [-24.8355703125, -31.7674437500], [-24.7681902344, -31.7692578125], [-24.7008101563, -31.7710718750], [-24.6334300781, -31.7728859375], [-24.5660500000, -31.7747000000], [-24.4986699219, -31.7765140625], [-24.4312898438, -31.7783281250], [-24.3639097656, -31.7801421875], [-24.2965296875, -31.7819562500], [-24.2291496094, -31.7837703125], [-24.1617695312, -31.7855843750], [-24.0943894531, -31.7873984375], [-24.0270093750, -31.7892125000], [-23.9596292969, -31.7910265625], [-23.8922492187, -31.7928406250], [-23.8248691406, -31.7946546875], [-23.7574890625, -31.7964687500], [-23.6901089844, -31.7982828125], [-23.6227289062, -31.8000968750], [-23.5553488281, -31.8019109375], [-23.4879687500, -31.8037250000], [-23.4205886719, -31.8055390625], [-23.3532085938, -31.8073531250], [-23.2858285156, -31.8091671875], [-23.2184484375, -31.8109812500], [-23.1510683594, -31.8127953125], [-23.0836882813, -31.8146093750], [-23.0163082031, -31.8164234375], [-22.9489281250, -31.8182375000], [-22.8815480469, -31.8200515625], [-22.8141679688, -31.8218656250], [-22.7467878906, -31.8236796875], [-22.6794078125, -31.8254937500], [-22.6120277344, -31.8273078125], [-22.5446476562, -31.8291218750], [-22.4772675781, -31.8309359375], [-22.4098875000, -31.8327500000], [-22.3425074219, -31.8345640625], [-22.2751273438, -31.8363781250], [-22.2077472656, -31.8381921875], [-22.1403671875, -31.8400062500], [-22.0729871094, -31.8418203125], [-22.0056070312, -31.8436343750], [-21.9382269531, -31.8454484375], [-21.8708468750, -31.8472625000], [-21.8034667969, -31.8490765625], [-21.7360867187, -31.8508906250], [-21.6687066406, -31.8527046875], [-21.6013265625, -31.8545187500], [-21.5339464844, -31.8563328125], [-21.4665664062, -31.8581468750], [-21.3991863281, -31.8599609375], [-21.3318062500, -31.8617750000], [-21.2644261719, -31.8635890625], [-21.1970460938, -31.8654031250], [-21.1296660156, -31.8672171875], [-21.0622859375, -31.8690312500], [-20.9949058594, -31.8708453125], [-20.9275257813, -31.8726593750], [-20.8601457031, -31.8744734375], [-20.7927656250, -31.8762875000], [-20.7253855469, -31.8781015625], [-20.6580054688, -31.8799156250], [-20.5906253906, -31.8817296875], [-20.5232453125, -31.8835437500], [-20.4558652344, -31.8853578125], [-20.3884851562, -31.8871718750], [-20.3211050781, -31.8889859375], [-20.2537250000, -31.8908000000], [-20.1863449219, -31.8926140625], [-20.1189648437, -31.8944281250], [-20.0515847656, -31.8962421875], [-19.9842046875, -31.8980562500], [-19.9168246094, -31.8998703125], [-19.8494445312, -31.9016843750]]);
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
import math
import time

from stl import mesh, Dimension

from tkinter import Tk     # from tkinter import Tk for Python 3.x
from tkinter.filedialog import askopenfilename
from mpl_toolkits.mplot3d import art3d
from matplotlib import pyplot as plt
import solid
import os
import ezdxf
import shapely.geometry as sg
import subprocess
from GUI import getSCADPath



def outputSTL(From, To, PATH=getSCADPath()):
    subprocess.Popen(PATH + " -o " + To + " " + From)
    while not os.path.exists(To):
        time.sleep(1)


def get_size(i):
    x_list = [int(a) for a in str(i)]
    return len(x_list)



class Model:
    def __init__(self, model, fileName, location, layer, thickness):
        self.location = location
        self.code = None
        self.fileName = fileName
        self.stl = fileName + ".stl"
        self.layer = layer
        self.thickness = thickness
        self.maxz = (layer+1)*thickness
        self.dxf = fileName + ".dxf"
        self.scad = fileName + ".scad"
        self.model = model
        self.center = None
        self.width = 10
        self.mesh = None
        self.useable_area = None


    def get_code(self):
        max_dim = 0.05
        max_array = 6

        num = int(self.fileName)
        nums = [int(a) for a in str(num)]
        nums.reverse()
        indices = nums
        length = len(nums)

        print(indices)
        t = 0
        i = 0
        cubes = []
        x = 0
        y = 0
        width = 0.01
        while x <= max_dim:
            while y <= max_dim:
                print(indices)
                if nums == []:
                    break
                if indices[0] != 0:
                    cubes.append(solid.translate([x, y, 0])(solid.cube(size=t / 1000 + 0.001)))
                    y += max_dim / (max_array - 1)
                    nums[0] = nums[0] - 1
                else:
                    indices.pop(0)
                    t += 1
                i += 1
            x += max_dim / (max_array - 1)
            y = 0

        outside = solid.translate([-width / 2, -width / 2])(solid.cube(max_dim + (length - 1) / 1000 + 0.001 + width))
        self.code = solid.difference()(outside, cubes)
        self.code = solid.projection(cut=True)(self.code)
        solid.scad_render_to_file(self.code, self.location + "/code.scad")
        outputSTL(From=self.location+"/code.scad", To=self.location+"code.dxf", PATH=getSCADPath())
        # os.system("toSTL.sh renders/code.scad renders/code.dxf")
        return self.location+"/code.dxf"

    def download(self, type):
        if type =="stl":
            print("generating:" + self.location+"/"+ self.fileName+".stl")
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".stl")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".stl")
        elif type == "dxf":
            outputSTL(From=self.location+"/"+self.fileName+".scad", To=self.location+"/"+self.fileName+".dxf")
            # os.system("toSTL.sh renders/"+ self.fileName+".scad renders/"+ self.fileName+".dxf")

    def render(self):
        solid.scad_render_to_file(self.model, self.location+"/"+ self.fileName+'.scad')
        while not os.path.exists(self.location+"/"+self.fileName+".scad"):
            time.sleep(1)

    def get_points(self):
        doc = ezdxf.readfile(filename=self.location+"/"+ self.fileName+".dxf")
        msp = doc.modelspace()
        i=0
        lists = []
        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return [start, end]

        for e in msp.query("LINE"):
            line = helper(e)
            if not lists:
                lists.append([line])
            else:
                if lists[i][len(lists)-1][1] != line[0]:
                    lists.append([line])
                    i+=1
                else:
                    lists[i].append(line)

    def get_points2(self, FILE):
        doc = ezdxf.readfile(filename=FILE)
        msp = doc.modelspace()
        i = 0
        lists = []

        def helper(e):
            start = [e.dxf.start[0], e.dxf.start[1]]
            end = [e.dxf.end[0], e.dxf.end[1]]
            return (start, end)

        for e in msp.query("LINE"):
            line = helper(e)
            if lists==[]:
                lists.append([line])
            else:
                if lists[i][len(lists[i]) - 1][1] != line[0]:
                    lists.append([line])
                    i += 1
                else:
                    lists[i].append(line)
        return lists

    def add_code(self):
        dxf = solid.projection(cut=False)(self.model)
        offset = solid.offset(r=-0.1)(dxf)
        solid.scad_render_to_file(offset, self.location+'/offset.scad')
        os.system("toSTL.sh renders/offset.scad renders/offset.dxf")
        lines = self.get_points2("renders/offset.dxf")
        x = lines[0][0][0][0]
        y = lines[0][0][0][1]
        print(x)
        print(y)
        code = solid.translate([x,y,0])(self.code)
        code = solid.linear_extrude(height=999)(code)
        save = self.model
        self.model = solid.projection()(solid.difference()(self.model, code))
        self.render()
        self.download("dxf")
        self.model = save

    def add_label(self, pos):
        # num = 12
        # minx, maxx, miny, maxy, minz, maxz = self.find_minmax()
        maxz = self.maxz
        # label = solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.5, halign="center"))
        # i=minx
        # print("x-len: " + str(maxx-minx))
        # print(i)
        # inc = (maxx-minx)/num
        # while minx <= i <= maxx:
        #     label = solid.union()(solid.translate([i, 0, maxz - 0.2])(solid.linear_extrude(height=(maxz-minz)/3)(solid.text(str(self.fileName), size=0.25, halign="center"))), label)
        #     i += inc
        #
        # l = label
        #
        # i =miny
        # while miny<= i <= maxy:
        #     print("y inc")
        #     l = solid.union()(solid.translate([0, i, 0])(label), l)
        #     i += 0.5
        for i in str(self.fileName):
            cur = pos[0]
            label = solid.translate([pos[0][0], pos[0][1], self.maxz-0.2])(solid.linear_extrude(height=(self.thickness)/3)(solid.text(str(i), size=0.5, halign="center", valign="center")))
            self.model = solid.difference()(self.model, label)
            pos.append(pos.pop(0))
            while abs(cur[0]-pos[0][0])<0.5 and abs(cur[1]-pos[0][1])<0.5:
                pos.append(pos.pop(0))



    def Center(self):

        volume, cog, inertia = self.mesh.get_mass_properties()
        print("Volume                                  = {0}".format(volume))
        print("Position of the center of gravity (COG) = {0}".format(cog))
        m_centered = solid.translate([-cog[0], -cog[1], 0])(
            self.model
        )
        return m_centered

    def find_minmax(self):
        minx = maxx = miny = maxy = minz = maxz = None
        for p in self.mesh.points:
            # p contains (x, y, z)
            if minx is None:
                minx = p[Dimension.X]
                maxx = p[Dimension.X]
                miny = p[Dimension.Y]
                maxy = p[Dimension.Y]
                minz = p[Dimension.Z]
                maxz = p[Dimension.Z]
            else:
                maxx = max(p[Dimension.X], maxx)
                minx = min(p[Dimension.X], minx)
                maxy = max(p[Dimension.Y], maxy)
                miny = min(p[Dimension.Y], miny)
                maxz = max(p[Dimension.Z], maxz)
                minz = min(p[Dimension.Z], minz)
        lenx = maxx - minx
        leny = maxy - miny
        lenz = maxz - minz
        return minx, maxx, miny, maxy, minz, maxz

    # def generate_Mesh(self):
    #     self.mesh = mesh.Mesh.from_file(self.location + "/" + str(int(self.fileName)//8)+ "b.stl")

    def get_top(self):
        top = solid.projection(cut=True)(solid.translate([0,0,-1*self.thickness*(self.layer+1)])(self.model))
        useable_area = solid.offset(r=-0.45)(top)
        self.useable_area = useable_area
        solid.scad_render_to_file(self.useable_area, self.location+'/' + 'toptemp.scad')
        outputSTL(From=self.location+'/' + 'toptemp.scad', To=self.location+"/top"+ self.dxf)

        # os.system("toSTL.sh out/toptemp.scad renders/" + self.fileName + ".dxf")
        dxf = DXF(self.location+"/top"+ self.dxf)
        min_p=dxf.points[0][0]
        points_ordered = dxf.points
        i=0
        while i <= len(dxf.points)+1:
            while math.sqrt((dxf.points[0][0]-dxf.points[1][0])**2+(dxf.points[0][1]-dxf.points[1][1])**2) > 0.1:
                dxf.points.insert(1, [(dxf.points[0][0]+dxf.points[1][0])/2, (dxf.points[0][1]+dxf.points[1][1])/2])
                i = i-1
            dxf.points.append(dxf.points.pop(0))
            i+=1
        for i in range(len(dxf.points)):
            dxf.points.append(dxf.points.pop(0))
            if dxf.points[0][0] < min_p:
                min_p = dxf.points[0][0]
                points_ordered = dxf.points.copy()
        dxf.points = points_ordered.copy()

        print(dxf.points)
        self.add_label(dxf.points)

class DXF:
    def __init__(self, file):
        self.file = file
        self.Lines = []
        self.points = []
        doc = ezdxf.readfile(self.file)
        msp = doc.modelspace()
        for e in msp:
            if e.dxftype() == "LINE":
                self.Lines.append(e)
                self.points.append([e.dxf.start[0], e.dxf.start[1]])
        # self.points.append([self.Lines[-1].dxf.end[0], self.Lines[-1].dxf.end[1]])
        self.area = None
        self.center = None
        self.polygon = sg.Polygon(self.points)

    def get_area(self):
        self.area = self.polygon.area
        return self.area

    def get_center(self):
        x_sum = 0
        y_sum =0
        for i in self.points:
            x_sum += i[0]
            y_sum += i[1]
        x_c = x_sum/len(self.points)
        y_c = y_sum/len(self.points)
        return (x_c, y_c)

    def split(self, maxdim):
        splits = []
        length = 0
        pieces = [[]]
        prev = self.points[0]
        for j in self.points:
            length = length + math.sqrt((prev[0]-j[0])**2+(prev[1]-j[1])**2)
            if length >= maxdim:
                pieces[-1].append(j)
                pieces.append([])
                length = 0
            pieces[-1].append(j)
            prev = j
        for j in pieces:
            j.insert(0, [0,0])
            piece = solid.linear_extrude(height=1)(solid.polygon(j))
            splits.append(piece)
        return splits
    def refine_points(self):
        i=0
        while i <= len(self.points)+1:
            while math.sqrt((self.points[0][0]-self.points[1][0])**2+(self.points[0][1]-self.points[1][1])**2) > 0.1:
                self.points.insert(1, [(self.points[0][0]+self.points[1][0])/2, (self.points[0][1]+self.points[1][1])/2])
                i = i-1
            self.points.append(self.points.pop(0))
            i+=1


if __name__== "__main__":
    test = DXF("C:/Users/Daniel/Documents/repos/Shell_Maker/output/0top_slice.dxf")
    test.refine_points()
    k = test.split(48)
    for i in range(len(k)):
        solid.scad_render_to_file(k[i], str(i) + ".scad")


 
 
************************************************/
